<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE pools SYSTEM "..\..\dtd\database.dtd">
<querys>  
      <!-- BASE section  -->
      <query code="CfgParam_GetLayoutConfiguration">
        <sql>
          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
      </query>

      <query code="CfgParam_GetLayoutConfigurationSimple">
        <sql>
          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>
  
      <query code="CfgParam_updateVisibilityColumn">
        <sql>
          UPDATE CfgEntityProperty
          SET VisibleGrid = @visibilityGrid
          where IdCfgEntity in (
            SELECT distinct(qf.IdCfgEntity)
            FROM CfgEntityProperty qf
            JOIN CfgEntity q
            ON qf.IdCfgEntity = q.IdCfgEntity
            WHERE QueryName = @queryName
            @SQLPart
          )
          AND FieldName = @fieldName
        </sql>
        <parameters>
          <parameter type="Int">visibilityGrid</parameter>
          <parameter type="String">fieldName</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textEqual">q.IdPage</filter>
        </filters>
      </query>
  
      <query code="CfgParam_updateOrderColumnsLeftToRight">
        <sql>
          UPDATE CfgEntityProperty
          SET FieldOrder = FieldOrder - 1
          WHERE IdCfgEntity in (
	          SELECT distinct(qf.IdCfgEntity)
	          FROM CfgEntityProperty qf
	          JOIN CfgEntity q 
	          ON qf.IdCfgEntity = q.IdCfgEntity
	          WHERE QueryName = @queryName
            @SQLPart
          )
          AND FieldOrder &lt; = @fieldOrderMaxRange
          AND FieldOrder &gt; = @fieldOrderMinRange
          AND FieldName &lt; &gt; @fieldName
        </sql>
        <parameters>
          <parameter type="Int">fieldOrderMinRange</parameter>
          <parameter type="Int">fieldOrderMaxRange</parameter>
          <parameter type="String">fieldName</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textEqual">q.IdPage</filter>
        </filters>
      </query>
  
  <query code="CfgParam_updateOrderColumnsRightToLeft">
        <sql>
          UPDATE CfgEntityProperty
          SET FieldOrder = FieldOrder + 1
          WHERE IdCfgEntity in (
	          SELECT distinct(qf.IdCfgEntity)
	          FROM CfgEntityProperty qf
	          JOIN CfgEntity q 
	          ON qf.IdCfgEntity = q.IdCfgEntity
	          WHERE QueryName = @queryName
            @SQLPart
          )
          AND FieldOrder &lt; = @fieldOrderMaxRange
          AND FieldOrder &gt; = @fieldOrderMinRange
          AND FieldName &lt; &gt; @fieldName
        </sql>
        <parameters>
          <parameter type="Int">fieldOrderMinRange</parameter>
          <parameter type="Int">fieldOrderMaxRange</parameter>
          <parameter type="String">fieldName</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textEqual">q.IdPage</filter>
        </filters>
      </query>
  
      <query code="CfgParam_updateOrderColumnDraggedAndDropped">
        <sql>
          UPDATE CfgEntityProperty
          SET FieldOrder = @fieldOrder
          WHERE IdCfgEntity in (
	          SELECT distinct(qf.IdCfgEntity)
	          FROM CfgEntityProperty qf
	          JOIN CfgEntity q 
	          ON qf.IdCfgEntity = q.IdCfgEntity
	          WHERE QueryName = @queryName
            @SQLPart
          )
          AND FieldName = @fieldName
        </sql>
        <parameters>
          <parameter type="Int">fieldOrder</parameter>
          <parameter type="String">fieldName</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textEqual">q.IdPage</filter>
        </filters>
      </query>


      <query code="Base_TestConnection">
        <sql>
          SELECT 1 AS IsTrue
        </sql>
      </query>
      <!-- End BASE section  -->

      <!-- LANGUAGE section  -->
      <query code="Language_FindAll">
        <sql>
          SELECT IdLanguage, IsBaseLanguage, Name FROM CfgLanguage
        </sql>
      </query>
      <query code="Language_GetLanguageDefined">
        <sql>
          SELECT IdLanguage
          ,IsBaseLanguage
          ,CodeBase
          ,Name
          FROM CfgLanguage
          WHERE IsBaseLanguage &lt; &gt; 1;
        </sql>
      </query>

      <!-- End LANGUAGE section  -->

      <!-- USER section  -->
      <query code="User_GetByUsernameAndPassord">
        <sql>
          SELECT  IdUserWms,
          UserName,
          Password,
          FirstName,
          LastName,
          WorkPhone,
          Email,
          IsBaseUser,
          CodStatus,
          l.IdLanguage,
          l.Name AS Language,
          l.CodeBase
          FROM CfgUserWms u
          LEFT JOIN CfgLanguage l ON u.IdLanguage = l.idLanguage
          WHERE UserName = @username AND Password = @password
        </sql>
        <parameters>
          <parameter type="String">username</parameter>
          <parameter type="String">password</parameter>
        </parameters>
      </query>

      <query code="User_FindAll">
        <sql>
          SELECT	distinct(u.IdUserWms),
          u.UserName,
          u.Password,
          u.FirstName,
          u.LastName,
          ISNULL(u.WorkPhone, '') AS WorkPhone,
          u.Email,
          u.IdLanguage,
          u.IsBaseUser,
          u.CodStatus,
          l.Name as Language,
          l.CodeBase,
          ISNULL(u.MobilePhone, '') AS MobilePhone,
          ISNULL(u.HousePhone, '') AS HousePhone,
          u.UserInternalCode,
          u.IdForeman,
          f.FirstName AS ForemanFirstName,
          f.LastName AS ForemanLastName,
          u.Comment,
          u.TypeUser
          FROM CfgUserWms u
          LEFT JOIN CfgLanguage l ON u.IdLanguage = l.idLanguage
          LEFT JOIN CfgUserWms f ON u.IdForeman = f.IdUserWms
          LEFT JOIN WarehouseUserWms wu ON u.IdUserWms = wu.IdUserWms
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn" includeNulls="true">wu.IdWhs</filter>
          <filter name="Code" type="textLike">u.UserName</filter>
          <filter name="Name" type="textLike">u.FirstName</filter>
          <filter name="Description" type="textLike">u.LastName</filter>
          <filter name="Status" type="numericEqual">u.CodStatus</filter>
        </filters>
      </query>

    <query code="User_FindAll_Base">
      <sql>
        SELECT	distinct(u.IdUserWms),
        u.UserName,
        u.Password,
        u.FirstName,
        u.LastName,
        ISNULL(u.WorkPhone, '') AS WorkPhone,
        u.Email,
        u.IdLanguage,
        u.IsBaseUser,
        u.CodStatus,
        l.Name as Language,
        l.CodeBase,
        ISNULL(u.MobilePhone, '') AS MobilePhone,
        ISNULL(u.HousePhone, '') AS HousePhone,
        u.UserInternalCode,
        u.IdForeman,
        f.FirstName AS ForemanFirstName,
        f.LastName AS ForemanLastName,
        u.Comment,
        u.TypeUser
        FROM CfgUserWms u
        LEFT JOIN CfgLanguage l ON u.IdLanguage = l.idLanguage
        LEFT JOIN CfgUserWms f ON u.IdForeman = f.IdUserWms
        @SQLPart
        ORDER BY u.UserName, u.FirstName, u.LastName;

        SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
        FROM CfgEntityProperty qf
        JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
        WHERE QueryName = 'User_FindAll_Base'
        ORDER BY FieldOrder
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
        <!--<parameter type="String">queryName</parameter>-->
      </parameters>
      <filters>
        <!--<filter name="Warehouse" type="numericIn">wu.IdWhs</filter>-->
		    <filter name="Code" type="textLike">u.UserName</filter>
		    <filter name="Name" type="textLike">u.FirstName</filter>
		    <filter name="Description" type="textLike">u.LastName</filter>
		    <filter name="Status" type="numericEqual">u.CodStatus</filter>
      </filters>
    </query>
    
      <query code="GetLastUser">
        <sql>
          SELECT
          IdUserWms,
          UserName,
          Password,
          FirstName,
          LastName,
          ISNULL(WorkPhone, '') AS WorkPhone,
          Email,
          IsBaseUser,
          CodStatus,
          u.IdLanguage,
          l.Name as Language,
          l.CodeBase
          FROM CfgUserWms u
          LEFT JOIN CfgLanguage l ON u.IdLanguage = l.idLanguage
          WHERE IdUserWms = (SELECT COALESCE(MAX(IdUserWms), 0) FROM CfgUserWms);

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="User_GetByCodStatus">
        <sql>
          SELECT
          u.IdUserWms,
          UserName,
          Password,
          FirstName,
          LastName,
          IsBaseUser
          FROM CfgUserWms u
          WHERE CodStatus = @codStatus
          AND u.IdUserWms &lt;&gt; 1 <!--Filtra usuario Administrador-->
          ORDER BY FirstName;
        </sql>
        <parameters>
          <parameter type="Boolean">codStatus</parameter>
        </parameters>
      </query>

      <query code="User_GetByCodStatusIdWhs">
        <sql>
          SELECT
          Distinct(u.IdUserWms) as IdUserWms,
          UserName,
          Password,
          FirstName,
          LastName,
          IsBaseUser
          FROM CfgUserWms u INNER JOIN WarehouseUserWms whu on u.IdUserWms = whu.IdUserWms
          @SQLPart
          AND CodStatus = @codStatus
          AND u.IdUserWms &lt;&gt; 1 <!--Filtra usuario Administrador-->
          ORDER BY FirstName;
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Boolean">codStatus</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericEqual">whu.IdWhs</filter>
        </filters>
      </query>

      <query code="User_GetByWorkZone">
        <sql>
          SELECT
          u.IdUserWms,
          UserName,
          Password,
          FirstName,
          LastName,
          IsBaseUser
          FROM CfgUserWms u
          INNER JOIN UserWorkZone uz ON u.IdUserWms = uz.IdUserWms
          WHERE uz.IdWorkZone = @idWorkZone
          AND u.CodStatus = 1
          ORDER BY FirstName;
        </sql>
        <parameters>
          <parameter type="Int">idWorkZone</parameter>
        </parameters>
      </query>

      <query code="User_GetByRole">
        <sql>
          SELECT
          u.IdUserWms,
          UserName,
          Password,
          FirstName,
          LastName,
          IsBaseUser,
          CodStatus
          FROM CfgUserWms u
          JOIN CfgUserWmsRole r ON u.IdUserWms = r.IdUserWms
          WHERE r.idRole = @idRole
          ORDER BY FirstName;;
        </sql>
        <parameters>
          <parameter type="Int">idRole</parameter>
        </parameters>
      </query>

      <query code="GetByRoleAndIdWhs">
        <sql>
          SELECT
          u.IdUserWms,
          UserName,
          Password,
          FirstName,
          LastName,
          IsBaseUser,
          CodStatus,
          Email
          FROM CfgUserWms u INNER JOIN WarehouseUserWms whu on u.IdUserWms = whu.IdUserWms
          JOIN CfgUserWmsRole r ON u.IdUserWms = r.IdUserWms
          @SQLPart
          AND r.idRole = @idRole
          ORDER BY FirstName;;
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">idRole</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericEqual">whu.IdWhs</filter>
        </filters>
      </query>

      <query code="User_GetByNotInRole">
        <sql>
          SELECT
          u.IdUserWms,
          UserName,
          Password,
          FirstName,
          LastName,
          IsBaseUser,
          CodStatus
          FROM CfgUserWms u
          WHERE u.IdUserWms NOT IN (
          SELECT IdUserWms FROM CfgUserWmsRole
          WHERE idRole IN (@idRole))
          AND u.IdUserWms &lt;&gt; 1 <!--Filtra usuario Administrador-->
          ORDER BY FirstName;;
        </sql>
        <parameters>
          <parameter type="Int">idRole</parameter>
        </parameters>
      </query>

      <query code="User_GetByNotInRoleAndIdWhs">
        <sql>
          SELECT
          Distinct(u.IdUserWms) IdUserWms,
          UserName,
          Password,
          FirstName,
          LastName,
          IsBaseUser,
          CodStatus
          FROM CfgUserWms u Inner Join WarehouseUserWms whu ON u.IdUserWms = whu.IdUserWms
          @SQLPart
          AND u.IdUserWms NOT IN (
          SELECT IdUserWms FROM CfgUserWmsRole
          WHERE idRole IN (@idRole))
          AND u.IdUserWms &lt;&gt; 1 <!--Filtra usuario Administrador-->
          ORDER BY FirstName;;
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">idRole</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericEqual">whu.IdWhs</filter>
        </filters>
      </query>

      <query code="User_GetByForeman">
        <sql>
          SELECT
          u.IdUserWms,
          u.UserName,
          u.Password,
          u.FirstName,
          u.LastName
          FROM CfgUserWms u
          WHERE u.IdForeman = @idUser
          ORDER BY FirstName;;
        </sql>
        <parameters>
          <parameter type="Int">idUser</parameter>
        </parameters>
      </query>

      <query code="User_GetByUsername">
        <sql>
          SELECT
          u.IdUserWms,
          u.UserName,
          u.Password,
          u.FirstName,
          u.LastName
          FROM CfgUserWms u
          WHERE u.UserName = @username;
        </sql>
        <parameters>
          <parameter type="String">username</parameter>
        </parameters>
      </query>

      <query code="User_GetOperatorByWhs">
        <sql>
          SELECT CUW.UserName
          FROM CfgUserWms CUW
          INNER JOIN WarehouseUserWms WUW ON WUW.IdUserWms = CUW.IdUserWms
          WHERE CUW.CodStatus = 1
          @SQLPart
          ORDER BY CUW.UserName
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">WUW.IdWhs</filter>
        </filters>
      </query>
  
      <query code="User_GetOperatorByWhsWihtOutDefaultWhs">
        <sql>
          SELECT CUW.UserName
          FROM CfgUserWms CUW
          INNER JOIN WarehouseUserWms WUW ON WUW.IdUserWms = CUW.IdUserWms
          WHERE CUW.CodStatus = 1
          @SQLPart
          ORDER BY CUW.UserName
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">WUW.IdWhs</filter>
        </filters>
      </query>

      <query code="User_Update">
        <sql>
          UPDATE CfgUserWms SET
          FirstName = @firstName,
          LastName = @lastName,
          UserName = @userName,
          UserInternalCode = @userInternalCode,
          WorkPhone = @workPhone,
          MobilePhone = @mobilePhone,
          HousePhone = @housePhone,
          Email = @email,
          IdForeman = @idForeman,
          IdLanguage = @idLanguage,
          CodStatus = @codstatus,
          Comment = @comment,
          TypeUser = @TypeUser,
          DateModified = @dateModified,
          UserModified = @userModified
          WHERE
          IdUserWms = @idUserWms
        </sql>
        <parameters>
          <parameter type="Int">idUserWms</parameter>
          <parameter type="String">firstName</parameter>
          <parameter type="String">lastName</parameter>
          <parameter type="String">userName</parameter>
          <parameter type="String">userInternalCode</parameter>
          <parameter type="String">workPhone</parameter>
          <parameter type="String">mobilePhone</parameter>
          <parameter type="String">housePhone</parameter>
          <parameter type="String">email</parameter>
          <parameter type="Int">idForeman</parameter>
          <parameter type="Int">idLanguage</parameter>
          <parameter type="Boolean">codstatus</parameter>
          <parameter type="String">comment</parameter>
          <parameter type="String">TypeUser</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="User_UpdatePass">
        <sql>
          UPDATE CfgUserWms SET
          Password = @Password
          WHERE
          IdUserWms = @idUserWms
        </sql>
        <parameters>
          <parameter type="Int">idUserWms</parameter>
          <parameter type="String">Password</parameter>
        </parameters>
      </query>

      <query code="User_Insert">
        <sql>
          INSERT INTO CfgUserWms
          (IdUserWms,
          FirstName,
          LastName,
          IsBaseUser,
          UserName,
          Password,
          UserInternalCode,
          WorkPhone,
          MobilePhone,
          HousePhone,
          Email,
          IdForeman,
          IdLanguage,
          CodStatus,
          Comment,
          TypeUser,
          DateCreated,
          UserCreated)

          VALUES
          (@IdUserWms,
          @firstName,
          @lastName,
          @isBaseUser,
          @userName,
          @password,
          @userInternalCode,
          @workPhone,
          @mobilePhone,
          @housePhone,
          @email,
          @idForeman,
          @idlanguage,
          @codStatus,
          @comment,
          @TypeUser,
          @dateCreated,
          @userCreated)

        </sql>
        <parameters>
          <parameter type="Int">idUserWms</parameter>
          <parameter type="String">firstName</parameter>
          <parameter type="String">lastName</parameter>
          <parameter type="Int">isBaseUser</parameter>
          <parameter type="String">userName</parameter>
          <parameter type="String">password</parameter>
          <parameter type="String">userInternalCode</parameter>
          <parameter type="String">workPhone</parameter>
          <parameter type="String">mobilePhone</parameter>
          <parameter type="String">housePhone</parameter>
          <parameter type="String">email</parameter>
          <parameter type="Int">idForeman</parameter>
          <parameter type="Int">idLanguage</parameter>
          <parameter type="Boolean">codstatus</parameter>
          <parameter type="String">comment</parameter>
          <parameter type="String">TypeUser</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="User_Delete">
        <sql>
          DELETE FROM CfgUserWms WHERE idUserWms = @idUserWms;
        </sql>

        <parameters>
          <parameter type="Int">idUserWms</parameter>
        </parameters>
      </query>

      <query code="User_DeleteRelations">
        <sql>
          DELETE FROM CfgUserWmsRole WHERE idUserWms = @idUserWms;

          DELETE FROM WarehouseUserWms WHERE IdUserWms = @idUserWms;

          DELETE FROM UserOwner WHERE IdUserWms = @idUserWms;

          DELETE FROM UserWorkZone WHERE IdUserWms = @idUserWms;

          DELETE FROM UserPrinter WHERE IdUserWms = @idUserWms;
        </sql>

        <parameters>
          <parameter type="Int">idUserWms</parameter>
        </parameters>
      </query>

    <query code="User_DeleteRelationsWithoutRole">
      <sql>
        DELETE FROM WarehouseUserWms WHERE IdUserWms = @idUserWms;

        DELETE FROM UserOwner WHERE IdUserWms = @idUserWms;

        DELETE FROM UserWorkZone WHERE IdUserWms = @idUserWms;

        DELETE FROM UserPrinter WHERE IdUserWms = @idUserWms;

        DELETE FROM UserVendor WHERE IdUserWms = @idUserWms;
      </sql>

      <parameters>
        <parameter type="Int">idUserWms</parameter>
      </parameters>
    </query>


      <query code="RoleUser_DeleteByRol">
        <sql>
          DELETE role
          FROM CfgUserWmsRole role
          INNER JOIN WarehouseUserWms ware
          ON role.IdUserWms = ware.IdUserWms
          WHERE role.IdRole = @idRole
          AND ware.IdWhs = @idWhs
        </sql>
        <parameters>
          <parameter  type="Int">idRole</parameter>
          <parameter  type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="RoleUser_DeleteByUser">
        <sql>
          DELETE
          FROM CfgUserWmsRole
          WHERE IdUserWms = @idUser
        </sql>
        <parameters>
          <parameter  type="Int">idUser</parameter>
        </parameters>
      </query>

      <query code="RoleUser_Insert">
        <sql>
          INSERT INTO dbo.CfgUserWmsRole
          (IdUserWms
          ,IdRole
          ,DateCreated
          ,UserCreated)
          values (
          @idUser,
          @idRole,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>
          <parameter  type="Int">idUser</parameter>
          <parameter type="Int">idRole</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="User_findOwners">
        <sql>
          SELECT U.IdOwn
          ,U.IdUserWms
          ,O.OwnCode
          ,O.OwnName
          ,O.TradeName
          ,U.DateCreated
          ,U.UserCreated
          ,U.DefaultOwner
          FROM UserOwner U
          INNER JOIN Owner O ON O.IdOwn = U.IdOwn
          WHERE IdUserWms = @IdUserWms
          ORDER BY O.OwnName
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
        </parameters>
      </query>

      <query code="User_InsertOwners">
        <sql>
          INSERT INTO UserOwner
          (IdOwn
          ,IdUserWms
          ,DateCreated
          ,UserCreated
          ,DefaultOwner)
          VALUES
          (@IdOwn
          ,@IdUserWms
          ,@DateCreated
          ,@UserCreated
          ,@DefaultOwner)
        </sql>
        <parameters>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdUserWms</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
          <parameter type="Int">DefaultOwner</parameter>
        </parameters>
      </query>

      <query code="User_DeleteOneOwner">
        <sql>
          DELETE FROM UserOwner
          WHERE IdUserWms = @IdUserWms
          AND IdOwn = @IdOwn
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>


      <query code="User_findPrinterByUser">
        <sql>
          SELECT
          U.IdUserWms
          ,U.IdPrinter
          ,P.PrinterName
          ,P.Description
          ,P.IdPrinterType
          ,U.IdWmsProcessCode
          ,U.DefaultPrint
          ,U.DateCreated
          ,U.UserCreated
          ,U.DateModified
          ,U.UserModified
          ,PT.PrinterTypeCode
          ,PT.PrinterTypeName
          FROM UserPrinter U
          INNER JOIN Printer P ON P.IdPrinter = U.IdPrinter
          LEFT JOIN PrinterType PT ON PT.IdPrinterType = P.IdPrinterType 
          WHERE IdUserWms = @IdUserWms
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
        </parameters>
      </query>

      <query code="User_InsertPrinters">
        <sql>
          INSERT INTO UserPrinter
          (IdUserWms
          ,IdPrinter
          ,IdWmsProcessCode
          ,DefaultPrint
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdUserWms
          ,@IdPrinter
          ,@IdWmsProcessCode
          ,@DefaultPrint
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
          <parameter type="Int">IdPrinter</parameter>
          <parameter type="String">IdWmsProcessCode</parameter>
          <parameter type="Int">DefaultPrint</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="User_DeleteOnePrinter">
        <sql>
          DELETE FROM UserPrinter
          WHERE IdUserWms = @IdUserWms
          AND IdPrinter = @IdPrinter
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
          <parameter type="Int">IdPrinter</parameter>
        </parameters>
      </query>

      <query code="User_findWorkZone">
        <sql>
          SELECT
          U.IdUserWms
          ,U.IdWorkZone
          ,W.WorkZoneName
          ,W.Description
          ,U.DateCreated
          ,U.UserCreated
          ,U.DateModified
          ,U.UserModified
          ,W.IdWhs
          FROM UserWorkZone U
          INNER JOIN WorkZone W ON W.IdWorkZone = U.IdWorkZone
          WHERE IdUserWms = @IdUserWms
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
        </parameters>
      </query>

      <query code="User_InsertWorkZone">
        <sql>
          INSERT INTO UserWorkZone
          (IdUserWms
          ,IdWorkZone
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdUserWms
          ,@IdWorkZone
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
          <parameter type="Int">IdWorkZone</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="User_DeleteOneWorkZone">
        <sql>
          DELETE FROM UserWorkZone
          WHERE IdUserWms = @IdUserWms
          AND IdWorkZone = @IdWorkZone
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
          <parameter type="Int">IdWorkZone</parameter>
        </parameters>
      </query>
      <!-- End USER section  -->

      <!-- RECEPTION section  -->
      <query code="Receipt_Delete">
        <sql>
          DELETE FROM Receipt WHERE IdReceipt = @idReceipt;
        </sql>
        <parameters>
          <parameter type="Int">idReceipt</parameter>
        </parameters>
      </query>

      <query code="ReceiptDetail_Delete">
        <sql>
          DELETE FROM ReceiptDetail WHERE IdReceiptDetail = @idReceiptDetail;
        </sql>
        <parameters>
          <parameter type="Int">idReceiptDetail</parameter>
        </parameters>
      </query>

      <query code="Receipt_GetByAnyParameter">
        <sql>
          SELECT DISTINCT R.IdReceipt,
          INO.IdInboundOrder,
          INO.InboundNumber,
          O.IdOwn,
          O.OwnCode,
          O.OwnName,
          O.TradeName,
          R.ReceiptDate,
          R.Status,
          RT.IdReceiptType,
          RT.ReceiptTypeCode,
          RT.ReceiptTypeName,
          R.ReferenceDoc,
          RDT.IdReferenceDocType,
          RDT.ReferenceDocTypeCode,
          RDT.ReferenceDocTypeName,
          C.IdCarrier,
          C.CarrierCode,
          C.CarrierName,
          R.IdTruckCode,
          D.IdDriver,
          D.DriverCode,
          D.DriverName,
          R.ShiftNumber,
          WS.IdWhs,
          WS.WhsCode,
          WS.ShortWhsName,
          WS.WhsName,
          R.UserWms,
          R.IdLocationForkLift,
          R.IdLocationStage

          FROM InboundOrder INO
          INNER JOIN InboundType It ON It.IdInboundType = INO.IdInboundType AND It.Status = 1
          INNER JOIN Owner O ON INO.IdOwn = O.IdOwn
          INNER JOIN Receipt R ON R.IdInboundOrder = INO.IdInboundOrder
          INNER JOIN ReceiptDetail Rd ON R.IdReceipt = Rd.IdReceipt
          LEFT JOIN Item itm ON itm.IdItem = Rd.IdItem
          LEFT JOIN ReceiptType RT ON R.IdReceiptType = RT.IdReceiptType AND RT.Status = 1
          LEFT JOIN ReferenceDocType RDT ON R.IdReferenceDocType = RDT.IdReferenceDocType
          LEFT JOIN Carrier C ON R.IdCarrier = C.IdCarrier
          LEFT JOIN Driver D ON R.DriverCode = D.DriverCode
          LEFT JOIN Warehouse WS ON R.IdWhs = WS.IdWhs
          WHERE 1=1
          @SQLPart
          ORDER BY WS.ShortWhsName,O.OwnName,RT.ReceiptTypeName,INO.InboundNumber,R.ReceiptDate;
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdReceipt" type="numericEqual">R.IdReceipt</filter>
          <filter name="IdInboundOrder" type="numericEqual">R.IdInboundOrder</filter>
          <filter name="ReceiptDate" type="textEqual">R.ReceiptDate</filter>
          <filter name="IdReceiptType" type="numericEqual">R.IdReceiptType</filter>
          <filter name="ReferenceDoc" type="textEqual">R.ReferenceDoc</filter>
          <filter name="IdReferenceDocType" type="numericEqual">R.IdReferenceDocType</filter>
          <filter name="IdCarrier" type="numericEqual">R.IdCarrier</filter>
          <filter name="IdTruckCode" type="textEqual">R.IdTruckCode</filter>
          <filter name="DriverCode" type="textEqual">R.DriverCode</filter>
          <filter name="ShiftNumber" type="textEqual">R.ShiftNumber</filter>
          <filter name="IdWhs" type="numericEqual">R.IdWhs</filter>
          <filter name="UserWms" type="textEqual">R.UserWms</filter>
          <filter name="IdLocationForkLift" type="textEqual">R.IdLocationForkLift</filter>
          <filter name="IdLocationStage" type="textEqual">R.IdLocationStage</filter>
          <filter name="SpecialField1" type="textEqual">R.SpecialField1</filter>
          <filter name="SpecialField2" type="textEqual">R.SpecialField2</filter>
          <filter name="SpecialField3" type="textEqual">R.SpecialField3</filter>
          <filter name="SpecialField4" type="textEqual">R.SpecialField4</filter>
          <filter name="DateCreated" type="textEqual">R.DateCreated</filter>
          <filter name="UserCreated" type="textEqual">R.UserCreated</filter>
          <filter name="DateModified" type="textEqual">R.DateModified</filter>
          <filter name="UserModified" type="textEqual">R.UserModified</filter>
          <filter name="StateInterface" type="textEqual">R.StateInterface</filter>
          <filter name="DateReadIFZ" type="textEqual">R.DateReadIFZ</filter>
        </filters>
      </query>
  
      <query code="Receipt_FindAll">
        <sql>
          SELECT DISTINCT R.IdReceipt,
          INO.IdInboundOrder,
          INO.InboundNumber,
          O.IdOwn,
          O.OwnCode,
          O.OwnName,
          O.TradeName,
          R.ReceiptDate,
          R.Status,
          RT.IdReceiptType,
          RT.ReceiptTypeCode,
          RT.ReceiptTypeName,
          R.ReferenceDoc,
          RDT.IdReferenceDocType,
          RDT.ReferenceDocTypeCode,
          RDT.ReferenceDocTypeName,
          C.IdCarrier,
          C.CarrierCode,
          C.CarrierName,
          R.IdTruckCode,
          D.IdDriver,
          D.DriverCode,
          D.DriverName,
          R.ShiftNumber,
          WS.IdWhs,
          WS.WhsCode,
          WS.ShortWhsName,
          WS.WhsName,
          R.UserWms,
          R.IdLocationForkLift,
          R.IdLocationStage,
          R.SpecialField1,
          INO.SpecialField1 as IOSpecialField1
          FROM InboundOrder INO
          INNER JOIN InboundType It ON It.IdInboundType = INO.IdInboundType AND It.Status = 1
          INNER JOIN Owner O ON INO.IdOwn = O.IdOwn
          INNER JOIN Receipt R ON R.IdInboundOrder = INO.IdInboundOrder
          INNER JOIN ReceiptDetail Rd ON R.IdReceipt = Rd.IdReceipt
          LEFT JOIN Item itm ON itm.IdItem = Rd.IdItem
          LEFT JOIN ReceiptType RT ON R.IdReceiptType = RT.IdReceiptType AND RT.Status = 1
          LEFT JOIN ReferenceDocType RDT ON R.IdReferenceDocType = RDT.IdReferenceDocType
          LEFT JOIN Carrier C ON R.IdCarrier = C.IdCarrier
          LEFT JOIN Driver D ON R.DriverCode = D.DriverCode
          LEFT JOIN Warehouse WS ON R.IdWhs = WS.IdWhs
          @SQLPart
          ORDER BY WS.ShortWhsName,O.OwnName,RT.ReceiptTypeName,INO.InboundNumber,R.ReceiptDate;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">INO.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">INO.InboundNumber</filter>
          <filter name="DateRange" type="textBetween">R.ReceiptDate</filter>
          <filter name="Owner" type="numericIn">O.IdOwn</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="InboundType" type="numericIn">It.IdInboundType</filter>
          <filter name="ReferenceDocType" type="numericIn">R.IdReferenceDocType</filter>
          <filter name="Vendor" type="numericIn">INO.IdVendor</filter>
          <filter name="Carrier" type="numericIn">C.IdCarrier</filter>
          <filter name="ExpectedDateRange" type="textBetween">INO.DateExpected</filter>
          <filter name="ExpirationDateRange" type="textBetween">INO.ExpirationDate</filter>
          <filter name="Driver" type="numericIn">D.IdDriver</filter>
          <filter name="GroupItem1" type="numericEqual">itm.IdGrpItem1</filter>
          <filter name="GroupItem2" type="numericEqual">itm.IdGrpItem2</filter>
          <filter name="GroupItem3" type="numericEqual">itm.IdGrpItem3</filter>
          <filter name="GroupItem4" type="numericEqual">itm.IdGrpItem4</filter>
        </filters>
      </query>

      <query code="ReceiptDetail_GetByAnyParameter">
        <sql>
          SELECT   INB.InboundNumber
          , R.ReceiptDate
          , R.Status
          , I.IdItem
          , I.ItemCode
          , I.Description
          , I.LongItemName
          , CI.IdCtgItem
          , CI.CtgName
          , RD.ItemQty Received
          , RD.FifoDate
          , RD.ExpirationDate
          , RD.FabricationDate
          , RD.LotNumber
          , RD.Price
          , RD.IdLpnCode
          , RD.IdReceiptDetail
          , R.IdReceipt
          ,R.IdInboundOrder
          FROM    ReceiptDetail RD
          INNER JOIN  Receipt R
          ON RD.IdReceipt = R.IdReceipt
          INNER JOIN Item I
          ON RD.IdItem = I.IdItem
          INNER JOIN InboundOrder INB
          ON R.IdInboundOrder = INB.IdInboundOrder
          LEFT OUTER JOIN CategoryItem CI
          ON RD.IdCtgItem = CI.IdCtgItem
          LEFT OUTER JOIN Lpn LPN
          ON LPN.IdLpnCode = RD.IdLpnCode
          WHERE 1=1
          @SQLPart

        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdReceiptDetail" type="numericEqual">RD.IdReceiptDetail</filter>
          <filter name="IdReceipt" type="numericEqual">R.IdReceipt</filter>
          <filter name="IdInboundOrder" type="numericEqual">R.IdInboundOrder</filter>
          <filter name="IdWhs" type="numericEqual">R.IdWhs</filter>
          <filter name="LineNumber" type="numericEqual">RD.LineNumber</filter>
          <filter name="IdItem" type="numericEqual">RD.IdItem</filter>
          <filter name="IdCtgItem" type="numericEqual">RD.IdCtgItem</filter>
          <filter name="FifoDate" type="textEqual">RD.FifoDate</filter>
          <filter name="ExpirationDate" type="textEqual">RD.ExpirationDate</filter>
          <filter name="FabricationDate" type="textEqual">RD.FabricationDate</filter>
          <filter name="LotNumber" type="textEqual">RD.LotNumber</filter>
          <filter name="IdLpnCode" type="textEqual">RD.IdLpnCode</filter>
        </filters>
      </query>

      <query code="ReceiptDetail_ById">
        <sql>
          SELECT   INB.InboundNumber
          , R.ReceiptDate
          , R.Status
          , I.IdItem
          , I.ItemCode
          , I.Description
          , I.LongItemName
          , CI.IdCtgItem
          , CI.CtgName
          , SUM(RD.ItemQty) Received
          , RD.FifoDate
          , RD.ExpirationDate
          , RD.FabricationDate
          , RD.LotNumber
          , RD.Price
          , RD.IdLpnCode
          , RD.LpnWeightTotal
		      , IU.UomName
          FROM    ReceiptDetail RD
          INNER JOIN  Receipt R
          ON RD.IdReceipt = R.IdReceipt
          INNER JOIN Item I
          ON RD.IdItem = I.IdItem
          INNER JOIN InboundOrder INB
          ON R.IdInboundOrder = INB.IdInboundOrder
          LEFT OUTER JOIN CategoryItem CI
          ON RD.IdCtgItem = CI.IdCtgItem
		  LEFT JOIN ItemUom IU
		         ON IU.IdItem = I.IdItem
	            AND IU.IdUomType = I.StackingSequence     
          LEFT OUTER JOIN Lpn LPN
          ON LPN.IdLpnCode = RD.IdLpnCode

          WHERE   (RD.IdReceipt = @idReceipt)
          GROUP BY
          INB.InboundNumber
          , R.Status
          , R.ReceiptDate
          , I.IdItem
          , I.ItemCode
          , I.Description
          , I.LongItemName
          , CI.IdCtgItem
          , CI.CtgName
          , RD.IdItem
          , RD.FifoDate
          , RD.ExpirationDate
          , RD.FabricationDate
          , RD.LotNumber
          , RD.Price
          , RD.IdLpnCode
		      , IU.UomName
          , RD.LpnWeightTotal
          ORDER BY INB.InboundNumber,CI.CtgName,RD.IdLpnCode,I.ItemCode,R.ReceiptDate;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idReceipt</parameter>
        </parameters>
      </query>

      <query code="Receipt_GetByInboundId">
        <sql>
          SELECT
          R.IdInboundOrder, R.ReceiptDate, R.Status, R.ReferenceDoc,
          R.IdReferenceDocType, RDT.ReferenceDocTypeName,
          R.IdCarrier, C.CarrierCode, R.IdTruckCode, R.DriverCode,
          RD.IdReceiptDetail, RD.IdItem, I.ItemCode, RD.IdCtgItem,
          CI.CtgName, RD.ItemQty, RD.FifoDate, RD.ExpirationDate,
          RD.FabricationDate, RD.LotNumber, RD.IdLpnCode, R.IdReceiptType
          FROM Receipt R
          LEFT JOIN ReferenceDocType RDT ON RDT.IdReferenceDocType = R.IdReferenceDocType
          LEFT JOIN Carrier C ON C.IdCarrier = R.IdCarrier
          LEFT JOIN ReceiptDetail RD ON RD.IdReceipt = R.IdReceipt
          LEFT JOIN Item I ON I.IdItem = RD.IdItem
          LEFT JOIN CategoryItem CI ON CI.IdCtgItem = RD.IdCtgItem
          WHERE R.idInboundOrder =  @idInboundOrder
        </sql>
        <parameters>
          <parameter type="Int">idInboundOrder</parameter>
        </parameters>
      </query>

      <query code="GetTotalReceiptReportConsult">
        <sql>
          SELECT IdInboundOrder ,IdWhs ,WhsName ,IdOwn ,OwnName ,InboundNumber ,IdInboundType ,Inboundtypename ,OrderComment ,IdVendor
          ,VendorName ,EmissionDate ,Status ,NameTrackInboundType ,IdReceipt ,ReceiptDate ,ReferenceDoc,IdReferenceDocType
          ,ReferenceDocTypeName ,IdCarrier,CarrierName,IdTruckCode,DriverCode,DriverName
          FROM v_Inb_InboundReceiptHeader
          WHERE IdOwn =  @IdOwn
          AND InboundNumber = @InboundNumber
          AND IdWhs = @idWhs
          AND IdInboundType = @idInboundType
        </sql>
        <parameters>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">InboundNumber</parameter>
          <parameter type="Int">idWhs</parameter>
          <parameter type="Int">idInboundType</parameter>
        </parameters>
      </query>

      <query code="GetReceiptHeaderReportConsult">
        <sql>
          SELECT IdInboundOrder ,IdWhs ,WhsName ,IdOwn ,OwnName ,InboundNumber ,IdInboundType ,Inboundtypename ,OrderComment ,IdVendor
          ,VendorName ,EmissionDate ,Status ,NameTrackInboundType ,IdReceipt ,ReceiptDate ,ReferenceDoc,IdReferenceDocType
          ,ReferenceDocTypeName ,IdCarrier,CarrierName,IdTruckCode,DriverCode,DriverName
          FROM v_Inb_InboundReceiptHeader
          @SQLPart;
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Owner" type="numericIn">IdOwn</filter>
          <filter name="DocumentNbr" type="textEqual">InboundNumber</filter>
          <filter name="Code" type="numericEqual">IdReceipt</filter>
          <filter name="Description" type="textEqual">ReferenceDoc</filter>
        </filters>
      </query>


      <query code="GetReceiptHeaderToConfirm">
        <sql>
          SELECT R.IdReceipt,
          R.IdWhs,
          W.WhsCode,
          W.WhsName,
          W.ShortWhsName,
          I.IdOwn AS OwnerID,
          O.OwnCode,
          O.OwnName,
          R.IdInboundOrder,
          I.InboundNumber,
          IT.InboundTypeName,
          R.IdReceiptType,
          T.ReceiptTypeCode,
          T.ReceiptTypeName,
          I.IdVendor,
          V.VendorCode,
          V.VendorName,
          ReceiptDate,
          R.Status,
          ReferenceDoc,
          R.IdReferenceDocType,
          RDT.ReferenceDocTypeCode,
          RDT.ReferenceDocTypeName,
          IdLocationStage,
          UserWms,
          I.SpecialField1 as IOSpecialField1
          FROM Receipt R
          INNER JOIN Warehouse W ON R.IdWhs = W.IdWhs
          INNER JOIN InboundOrder I ON R.IdInboundOrder = I.IdInboundOrder
          INNER JOIN InboundType IT ON I.IdInboundType = IT.IdInboundType AND IT.Status = 1
          INNER JOIN v_Inb_LatestTrack tra ON I.IdInboundOrder = tra.IdInboundOrder
          INNER JOIN Owner O ON I.IdOwn = O.IdOwn
          INNER JOIN ReceiptType T ON R.IdReceiptType = T.IdReceiptType AND T.Status = 1
          LEFT JOIN Vendor V ON I.IdVendor = V.IdVendor AND I.IdOwn = V.IdOwn
          INNER JOIN ReceiptDetail RD ON R.IdReceipt = RD.IdReceipt
          INNER JOIN Item IM ON IM.IdItem = RD.IdItem
          LEFT JOIN ReferenceDocType RDT ON R.IdReferenceDocType = RDT.IdReferenceDocType
          @SQLPart
          AND (R.StateInterface = 'A')
          GROUP BY R.IdReceipt,
          R.IdWhs,
          W.WhsCode,
          W.WhsName,
          W.ShortWhsName,
          I.IdOwn,
          O.OwnCode,
          O.OwnName,
          R.IdInboundOrder,
          I.InboundNumber,
          IT.InboundTypeName,
          R.IdReceiptType,
          T.ReceiptTypeCode,
          T.ReceiptTypeName,
          I.IdVendor,
          V.VendorCode,
          V.VendorName,
          ReceiptDate,
          R.Status,
          ReferenceDoc,
          R.IdReferenceDocType,
          RDT.ReferenceDocTypeCode,
          RDT.ReferenceDocTypeName,
          IdLocationStage,
          UserWms,
          I.SpecialField1
          ORDER BY W.ShortWhsName,O.OwnName,T.ReceiptTypeName,I.InboundNumber,IT.InboundTypeName;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = 'GetReceiptHeaderToConfirm'
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">R.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">I.InboundNumber</filter>
          <filter name="DateRange" type="textBetween">ReceiptDate</filter>
          <filter name="Item" type="textLike">IM.ItemCode</filter>
          <filter name="Owner" type="numericIn">I.IdOwn</filter>
          <filter name="InboundType" type="numericIn">I.IdInboundType</filter>
        </filters>
      </query>

      <query code="InboundOrder_FindAll">
        <sql>
          SELECT DISTINCT
          iOr.IdInboundOrder
          ,whs.IdWhs
          ,whs.WhsCode
          ,whs.ShortWhsName
          ,whs.WhsName
          ,own.IdOwn
          ,own.OwnCode
          ,own.OwnName
          ,own.TradeName
          ,iOr.InboundNumber
          ,iTy.IdInboundType
          ,iTy.InboundTypeCode
          ,iTy.InboundTypeName
          ,iOr.OrderComment
          ,ven.IdVendor
          ,ven.VendorName
          ,ven.VendorCode
          ,iOr.DateExpected
          ,iOr.EmissionDate
          ,iOr.ExpirationDate
          ,iOr.Status
          ,tra.IdTrackInboundType
          ,tra.NameTrackInboundType
          ,out.IdOutboundOrder
          ,out.OutboundNumber
          ,iOr.IsAsn
          ,iOr.PercentLpnInspection
          ,iOr.PercentQA
          ,iOr.ShiftNumber
          ,iOr.SpecialField1
          ,iOr.SpecialField2
          ,iOr.SpecialField3
          ,iOr.SpecialField4
          ,iOr.DateCreated
          ,iOr.UserCreated
          ,iOr.DateModified
          ,iOr.UserModified
          ,iOr.SpecialField1,
		  (
		   ((COALESCE((SELECT SUM(redet.ItemQty) 
                        FROM ReceiptDetail redet 
                        JOIN Receipt rec 
	                      ON redet.IdReceipt = rec.IdReceipt 
                        JOIN InboundOrder inbo 
	                      ON rec.IdInboundOrder = inbo.IdInboundOrder 
                        JOIN Item itm 
	                      ON redet.IdItem = itm.IdItem 
                     WHERE inbo.IdInboundOrder = iOr.IdInboundOrder
                       AND COALESCE(rec.SpecialField1, '') &lt; &gt; 'NO_RECEIPTED_ITEMS'   
                       ), 0))
		    /
		    (COALESCE((SELECT SUM(idsq.ItemQty)
			             FROM InboundDetail idsq
			            WHERE idsq.IdInboundOrder = iOr.IdInboundOrder), 1))) * 100
			
		  ) as PercentReceipted,
          iOr.HasIssues
          FROM InboundOrder iOr

          JOIN Owner own ON iOr.IdOwn = own.IdOwn
          JOIN Warehouse whs ON iOr.IdWhs = whs.IdWhs
          JOIN InboundType iTy ON iOr.IdInboundType = iTy.IdInboundType AND iTy.Status = 1
          JOIN v_Inb_LatestTrack tra ON iOR.IdInboundOrder = tra.IdInboundOrder
          LEFT JOIN Vendor ven ON iOr.IdVendor = ven.IdVendor
          LEFT JOIN OutboundOrder out ON iOR.IdOutboundOrderSource = out.IdOutboundOrder
          LEFT JOIN InboundDetail iD ON iOR.IdInboundOrder = iD.IdInboundOrder
          LEFT JOIN Item itm ON itm.IdItem = iD.IdItem @SQLPart
          ORDER BY whs.ShortWhsName,own.OwnName,iTy.InboundTypeName,iOr.InboundNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE q.QueryName = @queryName
          AND q.IdModule = @idModule
          AND q.IdPage = @idPage
          AND q.IdCfgEntity = qf.IdCfgEntity
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">iOr.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">iOr.InboundNumber</filter>
          <filter name="DateRange" type="textBetween">iOr.EmissionDate</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">own.IdOwn</filter>
          <filter name="InboundType" type="numericIn">iTy.IdInboundType</filter>
          <filter name="TrackInboundType" type="numericIn">tra.IdTrackInboundType</filter>
        </filters>
      </query>
  
      <query code="InboundOrder_GetByAnyParameter">
        <sql>
          SELECT DISTINCT
          iOr.IdInboundOrder
          ,whs.IdWhs
          ,whs.WhsCode
          ,whs.ShortWhsName
          ,whs.WhsName
          ,own.IdOwn
          ,own.OwnCode
          ,own.OwnName
          ,own.TradeName
          ,iOr.InboundNumber
          ,iTy.IdInboundType
          ,iTy.InboundTypeCode
          ,iTy.InboundTypeName
          ,iOr.OrderComment
          ,ven.IdVendor
          ,ven.VendorName
          ,ven.VendorCode
          ,iOr.DateExpected
          ,iOr.EmissionDate
          ,iOr.ExpirationDate
          ,iOr.Status
          ,tra.IdTrackInboundType
          ,tra.NameTrackInboundType
          ,out.IdOutboundOrder
          ,out.OutboundNumber
          ,iOr.IsAsn
          ,iOr.PercentLpnInspection
          ,iOr.PercentQA
          ,iOr.ShiftNumber
          ,iOr.SpecialField1
          ,iOr.SpecialField2
          ,iOr.SpecialField3
          ,iOr.SpecialField4
          ,iOr.DateCreated
          ,iOr.UserCreated
          ,iOr.DateModified
          ,iOr.UserModified
          FROM InboundOrder iOr

          JOIN Owner own ON iOr.IdOwn = own.IdOwn
          JOIN Warehouse whs ON iOr.IdWhs = whs.IdWhs
          JOIN InboundType iTy ON iOr.IdInboundType = iTy.IdInboundType AND iTy.Status = 1
          JOIN v_Inb_LatestTrack tra ON iOR.IdInboundOrder = tra.IdInboundOrder
          LEFT JOIN Vendor ven ON iOr.IdVendor = ven.IdVendor
          LEFT JOIN OutboundOrder out ON iOR.IdOutboundOrderSource = out.IdOutboundOrder
          LEFT JOIN InboundDetail iD ON iOR.IdInboundOrder = iD.IdInboundOrder
          LEFT JOIN Item itm ON itm.IdItem = iD.IdItem 
          WHERE 1=1
          @SQLPart
          ORDER BY whs.ShortWhsName,own.OwnName,iTy.InboundTypeName,iOr.InboundNumber;
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdInboundOrder" type="numericEqual">iOr.IdInboundOrder</filter>
          <filter name="WhId" type="numericEqual">iOr.IdWhs</filter>
          <filter name="IdOwn" type="numericEqual">own.IdOwn</filter>
          <filter name="InboundNumber" type="textEqual">iOr.InboundNumber</filter>
          <filter name="IdInboundType" type="numericEqual">iTy.IdInboundType</filter>
          <filter name="DateExpected" type="textEqual">iOr.DateExpected</filter>
          <filter name="ExpirationDate" type="textEqual">iOr.ExpirationDate</filter>
          <filter name="EmissionDate" type="textEqual">iOr.EmissionDate</filter>
          <filter name="idOutboundOrder" type="numericEqual">iOr.IdOutboundOrderSource</filter>
        </filters>
      </query>

      <query code="InboundOrder_GetByOwner">
        <sql>
          SELECT
          iOr.IdInboundOrder
          ,whs.IdWhs
          ,whs.WhsCode
          ,whs.ShortWhsName
          ,whs.WhsName
          ,own.IdOwn
          ,own.OwnCode
          ,own.OwnName
          ,own.TradeName
          ,iOr.InboundNumber
          ,iTy.IdInboundType
          ,iTy.InboundTypeCode
          ,iOr.OrderComment
          ,ven.IdVendor
          ,ven.VendorName
          ,ven.VendorCode
          ,iOr.DateExpected
          ,iOr.EmissionDate
          ,iOr.ExpirationDate
          ,iOr.Status
          ,tra.IdTrackInboundType
          ,tra.NameTrackInboundType
          ,out.IdOutboundOrder
          ,out.OutboundNumber
          ,iOr.IsAsn
          ,iOr.PercentLpnInspection
          ,iOr.PercentQA
          ,iOr.ShiftNumber
          ,iOr.SpecialField1
          ,iOr.SpecialField2
          ,iOr.SpecialField3
          ,iOr.SpecialField4
          ,iOr.DateCreated
          ,iOr.UserCreated
          ,iOr.DateModified
          ,iOr.UserModified
          FROM InboundOrder iOr

          JOIN Owner own ON iOr.IdOwn = own.IdOwn
          JOIN Warehouse whs ON iOr.IdWhs = whs.IdWhs
          JOIN InboundType iTy ON iOr.IdInboundType = iTy.IdInboundType AND iTy.Status = 1
          LEFT JOIN v_Inb_LatestTrack tra ON iOR.IdInboundOrder = tra.IdInboundOrder
          LEFT JOIN Vendor ven ON iOr.IdVendor = ven.IdVendor
          LEFT JOIN OutboundOrder out ON iOR.IdOutboundOrderSource = out.IdOutboundOrder
          WHERE iOr.IdOwn = @idOwner
          ORDER BY iOr.IdInboundOrder DESC;
        </sql>
        <parameters>
          <parameter type="Int">idOwner</parameter>
        </parameters>
      </query>

      <query code="InboundOrder_GetByNumberAndOwner">
        <sql>
      SELECT
      iOr.IdInboundOrder
      ,whs.IdWhs
      ,whs.WhsCode
      ,whs.ShortWhsName
      ,whs.WhsName
      ,own.IdOwn
      ,own.OwnCode
      ,own.OwnName
      ,own.TradeName
      ,iOr.InboundNumber
      ,iTy.IdInboundType
      ,iTy.InboundTypeCode
      ,iOr.OrderComment
      ,ven.IdVendor
      ,ven.VendorName
      ,ven.VendorCode
      ,iOr.DateExpected
      ,iOr.EmissionDate
      ,iOr.ExpirationDate
      ,iOr.Status
      ,tra.IdTrackInboundType
      ,tra.NameTrackInboundType
      ,tra.DateTrack
      ,out.IdOutboundOrder AS IdOutboundOrderSource
      ,out.OutboundNumber
      ,iOr.IsAsn
      ,iOr.PercentLpnInspection
      ,iOr.PercentQA
      ,iOr.ShiftNumber
      ,iOr.SpecialField1
      ,iOr.SpecialField2
      ,iOr.SpecialField3
      ,iOr.SpecialField4
      ,iOr.DateCreated
      ,iOr.UserCreated
      ,iOr.DateModified
      ,iOr.UserModified
      FROM InboundOrder iOr

      JOIN Owner own ON iOr.IdOwn = own.IdOwn
      JOIN Warehouse whs ON iOr.IdWhs = whs.IdWhs
      JOIN InboundType iTy ON iOr.IdInboundType = iTy.IdInboundType AND iTy.Status = 1
      LEFT JOIN v_Inb_LatestTrack tra ON iOR.IdInboundOrder = tra.IdInboundOrder
      LEFT JOIN Vendor ven ON iOr.IdVendor = ven.IdVendor
      LEFT JOIN OutboundOrder out ON iOR.IdOutboundOrderSource = out.IdOutboundOrder
      WHERE iOr.IdOwn = @idOwner
      AND iOr.InboundNumber = @inboundNumber
      ORDER BY iOr.IdInboundOrder DESC;
    </sql>
        <parameters>
          <parameter type="String">inboundNumber</parameter>
          <parameter type="Int">idOwner</parameter>
        </parameters>
      </query>


      <query code="InboundOrder_GetByIdVendor">
        <sql>
          SELECT IOR.IdInboundOrder,
          IOR.IdWhs,
          IOR.IdOwn,
          IOR.InboundNumber,
          IOR.IdInboundType,
          IOR.OrderComment,
          IOR.IdVendor,
          IOR.DateExpected,
          IOR.EmissionDate,
          IOR.ExpirationDate,
          IOR.Status,
          IOR.IdOutboundOrderSource,
          IOR.IsAsn,
          IOR.PercentLpnInspection,
          IOR.PercentQA,
          IOR.ShiftNumber,
          IOR.SpecialField1,
          IOR.SpecialField2,
          IOR.SpecialField3,
          IOR.SpecialField4,
          IOR.DateCreated,
          IOR.UserCreated,
          IOR.DateModified,
          IOR.UserModified
          FROM InboundOrder IOR INNER JOIN
          Vendor V ON IOR.IdVendor = V.IdVendor
          WHERE V.IdVendor = @idVendor;
        </sql>
        <parameters>
          <parameter type="Int">idVendor</parameter>
        </parameters>
      </query>
      
      
      <query code="InboundOrder_Insert">
        <sql>
          INSERT INTO InboundOrder
          (IdInboundOrder
          ,IdWhs
          ,IdOwn
          ,InboundNumber
          ,IdInboundType
          ,OrderComment
          ,IdVendor
          ,DateExpected
          ,EmissionDate
          ,ExpirationDate
          ,Status
          ,IdOutboundOrderSource
          ,IsAsn
          ,PercentLpnInspection
          ,PercentQA
          ,ShiftNumber
          ,DateCreated
          ,UserCreated
          ,HasIssues
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4)

          VALUES
          (@IdInboundOrder
          ,@IdWhs
          ,@IdOwn
          ,@InboundNumber
          ,@IdInboundType
          ,@OrderComment
          ,@IdVendor
          ,@DateExpected
          ,@EmissionDate
          ,@ExpirationDate
          ,@Status
          ,@IdOutboundOrderSource
          ,@IsAsn
          ,@PercentLpnInspection
          ,@PercentQA
          ,@ShiftNumber
          ,@dateCreated
          ,@userCreated
          ,@HasIssues
          ,@SpecialField1
          ,@SpecialField2
          ,@SpecialField3
          ,@SpecialField4)

        </sql>
        <parameters>
          <parameter type="Int">IdInboundOrder</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">InboundNumber</parameter>
          <parameter type="Int">IdInboundType</parameter>
          <parameter type="String">OrderComment</parameter>
          <parameter type="Int">IdVendor</parameter>
          <parameter type="DateTime">DateExpected</parameter>
          <parameter type="DateTime">EmissionDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="Int">IdOutboundOrderSource</parameter>
          <parameter type="Boolean">IsAsn</parameter>
          <parameter type="Int">PercentLpnInspection</parameter>
          <parameter type="Int">PercentQA</parameter>
          <parameter type="String">ShiftNumber</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
          <parameter type="Boolean">HasIssues</parameter>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="String">SpecialField3</parameter>
          <parameter type="String">SpecialField4</parameter>
        </parameters>
      </query>

      <query code="InboundOrder_Update">
        <sql>
          UPDATE InboundOrder
          SET IdInboundOrder = @IdInboundOrder
          ,IdWhs = @IdWhs
          ,IdOwn = @IdOwn
          ,InboundNumber = @InboundNumber
          ,IdInboundType = @IdInboundType
          ,OrderComment = @OrderComment
          ,IdVendor = @IdVendor
          ,DateExpected = @DateExpected
          ,EmissionDate = @EmissionDate
          ,ExpirationDate = @ExpirationDate
          ,Status = @Status
          ,IdOutboundOrderSource = @IdOutboundOrderSource
          ,IsAsn = @IsAsn
          ,PercentLpnInspection = @PercentLpnInspection
          ,PercentQA = @PercentQA
          ,ShiftNumber = @ShiftNumber
          ,DateModified = @dateModified
          ,UserModified = @userModified
          ,HasIssues = @HasIssues
          ,SpecialField1 = @SpecialField1
          ,SpecialField2 = @SpecialField2
          ,SpecialField3 = @SpecialField3
          ,SpecialField4 = @SpecialField4

          WHERE IdInboundOrder = @IdInboundOrder
        </sql>
        <parameters>
          <parameter type="Int">idInboundOrder</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">InboundNumber</parameter>
          <parameter type="Int">IdInboundType</parameter>
          <parameter type="String">OrderComment</parameter>
          <parameter type="Int">IdVendor</parameter>
          <parameter type="DateTime">DateExpected</parameter>
          <parameter type="DateTime">EmissionDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="Int">IdOutboundOrderSource</parameter>
          <parameter type="Boolean">IsAsn</parameter>
          <parameter type="Int">PercentLpnInspection</parameter>
          <parameter type="Int">PercentQA</parameter>
          <parameter type="String">ShiftNumber</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="Boolean">HasIssues</parameter>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="String">SpecialField3</parameter>
          <parameter type="String">SpecialField4</parameter>
        </parameters>
      </query>

      <query code="InboundOrder_Delete">
        <sql>
          DELETE FROM InboundTrack
          WHERE IdInboundOrder = @IdInboundOrder;

          DELETE FROM InboundDetail
          WHERE IdInboundOrder = @IdInboundOrder;

          DELETE FROM InboundOrder
          WHERE IdInboundOrder = @IdInboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdInboundOrder</parameter>
        </parameters>
      </query>

      <query code="InboundOrderDetail_ById">
        <sql>
          SELECT 
          IdInboundDetail,
          inDet.IdInboundOrder,
          inDet.LineNumber,
          inDet.LineCode,
          itm.IdItem,
          itm.Description,
          itm.ItemCode,
          Ctg.IdCtgItem,
          Ctg.CtgName,
          inDet.ItemQty,
          COALESCE((SELECT sum(ItemQty)
                    FROM ReceiptDetail redet
                    JOIN Receipt rec ON redet.IdReceipt = rec.IdReceipt
                    JOIN InboundOrder inbo ON rec.IdInboundOrder = inbo.IdInboundOrder
                    JOIN Item itm ON redet.IdItem = itm.IdItem
                    WHERE inDet.IdItem = itm.IdItem
                    AND inDet.LineNumber = redet.LineNumber
                    AND	inbo.IdInboundOrder = inDet.IdInboundOrder
                    AND COALESCE(rec.SpecialField1, '') &lt; &gt; 'NO_RECEIPTED_ITEMS')
                    , 0)AS Received,
          inDet.Status,
          inDet.LineComment,
          inDet.FifoDate,
          inDet.ExpirationDate,
          inDet.FabricationDate,
          inDet.LotNumber,
          inDet.LpnCode,
          inDet.Price,
          inDet.SpecialField1,
          inDet.SpecialField2,
          inDet.SpecialField3,
          inDet.SpecialField4,
          inDet.DateCreated,
          inDet.UserCreated,
          inDet.DateModified,
          inDet.UserModified,
          IU.UomName,
          inDet.Weight
          FROM InboundDetail inDet
          JOIN Item itm ON itm.IdItem = inDet.IdItem
          LEFT OUTER JOIN CategoryItem Ctg ON Ctg.IdCtgItem = inDet.IdCtgItem
          LEFT JOIN ItemUom IU
          ON IU.IdItem = itm.IdItem
          AND IU.IdUomType = itm.StackingSequence
          WHERE IdInboundOrder = @idInboundOrder;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idInboundOrder</parameter>
        </parameters>
      </query>

      <query code="InboundDetail_Insert">
        <sql>
          INSERT INTO InboundDetail
          (IdInboundDetail
          ,IdInboundOrder
          ,LineNumber
          ,LineCode
          ,IdItem
          ,IdCtgItem
          ,ItemQty
          ,Status
          ,LineComment
          ,FifoDate
          ,ExpirationDate
          ,FabricationDate
          ,LotNumber
          ,LpnCode
          ,Price
          ,Weight
          ,IdOutboundOrder
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4
          ,DateCreated
          ,UserCreated)

          VALUES
          (@IdInboundDetail
          ,@IdInboundOrder
          ,@LineNumber
          ,@LineCode
          ,@IdItem
          ,@IdCtgItem
          ,@ItemQty
          ,@Status
          ,@LineComment
          ,@FifoDate
          ,@ExpirationDate
          ,@FabricationDate
          ,@LotNumber
          ,@LpnCode
          ,@Price
		  ,@Weight
		  ,@IdOutboundOrder
          ,@SpecialField1
          ,@SpecialField2
          ,@SpecialField3
          ,@SpecialField4
          ,@dateCreated
          ,@userCreated)

        </sql>
        <parameters>
          <parameter type="Int">idInboundDetail</parameter>
          <parameter type="Int">idInboundOrder</parameter>
          <parameter type="Int">LineNumber</parameter>
          <parameter type="String">LineCode</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdCtgItem</parameter>
          <parameter type="Decimal">ItemQty</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">LineComment</parameter>
          <parameter type="DateTime">FifoDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="DateTime">FabricationDate</parameter>
          <parameter type="String">LotNumber</parameter>
          <parameter type="String">LpnCode</parameter>
          <parameter type="Decimal">Price</parameter>
		  <parameter type="Decimal">Weight</parameter>
		  <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="String">SpecialField3</parameter>
          <parameter type="String">SpecialField4</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="InboundDetail_Delete">
        <sql>
          DELETE FROM InboundDetail
          WHERE IdInboundDetail = @IdInboundDetail
          AND IdInboundOrder = @IdInboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdInboundDetail</parameter>
          <parameter type="Int">IdInboundOrder</parameter>
        </parameters>
      </query>

      <query code="InboundDetail_DeleteAll">
        <sql>
          DELETE FROM InboundDetail
          WHERE IdInboundOrder = @IdInboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdInboundOrder</parameter>
        </parameters>
      </query>

      <query code="InboundType_FindAll">
        <sql>
          SELECT IdInboundType
          ,InboundTypeCode
          ,InboundTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM InboundType
          WHERE Status = 1;
        </sql>
      </query>

      <query code="InboundType_FindNacInt">
        <sql>
          SELECT IdInboundType
          ,InboundTypeCode
          ,InboundTypeName
          FROM InboundType
          WHERE IdInboundType IN (1,2,9)
          AND Status = 1;
        </sql>
      </query>

      <query code="InboundType_FindDev">
        <sql>
          SELECT IdInboundType
          ,InboundTypeCode
          ,InboundTypeName
          FROM InboundType
          WHERE IdInboundType IN (6,7)
          AND Status = 1;
        </sql>
      </query>

      <query code="InboundType_FindProd">
        <sql>
          SELECT IdInboundType
          ,InboundTypeCode
          ,InboundTypeName
          FROM InboundType
          WHERE IdInboundType IN (4,5)
          AND Status = 1;
        </sql>
      </query>

      <query code="InboundType_GetTrasp">
        <sql>
          SELECT IdInboundType
          ,InboundTypeCode
          ,InboundTypeName
          FROM InboundType
          WHERE IdInboundType IN (3,8)
          AND Status = 1;
        </sql>
      </query>

      <query code="InboundType_GetById">
        <sql>
          SELECT IdInboundType
          ,InboundTypeCode
          ,InboundTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM InboundType
          WHERE IdInboundType = @IdInboundType;
        </sql>
        <parameters>
          <parameter type="Int">IdInboundType</parameter>
        </parameters>
      </query>

      <query code="IdInboundType_GetById">
        <sql>
          SELECT IdInboundType
          ,InboundTypeCode
          ,InboundTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM InboundType
          WHERE IdInboundType = @IdInboundType;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdInboundType</parameter>
        </parameters>
      </query>

      <query code="TrackInbound_FindAll">
        <sql>
          SELECT IdTrackInboundType
          ,NameTrackInboundType
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM TrackInboundType
        </sql>
      </query>

      <query code="GetTrackInboundTypeByOrder">
        <sql>
            SELECT IdTrackInboundType
            FROM InboundTrack
            WHERE IdInboundOrder = @idOrder
        </sql>
        <parameters>
          <parameter type="Int">idOrder</parameter>
        </parameters>
      </query>

      <query code="GetTrackInboundTypeByStatus">
        <sql>
          SELECT IdTrackInboundType
          ,NameTrackInboundType
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM TrackInboundType
          WHERE IdTrackInboundType IN(@SQLPart);

        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
      </query>

      <query code="InsertInboundTrack">
        <sql>
          INSERT INTO InboundTrack
          (IdInboundOrder
          ,IdTrackInboundType
          ,DateTrack)
          SELECT @IdInboundOrder,
          @IdInboundTrackType,
          @DateTrack
        </sql>
        <parameters>
          <parameter type="Int">IdInboundOrder</parameter>
          <parameter type="Int">IdInboundTrackType</parameter>
          <parameter type="DateTime">DateTrack</parameter>
        </parameters>
      </query>

      <query code="InboundOrder_GetServiceLevel">
        <sql>
          SELECT  O.OwnCode,
          O.OwnName,
          IO.IdOwn,
          W.WhsCode AS WhsCode,
          IO.InboundNumber,
          IT.InboundTypeName,
          R.ReceiptDate AS ReceiptDate,
          I.ItemCode AS ItemCode,
          I.Description AS Description,
          R.IdTruckCode AS IdTruckCode,
          SUM(ISNULL(RD.ItemQty,0)) AS Received,
          IOD.ItemQty AS Qty,
          IO.IdWhs,
          W.WhsName
          FROM InboundOrder IO

          JOIN InboundDetail IOD ON IO.IdInboundOrder = IOD.IdInboundOrder
          JOIN InboundType IT ON IO.IdInboundType = IT.IdInboundType AND IT.Status = 1
          JOIN Owner O ON IO.IdOwn = O.IdOwn
          JOIN Warehouse W ON IO.IdWhs = W.IdWhs
          JOIN Item I ON IOD.IdItem = I.IdItem
          LEFT JOIN Receipt R ON IO.IdInboundOrder = R.IdInboundOrder
          AND COALESCE(R.SpecialField1, '') &lt; &gt; 'NO_RECEIPTED_ITEMS'
          LEFT JOIN ReceiptDetail RD ON R.IdReceipt = RD.IdReceipt AND IOD.IdItem = RD.IdItem
          LEFT JOIN ReferenceDocType RDT ON R.IdReferenceDocType = RDT.IdReferenceDocType
          @SQLPart
          GROUP BY O.OwnCode, O.OwnName, IO.IdOwn, W.WhsCode, IO.InboundNumber, IT.InboundTypeName, R.ReceiptDate, I.ItemCode, I.Description, R.IdTruckCode, IOD.ItemQty, IO.IdWhs, W.WhsName;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth, GridWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IO.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">IO.InboundNumber</filter>
          <filter name="DateRange" type="textBetween">IO.EmissionDate</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Owner" type="numericIn">IO.IdOwn</filter>
          <filter name="InboundType" type="numericIn">IO.IdInboundType</filter>
          <filter name="ReferenceDocType" type="numericIn">RDT.IdReferenceDocType</filter>
        </filters>
      </query>

      <query code="GetReceiptDetailByMainFilter">
        <sql>
          SELECT W.IdWhs
          ,W.WhsCode
          ,W.WhsName
          ,O.IdOwn
          ,O.OwnCode
          ,O.OwnName
          ,V.IdVendor
          ,V.VendorCode
          ,V.VendorName
          ,IO.IdInboundOrder
          ,IO.InboundNumber
          ,IO.DateExpected
          ,ID.LineNumber
          ,ID.IdItem
          ,ID.ItemQty
          ,R.IdReceipt
          ,RD.IdReceiptDetail
          ,RD.IdItem
          ,ISNULL(RD.ItemQty,0) AS Received
          ,RD.DateCreated
          FROM InboundOrder IO
          INNER JOIN InboundDetail ID
          ON IO.IdInboundOrder = ID.IdInboundOrder
          LEFT JOIN Receipt R
          ON R.IdInboundOrder = IO.IdInboundOrder
          AND COALESCE(R.SpecialField1, '') &lt; &gt; 'NO_RECEIPTED_ITEMS'
          LEFT JOIN ReceiptDetail RD
          ON R.IdReceipt = RD.IdReceipt
          AND ID.IdItem = RD.IdItem
          AND ID.LineNumber = RD.LineNumber
          INNER JOIN Vendor V
          ON IO.IdVendor = V.IdVendor
          INNER JOIN Warehouse W
          ON IO.IdWhs = W.IdWhs
          INNER JOIN Owner O
          ON IO.IdOwn = O.IdOwn
          @SQLPart
          ORDER BY IO.IdWhs,IO.IdOwn,V.IdVendor,IO.IdInboundOrder,ID.LineNumber,ID.IdItem;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth, GridWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
          <filter name="Owner" type="numericIn">O.IdOwn</filter>
          <filter name="Name" type="textLike">V.VendorName</filter>
          <filter name="DateRange" type="textBetween">IO.DateExpected</filter>
        </filters>
      </query>
  
  
      <query code="Receipt_UpdateITFZ">
        <sql>
          UPDATE Receipt
          SET StateInterface = 'C'
          ,SpecialField1 = @SpecialField1
          ,SpecialField2 = @SpecialField2
          WHERE IdReceipt = @IdReceipt
        </sql>
        <parameters>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="Int">IdReceipt</parameter>
        </parameters>
      </query>
      
      <!-- End RECEPTION section  -->


      <!-- Begin OUTBOUND section  -->
      <query code="OutboundOrder_FindAll">
        <sql>
          SELECT DISTINCT
          (
          select SUM(Volume) from
          (
          SELECT max(IU.Volume) as Volume, iu.IdItem
          FROM OutboundDetail OD
          INNER JOIN ItemUom IU
          ON OD.IdItem = IU.IdItem
          WHERE OD.IdOutboundOrder = Out.IdOutboundOrder
          AND IU.ConversionFactor = 1
          group by iu.IdItem
          ) as  TotalVolume
          ) as TotalVolumeUom,
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs1.WhsCode,
          Whs1.ShortWhsName,
          Whs1.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          tra.IdTrackOutboundType,
          tra.NameTrackOutboundType,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Co1.CountryName	as CountryDeliveryName,
          Out.IdStateDelivery,
          St1.StateName as StateDeliveryName,
          Out.IdCityDelivery,
          Ci1.CityName as CityDeliveryName,
          Ci1.IdCity as IdCityDelivery,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          whs2.WhsCode as WhsTargetCode,
          whs2.ShortWhsName as WhsTargetShortName,
          whs2.WhsName as WhsTargetName,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          CO2.CountryName	as CountryFactName,
          Out.IdStateFact,
          St2.StateName as StateFactName,
          Out.IdCityFact,
          Ci2.CityName as CityFactName,
          Out.FactPhone,
          Out.FactEmail,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified,
          Cus.CustomerName as CustomerCustomerName,
          Cus.Address1Delv as CustomerAddress1Delv,
          Cus.Address2Delv as CustomerAddress2Delv,
          Co3.CountryName	as CustomerCountryDeliveryName,
          St3.StateName as CustomerStateDeliveryName,
          Ci3.CityName as CustomerCityDeliveryName,
          Cus.PhoneDelv as CustomerDeliveryPhone,
          Cus.FaxDelv as CustomerDeliveryFax,
          Cus.Address1Fact as CustomerAddress1Fact,
          Cus.Address2Fact as CustomerAddress2Fact,
          Co4.CountryName	as CustomerCountryFactName,
          St4.StateName as CustomerStateFactName,
          Ci4.CityName as CustomerCityFactName,
          Cus.PhoneFact as CustomerFactPhone,
          Cus.FaxFact as CustomerFactFax,
          Cus.IdCustomer as CustomerId,
          Bra.BranchName,
          Bra.BranchAddress,
          Bra.IdBranch,
          Co5.CountryName	as BranchCountryName,
          St5.StateName as BranchStateName,
          Ci5.CityName as BranchCityName,
          (SELECT    TrackOutboundDate
          FROM Dispatch D
          WHERE D.IdOutboundOrder = Out.IdOutboundOrder
          AND D.IdDispatchType IN (6, 23)
          AND D.TrackOutboundDate = ( SELECT MIN(D.TrackOutboundDate)
          FROM Dispatch D
          WHERE D.IdOutboundOrder = Out.IdOutboundOrder
          AND D.IdDispatchType IN (6, 23))
          ) as ShippedDate,
          out.SpecialField1,
          out.SpecialField2,
          out.SpecialField3,
          out.SpecialField4,
          OC.Percentage,
          OC.SimulationDate,
          Out.Comment
          FROM OutboundOrder Out
          LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType AND OutType.Status = 1
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
          LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs
          LEFT JOIN Customer Cus ON Out.CustomerCode = Cus.CustomerCode AND Out.IdOwn = Cus.IdOwn
          LEFT JOIN Branch Bra ON Out.IdBranch = Bra.IdBranch AND Out.IdOwn = Bra.IdOwn AND Cus.IdCustomer = Bra.IdCustomer

          LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
          LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
          LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity

          LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
          LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
          LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity

          LEFT JOIN Country Co3 ON Cus.IdCountryDelv = Co3.IdCountry
          LEFT JOIN State St3 ON Cus.IdStateDelv = St3.IdState
          LEFT JOIN City Ci3 ON Cus.IdCityDelv = Ci3.IdCity

          LEFT JOIN Country Co4 ON Cus.IdCountryFact = Co4.IdCountry
          LEFT JOIN State St4 ON Cus.IdStateFact = St4.IdState
          LEFT JOIN City Ci4 ON Cus.IdCityFact = Ci4.IdCity

          LEFT JOIN Country Co5 ON Bra.IdCountry = Co5.IdCountry
          LEFT JOIN State St5 ON Bra.IdState = St5.IdState
          LEFT JOIN City Ci5 ON Bra.IdCity = Ci5.IdCity

          LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
          JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
          LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
          LEFT JOIN OutboundOrderCompliance OC ON OC.IdOutboundOrder = Out.IdOutboundOrder
          @SQLPart
          ORDER BY Whs1.ShortWhsName,Own.OwnName,OutType.OutboundTypeName,Out.OutboundNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth, GridWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">Whs1.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">Out.OutboundNumber</filter>
          <filter name="DateRange" type="textBetween">Out.EmissionDate</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">Own.IdOwn</filter>
          <filter name="Name" type="textLike">Out.CustomerCode</filter>
          <filter name="Description" type="textLike">Out.CustomerName</filter>
          <filter name="TrackOutboundType" type="numericIn">tra.IdTrackOutboundType</filter>
          <filter name="OutboundType" type="numericIn">OutType.IdOutboundType</filter>
          <filter name="ExpectedDateRange" type="textBetween">Out.ExpectedDate</filter>
          <filter name="ExpirationDateRange" type="textBetween">Out.ExpirationDate</filter>
          <filter name="PriorityRange" type="textBetween">Out.Priority</filter>
          <filter name="Customer" type="textLike">Out.CustomerName</filter>
          <filter name="Carrier" type="textLike">Car.CarrierCode</filter>
          <filter name="Route" type="textLike">Out.RouteCode</filter>
          <filter name="Country" type="numericEqual">Out.IdCountryDelivery</filter>
          <filter name="State" type="numericEqual">Out.IdStateDelivery</filter>
          <filter name="City" type="numericEqual">Out.IdCityDelivery</filter>
        </filters>
      </query>

	<query code="GetStockByLpnAndTypeLocation">
		<sql>
			SELECT
			S.StockId,
			S.IdWhs,
			S.IdOwn,
			S.IdLocCode,
			S.IdItem,
			S.IdCtgItem,
			S.ItemQty,
			S.TotalWeight,
			S.TotalVolumen,
			S.Status,
			S.FifoDate,
			S.ExpirationDate,
			S.FabricationDate,
			S.LotNumber,
			S.IdLpnCode,
			S.LpnTypeCode,
			S.IdLpnCodeContainer,
			S.LpnTypeCodeContainer,
			S.Price,
			S.IdReceipt,
			S.IdInboundOrder,
			S.InboundLineNumber,
			S.IdOutboundOrder,
			S.OutboundLineNumber,
			S.SealNumber,
			S.ReasonCode,
			S.HoldCode,
			S.IdInboundOrder,
			S.InboundLineNumber,
			S.IdOutboundOrder,
			S.OutboundLineNumber,
			I.IdItem,
			I.ItemCode,
			I.Weight,
			I.Description,
			I.Status,
			L.IdWhs,
			L.IdLocCode,
			L.LocCode,
			L.Status,
			L.LocTypeCode,
			LP.IdLpnCode,
			LP.FifoDate,
			LP.IdLpnType,
			LP.Status,
			LT.LpnTypeCode,
			LT.LpnTypeName,
			LT.Tare,
			LT.Volume,
			LT.Length,
			LT.Width,
			LT.Height,
			LT.NextAvailableNumber,
			LT.WeightCapacity,
			LT.VolumeCapacity
			FROM Stock S
			INNER JOIN LPN LP on S.IdLpnCode = LP.IdLpnCode
			INNER JOIN Item I on S.IdItem = I.IdItem
			INNER JOIN LPNType LT on LP.IdLpnType = LT.IdLpnType
			INNER JOIN Location L on L.IdLocCode = S.IdLocCode
			WHERE S.IdLpnCode = @idLpnCode
			AND L.LocTypeCode = @locTypeCode
		</sql>
		<parameters>
			<parameter type="String">idLpnCode</parameter>
			<parameter type="String">locTypeCode</parameter>
		</parameters>
	</query>
  
      <query code="OutboundOrder_FindAll_WithSubQuerys">
        <sql>
          SELECT DISTINCT
          (
			      SELECT SUM(Volume) from 
			      (
				      SELECT max(IU.Volume) as Volume, iu.IdItem
					      FROM OutboundDetail OD
					      INNER JOIN ItemUom IU
					      ON OD.IdItem = IU.IdItem
					      WHERE OD.IdOutboundOrder = Out.IdOutboundOrder
					      AND IU.ConversionFactor = 1
					      group by iu.IdItem 
			      ) as  TotalVolume 
		      ) as TotalVolumeUom,
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs1.WhsCode,
          Whs1.ShortWhsName,
          Whs1.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          tra.IdTrackOutboundType,
          tra.NameTrackOutboundType,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Co1.CountryName	as CountryDeliveryName,
          Out.IdStateDelivery,
          St1.StateName as StateDeliveryName,
          Out.IdCityDelivery,
          Ci1.CityName as CityDeliveryName,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          whs2.WhsCode as WhsTargetCode,
          whs2.ShortWhsName as WhsTargetShortName,
          whs2.WhsName as WhsTargetName,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          CO2.CountryName	as CountryFactName,
          Out.IdStateFact,
          St2.StateName as StateFactName,
          Out.IdCityFact,
          Ci2.CityName as CityFactName,
          Out.FactPhone,
          Out.FactEmail,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified,
          Cus.CustomerName as CustomerCustomerName,
          Cus.Address1Delv as CustomerAddress1Delv,
          Cus.Address2Delv as CustomerAddress2Delv,
          Co3.CountryName	as CustomerCountryDeliveryName,
          St3.StateName as CustomerStateDeliveryName,
          Ci3.CityName as CustomerCityDeliveryName,
          Cus.PhoneDelv as CustomerDeliveryPhone,
          Cus.FaxDelv as CustomerDeliveryFax,
          Cus.Address1Fact as CustomerAddress1Fact,
          Cus.Address2Fact as CustomerAddress2Fact,
          Co4.CountryName	as CustomerCountryFactName,
          St4.StateName as CustomerStateFactName,
          Ci4.CityName as CustomerCityFactName,
          Cus.PhoneFact as CustomerFactPhone,
          Cus.FaxFact as CustomerFactFax,
          Bra.BranchName,
          Bra.BranchAddress,
          Bra.IdBranch,
          Co5.CountryName	as BranchCountryName,
          St5.StateName as BranchStateName,
          Ci5.CityName as BranchCityName,
          Out.SpecialField1,
          Out.SpecialField2,
          Out.SpecialField3,
          Out.SpecialField4
          FROM OutboundOrder Out
          INNER JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType AND OutType.Status = 1
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
          LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs          
          LEFT JOIN Customer Cus ON Out.CustomerCode = Cus.CustomerCode AND Out.IdOwn = Cus.IdOwn
          LEFT JOIN Branch Bra ON Out.IdBranch = Bra.IdBranch AND Out.IdOwn = Bra.IdOwn AND Cus.IdCustomer = Bra.IdCustomer
          
          LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
          LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
          LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity
          
          LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
          LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
          LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity
          
          LEFT JOIN Country Co3 ON Cus.IdCountryDelv = Co3.IdCountry
          LEFT JOIN State St3 ON Cus.IdStateDelv = St3.IdState
          LEFT JOIN City Ci3 ON Cus.IdCityDelv = Ci3.IdCity
          
          LEFT JOIN Country Co4 ON Cus.IdCountryFact = Co4.IdCountry
          LEFT JOIN State St4 ON Cus.IdStateFact = St4.IdState
          LEFT JOIN City Ci4 ON Cus.IdCityFact = Ci4.IdCity
          
          LEFT JOIN Country Co5 ON Bra.IdCountry = Co5.IdCountry
          LEFT JOIN State St5 ON Bra.IdState = St5.IdState
          LEFT JOIN City Ci5 ON Bra.IdCity = Ci5.IdCity
          
          LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
          JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
          LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
          @SQLPart          
          
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">Whs1.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">Out.OutboundNumber</filter>
          <filter name="DateRange" type="textBetween">Out.EmissionDate</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">Own.IdOwn</filter>
          <filter name="Name" type="textLike">Out.CustomerCode</filter>
          <filter name="Description" type="textLike">Out.CustomerName</filter>
          <filter name="TrackOutboundType" type="numericIn">tra.IdTrackOutboundType</filter>
          <filter name="OutboundType" type="numericIn">OutType.IdOutboundType</filter>
          <filter name="ExpectedDateRange" type="textBetween">Out.ExpectedDate</filter>
          <filter name="ExpirationDateRange" type="textBetween">Out.ExpirationDate</filter>
          <filter name="PriorityRange" type="textBetween">Out.Priority</filter>
          <filter name="Customer" type="textLike">Out.CustomerName</filter>
          <filter name="Carrier" type="textLike">Car.CarrierCode</filter>
          <filter name="Route" type="textLike">Out.RouteCode</filter>
          <filter name="Country" type="numericEqual">Out.IdCountryDelivery</filter>
          <filter name="State" type="numericEqual">Out.IdStateDelivery</filter>
          <filter name="City" type="numericEqual">Out.IdCityDelivery</filter>
        </filters>
        <sub-querys>
          
          <sub-query code="ExistsDocumentInWave">
            <sql>
				GetStockByLpnAndTypeLocation
				AND EXISTS (SELECT 1
				FROM Task T INNER JOIN
				TaskOutboundOrder TOO ON T.IdTask = TOO.IdTask INNER JOIN
				OutboundOrder OutOrd ON OutOrd.IdOutboundOrder = TOO.IdOutboundOrder
				WHERE T.TaskTypeCode = 'PIKWV'
				AND T.IdOwn = Own.IdOwn
				AND T.IdWhs = Whs1.IdWhs
				AND T.IdDocumentBound = Out.IdOutboundOrder
				AND OutOrd.OutboundNumber @outboundNumber )
			</sql>
            <parameters>
              <parameter type="StringLike">outboundNumber</parameter>
            </parameters>
          </sub-query>
          
          <sub-query code="ExistsDocumentInBatch">
            <sql>
               AND EXISTS (SELECT 1
				                     FROM Task T 
                             JOIN TaskDetail TD
	                             ON T.IdTask = TD.IdTask
				                    WHERE T.TaskTypeCode = 'PIKBT'
				                      AND T.IdOwn = Own.IdOwn
				                      AND T.IdWhs = Whs1.IdWhs
                              AND TD.IdDocumentBound = Out.IdOutboundOrder
							                AND T.IdTask = @idTask)
            </sql>
            <parameters>
              <parameter type="Int">idTask</parameter>
            </parameters>
          </sub-query>

          <sub-query code="ExistsDocumentInWaveByIdOutboundOrder">
            <sql>
              AND EXISTS (SELECT 1
              FROM Task T INNER JOIN
              TaskOutboundOrder TOO ON T.IdTask = TOO.IdTask INNER JOIN
              OutboundOrder OutOrd ON OutOrd.IdOutboundOrder = TOO.IdOutboundOrder
              WHERE T.TaskTypeCode = 'PIKWV'
              AND T.IdOwn = Own.IdOwn
              AND T.IdWhs = Whs1.IdWhs
              AND T.IdDocumentBound = Out.IdOutboundOrder
              AND OutOrd.IdOutboundOrder = @idOutboundOrder )
            </sql>
            <parameters>
              <parameter type="Int">idOutboundOrder</parameter>
            </parameters>
          </sub-query>

		<sub-query code="DocumentsInWaveTaskSimulation">
			<sql>
				INNER JOIN TaskOutboundOrderSimulation Toos ON Toos.IdOutbound = Out.IdOutboundOrder
		        AND Toos.IdTask = @idTask
			</sql>
			<parameters>
				<parameter type="Int">idTask</parameter>
			</parameters>
		</sub-query>
                    
        </sub-querys>
      </query>

      <query code="OutboundOrder_FindAllPrecubing">
        <sql>
          SELECT DISTINCT
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs1.WhsCode,
          Whs1.ShortWhsName,
          Whs1.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          tra.IdTrackOutboundType,
          tra.NameTrackOutboundType,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Co1.CountryName	as CountryDeliveryName,
          Out.IdStateDelivery,
          St1.StateName as StateDeliveryName,
          Out.IdCityDelivery,
          Ci1.CityName as CityDeliveryName,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          whs2.WhsCode as WhsTargetCode,
          whs2.ShortWhsName as WhsTargetShortName,
          whs2.WhsName as WhsTargetName,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          CO2.CountryName	as CountryFactName,
          Out.IdStateFact,
          St2.StateName as StateFactName,
          Out.IdCityFact,
          Ci2.CityName as CityFactName,
          Out.FactPhone,
          Out.FactEmail,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified,
          (SELECT  SUM(FLOOR(OD.ItemQty/(CASE WHEN IU.ConversionFactor = 0 THEN null ELSE IU.ConversionFactor END)))
          FROM OutboundDetail OD INNER JOIN
          ItemUom IU ON OD.IdItem = IU.IdItem AND UPPER(IU.UomName) = 'CAJA'
          WHERE OD.IdOutboundOrder = Out.IdOutboundOrder) AS SpecialField4
          FROM OutboundOrder Out

          LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType AND OutType.Status = 1
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
          LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs
          LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
          LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
          LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity
          LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
          LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
          LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity
          LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
          JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
          LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
          @SQLPart
          ORDER BY Whs1.ShortWhsName,Own.OwnName,OutType.OutboundTypeName,Out.OutboundNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth, GridWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">Whs1.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">Out.OutboundNumber</filter>
          <filter name="DateRange" type="textBetween">Out.EmissionDate</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">Own.IdOwn</filter>
          <filter name="Name" type="textLike">Out.CustomerCode</filter>
          <filter name="Description" type="textLike">Out.CustomerName</filter>
          <filter name="TrackOutboundType" type="numericIn">tra.IdTrackOutboundType</filter>
          <filter name="OutboundType" type="numericIn">OutType.IdOutboundType</filter>
          <filter name="ExpectedDateRange" type="textBetween">Out.ExpectedDate</filter>
          <filter name="ExpirationDateRange" type="textBetween">Out.ExpirationDate</filter>
          <filter name="PriorityRange" type="textBetween">Out.Priority</filter>
          <filter name="Customer" type="textLike">Out.CustomerName</filter>
          <filter name="Carrier" type="textLike">Car.CarrierCode</filter>
          <filter name="Route" type="textLike">Out.RouteCode</filter>
          <filter name="Country" type="numericEqual">Out.IdCountryDelivery</filter>
          <filter name="State" type="numericEqual">Out.IdStateDelivery</filter>
          <filter name="City" type="numericEqual">Out.IdCityDelivery</filter>
        </filters>
      </query>

  <query code="OutboundOrder_FindAllPackageB2B">
    <sql>
      SELECT DISTINCT
      Out.IdOutboundOrder,
      Out.IdWhs,
      Whs1.WhsCode,
      Whs1.ShortWhsName,
      Whs1.WhsName,
      Own.IdOwn,
      Own.OwnCode,
      Own.OwnName,
      Own.TradeName,
      Out.OutboundNumber,
      OutType.IdOutboundType,
      OutType.OutboudTypeCode,
      OutType.OutboundTypeName,
      Out.Status,
      Out.ReferenceNumber,
      Out.LoadCode,
      Out.LoadSeq,
      Out.Priority,
      Out.InmediateProcess,
      Out.EmissionDate,
      Out.ExpectedDate,
      Out.ShipmentDate,
      Out.ExpirationDate,
      Out.CancelDate,
      Out.CancelUser,
      tra.IdTrackOutboundType,
      tra.NameTrackOutboundType,
      Out.CustomerCode,
      Out.CustomerName,
      Out.DeliveryAddress1,
      Out.DeliveryAddress2,
      Out.IdCountryDelivery,
      Co1.CountryName AS CountryDeliveryName,
      Out.IdStateDelivery,
      St1.StateName AS StateDeliveryName,
      Out.IdCityDelivery,
      Ci1.CityName AS CityDeliveryName,
      Out.DeliveryPhone,
      Out.DeliveryEmail,
      Out.IdWhsTarget,
      whs2.WhsCode AS WhsTargetCode,
      whs2.ShortWhsName AS WhsTargetShortName,
      whs2.WhsName AS WhsTargetName,
      Out.FullShipment,
      Out.CarrierCode,
      Car.CarrierName,
      Out.RouteCode,
      Out.Plate,
      Out.Invoice,
      Out.FactAddress1,
      Out.FactAddress2,
      Out.IdCountryFact,
      CO2.CountryName	AS CountryFactName,
      Out.IdStateFact,
      St2.StateName AS StateFactName,
      Out.IdCityFact,
      Ci2.CityName AS CityFactName,
      Out.FactPhone,
      Out.FactEmail,
      Out.DateCreated,
      Out.UserCreated,
      Out.DateModified,
      Out.UserModified,
      COALESCE((SELECT  SUM(FLOOR(OD.ItemQty/(CASE WHEN IU.ConversionFactor = 0 THEN null ELSE IU.ConversionFactor END)))
      FROM OutboundDetail OD INNER JOIN
      ItemUom IU ON OD.IdItem = IU.IdItem INNER JOIN
      UomType UT ON UT.IdUomType = iu.IdUomType
      WHERE OD.IdOutboundOrder = Out.IdOutboundOrder
      AND IU.Status = 1
      AND UPPER(UT.UomName) = UPPER(CB2B.UomTypeLpnCode)),0) AS SpecialField4,
      CB2B.UomTypeLpnCode
      FROM OutboundOrder Out
      INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType AND OutType.Status = 1
      INNER JOIN Owner Own ON Out.IdOwn = Own.IdOwn
      INNER JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
      LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs
      INNER JOIN Customer C ON C.CustomerCode = Out.CustomerCode AND C.IdOwn = Out.IdOwn
      LEFT JOIN CustomerB2B CB2B ON CB2B.IdCustomer = C.IdCustomer
      LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
      LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
      LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
      LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity
      LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
      LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
      LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity
      LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
      LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
      JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
      AND tra.IdTrackOutboundType = 1
      @SQLPart
      ORDER BY Whs1.ShortWhsName,Own.OwnName,OutType.OutboundTypeName,Out.OutboundNumber;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth, GridWidth, GridWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      AND IdModule = @idModule
      AND IdPage = @idPage
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="Int">idModule</parameter>
      <parameter type="String">idPage</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericIn">Whs1.IdWhs</filter>
      <filter name="DocumentNbr" type="textLike">Out.OutboundNumber</filter>
      <filter name="Code" type="textLike">Out.ReferenceNumber</filter>
      <filter name="DateRange" type="textBetween">Out.EmissionDate</filter>
      <filter name="Item" type="textLike">itm.ItemCode</filter>
      <filter name="Owner" type="numericIn">Own.IdOwn</filter>
      <filter name="Name" type="textLike">Out.CustomerCode</filter>
      <filter name="Description" type="textLike">Out.CustomerName</filter>
      <filter name="OutboundType" type="numericIn">OutType.IdOutboundType</filter>
      <filter name="ExpectedDateRange" type="textBetween">Out.ExpectedDate</filter>
      <filter name="ExpirationDateRange" type="textBetween">Out.ExpirationDate</filter>
      <filter name="PriorityRange" type="textBetween">Out.Priority</filter>
      <filter name="Customer" type="textLike">Out.CustomerName</filter>
      <filter name="Carrier" type="textLike">Car.CarrierCode</filter>
      <filter name="Route" type="textLike">Out.RouteCode</filter>
      <filter name="Country" type="numericEqual">Out.IdCountryDelivery</filter>
      <filter name="State" type="numericEqual">Out.IdStateDelivery</filter>
      <filter name="City" type="numericEqual">Out.IdCityDelivery</filter>
    </filters>
  </query>
  
      <query code="OutboundOrder_FindBy_PickSelect">
        <sql>
          SELECT DISTINCT
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs1.WhsCode,
          Whs1.ShortWhsName,
          Whs1.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          tra.IdTrackOutboundType,
          tra.NameTrackOutboundType,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Co1.CountryName	as CountryDeliveryName,
          Out.IdStateDelivery,
          St1.StateName as StateDeliveryName,
          Out.IdCityDelivery,
          Ci1.CityName as CityDeliveryName,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          whs2.WhsCode as WhsTargetCode,
          whs2.ShortWhsName as WhsTargetShortName,
          whs2.WhsName as WhsTargetName,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          CO2.CountryName	as CountryFactName,
          Out.IdStateFact,
          St2.StateName as StateFactName,
          Out.IdCityFact,
          Ci2.CityName as CityFactName,
          Out.FactPhone,
          Out.FactEmail,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified
          FROM OutboundOrder Out
          LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType AND OutType.Status = 1
          AND OutType.OutboudTypeCode IN ('DPRV','DPPM','DPC')
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
          LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs
          LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
          LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
          LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity
          LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
          LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
          LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity
          JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
          @SQLPart
          ORDER BY Out.IdOutboundOrder DESC;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport,
          Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">Whs1.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">Out.OutboundNumber</filter>
          <filter name="DateRange" type="textBetween">Out.EmissionDate</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">Own.IdOwn</filter>
        </filters>
      </query>

      <query code="OutboundOrder_GetByAnyParameter">
        <sql>
          SELECT
          OO.IdOutboundOrder,
          OO.IdWhs,
          W.WhsCode,
          W.WhsName,
          OO.IdOwn,
          O.OwnCode,
          O.OwnName,
          OO.OutboundNumber,
          OO.IdOutboundType,
          OT.OutboudTypeCode,
          OT.OutboundTypeName,
          OO.Status,
          OO.ReferenceNumber,
          OO.LoadCode,
          OO.LoadSeq,
          OO.Priority,
          OO.InmediateProcess,
          OO.EmissionDate,
          OO.ExpectedDate,
          OO.ShipmentDate,
          OO.ExpirationDate,
          OO.CancelDate,
          OO.CancelUser,
          OO.CustomerCode,
          OO.CustomerName,
          OO.DeliveryAddress1,
          OO.DeliveryAddress2,
          OO.IdCountryDelivery,
          OO.IdStateDelivery,
          OO.IdCityDelivery,
          OO.DeliveryPhone,
          OO.DeliveryEmail,
          OO.IdWhsTarget,
          OO.FullShipment,
          OO.CarrierCode,
          OO.RouteCode,
          OO.Plate,
          OO.Invoice,
          OO.FactAddress1,
          OO.FactAddress2,
          OO.IdCountryFact,
          OO.IdStateFact,
          OO.IdCityFact,
          OO.FactPhone,
          OO.FactEmail,
          OO.AllowCrossDock,
          OO.AllowBackOrder,
          OO.IdBranch,
          OO.SpecialField1,
          OO.SpecialField2,
          OO.SpecialField3,
          OO.SpecialField4,
          OO.DateCreated,
          OO.UserCreated,
          OO.DateModified,
          OO.UserModified,
          LT.IdTrackOutboundType,
          LT.NameTrackOutboundType,
          LT.DateTrack
          FROM OutboundOrder OO INNER JOIN
          Owner O ON OO.IdOwn = O.IdOwn INNER JOIN
          Warehouse W ON OO.IdWhs = W.IdWhs INNER JOIN
          OutboundType OT ON OO.IdOutboundType = OT.IdOutboundType AND OT.Status = 1 INNER JOIN
          v_Oub_LatestTrack LT ON LT.IdOutboundOrder = OO.IdOutboundOrder
          WHERE 1=1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdOutboundOrder" type="numericEqual">OO.IdOutboundOrder</filter>
          <filter name="IdWhs" type="numericEqual">OO.IdWhs</filter>
          <filter name="IdOwn" type="numericEqual">OO.IdOwn</filter>
          <filter name="OutboundNumber" type="textEqual">OO.OutboundNumber</filter>
          <filter name="IdOutboundType" type="numericEqual">OO.IdOutboundType</filter>
          <filter name="Status" type="numericEqual">OO.Status</filter>
          <filter name="ReferenceNumber" type="textEqual">OO.ReferenceNumber</filter>
          <filter name="LoadCode" type="numericEqual">OO.LoadCode</filter>
          <filter name="LoadSeq" type="numericEqual">OO.LoadSeq</filter>
          <filter name="Priority" type="numericEqual">OO.Priority</filter>
          <filter name="InmediateProcess" type="numericEqual">OO.InmediateProcess</filter>
          <filter name="EmissionDate" type="textEqual">OO.EmissionDate</filter>
          <filter name="ExpectedDate" type="textEqual">OO.ExpectedDate</filter>
          <filter name="ShipmentDate" type="textEqual">OO.ShipmentDate</filter>
          <filter name="ExpirationDate" type="textEqual">OO.ExpirationDate</filter>
          <filter name="CancelDate" type="textEqual">OO.CancelDate</filter>
          <filter name="CancelUser" type="textEqual">OO.CancelUser</filter>
          <filter name="CustomerCode" type="textEqual">OO.CustomerCode</filter>
          <filter name="CustomerName" type="textEqual">OO.CustomerName</filter>
          <filter name="DeliveryAddress1" type="textEqual">OO.DeliveryAddress1</filter>
          <filter name="DeliveryAddress2" type="textEqual">OO.DeliveryAddress2</filter>
          <filter name="IdCountryDelivery" type="numericEqual">OO.IdCountryDelivery</filter>
          <filter name="IdStateDelivery" type="numericEqual">OO.IdStateDelivery</filter>
          <filter name="IdCityDelivery" type="numericEqual">OO.IdCityDelivery</filter>
          <filter name="DeliveryPhone" type="textEqual">OO.DeliveryPhone</filter>
          <filter name="DeliveryEmail" type="textEqual">OO.DeliveryEmail</filter>
          <filter name="IdWhsTarget" type="numericEqual">OO.IdWhsTarget</filter>
          <filter name="FullShipment" type="numericEqual">OO.FullShipment</filter>
          <filter name="CarrierCode" type="textEqual">OO.CarrierCode</filter>
          <filter name="RouteCode" type="textEqual">OO.RouteCode</filter>
          <filter name="Plate" type="textEqual">OO.Plate</filter>
          <filter name="Invoice" type="textEqual">OO.Invoice</filter>
          <filter name="FactAddress1" type="textEqual">OO.FactAddress1</filter>
          <filter name="FactAddress2" type="textEqual">OO.FactAddress2</filter>
          <filter name="IdCountryFact" type="numericEqual">OO.IdCountryFact</filter>
          <filter name="IdStateFact" type="numericEqual">OO.IdStateFact</filter>
          <filter name="IdCityFact" type="numericEqual">OO.IdCityFact</filter>
          <filter name="FactPhone" type="textEqual">OO.FactPhone</filter>
          <filter name="FactEmail" type="textEqual">OO.FactEmail</filter>
          <filter name="AllowCrossDock" type="numericEqual">OO.AllowCrossDock</filter>
          <filter name="AllowBackOrder" type="numericEqual">OO.AllowBackOrder</filter>
          <filter name="SpecialField1" type="textEqual">OO.SpecialField1</filter>
          <filter name="SpecialField2" type="textEqual">OO.SpecialField2</filter>
          <filter name="SpecialField3" type="textEqual">OO.SpecialField3</filter>
          <filter name="SpecialField4" type="textEqual">OO.SpecialField4</filter>
          <filter name="DateCreated" type="textEqual">OO.DateCreated</filter>
          <filter name="UserCreated" type="textEqual">OO.UserCreated</filter>
          <filter name="DateModified" type="textEqual">OO.DateModified</filter>
          <filter name="UserModified" type="textEqual">OO.UserModified</filter>
        </filters>
        <sub-querys>
          <sub-query code="OrderByIdOutboundOrder">
            <sql>
              ORDER BY OO.IdOutboundOrder
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="ForRedispatch">
            <sql>
              AND OLT.IdTrackOutboundType IN(71,42)
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="ForShipping">
            <sql>
              AND OLT.IdTrackOutboundType BETWEEN 11 AND 51
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="ForAuditLoad">
            <sql>
              AND OLT.IdTrackOutboundType BETWEEN 51 AND 61
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="ForUnpicking">
            <sql>
              AND OLT.IdTrackOutboundType BETWEEN 11 AND 61
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="ForUnload">
            <sql>
              AND OLT.IdTrackOutboundType BETWEEN 51 AND 70
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="ByLpnParent">
            <sql>
              AND EXISTS(SELECT S.StockId
              FROM Stock S INNER JOIN
              LPN L ON S.IdLpnCode = L.IdLpnCode
              WHERE L.LPnParent = @IdLpnParent
              AND S.IdOutboundOrder = OO.IdOutboundOrder)
            </sql>
            <parameters>
              <parameter type="String">IdLpnParent</parameter>
            </parameters>
          </sub-query>
          <sub-query code="ByLpnParentAndTrackCancel">
            <sql>
              AND EXISTS(SELECT S.StockId
              FROM Stock S INNER JOIN
              LPN L ON S.IdLpnCode = L.IdLpnCode
              WHERE L.LPnParent = @IdLpnParent
              AND S.IdOutboundOrder = OO.IdOutboundOrder)
              AND EXISTS(SELECT OT.IdOutboundOrder
              FROM OutboundTrack OT
              WHERE OO.IdOutboundOrder = OT.IdOutboundOrder
              AND OT.IdTrackOutboundType = 102)
            </sql>
            <parameters>
              <parameter type="String">IdLpnParent</parameter>
            </parameters>
          </sub-query>
          <sub-query code="ForLoadTrack">
            <sql>
              AND OLT.IdTrackOutboundType BETWEEN 51 AND 69
            </sql>
            <parameters>
            </parameters>
          </sub-query>
        </sub-querys>
      </query>


      <query code="OutboundOrder_GetByIdWave">
        <sql>
          SELECT DISTINCT
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs1.WhsCode,
          Whs1.ShortWhsName,
          Whs1.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          tra.IdTrackOutboundType,
          tra.NameTrackOutboundType,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Co1.CountryName	as CountryDeliveryName,
          Out.IdStateDelivery,
          St1.StateName as StateDeliveryName,
          Out.IdCityDelivery,
          Ci1.CityName as CityDeliveryName,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          whs2.WhsCode as WhsTargetCode,
          whs2.ShortWhsName as WhsTargetShortName,
          whs2.WhsName as WhsTargetName,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          CO2.CountryName	as CountryFactName,
          Out.IdStateFact,
          St2.StateName as StateFactName,
          Out.IdCityFact,
          Ci2.CityName as CityFactName,
          Out.FactPhone,
          Out.FactEmail,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified
          FROM OutboundOrder Out

          LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType AND OutType.Status = 1
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
          LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs
          LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
          LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
          LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity
          LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
          LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
          LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity
          LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
          JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
          LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
          WHERE EXISTS (SELECT 1
          FROM Task T INNER JOIN
          TaskOutboundOrder TOO ON T.IdTask = TOO.IdTask
          WHERE T.TaskTypeCode = 'PIKWV'
          AND T.IdOwn = Own.IdOwn
          AND T.IdWhs = Whs1.IdWhs
          AND TOO.IdOutboundOrder = Out.IdOutboundOrder
          AND T.IdDocumentBound = @idOutboundOrder)
          AND Own.IdOwn = @idOwn
          AND Whs1.IdWhs = @idWhs
          ORDER BY Whs1.ShortWhsName,Own.OwnName,OutType.OutboundTypeName,Out.OutboundNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth, GridWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idOutboundOrder</parameter>
          <parameter type="Int">idOwn</parameter>
          <parameter type="Int">idWhs</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
      </query>

      <query code="OutboundOrder_SaveAppointmentNumber">
        <sql>
          UPDATE OutboundOrder
             SET Invoice = @appointmentNumber,
                 UserModified = @userModified,
                 DateModified = @dateModified
           WHERE IdOwn = @idOwn
             AND IdWhs = @idWhs
             AND IdOutboundOrder IN (
                                      SELECT   DISTINCT(IdOutboundOrder)
		                                      FROM Task T 
		                                      JOIN TaskOutboundOrder TOO 
			                                      ON T.IdTask = TOO.IdTask
	                                       WHERE T.TaskTypeCode = 'PIKWV'
		                                       AND T.IdOwn = @idOwn
		                                       AND T.IdWhs = @idWhs
		                                       AND T.IdDocumentBound = @idOutboundOrder
                                    )
        </sql>
        <parameters>
          <parameter type="String">appointmentNumber</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="Int">idOwn</parameter>
          <parameter type="Int">idWhs</parameter>
          <parameter type="Int">idOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="OutboundOrder_GetAppointmentNumber">
        <sql>
          SELECT Invoice
            FROM OutboundOrder
           WHERE IdOwn = @idOwn
             AND IdWhs = @idWhs
             AND IdOutboundOrder = @idOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">idOwn</parameter>
          <parameter type="Int">idWhs</parameter>
          <parameter type="Int">idOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="OutboundDetail_UpdateStatusByOutboundOrder">
        <sql>
          UPDATE OutboundDetail
          SET Status = @status
          WHERE IdOutboundOrder = @idOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">idOutboundOrder</parameter>
          <parameter type="Boolean">status</parameter>
        </parameters>
      </query>

      <query code="OutboundOrder_UpdateStateInterface">
        <sql>
          UPDATE OutboundOrder
          SET StateInterface = @StateInterface,
          DateModified = @DateModified,
          UserModified = @UserModified
          WHERE IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="String">StateInterface</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>
     
      <!-- End OUTBOUND section  -->
      <query code="SatisfactionLevel_GetByAnyParameter">
        <sql>
          SELECT
          OO.IdOutboundOrder,
          OO.IdWhs,
          W.WhsName,
          OO.IdOwn,
          O.OwnName,
          OO.OutboundNumber,
          OO.IdOutboundType,
          OT.OutboundTypeName,
          VLT.IdTrackOutboundType,
          VLT.NameTrackOutboundType,
          COALESCE(REQ.TotRequest,0) Request,
          COALESCE(PICK.TotPicking,0) Picking,
          COALESCE(REQ.TotRequest,0) - COALESCE(PICK.TotPicking,0) Diference,
          COALESCE(STK.InStock,0) InStock,
          PctSatisfaction = CASE WHEN (COALESCE(REQ.TotRequest,0) - COALESCE(PICK.TotPicking,0)) &lt;= COALESCE(STK.InStock,0) THEN 100.0
          ELSE ROUND(COALESCE(STK.InStock,0)*100 / (COALESCE(REQ.TotRequest,0) - COALESCE(PICK.TotPicking,0)),1) END,
          OO.EmissionDate,
          OO.ExpectedDate,
          OO.CustomerCode,
          OO.CustomerName,
          OO.DeliveryAddress1,
          OO.IdCountryDelivery,
          C.CountryName CountryDeliveryName,
          OO.IdStateDelivery,
          S.StateName StateDeliveryName,
          OO.IdCityDelivery,
          CIT.CityName CityDeliveryName,
          OO.CarrierCode,
          OO.RouteCode
          FROM OutboundOrder OO
          INNER JOIN Warehouse W
          ON W.IdWhs = OO.IdWhs
          INNER JOIN Owner O
          ON O.IdOwn = OO.IdOwn
          INNER JOIN OutboundType OT
          ON OT.IdOutboundType = OO.IdOutboundType
          AND OT.Status = 1
          LEFT JOIN v_Oub_LatestTrack VLT
          ON VLT.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN Country C
          ON C.IdCountry = OO.IdCountryDelivery
          LEFT JOIN State S
          ON S.IdState = OO.IdStateDelivery
          LEFT JOIN City CIT
          ON CIT.IdCity = OO.IdCityDelivery
          LEFT JOIN (SELECT D.IdOutboundOrder, SUM(DD.ItemQty) TotPicking
          FROM Dispatch D
          INNER JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE DD.IdWmsProcessCode IN ('PICK', 'PKBAT', 'PKKIT', 'PKPSS', 'PKUNK', 'PKVAS', 'PKWAV', 'PKLPN')
          GROUP BY D.IdOutboundOrder) PICK
          ON  PICK.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN (SELECT OO.IdOutboundOrder, SUM(OD.ItemQty) TotRequest
          FROM OutBoundOrder OO
          INNER JOIN OutboundDetail OD
          ON OD.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN v_Oub_LatestTrack LT
          ON OO.IdOutboundOrder = LT.IdOutboundOrder
          WHERE LT.IdTrackOutboundType IS NULL OR LT.IdTrackOutboundType &lt; 70
                            GROUP BY  OO.IdOutboundOrder) REQ
              ON  REQ.IdOutboundOrder = OO.IdOutboundOrder
            LEFT JOIN (SELECT OO.IdOutboundOrder, SUM(S.ItemQty) InStock
                        FROM OutBoundOrder OO
                          INNER JOIN OutboundDetail OD
                    ON OD.IdOutboundOrder = OO.IdOutboundOrder
                          LEFT JOIN Stock S
                    ON S.IdWhs = OO.IdWhs
                    AND S.IdItem = OD.IdItem
                              AND S.IdCtgItem = OD.IdCtgItem
                          LEFT JOIN Location L
                    ON L.IdLocCode = S.IdLocCode
                                AND L.LocTypeCode IN ('PUT', 'PICK')
                          LEFT JOIN v_Oub_LatestTrack LT
                    ON OO.IdOutboundOrder = LT.IdOutboundOrder
                          WHERE LT.IdTrackOutboundType IS NULL OR LT.IdTrackOutboundType &lt; 70
                          GROUP BY  OO.IdOutboundOrder) STK
              ON STK.IdOutboundOrder = OO.IdOutboundOrder
          WHERE 1=1
          @SQLPart
          ORDER BY OO.IdOutboundOrder;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdOutboundOrder" type="numericEqual">OO.IdOutboundOrder</filter>
          <filter name="IdWhs" type="numericEqual">OO.IdWhs</filter>
          <filter name="IdOwn" type="numericEqual">OO.IdOwn</filter>
          <filter name="OutboundNumber" type="textEqual">OO.OutboundNumber</filter>
          <filter name="IdOutboundType" type="numericEqual">OO.IdOutboundType</filter>
          <filter name="Status" type="numericEqual">OO.Status</filter>
          <filter name="ReferenceNumber" type="textEqual">OO.ReferenceNumber</filter>
          <filter name="LoadCode" type="numericEqual">OO.LoadCode</filter>
          <filter name="LoadSeq" type="numericEqual">OO.LoadSeq</filter>
          <filter name="Priority" type="numericEqual">OO.Priority</filter>
          <filter name="InmediateProcess" type="numericEqual">OO.InmediateProcess</filter>
          <filter name="EmissionDate" type="textEqual">OO.EmissionDate</filter>
          <filter name="ExpectedDate" type="textEqual">OO.ExpectedDate</filter>
          <filter name="ShipmentDate" type="textEqual">OO.ShipmentDate</filter>
          <filter name="ExpirationDate" type="textEqual">OO.ExpirationDate</filter>
          <filter name="CancelDate" type="textEqual">OO.CancelDate</filter>
          <filter name="CancelUser" type="textEqual">OO.CancelUser</filter>
          <filter name="CustomerCode" type="textEqual">OO.CustomerCode</filter>
          <filter name="CustomerName" type="textEqual">OO.CustomerName</filter>
          <filter name="DeliveryAddress1" type="textEqual">OO.DeliveryAddress1</filter>
          <filter name="DeliveryAddress2" type="textEqual">OO.DeliveryAddress2</filter>
          <filter name="IdCountryDelivery" type="numericEqual">OO.IdCountryDelivery</filter>
          <filter name="IdStateDelivery" type="numericEqual">OO.IdStateDelivery</filter>
          <filter name="IdCityDelivery" type="numericEqual">OO.IdCityDelivery</filter>
          <filter name="DeliveryPhone" type="textEqual">OO.DeliveryPhone</filter>
          <filter name="DeliveryEmail" type="textEqual">OO.DeliveryEmail</filter>
          <filter name="IdWhsTarget" type="numericEqual">OO.IdWhsTarget</filter>
          <filter name="FullShipment" type="numericEqual">OO.FullShipment</filter>
          <filter name="CarrierCode" type="textEqual">OO.CarrierCode</filter>
          <filter name="RouteCode" type="textEqual">OO.RouteCode</filter>
          <filter name="Plate" type="textEqual">OO.Plate</filter>
          <filter name="Invoice" type="textEqual">OO.Invoice</filter>
          <filter name="FactAddress1" type="textEqual">OO.FactAddress1</filter>
          <filter name="FactAddress2" type="textEqual">OO.FactAddress2</filter>
          <filter name="IdCountryFact" type="numericEqual">OO.IdCountryFact</filter>
          <filter name="IdStateFact" type="numericEqual">OO.IdStateFact</filter>
          <filter name="IdCityFact" type="numericEqual">OO.IdCityFact</filter>
          <filter name="FactPhone" type="textEqual">OO.FactPhone</filter>
          <filter name="FactEmail" type="textEqual">OO.FactEmail</filter>
          <filter name="AllowCrossDock" type="numericEqual">OO.AllowCrossDock</filter>
          <filter name="AllowBackOrder" type="numericEqual">OO.AllowBackOrder</filter>
          <filter name="SpecialField1" type="textEqual">OO.SpecialField1</filter>
          <filter name="SpecialField2" type="textEqual">OO.SpecialField2</filter>
          <filter name="SpecialField3" type="textEqual">OO.SpecialField3</filter>
          <filter name="SpecialField4" type="textEqual">OO.SpecialField4</filter>
          <filter name="DateCreated" type="textEqual">OO.DateCreated</filter>
          <filter name="UserCreated" type="textEqual">OO.UserCreated</filter>
          <filter name="DateModified" type="textEqual">OO.DateModified</filter>
          <filter name="UserModified" type="textEqual">OO.UserModified</filter>
        </filters>
      </query>
  
      <query code="SatisfactionLevel_FindAll">
        <sql>
          SELECT
          OO.IdOutboundOrder,
          OO.IdWhs,
          W.WhsName,
          OO.IdOwn,
          O.OwnName,
          OO.OutboundNumber,
          OO.IdOutboundType,
          OT.OutboundTypeName,
          VLT.IdTrackOutboundType,
          VLT.NameTrackOutboundType,
          COALESCE(REQ.TotRequest,0) TotRequest,
          COALESCE(PICK.TotPicking,0) TotPicking,
          COALESCE(REQ.TotRequest,0) - COALESCE(PICK.TotPicking,0) TotDiference,
          COALESCE(STK.InStock,0) TotInStock,
          (
				    SELECT AVG(Q.Percentage) as AvgPercentage
				     FROM (
						     SELECT OD.IdItem,
							          COALESCE(calc.StockItemQty, 0) AS StockItemQty,
							          COALESCE(OD.ItemQty, 0) AS OutboundDetailItemQty,
							          CASE
									          WHEN COALESCE(calc.StockItemQty, 0) > COALESCE(OD.ItemQty, 0) THEN 100
									          ELSE (COALESCE(calc.StockItemQty, 0) / COALESCE(OD.ItemQty, 0)) * 100
							          END AS Percentage
						       FROM OutboundDetail OD
					    LEFT JOIN (  SELECT 
											            S.IdItem,
											            SUM(S.ItemQty) AS StockItemQty
									           FROM OutboundDetail OutD 
									           JOIN Stock S
										           ON OutD.IdItem = S.IdItem
									           JOIN Location L
										           ON S.IdLocCode = L.IdLocCode
									          WHERE S.IdWhs = OO.IdWhs
										          AND OutD.IdOutboundOrder = OO.IdOutboundOrder 
										          AND L.LocTypeCode in ('PUT', 'PICK')
								         GROUP BY S.IdItem
									     ) calc
							        ON OD.IdItem = calc.IdItem
						       WHERE OD.IdOutboundOrder = OO.IdOutboundOrder 
				     ) Q
			    ) AS PctSatisfaction,
        
          OO.EmissionDate,
          OO.ExpectedDate,
          OO.CustomerCode,
          OO.CustomerName,
          OO.DeliveryAddress1,
          OO.IdCountryDelivery,
          C.CountryName CountryDeliveryName,
          OO.IdStateDelivery,
          S.StateName StateDeliveryName,
          OO.IdCityDelivery,
          CIT.CityName CityDeliveryName,
          OO.CarrierCode,
          OO.RouteCode
          FROM OutboundOrder OO
          INNER JOIN Warehouse W
          ON W.IdWhs = OO.IdWhs
          INNER JOIN Owner O
          ON O.IdOwn = OO.IdOwn
          INNER JOIN OutboundType OT
          ON OT.IdOutboundType = OO.IdOutboundType
          AND OT.Status = 1
          LEFT JOIN v_Oub_LatestTrack VLT
          ON VLT.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN Country C
          ON C.IdCountry = OO.IdCountryDelivery
          LEFT JOIN State S
          ON S.IdState = OO.IdStateDelivery
          LEFT JOIN City CIT
          ON CIT.IdCity = OO.IdCityDelivery
          
          LEFT JOIN (SELECT D.IdOutboundOrder, SUM(DD.ItemQty) TotPicking
          FROM Dispatch D
          INNER JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE DD.IdWmsProcessCode IN ('PICK', 'PKBAT', 'PKKIT', 'PKPSS', 'PKUNK', 'PKVAS', 'PKWAV', 'PKLPN')
          GROUP BY D.IdOutboundOrder) PICK
          ON  PICK.IdOutboundOrder = OO.IdOutboundOrder
          
          LEFT JOIN (SELECT OO.IdOutboundOrder, SUM(OD.ItemQty) TotRequest
          FROM OutBoundOrder OO
          INNER JOIN OutboundDetail OD
          ON OD.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN v_Oub_LatestTrack LT
          ON OO.IdOutboundOrder = LT.IdOutboundOrder
          WHERE LT.IdTrackOutboundType IS NULL OR LT.IdTrackOutboundType &lt; 70
                            GROUP BY  OO.IdOutboundOrder) REQ
              ON  REQ.IdOutboundOrder = OO.IdOutboundOrder
              
            LEFT JOIN (SELECT 
						                     OutD.IdOutboundOrder,
						                     SUM(S.ItemQty) AS InStock,
                                 S.IdWhs
					                  FROM OutboundDetail OutD 
					                  JOIN Stock S
						                  ON OutD.IdItem = S.IdItem
					                  JOIN Location L
						                  ON S.IdLocCode = L.IdLocCode
					                 WHERE L.LocTypeCode in ('PUT', 'PICK')
				                GROUP BY OutD.IdOutboundOrder,
                                 S.IdWhs
                       ) STK
            ON STK.IdOutboundOrder = OO.IdOutboundOrder
           AND STK.IdWhs = OO.IdWhs
              
          @SQLPart
          ORDER BY OO.IdOutboundOrder;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">OO.IdWhs</filter>
          <filter name="Owner" type="numericIn">OO.IdOwn</filter>
          <filter name="OutboundType" type="textIn">OT.IdOutboundType</filter>
          <filter name="TrackOutboundType" type="numericIn">VLT.IdTrackOutboundType</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="Name" type="textLike">OO.CustomerCode</filter>
          <filter name="Description" type="textLike">OO.CustomerName</filter>
          <!--<filter name="DateRange" type="textBetween">OO.ExpectedDate</filter>-->
        </filters>
      </query>

      <query code="SatisfactionLevelDetail_FindAll">
        <sql>
          SELECT
          OO.IdWhs,
          OO.OutboundNumber,
          OD.IdOutboundDetail,
          OD.IdOutboundOrder,
          OD.LineNumber,
          OD.IdItem,
          I.ItemCode,
          I.LongItemName,
          OD.IdCtgItem,
          OD.ItemQty,
          COALESCE(TSK.PickPending,0) PickPending,
          COALESCE(SPK.StockInPick,0) StockInPick,
          COALESCE(SPU.StockInPut,0) StockInPut,
          PctSatisfactionDetail = CASE WHEN (COALESCE(SPK.StockInPick,0) + COALESCE(SPU.StockInPut,0) - COALESCE(TSK.PickPending,0)) &gt;= OD.ItemQty THEN 100.0
                                 WHEN (COALESCE(SPK.StockInPick,0) + COALESCE(SPU.StockInPut,0) - COALESCE(TSK.PickPending,0)) &lt; 0 THEN 0
                                 ELSE  (COALESCE(SPK.StockInPick,0) + COALESCE(SPU.StockInPut,0) - COALESCE(TSK.PickPending,0)) * 100 / OD.ItemQty  END,
          OD.LotNumber,
          OD.FifoDate,
          OD.ExpirationDate ExpirationDateDetail,
          OD.FabricationDate
          FROM OutboundOrder OO
          INNER JOIN OutboundDetail OD
          ON OO.IdOutboundOrder = OD.IdOutboundOrder
          INNER JOIN Item I
          ON I.IdItem = OD.IdItem
          
          LEFT JOIN (SELECT T.IdWhs, TD.IdItem, SUM(TD.ProposalQty) PickPending, T.IdDocumentBound 
                          FROM TASK T
                          LEFT JOIN TaskDetail TD
                          ON TD.IdTask = T.IdTask
                          WHERE T.TaskTypeCode IN ('PIKOR', 'PIKBT', 'PIKWV', 'PIKPS', 'PIKIT', 'PIUNK', 'PIKVA', 'PAKOR', 'PKLPN')
                          AND TD.IsComplete = 0
                          AND T.IsComplete = 0
                          GROUP BY T.IdWhs, TD.IdItem, T.IdDocumentBound) TSK
                    ON TSK.IdWhs = OO.IdWhs
                    AND TSK.IdItem = OD.IdItem
                    AND TSK.IdDocumentBound = OD.IdOutboundOrder
          
          LEFT JOIN (SELECT S.IdWhs, S.IdItem, SUM(S.ItemQty) StockInPick
          FROM Stock S
          INNER JOIN Location L
          ON L.IdLocCode = S.IdLocCode
          WHERE L.LocTypeCode = 'PICK'
          AND S.HoldCode IS NULL
          GROUP BY S.IdWhs, S.IdItem) SPK
          ON SPK.IdWhs = OO.IdWhs
          AND SPK.IdItem = OD.IdItem
          LEFT JOIN (SELECT S.IdWhs, S.IdItem, SUM(S.ItemQty) StockInPut
          FROM Stock S
          INNER JOIN Location L
          ON L.IdLocCode = S.IdLocCode
          WHERE L.LocTypeCode = 'PUT'
          AND S.HoldCode IS NULL
          GROUP BY S.IdWhs, S.IdItem) SPU
          ON SPU.IdWhs = OO.IdWhs
          AND SPU.IdItem = OD.IdItem
          WHERE OD.Status = 1
          AND OD.IdOutboundOrder = @idOutboundOrder
          ORDER BY OD.LineNumber

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idOutboundOrder</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="ReadyForDispatch_GetByAnyParameter">
        <sql>
          SELECT
          OO.IdOutboundOrder,
          OO.IdWhs,
          W.WhsName,
          OO.IdOwn,
          O.OwnName,
          OO.OutboundNumber,
          OO.IdOutboundType,
          OT.OutboundTypeName,
          VLT.IdTrackOutboundType,
          VLT.NameTrackOutboundType,
          COALESCE(REQ.TotRequest,0) totRequest,
          COALESCE(PREP.TotPrepared,0) AS totPicking,
          COALESCE(PREP.TotPrepared,0) - COALESCE(REQ.TotRequest,0) totDiference,
          OO.EmissionDate,
          OO.ExpectedDate,
          OO.CustomerCode,
          OO.CustomerName,
          OO.DeliveryAddress1,
          OO.IdCountryDelivery,
          C.CountryName CountryDeliveryName,
          OO.IdStateDelivery,
          S.StateName StateDeliveryName,
          OO.IdCityDelivery,
          CIT.CityName CityDeliveryName,
          OO.CarrierCode,
          OO.RouteCode
          FROM OutboundOrder OO
          INNER JOIN Warehouse W
          ON W.IdWhs = OO.IdWhs
          INNER JOIN Owner O
          ON O.IdOwn = OO.IdOwn
          INNER JOIN OutboundType OT
          ON OT.IdOutboundType = OO.IdOutboundType
          AND OT.Status = 1
          LEFT JOIN v_Oub_LatestTrack VLT
          ON VLT.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN Country C
          ON C.IdCountry = OO.IdCountryDelivery
          LEFT JOIN State S
          ON S.IdState = OO.IdStateDelivery
          LEFT JOIN City CIT
          ON CIT.IdCity = OO.IdCityDelivery
          LEFT JOIN (SELECT OO.IdOutboundOrder, SUM(OD.ItemQty) TotRequest
          FROM OutBoundOrder OO
          INNER JOIN OutboundDetail OD
          ON OD.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN v_Oub_LatestTrack LT
          ON OO.IdOutboundOrder = LT.IdOutboundOrder
          WHERE LT.IdTrackOutboundType IS NULL
          OR LT.IdTrackOutboundType &lt; 70
                        GROUP BY  OO.IdOutboundOrder) REQ
              ON  REQ.IdOutboundOrder = OO.IdOutboundOrder
            LEFT JOIN (SELECT D.IdOutboundOrder, V.IdTrackOutboundType, SUM(DD.ItemQty) TotPrepared
                        FROM Dispatch D
                          INNER JOIN v_Oub_LatestTrack V
                    ON V.IdOutboundOrder = D.IdOutboundOrder
                          INNER JOIN DispatchDetail DD
                    ON D.IdDispatch = DD.IdDispatch
                    WHERE D.IdTrackOutbound &lt; 70
                    AND V.IdTrackOutboundType &lt; 70
          GROUP BY D.IdOutboundOrder, V.IdTrackOutboundType) PREP
          ON  PREP.IdOutboundOrder = OO.IdOutboundOrder
          AND PREP.IdTrackOutboundType = VLT.IdTrackOutboundType
          --WHERE OO.IdOutboundType IN (1,2,3)
          WHERE VLT.IdTrackOutboundType IN (21,41,51)
          @SQLPart
          ORDER BY OO.IdOutboundOrder

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="IdOutboundOrder" type="numericEqual">OO.IdOutboundOrder</filter>
          <filter name="IdWhs" type="numericEqual">OO.IdWhs</filter>
          <filter name="IdOwn" type="numericEqual">OO.IdOwn</filter>
          <filter name="OutboundNumber" type="textEqual">OO.OutboundNumber</filter>
          <filter name="IdOutboundType" type="numericEqual">OO.IdOutboundType</filter>
          <filter name="Status" type="numericEqual">OO.Status</filter>
          <filter name="ReferenceNumber" type="textEqual">OO.ReferenceNumber</filter>
          <filter name="LoadCode" type="numericEqual">OO.LoadCode</filter>
          <filter name="LoadSeq" type="numericEqual">OO.LoadSeq</filter>
          <filter name="Priority" type="numericEqual">OO.Priority</filter>
          <filter name="InmediateProcess" type="numericEqual">OO.InmediateProcess</filter>
          <filter name="EmissionDate" type="textEqual">OO.EmissionDate</filter>
          <filter name="ExpectedDate" type="textEqual">OO.ExpectedDate</filter>
          <filter name="ShipmentDate" type="textEqual">OO.ShipmentDate</filter>
          <filter name="ExpirationDate" type="textEqual">OO.ExpirationDate</filter>
          <filter name="CancelDate" type="textEqual">OO.CancelDate</filter>
          <filter name="CancelUser" type="textEqual">OO.CancelUser</filter>
          <filter name="CustomerCode" type="textEqual">OO.CustomerCode</filter>
          <filter name="CustomerName" type="textEqual">OO.CustomerName</filter>
          <filter name="DeliveryAddress1" type="textEqual">OO.DeliveryAddress1</filter>
          <filter name="DeliveryAddress2" type="textEqual">OO.DeliveryAddress2</filter>
          <filter name="IdCountryDelivery" type="numericEqual">OO.IdCountryDelivery</filter>
          <filter name="IdStateDelivery" type="numericEqual">OO.IdStateDelivery</filter>
          <filter name="IdCityDelivery" type="numericEqual">OO.IdCityDelivery</filter>
          <filter name="DeliveryPhone" type="textEqual">OO.DeliveryPhone</filter>
          <filter name="DeliveryEmail" type="textEqual">OO.DeliveryEmail</filter>
          <filter name="IdWhsTarget" type="numericEqual">OO.IdWhsTarget</filter>
          <filter name="FullShipment" type="numericEqual">OO.FullShipment</filter>
          <filter name="CarrierCode" type="textEqual">OO.CarrierCode</filter>
          <filter name="RouteCode" type="textEqual">OO.RouteCode</filter>
          <filter name="Plate" type="textEqual">OO.Plate</filter>
          <filter name="Invoice" type="textEqual">OO.Invoice</filter>
          <filter name="FactAddress1" type="textEqual">OO.FactAddress1</filter>
          <filter name="FactAddress2" type="textEqual">OO.FactAddress2</filter>
          <filter name="IdCountryFact" type="numericEqual">OO.IdCountryFact</filter>
          <filter name="IdStateFact" type="numericEqual">OO.IdStateFact</filter>
          <filter name="IdCityFact" type="numericEqual">OO.IdCityFact</filter>
          <filter name="FactPhone" type="textEqual">OO.FactPhone</filter>
          <filter name="FactEmail" type="textEqual">OO.FactEmail</filter>
          <filter name="AllowCrossDock" type="numericEqual">OO.AllowCrossDock</filter>
          <filter name="AllowBackOrder" type="numericEqual">OO.AllowBackOrder</filter>
          <filter name="SpecialField1" type="textEqual">OO.SpecialField1</filter>
          <filter name="SpecialField2" type="textEqual">OO.SpecialField2</filter>
          <filter name="SpecialField3" type="textEqual">OO.SpecialField3</filter>
          <filter name="SpecialField4" type="textEqual">OO.SpecialField4</filter>
          <filter name="DateCreated" type="textEqual">OO.DateCreated</filter>
          <filter name="UserCreated" type="textEqual">OO.UserCreated</filter>
          <filter name="DateModified" type="textEqual">OO.DateModified</filter>
          <filter name="UserModified" type="textEqual">OO.UserModified</filter>
        </filters>
      </query>
    
      <query code="ReadyForDispatch_FindAll">
        <sql>
          SELECT
		      COALESCE(REQ.TotRequest,0) totRequest,
          COALESCE(PREP.TotPrepared,0) AS totPicking,
          COALESCE(PREP.TotPrepared,0) - COALESCE(REQ.TotRequest,0) totDiference,
          OO.IdOutboundOrder,
          OO.IdWhs,
          W.WhsName,
          OO.IdOwn,
          O.OwnName,
          OO.OutboundNumber,
          OO.IdOutboundType,
          OT.OutboundTypeName,
          VLT.IdTrackOutboundType,
          VLT.NameTrackOutboundType,
          OO.EmissionDate,
          OO.ExpectedDate,
          OO.CustomerCode,
          OO.CustomerName,
          OO.DeliveryAddress1,
          OO.IdCountryDelivery,
          C.CountryName CountryDeliveryName,
          OO.IdStateDelivery,
          S.StateName StateDeliveryName,
          OO.IdCityDelivery,
          CIT.CityName CityDeliveryName,
          OO.CarrierCode,
          OO.RouteCode,
          B.BranchName,
          OO.SpecialField1,
          OO.SpecialField2,
          OO.SpecialField3,
          OO.SpecialField4
          FROM OutboundOrder OO
          INNER JOIN Warehouse W
          ON W.IdWhs = OO.IdWhs
          INNER JOIN Owner O
          ON O.IdOwn = OO.IdOwn
          INNER JOIN OutboundType OT
          ON OT.IdOutboundType = OO.IdOutboundType
          AND OT.Status = 1
          LEFT JOIN v_Oub_LatestTrack VLT
          ON VLT.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN Country C
          ON C.IdCountry = OO.IdCountryDelivery
          LEFT JOIN State S
          ON S.IdState = OO.IdStateDelivery
          LEFT JOIN City CIT
          ON CIT.IdCity = OO.IdCityDelivery
          LEFT JOIN Branch B 
		      ON OO.IdBranch = B.IdBranch AND OO.IdOwn = B.IdOwn
          LEFT JOIN ( SELECT SUM(REQ2.TotRequest) as TotRequest, 
		                     REQ2.IdOutboundOrder
					              FROM (SELECT distinct (IdItem), 
									                OO.IdOutboundOrder, 
									                OD.ItemQty as TotRequest
							              FROM OutBoundOrder OO
							              INNER JOIN OutboundDetail OD
							              ON OD.IdOutboundOrder = OO.IdOutboundOrder
							              LEFT JOIN v_Oub_LatestTrack LT
							              ON OO.IdOutboundOrder = LT.IdOutboundOrder
							              WHERE LT.IdTrackOutboundType IS NULL
							              OR LT.IdTrackOutboundType &lt; 70
						          ) REQ2
						          GROUP BY REQ2.IdOutboundOrder
					        ) as REQ
		      ON  REQ.IdOutboundOrder = OO.IdOutboundOrder
		      LEFT JOIN ( SELECT SUM(PREP2.TotPrepared) as TotPrepared,
							                PREP2.IdOutboundOrder,
							                PREP2.IdTrackOutboundType
					            FROM (
						              SELECT DISTINCT(IdItem), 
								              ItemQty AS TotPrepared, 
								              D.IdOutboundOrder, 
								              V.IdTrackOutboundType
						                FROM Dispatch D
						                INNER JOIN v_Oub_LatestTrack V
						                ON V.IdOutboundOrder = D.IdOutboundOrder
						                INNER JOIN DispatchDetail DD
						                ON D.IdDispatch = DD.IdDispatch
						                WHERE D.IdTrackOutbound &lt; 70
						                AND V.IdTrackOutboundType &lt; 70
						               ) PREP2
						          GROUP BY PREP2.IdOutboundOrder, PREP2.IdTrackOutboundType
					          ) as PREP
          ON  PREP.IdOutboundOrder = OO.IdOutboundOrder
          AND PREP.IdTrackOutboundType = VLT.IdTrackOutboundType  
		      @SQLPart
          ORDER BY OO.IdOutboundOrder

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">OO.IdWhs</filter>
          <filter name="Owner" type="numericIn">OO.IdOwn</filter>
          <filter name="OutboundType" type="textIn">OT.IdOutboundType</filter>
          <filter name="TrackOutboundType" type="numericIn">VLT.IdTrackOutboundType</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="Name" type="textLike">OO.CustomerCode</filter>
          <filter name="Description" type="textLike">OO.CustomerName</filter>
          <filter name="DateRange" type="textBetween">OO.ExpectedDate</filter>
          <filter name="Country" type="textIn">OO.IdCountryDelivery</filter>
          <filter name="State" type="textIn">OO.IdStateDelivery</filter>
          <filter name="City" type="textIn">OO.IdCityDelivery</filter>
          <filter name="Carrier" type="textLike">OO.CarrierCode</filter>
          <filter name="Route" type="textLike">OO.RouteCode</filter>
        </filters>
      </query>

      <query code="ReadyForDispatchDetail_FindAll">
        <sql>
          SELECT
          OO.IdWhs,
          OD.IdOutboundDetail,
          OD.IdOutboundOrder,
          OO.OutboundNumber,
          OD.LineNumber,
          OD.IdItem,
          I.ItemCode,
          I.LongItemName,
          OD.ItemQty,
          COALESCE(PREP.TotPrepared,0) PickPending,
          COALESCE(PREP.TotPrepared,0)- OD.ItemQty StockInPick,
          OD.SpecialField1,
          OD.SpecialField2,
          OD.SpecialField3,
          OD.SpecialField4
          FROM OutboundOrder OO
          INNER JOIN OutboundDetail OD
          ON OD.IdOutboundOrder = OO.IdOutboundOrder
          INNER JOIN Item I
          ON I.IdItem = OD.IdItem
          LEFT JOIN v_Oub_LatestTrack VLT
          ON VLT.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN (SELECT D.IdOutboundOrder, LineNumber, SUM(DD.ItemQty) TotPrepared
          FROM Dispatch D
          INNER JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE DD.IdWmsProcessCode = 'PACK' --Packing
          GROUP BY D.IdOutboundOrder, LineNumber) PREP
          ON  PREP.IdOutboundOrder = OO.IdOutboundOrder
          AND PREP.LineNumber = OD.LineNumber
          WHERE OO.IdOutboundType IN (1,2,3)
          AND VLT.IdTrackOutboundType = 21 --Packing
          AND OD.IdOutboundOrder = @idOutboundOrder
          UNION
          SELECT
          OO.IdWhs,
          OD.IdOutboundDetail,
          OD.IdOutboundOrder,
          OO.OutboundNumber,
          OD.LineNumber,
          OD.IdItem,
          I.ItemCode,
          I.LongItemName,
          OD.ItemQty,
          COALESCE(PREP.TotPrepared,0) Prepared,
          COALESCE(PREP.TotPrepared,0)- OD.ItemQty Diff,
          OD.SpecialField1,
          OD.SpecialField2,
          OD.SpecialField3,
          OD.SpecialField4
          FROM OutboundOrder OO
          INNER JOIN OutboundDetail OD
          ON OD.IdOutboundOrder = OO.IdOutboundOrder
          INNER JOIN Item I
          ON I.IdItem = OD.IdItem
          LEFT JOIN v_Oub_LatestTrack VLT
          ON VLT.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN (SELECT D.IdOutboundOrder, LineNumber, SUM(DD.ItemQty) TotPrepared
          FROM Dispatch D
          INNER JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE DD.IdWmsProcessCode = 'RUTEO'  --Ruteo
          GROUP BY D.IdOutboundOrder, LineNumber) PREP
          ON  PREP.IdOutboundOrder = OO.IdOutboundOrder
          AND PREP.LineNumber = OD.LineNumber
          WHERE OO.IdOutboundType IN (1,2,3)
          AND VLT.IdTrackOutboundType = 41 -- Movto Anden
          AND OD.IdOutboundOrder = @idOutboundOrder
          UNION
          SELECT
          OO.IdWhs,
          OD.IdOutboundDetail,
          OD.IdOutboundOrder,
          OO.OutboundNumber,
          OD.LineNumber,
          OD.IdItem,
          I.ItemCode,
          I.LongItemName,
          OD.ItemQty,
          COALESCE(PREP.TotPrepared,0) Prepared,
          COALESCE(PREP.TotPrepared,0)- OD.ItemQty Diff,
          OD.SpecialField1,
          OD.SpecialField2,
          OD.SpecialField3,
          OD.SpecialField4
          FROM OutboundOrder OO
          INNER JOIN OutboundDetail OD
          ON OD.IdOutboundOrder = OO.IdOutboundOrder
          INNER JOIN Item I
          ON I.IdItem = OD.IdItem
          LEFT JOIN v_Oub_LatestTrack VLT
          ON VLT.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN (SELECT D.IdOutboundOrder, LineNumber, SUM(DD.ItemQty) TotPrepared
          FROM Dispatch D
          INNER JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE DD.IdWmsProcessCode = 'LOAD' --Loading
          GROUP BY D.IdOutboundOrder, LineNumber) PREP
          ON  PREP.IdOutboundOrder = OO.IdOutboundOrder
          AND PREP.LineNumber = OD.LineNumber
          WHERE OO.IdOutboundType IN (1,2,3)
          AND VLT.IdTrackOutboundType = 51 --Loading
          AND OD.IdOutboundOrder = @idOutboundOrder
          ORDER BY OD.LineNumber

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idOutboundOrder</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="OutboundOrderDetail_ById">
        <sql>
          SELECT IdOutboundDetail
          ,outDet.IdOutboundOrder
          ,outDet.LineNumber
          ,outDet.LineCode
          ,outDet.IdItem
          ,i.ItemCode
          ,i.Description
          ,outDet.IdCtgItem
          ,ca.CtgName
          ,outDet.ItemQty
          ,outDet.Status
          ,outDet.LotNumber
          ,outDet.FifoDate
          ,outDet.ExpirationDate
          ,outDet.FabricationDate
          ,i.Weight AS ItemWeight
          ,i.Volume AS ItemVolume
          ,outDet.SpecialField1
          ,outDet.SpecialField2
          ,outDet.SpecialField3
          ,outDet.SpecialField4
          ,IU.UomName
          ,CR.Name AS NameCustomRule
          FROM OutboundDetail outDet
          LEFT JOIN categoryitem ca ON outDet.IdCtgItem = ca.IdCtgItem
          LEFT JOIN Item i ON outDet.IdItem = i.IdItem
          LEFT JOIN ItemUom IU
          ON IU.IdItem = I.IdItem
          AND IU.IdUomType = I.StackingSequence
          LEFT JOIN RulesByOrder RO ON RO.IdOutboundOrder =  outDet.IdOutboundOrder AND RO.IdItem = outDet.IdItem
          LEFT JOIN CustomRule CR ON CR.IdCustomRule = RO.IdCustomRule
          WHERE outDet.IdOutboundOrder = @idOutboundOrder
          ORDER BY outDet.LineNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idOutboundOrder</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
      </query>

      <query code="OutboundOrderDetail_GetByOutboundId_Kit">
        <sql>
          SELECT
          outDet.IdOutboundDetail
          ,outDet.IdOutboundOrder
          ,outDet.LineNumber
          ,outDet.LineCode
          ,i.IdItem
          ,i.ItemCode
          ,i.Description
          ,outDet.IdCtgItem
          ,ca.CtgName
          ,(outDet.ItemQty * kit.ItemQty) ItemQty
          ,outDet.Status
          ,outDet.LotNumber
          ,outDet.FifoDate
          ,outDet.ExpirationDate
          ,outDet.FabricationDate
          FROM OutboundDetail outDet
          INNER JOIN Kit ON outDet.IdItem = kit.IdItemKit
          INNER JOIN Item i ON kit.IdItemBase = i.IdItem
          LEFT JOIN categoryitem ca ON outDet.IdCtgItem = ca.IdCtgItem
          WHERE outDet.IdOutboundOrder = @idOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">idOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="GetOutboundDetailByAnyParameter">
        <sql>
          SELECT
          OD.IdOutboundDetail,
          OD.IdOutboundOrder,
          OD.LineNumber,
          OD.LineCode,
          OD.IdItem,
          OD.IdCtgItem,
          OD.ItemQty,
          OD.Status,
          OD.LotNumber,
          OD.FifoDate,
          OD.ExpirationDate,
          OD.FabricationDate,
          I.ShortItemName,
          I.ItemCode
          FROM OutboundDetail OD
          INNER JOIN OutboundOrder O ON OD.IdOutboundOrder = O.IdOutboundOrder
          INNER JOIN Item I ON I.IdItem = OD.IdItem
          WHERE 1=1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdOutboundDetail" type="numericEqual">OD.IdOutboundDetail</filter>
          <filter name="IdOutboundOrder" type="numericEqual">OD.IdOutboundOrder</filter>
          <filter name="IdItem" type="numericEqual">OD.IdItem</filter>
        </filters>
      </query>

      <!-- Muestra stock asociado a un Item, menos el stock reservado por tareas de picking pendientes -->
      <query code="OutboundOrderDetail_ById_ItemStock">
        <sql>
         SELECT IdOutboundDetail
          ,outDet.IdOutboundOrder
          ,outDet.LineNumber
          ,outDet.LineCode
          ,outDet.IdItem
          ,i.ItemCode
          ,i.Description
          ,i.LongItemName
		  ,(CASE
          WHEN UPPER(IU.UomName) = 'UNIDAD' THEN IU.UomName
          WHEN IU.UomName IS NULL THEN ''
          ELSE convert(varchar(10),convert(int ,(outDet.ItemQty)/IU.ConversionFactor)) + ' ' + IU.UomName + 'X' + REPLACE(convert(varchar(10),IU.ConversionFactor), '.0000', '')
          END
          )  AS DefaultItemUom
          ,outDet.IdCtgItem
          ,ca.CtgName
          ,outDet.ItemQty
          ,CASE WHEN (SELECT (stock.ItemQty - taskDetail.ItemQty) AS ItemQty
          FROM (SELECT COALESCE(SUM(s.ItemQty), 0) AS ItemQty
          FROM Stock s INNER JOIN
          Location l ON s.idLocCode = l.idLocCode
          WHERE l.LocTypeCode IN('PICK', 'PUT')
          AND s.IdItem = i.IdItem) stock,
          (SELECT COALESCE(SUM(td.ProposalQty), 0) AS ItemQty
          FROM TaskDetail td INNER JOIN
          Task T ON TD.IdTask = T.IdTask
          WHERE T.IsComplete = 0
          AND T.TaskTypeCode NOT IN('REPL')
          AND td.Status = 1
          AND td.IsComplete = 0
          AND td.IdItem = i.IdItem) AS taskDetail) &lt; 0 THEN 0
          ELSE
          (SELECT (stock.ItemQty - taskDetail.ItemQty) AS ItemQty
          FROM (SELECT COALESCE(SUM(s.ItemQty), 0) AS ItemQty
          FROM Stock s INNER JOIN
          Location l ON s.idLocCode = l.idLocCode
          WHERE l.LocTypeCode IN('PICK', 'PUT')
          AND s.IdItem = i.IdItem) stock,
          (SELECT COALESCE(SUM(td.ProposalQty), 0) AS ItemQty
          FROM TaskDetail td INNER JOIN
          Task T ON TD.IdTask = T.IdTask
          WHERE T.IsComplete = 0
          AND T.TaskTypeCode NOT IN('REPL')
          AND td.Status = 1
          AND td.IsComplete = 0
          AND td.IdItem = i.IdItem) taskDetail)
          END  AS ItemStock
          ,outDet.Status
          ,outDet.LotNumber
          ,outDet.FifoDate
          ,outDet.ExpirationDate
          ,outDet.FabricationDate
          ,IU.UomName
          ,CR.Name AS NameCustomRule
          FROM OutboundDetail outDet
          LEFT JOIN categoryitem ca ON outDet.IdCtgItem = ca.IdCtgItem
          LEFT JOIN Item i ON outDet.IdItem = i.IdItem
          LEFT JOIN ItemUom IU ON i.IdItem = IU.IdItem AND I.StackingSequence = IU.IdUomType
          LEFT JOIN RulesByOrder RO ON RO.IdOutboundOrder =  outDet.IdOutboundOrder AND RO.IdItem = outDet.IdItem
          LEFT JOIN CustomRule CR ON CR.IdCustomRule = RO.IdCustomRule
          WHERE outDet.IdOutboundOrder = @idOutboundOrder;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idOutboundOrder</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
      </query>

      <query code="OutboundOrder_GetById">
        <sql>
          SELECT
          Out.IdOutboundOrder,
          Whs.IdWhs,
          Whs.WhsCode,
          Whs.ShortWhsName,
          Whs.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Out.IdStateDelivery,
          Out.IdCityDelivery,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          Out.FullShipment,
          Out.CarrierCode,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          Out.IdStateFact,
          Out.IdCityFact,
          Out.FactPhone,
          Out.FactEmail,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified

          FROM OutboundOrder Out

          LEFT JOIN Warehouse Whs
          ON Out.IdWhs = Whs.IdWhs
          AND Out.IdWhsTarget = Whs.IdWhs

          LEFT JOIN Owner Own
          ON Out.IdOwn = Own.IdOwn

          INNER JOIN OutboundType OutType
          ON Out.IdOutboundType = OutType.IdOutboundType
          AND OutType.Status = 1

          LEFT JOIN Country Co
          ON Out.IdCountryDelivery = Co.IdCountry
          AND Out.IdCountryFact = Co.IdCountry

          LEFT JOIN State St
          ON Out.IdStateDelivery = St.IdState
          AND Out.IdStateFact= St.IdState

          LEFT JOIN City Ci
          ON Out.IdCityDelivery = Ci.IdCity
          AND Out.IdCityFact= Ci.IdCity

          WHERE IdOutboundOrder = @IdOutboundOrder
          AND Name LIKE @name
          AND Description LIKE @description;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">OutboundNumber</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="String">name</parameter>
          <parameter type="String">description</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">Whs.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">Out.OutboundNumber</filter>
          <filter name="DateRange" type="textBetween">Out.EmissionDate</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">Own.IdOwn</filter>
        </filters>
      </query>

      <query code="OutboundOrder_GetByIdOwner">
        <sql>
          SELECT
          Out.IdOutboundOrder,
          Whs.IdWhs,
          Whs.WhsCode,
          Whs.ShortWhsName,
          Whs.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Out.IdStateDelivery,
          Out.IdCityDelivery,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          Out.FullShipment,
          Out.CarrierCode,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          Out.IdStateFact,
          Out.IdCityFact,
          Out.FactPhone,
          Out.FactEmail,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified

          FROM OutboundOrder Out

          LEFT JOIN Warehouse Whs
          ON Out.IdWhs = Whs.IdWhs
          AND Out.IdWhsTarget = Whs.IdWhs

          LEFT JOIN Owner Own
          ON Out.IdOwn = Own.IdOwn

          INNER JOIN OutboundType OutType
          ON Out.IdOutboundType = OutType.IdOutboundType
          AND OutType.Status = 1

          LEFT JOIN Country Co
          ON Out.IdCountryDelivery = Co.IdCountry
          AND Out.IdCountryFact = Co.IdCountry

          LEFT JOIN State St
          ON Out.IdStateDelivery = St.IdState
          AND Out.IdStateFact= St.IdState

          LEFT JOIN City Ci
          ON Out.IdCityDelivery = Ci.IdCity
          AND Out.IdCityFact= Ci.IdCity

          WHERE Own.IdOwn = @IdOwn

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">Own.IdOwn</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="OutboundOrder_GetByTrack">
        <sql>
          SELECT DISTINCT
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs1.WhsCode,
          Whs1.ShortWhsName,
          Whs1.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          tra.IdTrackOutboundType,
          tra.NameTrackOutboundType,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Co1.CountryName	as CountryDeliveryName,
          Out.IdStateDelivery,
          St1.StateName as StateDeliveryName,
          Out.IdCityDelivery,
          Ci1.CityName as CityDeliveryName,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          whs2.WhsCode as WhsTargetCode,
          whs2.ShortWhsName as WhsTargetShortName,
          whs2.WhsName as WhsTargetName,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          CO2.CountryName	as CountryFactName,
          Out.IdStateFact,
          St2.StateName as StateFactName,
          Out.IdCityFact,
          Ci2.CityName as CityFactName,
          Out.FactPhone,
          Out.FactEmail,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified,
          (SELECT CASE WHEN COUNT(IdOutboundOrder) = 0 THEN 0 ELSE 1 END AS IsTrue
          FROM v_Oub_InOtherSimulation
          WHERE ((IdUser = @idUser AND WmsProcess != @dispatchType) OR IdUser != @idUser)
          AND IdOutboundOrder = Out.IdOutboundOrder) AS InOtherSimulation
          FROM OutboundOrder Out

          LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType AND OutType.Status = 1
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
          LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs
          LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
          LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
          LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity
          LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
          LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
          LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity
          LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
          JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
          LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
          LEFT JOIN TaskOutboundOrderSimulation ts ON ts.IdOutbound = Out.IdOutboundOrder
          WHERE tra.IdTrackOutboundType = @idTrackOutboundType
          -- Filtra las Ordenes generadas por tareas de procesos Wave
          AND OutType.OutboudTypeCode != 'PIKWV'
          -- Las Ordenes de tipo 'KIT', 'UNKIT' y 'VAS' se procesan aparte (Procesos 'Liberar Kit', 'Liberar Unkit' y 'Liberar VAS')
          AND (OutType.OutboudTypeCode = 'KIT' AND @dispatchType = 'PIKIT' OR @dispatchType != 'PIKIT' AND OutType.OutboudTypeCode != 'KIT')
          AND (OutType.OutboudTypeCode = 'UNKIT' AND @dispatchType = 'PIUNK' OR @dispatchType != 'PIUNK' AND OutType.OutboudTypeCode != 'UNKIT')
          AND (OutType.OutboudTypeCode = 'VAS' AND @dispatchType = 'PIKVA' OR @dispatchType != 'PIKVA' AND OutType.OutboudTypeCode != 'VAS')
          @SQLPart
          ORDER BY Out.Priority, Out.IdOutboundOrder DESC;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
          <parameter type="Int">idTrackOutboundType</parameter>
          <parameter type="Int">idUser</parameter>
          <parameter type="String">dispatchType</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">Whs1.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">Out.OutboundNumber</filter>
          <filter name="DateRange" type="textBetween">Out.EmissionDate</filter>
          <filter name="ExpectedDateRange" type="textBetween">Out.ExpectedDate</filter>
          <filter name="ShipmentDateRange" type="textBetween">Out.ShipmentDate</filter>
          <filter name="ExpirationDateRange" type="textBetween">Out.ExpirationDate</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">Own.IdOwn</filter>
          <filter name="PriorityRange" type="textBetween">Out.Priority</filter>
          <filter name="Customer" type="textLike">Out.CustomerName</filter>
          <filter name="Carrier" type="textLike">Car.CarrierName</filter>
          <filter name="Route" type="textLike">Out.RouteCode</filter>
          <filter name="Country" type="numericEqual">Out.IdCountryDelivery</filter>
          <filter name="State" type="numericEqual">Out.IdStateDelivery</filter>
          <filter name="City" type="numericEqual">Out.IdCityDelivery</filter>
          <filter name="GroupItem1" type="numericEqual">itm.IdGrpItem1</filter>
          <filter name="GroupItem2" type="numericEqual">itm.IdGrpItem2</filter>
          <filter name="GroupItem3" type="numericEqual">itm.IdGrpItem3</filter>
          <filter name="GroupItem4" type="numericEqual">itm.IdGrpItem4</filter>
        </filters>
      </query>

  <query code="OutboundOrder_GetByTrackFilter">
    <sql>
      SELECT  DISTINCT
      OBO.IdOutboundOrder,
      OBO.IdWhs,
      Whs1.WhsCode,
      Whs1.ShortWhsName,
      Whs1.WhsName,
      Own.IdOwn,
      Own.OwnCode,
      Own.OwnName,
      Own.TradeName,
      OBO.OutboundNumber,
      OutType.IdOutboundType,
      OutType.OutboudTypeCode,
      OutType.OutboundTypeName,
      OBO.Status,
      OBO.ReferenceNumber,
      OBO.LoadCode,
      OBO.LoadSeq,
      OBO.Priority,
      OBO.InmediateProcess,
      OBO.EmissionDate,
      OBO.ExpectedDate,
      OBO.ShipmentDate,
      OBO.ExpirationDate,
      OBO.CancelDate,
      OBO.CancelUser,
      tra.IdTrackOutboundType,
      tra.NameTrackOutboundType,
      OBO.CustomerCode,
      OBO.CustomerName,
      OBO.DeliveryAddress1,
      OBO.DeliveryAddress2,
      OBO.IdCountryDelivery,
      Co1.CountryName    as CountryDeliveryName,
      OBO.IdStateDelivery,
      St1.StateName as StateDeliveryName,
      OBO.IdCityDelivery,
      Ci1.CityName as CityDeliveryName,
      OBO.DeliveryPhone,
      OBO.DeliveryEmail,
      OBO.IdWhsTarget,
      whs2.WhsCode as WhsTargetCode,
      whs2.ShortWhsName as WhsTargetShortName,
      whs2.WhsName as WhsTargetName,
      OBO.FullShipment,
      OBO.CarrierCode,
      Car.CarrierName,
      OBO.RouteCode,
      OBO.Plate,
      OBO.Invoice,
      OBO.FactAddress1,
      OBO.FactAddress2,
      OBO.IdCountryFact,
      CO2.CountryName    as CountryFactName,
      OBO.IdStateFact,
      St2.StateName as StateFactName,
      OBO.IdCityFact,
      Ci2.CityName as CityFactName,
      OBO.FactPhone,
      OBO.FactEmail,
      OBO.AllowCrossDock,
      OBO.AllowBackOrder,
      OBO.DateCreated,
      OBO.UserCreated,
      OBO.DateModified,
      OBO.UserModified,
      B.BranchName,
      DetQtyItems.QtyLineas AS SpecialField1,
      DetQtyItems.QtyItems AS SpecialField2,
      DetQtyItems.QtyMaxItems AS SpecialField3,
      OBO.SpecialField3,
      OBO.SpecialField4,
      CR.Name AS NameCustomRule,
      (SELECT CASE WHEN COUNT(IdOutboundOrder) = 0 THEN 0 ELSE 1 END AS IsTrue
      FROM v_Oub_InOtherSimulation
      WHERE --((IdUser = @idUser AND WmsProcess != @dispatchType) OR IdUser != @idUser)
      --AND 
	  IdOutboundOrder = OBO.IdOutboundOrder) AS InOtherSimulation
      FROM OutboundOrder OBO
      INNER JOIN OutboundDetail OutD ON OBO.IdOutboundOrder = OutD.IdOutboundOrder
      INNER JOIN [Owner] Own ON OBO.IdOwn = Own.IdOwn
      INNER JOIN OutboundType OutType ON OBO.IdOutboundType = OutType.IdOutboundType  AND OutType.Status = 1
      INNER JOIN Warehouse whs1 ON OBO.IdWhs = whs1.IdWhs
      INNER JOIN v_Oub_LatestTrack tra ON OBO.IdOutboundOrder = tra.IdOutboundOrder
      INNER JOIN Item itm ON itm.IdItem = OutD.IdItem

      INNER JOIN (SELECT DX.IdOutboundOrder, COUNT(*) AS QtyLineas, SUM(ItemQty) AS QtyItems, MAX(itemQty) AS QtyMaxItems
      FROM OutboundDetail DX INNER JOIN OutboundOrder OX ON DX.IdOutboundOrder = OX.IdOutboundOrder
      INNER JOIN v_Oub_LatestTrack TX ON OX.IdOutboundOrder = TX.IdOutboundOrder
      WHERE TX.IdTrackOutboundType IN (1, 2)
      GROUP BY DX.IdOutboundOrder) AS DetQtyItems
      ON DetQtyItems.IdOutboundOrder = OBO.IdOutboundOrder

      LEFT JOIN Carrier Car ON OBO.CarrierCode = Car.CarrierCode
      LEFT JOIN Warehouse whs2 ON OBO.IdWhsTarget = whs2.IdWhs
      LEFT JOIN Country Co1 ON OBO.IdCountryDelivery = Co1.IdCountry
      LEFT JOIN [State] St1 ON OBO.IdStateDelivery = St1.IdState
      LEFT JOIN City Ci1 ON OBO.IdCityDelivery = Ci1.IdCity
      LEFT JOIN Country Co2 ON OBO.IdCountryFact = Co2.IdCountry
      LEFT JOIN State St2 ON OBO.IdStateFact = St2.IdState
      LEFT JOIN City Ci2 ON OBO.IdCityFact = Ci2.IdCity
      LEFT JOIN TaskOutboundOrderSimulation ts ON ts.IdOutbound = OBO.IdOutboundOrder
      LEFT JOIN Branch B ON OBO.IdBranch = B.IdBranch AND OBO.IdOwn = B.IdOwn
      LEFT JOIN Customer Cust ON OBO.CustomerCode = Cust.CustomerCode AND OBO.IdOwn = Cust.IdOwn
      LEFT JOIN RulesByOrder RO ON RO.IdOutboundOrder =  OBO.IdOutboundOrder AND RO.IdItem IS NULL
      LEFT JOIN CustomRule CR ON CR.IdCustomRule = RO.IdCustomRule
      WHERE tra.IdTrackOutboundType IN (1, 2)
      AND NOT EXISTS (SELECT 1
      FROM TaskQueue TQ INNER JOIN
      Task T ON TQ.IdDocumentBound = T.IdDocumentBound
      AND TQ.IdOwn = T.IdOwn
      WHERE OBO.IdOutboundOrder = T.IdDocumentBound
      AND OBO.IdOwn = T.IdOwn)
      @SQLPart
      ORDER BY OBO.IdOutboundOrder DESC;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      AND IdModule = @idModule
      AND IdPage = @idPage
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="Int">idModule</parameter>
      <parameter type="String">idPage</parameter>
      <parameter type="Int">idUser</parameter>
      <parameter type="String">dispatchType</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericIn">Whs1.IdWhs</filter>
      <filter name="DocumentNbr" type="textLike">OBO.OutboundNumber</filter>
      <filter name="DateRange" type="textBetween">OBO.EmissionDate</filter>
      <filter name="ExpectedDateRange" type="textBetween">OBO.ExpectedDate</filter>
      <filter name="ShipmentDateRange" type="textBetween">OBO.ShipmentDate</filter>
      <filter name="ExpirationDateRange" type="textBetween">OBO.ExpirationDate</filter>
      <filter name="Item" type="textLike">itm.ItemCode</filter>
      <filter name="Owner" type="numericIn">Own.IdOwn</filter>
      <filter name="PriorityRange" type="textBetween">OBO.Priority</filter>
      <filter name="Customer" type="textLike">OBO.CustomerName</filter>
      <filter name="Carrier" type="textLike">Car.CarrierName</filter>
      <filter name="Route" type="textLike">OBO.RouteCode</filter>
      <filter name="Country" type="numericEqual">OBO.IdCountryDelivery</filter>
      <filter name="State" type="numericEqual">OBO.IdStateDelivery</filter>
      <filter name="City" type="numericEqual">OBO.IdCityDelivery</filter>
      <filter name="GroupItem1" type="numericEqual">itm.IdGrpItem1</filter>
      <filter name="GroupItem2" type="numericEqual">itm.IdGrpItem2</filter>
      <filter name="GroupItem3" type="numericEqual">itm.IdGrpItem3</filter>
      <filter name="GroupItem4" type="numericEqual">itm.IdGrpItem4</filter>
      <filter name="OutboundType" type="numericIn">OutType.IdOutboundType</filter>
      <filter name="Code" type="textLike">OBO.ReferenceNumber</filter>
      <filter name="TotalLines" type="numericLower">DetQtyItems.QtyLineas</filter>
      <filter name="TotalItems" type="numericLower">DetQtyItems.QtyItems</filter>
      <filter name="MaxPerLines" type="numericLower">DetQtyItems.QtyMaxItems</filter>
      <filter name="CodeAlt" type="textLike">Cust.SpecialField1</filter>
    </filters>
  </query>

      <query code="GetOutboundOrderById">
        <sql>
          SELECT DISTINCT
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs1.WhsCode,
          Whs1.ShortWhsName,
          Whs1.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          tra.IdTrackOutboundType,
          tra.NameTrackOutboundType,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Co1.CountryName	as CountryDeliveryName,
          Out.IdStateDelivery,
          St1.StateName as StateDeliveryName,
          Out.IdCityDelivery,
          Ci1.CityName as CityDeliveryName,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          whs2.WhsCode as WhsTargetCode,
          whs2.ShortWhsName as WhsTargetShortName,
          whs2.WhsName as WhsTargetName,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          CO2.CountryName	as CountryFactName,
          Out.IdStateFact,
          St2.StateName as StateFactName,
          Out.IdCityFact,
          Ci2.CityName as CityFactName,
          Out.FactPhone,
          Out.FactEmail,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified,
          Out.AllowCrossDock,
          Out.AllowBackOrder
          FROM OutboundOrder Out

          LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType AND OutType.Status = 1
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
          LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs
          LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
          LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
          LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity
          LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
          LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
          LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity
          LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
          JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
          LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
          LEFT JOIN TaskOutboundOrderSimulation ts ON ts.IdOutbound = Out.IdOutboundOrder
          WHERE Out.IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="GetOutboundOrderByNumber">
        <sql>
          SELECT DISTINCT
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs1.WhsCode,
          Whs1.ShortWhsName,
          Whs1.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          tra.IdTrackOutboundType,
          tra.NameTrackOutboundType,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Co1.CountryName	as CountryDeliveryName,
          Out.IdStateDelivery,
          St1.StateName as StateDeliveryName,
          Out.IdCityDelivery,
          Ci1.CityName as CityDeliveryName,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          whs2.WhsCode as WhsTargetCode,
          whs2.ShortWhsName as WhsTargetShortName,
          whs2.WhsName as WhsTargetName,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          CO2.CountryName	as CountryFactName,
          Out.IdStateFact,
          St2.StateName as StateFactName,
          Out.IdCityFact,
          Ci2.CityName as CityFactName,
          Out.FactPhone,
          Out.FactEmail,
          Out.AllowCrossDock,
          Out.AllowBackOrder,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified
          FROM OutboundOrder Out

          LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType AND OutType.Status = 1
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
          LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs
          LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
          LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
          LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity
          LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
          LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
          LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity
          LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
          JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
          LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
          LEFT JOIN TaskOutboundOrderSimulation ts ON ts.IdOutbound = Out.IdOutboundOrder
          WHERE Out.OutboundNumber = @OutboundNumber
          AND Own.IdOwn = @IdOwn
        </sql>
        <parameters>
          <parameter type="String">OutboundNumber</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="GetOutboundOrderByNumberWhsOwn">
      <sql>
        SELECT DISTINCT
        Out.IdOutboundOrder,
        Out.IdWhs,
        Whs1.WhsCode,
        Whs1.ShortWhsName,
        Whs1.WhsName,
        Own.IdOwn,
        Own.OwnCode,
        Own.OwnName,
        Own.TradeName,
        Out.OutboundNumber,
        OutType.IdOutboundType,
        OutType.OutboudTypeCode,
        OutType.OutboundTypeName,
        Out.Status,
        Out.ReferenceNumber,
        Out.LoadCode,
        Out.LoadSeq,
        Out.Priority,
        Out.InmediateProcess,
        Out.EmissionDate,
        Out.ExpectedDate,
        Out.ShipmentDate,
        Out.ExpirationDate,
        Out.CancelDate,
        Out.CancelUser,
        tra.IdTrackOutboundType,
        tra.NameTrackOutboundType,
        Out.CustomerCode,
        Out.CustomerName,
        Out.DeliveryAddress1,
        Out.DeliveryAddress2,
        Out.IdCountryDelivery,
        Co1.CountryName	as CountryDeliveryName,
        Out.IdStateDelivery,
        St1.StateName as StateDeliveryName,
        Out.IdCityDelivery,
        Ci1.CityName as CityDeliveryName,
        Out.DeliveryPhone,
        Out.DeliveryEmail,
        Out.IdWhsTarget,
        whs2.WhsCode as WhsTargetCode,
        whs2.ShortWhsName as WhsTargetShortName,
        whs2.WhsName as WhsTargetName,
        Out.FullShipment,
        Out.CarrierCode,
        Car.CarrierName,
        Out.RouteCode,
        Out.Plate,
        Out.Invoice,
        Out.FactAddress1,
        Out.FactAddress2,
        Out.IdCountryFact,
        CO2.CountryName	as CountryFactName,
        Out.IdStateFact,
        St2.StateName as StateFactName,
        Out.IdCityFact,
        Ci2.CityName as CityFactName,
        Out.FactPhone,
        Out.FactEmail,
        Out.AllowCrossDock,
        Out.AllowBackOrder,
        Out.DateCreated,
        Out.UserCreated,
        Out.DateModified,
        Out.UserModified
        FROM OutboundOrder Out

        LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
        INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType AND OutType.Status = 1
        LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
        LEFT JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
        LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs
        LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
        LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
        LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity
        LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
        LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
        LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity
        LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
        JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
        LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
        LEFT JOIN TaskOutboundOrderSimulation ts ON ts.IdOutbound = Out.IdOutboundOrder
        WHERE Out.OutboundNumber = @OutboundNumber
        AND Own.IdOwn = @IdOwn
        AND Out.IdWhs = @IdWhs
      </sql>
      <parameters>
        <parameter type="String">OutboundNumber</parameter>
        <parameter type="Int">IdOwn</parameter>
        <parameter type="Int">IdWhs</parameter>
      </parameters>
    </query>    
	
	<query code="GetOutboundOrderByFullKey">
        <sql>
          SELECT DISTINCT
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs1.WhsCode,
          Whs1.ShortWhsName,
          Whs1.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          tra.IdTrackOutboundType,
          tra.NameTrackOutboundType,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Co1.CountryName	as CountryDeliveryName,
          Out.IdStateDelivery,
          St1.StateName as StateDeliveryName,
          Out.IdCityDelivery,
          Ci1.CityName as CityDeliveryName,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          whs2.WhsCode as WhsTargetCode,
          whs2.ShortWhsName as WhsTargetShortName,
          whs2.WhsName as WhsTargetName,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          CO2.CountryName	as CountryFactName,
          Out.IdStateFact,
          St2.StateName as StateFactName,
          Out.IdCityFact,
          Ci2.CityName as CityFactName,
          Out.FactPhone,
          Out.FactEmail,
          Out.AllowCrossDock,
          Out.AllowBackOrder,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified
          FROM OutboundOrder Out

          LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType AND OutType.Status = 1
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
          LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs
          LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
          LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
          LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity
          LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
          LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
          LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity
          LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
          JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
          LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
          LEFT JOIN TaskOutboundOrderSimulation ts ON ts.IdOutbound = Out.IdOutboundOrder
          WHERE Out.OutboundNumber = @OutboundNumber
          AND Own.IdOwn = @idOwn
		  AND whs1.IdWhs = @idWhs
		  AND OutType.IdOutboundType = @idOutboundType
        </sql>
        <parameters>
          <parameter type="String">OutboundNumber</parameter>
          <parameter type="Int">idOwn</parameter>
		  <parameter type="Int">idWhs</parameter>
		  <parameter type="Int">idOutboundType</parameter>
        </parameters>
      </query>

      <query code="OutboundOrder_GetByTaskInSimulation">
        <sql>
          SELECT
          DISTINCT
          --CASE WHEN ts.IdOutbound IS NULL THEN 0 ELSE 1 END AS InSimulation,
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs1.WhsCode,
          Whs1.ShortWhsName,
          Whs1.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          tra.IdTrackOutboundType,
          tra.NameTrackOutboundType,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Co1.CountryName	as CountryDeliveryName,
          Out.IdStateDelivery,
          St1.StateName as StateDeliveryName,
          Out.IdCityDelivery,
          Ci1.CityName as CityDeliveryName,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          whs2.WhsCode as WhsTargetCode,
          whs2.ShortWhsName as WhsTargetShortName,
          whs2.WhsName as WhsTargetName,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          CO2.CountryName	as CountryFactName,
          Out.IdStateFact,
          St2.StateName as StateFactName,
          Out.IdCityFact,
          Ci2.CityName as CityFactName,
          Out.FactPhone,
          Out.FactEmail,
          Out.AllowCrossDock,
          Out.AllowBackOrder,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified
          FROM OutboundOrder Out

          LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType AND OutType.Status = 1
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
          LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs
          LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
          LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
          LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity
          LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
          LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
          LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity
          LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
          JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
          LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
          INNER JOIN TaskOutboundOrderSimulation ts ON ts.IdOutbound = Out.IdOutboundOrder
          WHERE ts.IdTask = @idTask

          ORDER BY Out.Priority, Out.IdOutboundOrder DESC;
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
        </parameters>
      </query>

      <query code="GetOutboundOrderInOtherSimulationPikor">
        <sql>
          SELECT CASE WHEN COUNT(IdOutboundOrder) = 0 THEN 0 ELSE 1 END AS IsTrue
          FROM v_Oub_InOtherSimulation
          WHERE ((IdUser !=  @IdUser AND WmsProcess = 'PIKOR') OR WmsProcess = 'OTHER')
          AND IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdUser</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="GetOutboundOrderInOtherSimulationOther">
        <sql>
          SELECT CASE WHEN COUNT(IdOutboundOrder) = 0 THEN 0 ELSE 1 END AS IsTrue
          FROM v_Oub_InOtherSimulation
          WHERE ((IdUser != @IdUser AND WmsProcess = 'OTHER') OR WmsProcess = 'PIKOR')
          AND IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdUser</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="ExtractDispatchHead">
        <sql>
          SELECT OO.IdOutboundOrder, OO.IdWhs, OO.IdOwn, O.OwnCode, OO.OutboundNumber,
          OO.Status, LT.IdTrackOutboundType, LT.NameTrackOutboundType, LT.DateTrack
          FROM OutboundOrder OO
          INNER JOIN Owner O
          ON O.IdOwn = OO.IdOwn
          LEFT JOIN v_Oub_LatestTrack LT
          ON LT.IdOutboundOrder = OO.IdOutboundOrder
          WHERE 	OO.OutboundNumber = @OutboundNumber
          AND OO.IdOwn = @IdOwn

        </sql>
        <parameters>
          <parameter type="String">OutboundNumber</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="ExtractDispatchDetails">
        <sql>
          SELECT 
          D.IdOutboundOrder,  
          D.IdTrackOutbound, 
          D.TrackOutboundDate, 
          D.Status,
          D.IdCarrier, 
          C.CarrierCode, 
          D.IdTruckCode, 
          D.DriveCode,
          DD.IdDispatchDetail, 
          DD.IdWmsProcessCode, 
          DD.IdItem, 
          I.ItemCode,
          DD.IdCtgItem, 
          CI.CtgName, 
          DD.ItemQty, 
          DD.LotNumber, 
          DD.FifoDate,
          DD.ExpirationDate, 
          DD.FabricationDate, 
          DD.IdLpnCode,
          DD.SealNumber
          FROM Dispatch D
          LEFT JOIN Carrier C
          ON C.IdCarrier = D.IdCarrier
          LEFT JOIN DispatchDetail DD
          ON DD.IdDispatch = D.IdDispatch
          LEFT JOIN Item I
          ON I.IdItem = DD.IdItem
          LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = DD.IdCtgItem
          WHERE IdTrackOutbound = 51 --Loading
          AND D.IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="OutboundOrder_Insert">
        <sql>
          INSERT INTO OutboundOrder
          (IdOutboundOrder,
          IdWhs,
          IdOwn,
          OutboundNumber,
          IdOutboundType,
          Status,
          ReferenceNumber,
          LoadCode,
          LoadSeq,
          Priority,
          InmediateProcess,
          EmissionDate,
          ExpectedDate,
          ShipmentDate,
          ExpirationDate,
          CancelDate,
          CancelUser,
          CustomerCode,
          CustomerName,
          DeliveryAddress1,
          DeliveryAddress2,
          IdCountryDelivery,
          IdStateDelivery,
          IdCityDelivery,
          DeliveryPhone,
          DeliveryEmail,
          IdWhsTarget,
          FullShipment,
          CarrierCode,
          RouteCode,
          Plate,
          Invoice,
          FactAddress1,
          FactAddress2,
          IdCountryFact,
          IdStateFact,
          IdCityFact,
          FactPhone,
          FactEmail,
          AllowCrossDock,
          AllowBackOrder,
          IdBranch,
          SpecialField1,
          SpecialField2,
          SpecialField3,
          SpecialField4,
          DateCreated,
          UserCreated,
          StateInterface,
          Comment)
          VALUES
          (@IdOutboundOrder,
          @IdWhs,
          @IdOwn,
          @OutboundNumber,
          @IdOutboundType,
          @Status,
          @ReferenceNumber,
          @LoadCode,
          @LoadSeq,
          @Priority,
          @InmediateProcess,
          @EmissionDate,
          @ExpectedDate,
          @ShipmentDate,
          @ExpirationDate,
          @CancelDate,
          @CancelUser,
          @CustomerCode,
          @CustomerName,
          @DeliveryAddress1,
          @DeliveryAddress2,
          @IdCountryDelivery,
          @IdStateDelivery,
          @IdCityDelivery,
          @DeliveryPhone,
          @DeliveryEmail,
          @IdWhsTarget,
          @FullShipment,
          @CarrierCode,
          @RouteCode,
          @Plate,
          @Invoice,
          @FactAddress1,
          @FactAddress2,
          @IdCountryFact,
          @IdStateFact,
          @IdCityFact,
          @FactPhone,
          @FactEmail,
          @AllowCrossDock,
          @AllowBackOrder,
          @IdBranch,
          @SpecialField1,
          @SpecialField2,
          @SpecialField3,
          @SpecialField4,
          @dateCreated,
          @userCreated,
          @StateInterface,
          @Comment)
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">OutboundNumber</parameter>
          <parameter type="Int">IdOutboundType</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">ReferenceNumber</parameter>
          <parameter type="String">LoadCode</parameter>
          <parameter type="String">LoadSeq</parameter>
          <parameter type="Int">Priority</parameter>
          <parameter type="Boolean">InmediateProcess</parameter>
          <parameter type="DateTime">EmissionDate</parameter>
          <parameter type="DateTime">ExpectedDate</parameter>
          <parameter type="DateTime">ShipmentDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="DateTime">CancelDate</parameter>
          <parameter type="String">CancelUser</parameter>
          <parameter type="String">CustomerCode</parameter>
          <parameter type="String">CustomerName</parameter>
          <parameter type="String">DeliveryAddress1</parameter>
          <parameter type="String">DeliveryAddress2</parameter>
          <parameter type="Int">IdCountryDelivery</parameter>
          <parameter type="Int">IdStateDelivery</parameter>
          <parameter type="Int">IdCityDelivery</parameter>
          <parameter type="String">DeliveryPhone</parameter>
          <parameter type="String">DeliveryEmail</parameter>
          <parameter type="Int">IdWhsTarget</parameter>
          <parameter type="Boolean">FullShipment</parameter>
          <parameter type="String">CarrierCode</parameter>
          <parameter type="String">RouteCode</parameter>
          <parameter type="String">Plate</parameter>
          <parameter type="String">Invoice</parameter>
          <parameter type="String">FactAddress1</parameter>
          <parameter type="String">FactAddress2</parameter>
          <parameter type="Int">IdCountryFact</parameter>
          <parameter type="Int">IdStateFact</parameter>
          <parameter type="Int">IdCityFact</parameter>
          <parameter type="String">FactPhone</parameter>
          <parameter type="String">FactEmail</parameter>
          <parameter type="Boolean">AllowCrossDock</parameter>
          <parameter type="Boolean">AllowBackOrder</parameter>
          <parameter type="Int">IdBranch</parameter>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="String">SpecialField3</parameter>
          <parameter type="String">SpecialField4</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
          <parameter type="String">StateInterface</parameter>
          <parameter type="String">Comment</parameter>
        </parameters>
      </query>

      <query code="OutboundOrder_Update">
        <sql>
          UPDATE OutboundOrder
          SET IdOutboundOrder = @IdOutboundOrder,
          IdWhs = @IdWhs,
          IdOwn = @IdOwn,
          OutboundNumber = @OutboundNumber,
          IdOutboundType = @IdOutboundType,
          Status = @Status,
          ReferenceNumber = @ReferenceNumber,
          LoadCode = @LoadCode,
          LoadSeq = @LoadSeq,
          Priority = @Priority,
          InmediateProcess = @InmediateProcess,
          EmissionDate = @EmissionDate,
          ExpectedDate = @ExpectedDate,
          ShipmentDate = @ShipmentDate,
          ExpirationDate = @ExpirationDate,
          CancelDate = @CancelDate,
          CancelUser = @CancelUser,
          CustomerCode = @CustomerCode,
          CustomerName = @CustomerName,
          DeliveryAddress1 = @DeliveryAddress1,
          DeliveryAddress2 = @DeliveryAddress2,
          IdCountryDelivery = @IdCountryDelivery,
          IdStateDelivery = @IdStateDelivery,
          IdCityDelivery = @IdCityDelivery,
          DeliveryPhone = @DeliveryPhone,
          DeliveryEmail = @DeliveryEmail,
          IdWhsTarget = @IdWhsTarget,
          FullShipment = @FullShipment,
          CarrierCode = @CarrierCode,
          RouteCode = @RouteCode,
          Plate = @Plate,
          Invoice = @Invoice,
          FactAddress1 = @FactAddress1,
          FactAddress2 = @FactAddress2,
          IdCountryFact = @IdCountryFact,
          IdStateFact = @IdStateFact,
          IdCityFact = @IdCityFact,
          FactPhone = @FactPhone,
          FactEmail = @FactEmail,
          AllowCrossDock = @AllowCrossDock,
          AllowBackOrder = @AllowBackOrder,
          IdBranch = @IdBranch,
          SpecialField1 = @SpecialField1,
          SpecialField2 = @SpecialField2,
          SpecialField3 = @SpecialField3,
          SpecialField4 = @SpecialField4,
          DateModified = @dateModified,
          UserModified = @userModified,
          Comment = @Comment
          WHERE IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">OutboundNumber</parameter>
          <parameter type="Int">IdOutboundType</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">ReferenceNumber</parameter>
          <parameter type="String">LoadCode</parameter>
          <parameter type="String">LoadSeq</parameter>
          <parameter type="Int">Priority</parameter>
          <parameter type="Boolean">InmediateProcess</parameter>
          <parameter type="DateTime">EmissionDate</parameter>
          <parameter type="DateTime">ExpectedDate</parameter>
          <parameter type="DateTime">ShipmentDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="DateTime">CancelDate</parameter>
          <parameter type="String">CancelUser</parameter>
          <parameter type="String">CustomerCode</parameter>
          <parameter type="String">CustomerName</parameter>
          <parameter type="String">DeliveryAddress1</parameter>
          <parameter type="String">DeliveryAddress2</parameter>
          <parameter type="Int">IdCountryDelivery</parameter>
          <parameter type="Int">IdStateDelivery</parameter>
          <parameter type="Int">IdCityDelivery</parameter>
          <parameter type="String">DeliveryPhone</parameter>
          <parameter type="String">DeliveryEmail</parameter>
          <parameter type="Int">IdWhsTarget</parameter>
          <parameter type="Boolean">FullShipment</parameter>
          <parameter type="String">CarrierCode</parameter>
          <parameter type="String">RouteCode</parameter>
          <parameter type="String">Plate</parameter>
          <parameter type="String">Invoice</parameter>
          <parameter type="String">FactAddress1</parameter>
          <parameter type="String">FactAddress2</parameter>
          <parameter type="Int">IdCountryFact</parameter>
          <parameter type="Int">IdStateFact</parameter>
          <parameter type="Int">IdCityFact</parameter>
          <parameter type="String">FactPhone</parameter>
          <parameter type="String">FactEmail</parameter>
          <parameter type="Boolean">AllowCrossDock</parameter>
          <parameter type="Boolean">AllowBackOrder</parameter>
          <parameter type="Int">IdBranch</parameter>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="String">SpecialField3</parameter>
          <parameter type="String">SpecialField4</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="String">Comment</parameter>
        </parameters>
      </query>

      <query code="OutboundOrder_Delete">
        <sql>
          DELETE FROM TaskDetailSimulation
          WHERE IdDocumentBound = @IdOutboundOrder;

          DELETE FROM TaskSimulation
          WHERE IdDocumentBound = @IdOutboundOrder;

          DELETE FROM OutboundTrack
          WHERE IdOutboundOrder = @IdOutboundOrder;

          DELETE FROM OutboundDetail
          WHERE IdOutboundOrder = @IdOutboundOrder;

          DELETE FROM OutboundOrder
          WHERE IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="OutboundOrder_GetCountWaveOrder">
        <sql>
          SELECT OutboundNumber FieldName
          FROM OutboundOrder o
          INNER JOIN OutboundType ot ON o.idOutboundType = ot.idOutboundtype AND ot.Status = 1
          WHERE ot.OutboudTypeCode = 'PIKWV'
        </sql>
        <parameters></parameters>
      </query>

      <query code="OutboundDetail_Insert">
        <sql>
          INSERT INTO OutboundDetail
          (IdOutboundDetail,
          IdOutboundOrder,
          LineNumber,
          LineCode,
          IdItem,
          IdCtgItem,
          ItemQty,
          Status,
          LotNumber,
          FifoDate,
          ExpirationDate,
          FabricationDate,
          GrpClass1,
          GrpClass2,
          GrpClass3,
          GrpClass4,
          GrpClass5,
          GrpClass6,
          GrpClass7,
          GrpClass8,
          SpecialField1,
          SpecialField2,
          SpecialField3,
          SpecialField4,
          DateCreated,
          UserCreated)
          VALUES
          (@IdOutboundDetail,
          @IdOutboundOrder,
          @LineNumber,
          @LineCode,
          @IdItem,
          @IdCtgItem,
          @ItemQty,
          @Status,
          @LotNumber,
          @FifoDate,
          @ExpirationDate,
          @FabricationDate,
          @GrpClass1,
          @GrpClass2,
          @GrpClass3,
          @GrpClass4,
          @GrpClass5,
          @GrpClass6,
          @GrpClass7,
          @GrpClass8,
          @SpecialField1,
          @SpecialField2,
          @SpecialField3,
          @SpecialField4,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundDetail</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="Int">LineNumber</parameter>
          <parameter type="String">LineCode</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdCtgItem</parameter>
          <parameter type="Decimal">ItemQty</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">LotNumber</parameter>
          <parameter type="DateTime">FifoDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="DateTime">FabricationDate</parameter>
          <parameter type="String">GrpClass1</parameter>
          <parameter type="String">GrpClass2</parameter>
          <parameter type="String">GrpClass3</parameter>
          <parameter type="String">GrpClass4</parameter>
          <parameter type="String">GrpClass5</parameter>
          <parameter type="String">GrpClass6</parameter>
          <parameter type="String">GrpClass7</parameter>
          <parameter type="String">GrpClass8</parameter>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="String">SpecialField3</parameter>
          <parameter type="String">SpecialField4</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="OutboundDetail_Delete">
        <sql>
          DELETE FROM OutboundDetail
          WHERE IdOutboundDetail = @IdOutboundDetail
          AND IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundDetail</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="OutboundDetail_DeleteAll">
        <sql>
          DELETE FROM OutboundDetail
          WHERE IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="OutboundDetail_GetByAnyParameter">
        <sql>
          SELECT
          OD.IdOutboundDetail,
          OD.IdOutboundOrder,
          OD.LineNumber,
          OD.LineCode,
          OD.IdItem,
          I.ItemCode,
          I.Description,
          I.LongItemName,
          I.ShortItemName,
          OD.IdCtgItem,
          CI.CtgCode,
          CI.CtgName,
          OD.ItemQty,
          OD.Status,
          OD.LotNumber,
          OD.FifoDate,
          OD.ExpirationDate,
          OD.FabricationDate,
          OD.GrpClass1,
          OD.GrpClass2,
          OD.GrpClass3,
          OD.GrpClass4,
          OD.GrpClass5,
          OD.GrpClass6,
          OD.GrpClass7,
          OD.GrpClass8,
          OD.SpecialField1,
          OD.SpecialField2,
          OD.SpecialField3,
          OD.SpecialField4,
          OD.DateCreated,
          OD.UserCreated,
          OD.DateModified,
          OD.UserModified
          FROM OutboundDetail OD INNER JOIN
          Item I ON OD.IdItem = I.IdItem LEFT JOIN
          CategoryItem CI ON OD.IdCtgItem = CI.IdCtgItem
          WHERE 1=1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdOutboundDetail" type="numericEqual">OD.IdOutboundDetail</filter>
          <filter name="IdOutboundOrder" type="numericEqual">OD.IdOutboundOrder</filter>
          <filter name="LineNumber" type="numericEqual">OD.LineNumber</filter>
          <filter name="LineCode" type="textEqual">OD.LineCode</filter>
          <filter name="IdItem" type="numericEqual">OD.IdItem</filter>
          <filter name="IdCtgItem" type="numericEqual">OD.IdCtgItem</filter>
          <filter name="LotNumber" type="textEqual">OD.LotNumber</filter>
          <filter name="FifoDate" type="textEqual">OD.FifoDate</filter>
          <filter name="ExpirationDate" type="textEqual">OD.ExpirationDate</filter>
          <filter name="FabricationDate" type="textEqual">OD.FabricationDate</filter>
          <filter name="GrpClass1" type="textEqual">OD.GrpClass1</filter>
          <filter name="GrpClass2" type="textEqual">OD.GrpClass2</filter>
          <filter name="GrpClass3" type="textEqual">OD.GrpClass3</filter>
          <filter name="GrpClass4" type="textEqual">OD.GrpClass4</filter>
          <filter name="GrpClass5" type="textEqual">OD.GrpClass5</filter>
          <filter name="GrpClass6" type="textEqual">OD.GrpClass6</filter>
          <filter name="GrpClass7" type="textEqual">OD.GrpClass7</filter>
          <filter name="GrpClass8" type="textEqual">OD.GrpClass8</filter>
          <filter name="SpecialField1" type="textEqual">OD.SpecialField1</filter>
          <filter name="SpecialField2" type="textEqual">OD.SpecialField2</filter>
          <filter name="SpecialField3" type="textEqual">OD.SpecialField3</filter>
          <filter name="SpecialField4" type="textEqual">OD.SpecialField4</filter>
          <filter name="DateCreated" type="textEqual">OD.DateCreated</filter>
          <filter name="UserCreated" type="textEqual">OD.UserCreated</filter>
          <filter name="DateModified" type="textEqual">OD.DateModified</filter>
          <filter name="UserModified" type="textEqual">OD.UserModified</filter>
        </filters>
        <sub-querys>
          <sub-query code="OrderByIdOutboundDetail">
            <sql>
              ORDER BY ID.IdOutboundDetail
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="OrderByIdItem">
            <sql>
              ORDER BY OD.IdItem
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="IdItemNotINItemVas">
            <sql>
              AND OD.IdItem NOT IN (SELECT IdItem FROM ItemVas)
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="IdItemNotINKit">
            <sql>
              AND OD.IdItem NOT IN (SELECT IdItemKit FROM Kit)
            </sql>
            <parameters>
            </parameters>
          </sub-query>
        </sub-querys>
      </query>

      <query code="InsertOutboundTrack">
        <sql>
          INSERT INTO OutboundTrack
          (IdOutboundOrder
          ,IdTrackOutboundType
          ,DateTrack)
          SELECT @IdOutboundOrder,
          @IdTrackOutboundType,
          @DateTrack
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="Int">IdTrackOutboundType</parameter>
          <parameter type="DateTime">DateTrack</parameter>
        </parameters>
      </query>

      <query code="OutboundTrack_Update">
        <sql>
          UPDATE OutboundTrack
          SET DateTrack = @DateTrack
          WHERE IdOutboundOrder = @IdOutboundOrder
          AND IdTrackOutboundType = @IdTrackOutboundType
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="Int">IdTrackOutboundType</parameter>
          <parameter type="DateTime">DateTrack</parameter>
        </parameters>
      </query>

      <query code="OutboundTrack_Delete">
        <sql>
          DELETE OutboundTrack
          WHERE IdOutboundOrder = @IdOutboundOrder
          AND IdTrackOutboundType = @IdTrackOutboundType
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="Int">IdTrackOutboundType</parameter>
        </parameters>
      </query>
  
      <query code="OutboundTrack_GetByAnyParameter">
        <sql>
          SELECT
          OT.IdOutboundOrder,
          OT.IdTrackOutboundType,
          OT.DateTrack
          FROM OutboundTrack OT
          WHERE 1=1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdOutboundOrder" type="numericEqual">OT.IdOutboundOrder</filter>
          <filter name="IdTrackOutboundType" type="numericEqual">OT.IdTrackOutboundType</filter>
        </filters>
      </query>

      <query code="OutboundOrderPending_GetByTrackFilter">
        <sql>
          SELECT DISTINCT
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs1.WhsCode,
          Whs1.ShortWhsName,
          Whs1.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          tra.IdTrackOutboundType,
          tra.NameTrackOutboundType,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Co1.CountryName	as CountryDeliveryName,
          Out.IdStateDelivery,
          St1.StateName as StateDeliveryName,
          Out.IdCityDelivery,
          Ci1.CityName as CityDeliveryName,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          whs2.WhsCode as WhsTargetCode,
          whs2.ShortWhsName as WhsTargetShortName,
          whs2.WhsName as WhsTargetName,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          CO2.CountryName	as CountryFactName,
          Out.IdStateFact,
          St2.StateName as StateFactName,
          Out.IdCityFact,
          Ci2.CityName as CityFactName,
          Out.FactPhone,
          Out.FactEmail,
          Out.AllowCrossDock,
          Out.AllowBackOrder,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified,
          (SELECT CASE WHEN COUNT(IdOutboundOrder) = 0 THEN 0 ELSE 1 END AS IsTrue
          FROM v_Oub_InOtherSimulation
          WHERE ((IdUser = @idUser AND WmsProcess != @dispatchType) OR IdUser != @idUser)
          AND IdOutboundOrder = Out.IdOutboundOrder) AS InOtherSimulation
          FROM OutboundOrder Out

          LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType AND OutType.Status = 1
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
          LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs
          LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
          LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
          LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity
          LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
          LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
          LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity
          LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
          JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
          LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
          LEFT JOIN TaskOutboundOrderSimulation ts ON ts.IdOutbound = Out.IdOutboundOrder
          WHERE tra.IdTrackOutboundType = @idTrackOutboundType
          -- Filtra las Ordenes generadas por tareas de procesos Wave
          --AND OutType.OutboudTypeCode != 'PIKWV'
          -- Las Ordenes de tipo 'KIT', 'UNKIT' y 'VAS' se procesan aparte (Procesos 'Liberar Kit', 'Liberar Unkit' y 'Liberar VAS')
          --AND (OutType.OutboudTypeCode = 'KIT' AND @dispatchType = 'PIKIT' OR @dispatchType != 'PIKIT' AND OutType.OutboudTypeCode != 'KIT')
          --AND (OutType.OutboudTypeCode = 'UNKIT' AND @dispatchType = 'PIUNK' OR @dispatchType != 'PIUNK' AND OutType.OutboudTypeCode != 'UNKIT')
          --AND (OutType.OutboudTypeCode = 'VAS' AND @dispatchType = 'PIKVA' OR @dispatchType != 'PIKVA' AND OutType.OutboudTypeCode != 'VAS')
          @SQLPart
          ORDER BY Out.CustomerCode, Out.Priority, Out.IdOutboundOrder DESC;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
          <parameter type="Int">idTrackOutboundType</parameter>
          <parameter type="Int">idUser</parameter>
          <parameter type="String">dispatchType</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">Whs1.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">Out.OutboundNumber</filter>
          <filter name="DateRange" type="textBetween">Out.EmissionDate</filter>
          <filter name="ExpectedDateRange" type="textBetween">Out.ExpectedDate</filter>
          <filter name="ShipmentDateRange" type="textBetween">Out.ShipmentDate</filter>
          <filter name="ExpirationDateRange" type="textBetween">Out.ExpirationDate</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">Own.IdOwn</filter>
          <filter name="PriorityRange" type="textBetween">Out.Priority</filter>
          <filter name="Customer" type="textLike">Out.CustomerName</filter>
          <filter name="Carrier" type="textLike">Car.CarrierName</filter>
          <filter name="Route" type="textLike">Out.RouteCode</filter>
          <filter name="Country" type="numericEqual">Out.IdCountryDelivery</filter>
          <filter name="State" type="numericEqual">Out.IdStateDelivery</filter>
          <filter name="City" type="numericEqual">Out.IdCityDelivery</filter>
          <filter name="GroupItem1" type="numericEqual">itm.IdGrpItem1</filter>
          <filter name="GroupItem2" type="numericEqual">itm.IdGrpItem2</filter>
          <filter name="GroupItem3" type="numericEqual">itm.IdGrpItem3</filter>
          <filter name="GroupItem4" type="numericEqual">itm.IdGrpItem4</filter>
          <filter name="OutboundType" type="numericIn">OutType.IdOutboundType</filter>
        </filters>
      </query>
  
      <!--Filtro Track Outbound Type -->

      <query code="TrackOutbound_FindAll">
        <sql>
          SELECT IdTrackOutboundType
          ,NameTrackOutboundType
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM TrackOutboundType
        </sql>
      </query>

      <query code="TrackOutboundType_FindAll">
        <sql>
          SELECT IdTrackOutboundType
          ,NameTrackOutboundType
          FROM TrackOutboundType
          @SQLPart
          ORDER BY IdTrackOutboundType
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="TrackOutboundType" type="numericIn">IdTrackOutboundType</filter>
        </filters>

      </query>

      <!-- Begin Package Consult -->
      <query code="Package_FindAll">
        <sql>
          SELECT BUL.IdWhs
          , W.WhsName
          , BUL.IdOwn
          , O.OwnName
          , OO.IdOutboundType
          , OT.OutboundTypeName
          , VLT.IdTrackOutboundType
          , VLT.NameTrackOutboundType
          , OO.OutboundNumber
          , OO.ReferenceNumber
          , BUL.IdOutboundOrder
          --, BUL.OutboundLineNumber
          , BUL.IdLpnCode
          , BUL.IdLocCode
          , SUM(BUL.TotItems) ItemQty
          , L.IsClosed
          , L.WeightTotal
          , L.VolumeTotal
          , OO.CustomerCode
          , OO.CustomerName
          , OO.ExpectedDate
          , OO.IdCountryDelivery
          , C.CountryName
          , OO.IdStateDelivery
          , ST.StateName
          , OO.IdCityDelivery
          , CT.CityName
          , L.SealNumber
          , L.LpnParent
          , L.IdLpnType
          , LT.LpnTypeCode
          , LT.LpnTypeName
          , OO.RouteCode
          , B.BranchName
          FROM Lpn L
          INNER JOIN LPNType LT ON L.IdLpnType = LT.IdLpnType
          INNER JOIN (SELECT S.IdWhs, S.IdOwn,
          S.IdOutboundOrder, S.OutboundLineNumber,
          S.IdLpnCode, S.IdLocCode, SUM(ItemQty) AS TotItems
          FROM Stock S
          WHERE IdOutboundOrder IS NOT NULL
          GROUP BY S.IdWhs, S.IdOwn, S.IdOutboundOrder,
          S.OutboundLineNumber, S.IdLpnCode, S.IdLocCode) AS BUL
          ON BUL.IdLpnCode = L.IdLpnCode
          INNER JOIN Warehouse W
          ON W.IdWhs = BUL.IdWhs
          INNER JOIN Owner O
          ON O.IdOwn = BUL.IdOwn
          INNER JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = BUL.IdOutboundOrder
          INNER JOIN OutboundType OT
          ON OT.IdOutboundType = OO.IdOutboundType
          AND OT.Status = 1
          INNER JOIN v_Oub_LatestTrack VLT
          ON VLT.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN Country C
          ON C.IdCountry = OO.IdCountryDelivery
          LEFT JOIN State ST
          ON ST.IdState = OO.IdStateDelivery
          LEFT JOIN City CT
          ON CT.IdCity = OO.IdCityDelivery
          LEFT JOIN Branch B
          ON OO.IdBranch = B.IdBranch AND OO.IdOwn = B.IdOwn
          @SQLPart
          GROUP BY BUL.IdWhs, W.WhsName, BUL.IdOwn, O.OwnName, OO.IdOutboundType, OT.OutboundTypeName
          , VLT.IdTrackOutboundType, VLT.NameTrackOutboundType, OO.OutboundNumber, OO.ReferenceNumber, BUL.IdOutboundOrder
          , BUL.IdLpnCode, BUL.IdLocCode, BUL.IdLpnCode, BUL.IdLocCode, L.IsClosed
          , L.WeightTotal, OO.CustomerCode, OO.CustomerName, OO.ExpectedDate, OO.IdCountryDelivery
          , C.CountryName, OO.IdStateDelivery, ST.StateName, OO.IdCityDelivery, CT.CityName
          , L.SealNumber, L.LpnParent, L.IdLpnType, LT.LpnTypeCode, LT.LpnTypeName, L.VolumeTotal, OO.RouteCode , B.BranchName
          ORDER BY BUL.IdWhs, BUL.IdOwn, OO.OutboundNumber, BUL.IdLpnCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
          <filter name="Owner" type="numericIn">O.IdOwn</filter>
          <filter name="OutboundType" type="numericIn">OO.IdOutboundType</filter>
          <filter name="TrackOutboundType" type="numericIn">VLT.IdTrackOutboundType</filter>
          <filter name="DateRange" type="textBetween">OO.ExpectedDate</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="ReferenceNbr" type="textLike">OO.ReferenceNumber</filter>
          <filter name="Customer" type="textLike">OO.CustomerCode</filter>
          <filter name="LpnSource" type="textLike">BUL.IdLpnCode</filter>
          <filter name="LocationSource" type="textLike">BUL.IdLocCode</filter>
          <filter name="Country" type="textEqual">OO.IdCountryDelivery</filter>
          <filter name="State" type="textEqual">OO.IdStateDelivery</filter>
          <filter name="City" type="textEqual">OO.IdCityDelivery</filter>
          <filter name="Carrier" type="textLike">OO.CarrierCode</filter>
          <filter name="Route" type="textLike">OO.RouteCode</filter>
          <filter name="LpnCode" type="textLike">L.IdLpnCode</filter>
          <filter name="LpnParent" type="textLike">L.LpnParent</filter>
          <filter name="LpnSealNumber" type="textLike">L.SealNumber</filter>
          <filter name="LpnType" type="numericIn">L.IdLpnType</filter>
          <filter name="LpnIsParent" type="numericEqual">L.IsParent</filter>
          <filter name="LpnIsClosed" type="numericEqual">L.IsClosed</filter>
        </filters>
      </query>


	<query code="Package_FindSimpliRoute">
		<sql>
			SELECT BUL.IdWhs
			, W.WhsName
			, BUL.IdOwn
			, O.OwnName
			, OO.IdOutboundType
			, OT.OutboundTypeName
			, VLT.IdTrackOutboundType
			, VLT.NameTrackOutboundType
			, OO.OutboundNumber
			, OO.ReferenceNumber
			, BUL.IdOutboundOrder
			--, BUL.OutboundLineNumber
			, BUL.IdLpnCode
			, BUL.IdLocCode
			, SUM(BUL.TotItems) ItemQty
			, L.IsClosed
			, L.WeightTotal
			, L.VolumeTotal
			, OO.CustomerCode
			, OO.CustomerName
			, OO.EmissionDate
			, OO.IdCountryDelivery
			, C.CountryName
			, OO.IdStateDelivery
			, ST.StateName
			, OO.IdCityDelivery
			, CT.CityName
			, L.SealNumber
			, L.LpnParent
			, L.IdLpnType
			, LT.LpnTypeCode
			, LT.LpnTypeName
			, OO.RouteCode
			, B.BranchName
			, O.OwnCode
			, W.WhsCode
			, W.ShortWhsName
			, OO.DeliveryAddress1
			----------
			FROM Lpn L
			INNER JOIN LPNType LT ON L.IdLpnType = LT.IdLpnType
			INNER JOIN (SELECT S.IdWhs, S.IdOwn,
			S.IdOutboundOrder, S.OutboundLineNumber,
			S.IdLpnCode, S.IdLocCode, SUM(ItemQty) AS TotItems
			FROM Stock S
			WHERE IdOutboundOrder IS NOT NULL
			GROUP BY S.IdWhs, S.IdOwn, S.IdOutboundOrder,
			S.OutboundLineNumber, S.IdLpnCode, S.IdLocCode) AS BUL
			ON BUL.IdLpnCode = L.IdLpnCode
			INNER JOIN Warehouse W
			ON W.IdWhs = BUL.IdWhs
			INNER JOIN Owner O
			ON O.IdOwn = BUL.IdOwn
			INNER JOIN OutboundOrder OO
			ON OO.IdOutboundOrder = BUL.IdOutboundOrder
			INNER JOIN OutboundType OT
			ON OT.IdOutboundType = OO.IdOutboundType
			AND OT.Status = 1
			INNER JOIN v_Oub_LatestTrack VLT
			ON VLT.IdOutboundOrder = OO.IdOutboundOrder
			LEFT JOIN Country C
			ON C.IdCountry = OO.IdCountryDelivery
			LEFT JOIN State ST
			ON ST.IdState = OO.IdStateDelivery
			LEFT JOIN City CT
			ON CT.IdCity = OO.IdCityDelivery
			LEFT JOIN Branch B
			ON OO.IdBranch = B.IdBranch AND OO.IdOwn = B.IdOwn
			LEFT JOIN TaskQueue TQ ON L.IdLpnCode = TQ.IdLpnCode
			INNER JOIN Location LOC ON LOC.IdLocCode = BUL.IdLocCode
			@SQLPart
			AND L.IdLpnCode NOT IN (SELECT IdLpnCode FROM taskqueue WHERE IdTypeTask = 5 )
			AND LOC.LocTypeCode = 'DOCK'
			GROUP BY BUL.IdWhs, W.WhsName, BUL.IdOwn, O.OwnName, OO.IdOutboundType, OT.OutboundTypeName
			, VLT.IdTrackOutboundType, VLT.NameTrackOutboundType, OO.OutboundNumber, OO.ReferenceNumber, BUL.IdOutboundOrder
			, BUL.IdLpnCode, BUL.IdLocCode, BUL.IdLpnCode, BUL.IdLocCode, L.IsClosed
			, L.WeightTotal, OO.CustomerCode, OO.CustomerName, OO.EmissionDate, OO.IdCountryDelivery
			, C.CountryName, OO.IdStateDelivery, ST.StateName, OO.IdCityDelivery, CT.CityName
			, L.SealNumber, L.LpnParent, L.IdLpnType, LT.LpnTypeCode, LT.LpnTypeName, L.VolumeTotal, OO.RouteCode , B.BranchName, O.OwnCode, W.WhsCode, W.ShortWhsName, OO.DeliveryAddress1
			ORDER BY BUL.IdWhs, BUL.IdOwn, OO.OutboundNumber, BUL.IdLpnCode;

			SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
			FROM CfgEntityProperty qf
			JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
			WHERE QueryName = @queryName
			ORDER BY FieldOrder
		</sql>
		<parameters>
			<parameter type="String">queryName</parameter>
			<parameter type="SQLPart">@SQLPart</parameter>
		</parameters>
		<filters>
			<filter name="Warehouse" type="numericIn">W.IdWhs</filter>
			<filter name="Owner" type="numericIn">O.IdOwn</filter>
			<filter name="OutboundType" type="numericIn">OO.IdOutboundType</filter>
			<filter name="TrackOutboundType" type="numericIn">VLT.IdTrackOutboundType</filter>
			<filter name="DateRange" type="textBetween">OO.EmissionDate</filter>
			<filter name="Item" type="textLike">I.ItemCode</filter>
			<filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
			<filter name="ReferenceNbr" type="textLike">OO.ReferenceNumber</filter>
			<filter name="Customer" type="textLike">OO.CustomerCode</filter>
			<filter name="LpnSource" type="textLike">BUL.IdLpnCode</filter>
			<filter name="LocationSource" type="textLike">BUL.IdLocCode</filter>
			<filter name="Country" type="textEqual">OO.IdCountryDelivery</filter>
			<filter name="State" type="textEqual">OO.IdStateDelivery</filter>
			<filter name="City" type="textEqual">OO.IdCityDelivery</filter>
			<filter name="Carrier" type="textLike">OO.CarrierCode</filter>
			<filter name="Route" type="textLike">OO.RouteCode</filter>
			<filter name="LpnCode" type="textLike">L.IdLpnCode</filter>
			<filter name="LpnParent" type="textLike">L.LpnParent</filter>
			<filter name="LpnSealNumber" type="textLike">L.SealNumber</filter>
			<filter name="LpnType" type="numericIn">L.IdLpnType</filter>
			<filter name="LpnIsParent" type="numericEqual">L.IsParent</filter>
			<filter name="LpnIsClosed" type="numericEqual">L.IsClosed</filter>
		</filters>
	</query>

	

	<query code="Package_GetById">
        <sql>
          SELECT BUL.IdWhs
          , W.WhsName
          , BUL.IdOwn
          , O.OwnName
          , OO.IdOutboundType
          , OT.OutboundTypeName
          , OT.OutboudTypeCode AS OutboundTypeCode
          , VLT.IdTrackOutboundType
          , VLT.NameTrackOutboundType
          , OO.OutboundNumber
          , BUL.IdOutboundOrder
          --, BUL.OutboundLineNumber
          , BUL.IdLpnCode
          , BUL.IdLocCode
          , BUL.LocTypeCode
          , SUM(BUL.TotItems) ItemQty
          , L.IsClosed
          , L.WeightTotal
          , OO.CustomerCode
          , OO.CustomerName
          , OO.ExpectedDate
          , OO.IdCountryDelivery
          , C.CountryName
          , OO.IdStateDelivery
          , ST.StateName
          , OO.IdCityDelivery
          , CT.CityName
          , L.SealNumber
          , L.LpnParent
          , L.IdLpnType
          , LT.LpnTypeCode
          , LT.LpnTypeName
          FROM Lpn L
          INNER JOIN LPNType LT ON L.IdLpnType = LT.IdLpnType
          INNER JOIN (SELECT S.IdWhs, S.IdOwn,
          S.IdOutboundOrder, S.OutboundLineNumber,
          S.IdLpnCode, S.IdLocCode, Loc.LocTypeCode,
          SUM(ItemQty) AS TotItems
          FROM Stock S INNER JOIN
          Location Loc ON S.IdLocCode = Loc.IdLocCode
          AND S.IdWhs = Loc.IdWhs
          WHERE IdOutboundOrder IS NOT NULL
          GROUP BY S.IdWhs, S.IdOwn, S.IdOutboundOrder,
          S.OutboundLineNumber, S.IdLpnCode, S.IdLocCode, Loc.LocTypeCode) AS BUL
          ON BUL.IdLpnCode = L.IdLpnCode
          INNER JOIN Warehouse W
          ON W.IdWhs = BUL.IdWhs
          INNER JOIN Owner O
          ON O.IdOwn = BUL.IdOwn
          INNER JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = BUL.IdOutboundOrder
          INNER JOIN OutboundType OT
          ON OT.IdOutboundType = OO.IdOutboundType
          AND OT.Status = 1
          INNER JOIN v_Oub_LatestTrack VLT
          ON VLT.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN Country C
          ON C.IdCountry = OO.IdCountryDelivery
          LEFT JOIN State ST
          ON ST.IdState = OO.IdStateDelivery
          LEFT JOIN City CT
          ON CT.IdCity = OO.IdCityDelivery
          WHERE W.IdWhs = @IdWhs
          AND O.IdOwn = @IdOwn
          AND BUL.IdLpnCode = @IdLpnCode
          AND L.IsClosed = 0

          GROUP BY BUL.IdWhs, W.WhsName, BUL.IdOwn, O.OwnName, OO.IdOutboundType, OT.OutboundTypeName
          , OT.OutboudTypeCode, VLT.IdTrackOutboundType, VLT.NameTrackOutboundType, OO.OutboundNumber, BUL.IdOutboundOrder
          , BUL.IdLpnCode, BUL.IdLocCode, BUL.IdLpnCode, BUL.IdLocCode, BUL.LocTypeCode, L.IsClosed
          , L.WeightTotal, OO.CustomerCode, OO.CustomerName, OO.ExpectedDate, OO.IdCountryDelivery
          , C.CountryName, OO.IdStateDelivery, ST.StateName, OO.IdCityDelivery, CT.CityName
          , L.SealNumber, L.LpnParent, L.IdLpnType, LT.LpnTypeCode, LT.LpnTypeName
          ORDER BY BUL.IdWhs, BUL.IdOwn, OO.OutboundNumber, BUL.IdLpnCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">IdLpnCode</parameter>
        </parameters>
        <filters>         
        </filters>
      </query>
      <!-- End Package Consult -->

  <!-- Begin Release Lpn Without Document -->
  <query code="ReleaseLpnWithoutDocument_FindAll">
    <sql>
      SELECT BUL.IdWhs
      , W.WhsName
      , BUL.IdOwn
      , O.OwnName
      , IO.IdInboundType
      , IT.InboundTypeName
      , VLT.IdTrackInboundType
      , VLT.NameTrackInboundType
      , IO.InboundNumber
      , BUL.IdInboundOrder
      , BUL.IdLpnCode
      , BUL.IdLocCode
      , SUM(BUL.TotItems) ItemQty
      , L.IsClosed
      , L.WeightTotal
      , L.VolumeTotal
      , V.VendorCode
      , V.VendorName
      , L.SealNumber
      , L.LpnParent
      , L.IdLpnType
      , LT.LpnTypeCode
      , LT.LpnTypeName
      FROM Lpn L
      INNER JOIN LPNType LT ON L.IdLpnType = LT.IdLpnType
      INNER JOIN (SELECT S.IdWhs, S.IdOwn,
      S.IdInboundOrder, S.InboundLineNumber,
      S.IdLpnCode, S.IdLocCode, SUM(ItemQty) AS TotItems
      FROM Stock S
      WHERE IdOutboundOrder IS NULL
      GROUP BY S.IdWhs, S.IdOwn, S.IdInboundOrder,
      S.InboundLineNumber, S.IdLpnCode, S.IdLocCode) AS BUL
      ON BUL.IdLpnCode = L.IdLpnCode
      INNER JOIN Warehouse W
      ON W.IdWhs = BUL.IdWhs
      INNER JOIN Owner O
      ON O.IdOwn = BUL.IdOwn
      INNER JOIN Stock S 
      ON S.IdLpnCode = L.IdLpnCode
      INNER JOIN Item I 
      ON S.IdItem = I.IdItem and S.IdOwn = I.IdOwn
      LEFT JOIN InboundOrder IO
      ON IO.IdInboundOrder = BUL.IdInboundOrder
      LEFT JOIN InboundType IT
      ON IT.IdInboundType = IO.IdInboundType
      AND IT.Status = 1
      LEFT JOIN v_Inb_LatestTrack VLT
      ON VLT.IdInboundOrder = IO.IdInboundOrder
      LEFT JOIN Vendor V
      ON V.IdOwn = IO.IdOwn
      AND V.IdVendor = IO.IdVendor
      @SQLPart
      AND L.IsClosed = 0
      AND NOT EXISTS(SELECT IdLpnSourceProposal
      FROM TaskDetail
      WHERE Status = 1
      AND IsComplete = 0
      AND IdLpnSourceProposal = L.IdLpnCode)
      GROUP BY BUL.IdWhs, W.WhsName, BUL.IdOwn, O.OwnName, IO.IdInboundType, IT.InboundTypeName
      , VLT.IdTrackInboundType, VLT.NameTrackInboundType, IO.InboundNumber, BUL.IdInboundOrder
      , BUL.IdLpnCode, BUL.IdLocCode, BUL.IdLpnCode, BUL.IdLocCode, L.IsClosed
      , L.WeightTotal, L.VolumeTotal, V.VendorCode, V.VendorName, L.SealNumber, L.LpnParent, L.IdLpnType, LT.LpnTypeCode, LT.LpnTypeName
      ORDER BY BUL.IdWhs, BUL.IdOwn, IO.InboundNumber, BUL.IdLpnCode;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
      <filter name="Owner" type="numericIn">O.IdOwn</filter>
      <filter name="InboundType" type="numericIn">IO.IdInboundType</filter>
      <filter name="TrackInboundType" type="numericIn">VLT.IdTrackInboundType</filter>
      <filter name="DocumentNbr" type="textLike">IO.InboundNumber</filter>
      <filter name="Vendor" type="textLike">V.VendorName</filter>
      <filter name="LpnSource" type="textLike">BUL.IdLpnCode</filter>
      <filter name="LocationSource" type="textLike">BUL.IdLocCode</filter>
      <filter name="LpnCode" type="textLike">L.IdLpnCode</filter>
      <filter name="LpnParent" type="textLike">L.LpnParent</filter>
      <filter name="LpnSealNumber" type="textLike">L.SealNumber</filter>
      <filter name="LpnType" type="numericIn">L.IdLpnType</filter>
      <filter name="LpnIsParent" type="numericEqual">L.IsParent</filter>
      <filter name="LpnIsClosed" type="numericEqual">L.IsClosed</filter>
      <filter name="Item" type="textLike">I.ItemCode</filter>
      <filter name="LotNumberRange" type="textBetween">S.LotNumber</filter>
    </filters>
  </query>
  
  <!-- End Release Lpn Without Document -->

      <!-- End OUTBOUND section  -->

      <!-- Begin Dispatch section  -->

      <query code="GetByOutboundOrder">
        <sql>
          Select d.IdDispatch
          ,d.IdOutboundOrder
          ,d.Status
          ,d.IdTrackOutbound
          ,d.TrackOutboundDate
          ,d.IdDispatchType
          ,d.ReferenceDoc
          ,d.IdReferenceDocType
          ,d.IdCarrier
          ,d.IdTruckCode
          ,d.ShiftNumber
          ,d.IdWhs
          ,d.UserWms
          ,d.IdLocationForLift
          ,d.IdLocationStage
          from dispatch D
          Where IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="DispatchAdvanced_FindAll">
        <sql>
          SELECT DISTINCT
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs.WhsCode,
          Whs.ShortWhsName,
          Whs.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          tra.NameTrackOutboundType,
          Out.Status,
          Out.ReferenceNumber,
          Out.Priority,
          Out.InmediateProcess,
          Vw.QtySolicitado,
          Vw.QtyRelease,
          Vw.QtyPicking,
          Vw.QtyPacking,
          Vw.QtyLoading,
          Vw.QtyShipping,
          Vw.PctRelease,
          Vw.PctPicking,
          Vw.PctPacking,
          Vw.PctLoading,
          Vw.PctShipping,
          Vw.QtyRouting,
          Vw.PctRouting,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Co.CountryName as CountryDeliveryName,
          IdStateDelivery,
          StateName as StateDeliveryName,
          Out.IdCityDelivery,
          CityName as CityDeliveryName,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode,
          B.BranchName,
          (SELECT    TrackOutboundDate
          FROM Dispatch D
          WHERE D.IdOutboundOrder = Out.IdOutboundOrder
          AND D.IdDispatchType IN (6, 23)
          AND D.TrackOutboundDate = ( SELECT MIN(D.TrackOutboundDate)
          FROM Dispatch D
          WHERE D.IdOutboundOrder = Out.IdOutboundOrder
          AND D.IdDispatchType IN (6, 23))
          ) as ShippedDate,
          (SELECT COUNT(IdOutboundDetail) FROM OutboundDetail WHERE IdOutboundOrder = Out.IdOutboundOrder) AS SpecialField1,
          (Select Count(IdTaskDetail)  from TaskDetail TD  where IdDocumentBound = Out.IdOutboundOrder) AS SpecialField2,
          (SELECT TOP 1 coalesce(StateInterface, '') FROM Dispatch where IdDispatchType = 2 and IdOutboundOrder = Out.IdOutboundOrder) as SpecialField3,
          Out.SpecialField4,
          (
          SELECT IdDocumentBound AS WaveId
          FROM Task
          WHERE IdTask IN (
          SELECT DISTINCT(IdTask) AS idTask
          FROM TaskOutboundOrder
          WHERE IdOutboundOrder = Out.IdOutboundOrder
          )
          ) AS WaveId,
          (
          CASE
          WHEN (
          SELECT COUNT(*)
          FROM Task T
          WHERE T.IdDocumentBound = Out.IdOutboundOrder
          AND T.TaskTypeCode IN ('PIKOR','PIKBT','PIKWV','PIKPS','PIKIT','PIKVA', 'PIKME', 'PKLPN')
          AND T.IsComplete = 1
          ) &gt; 0 THEN 1 ELSE 0
            END
          ) AS IsOrderPicked,
          (
            CASE
              WHEN (
                SELECT COUNT(*)
                  FROM Task T
                 WHERE T.IdDocumentBound = Out.IdOutboundOrder
                   AND T.TaskTypeCode IN ('PAKOR')
                   AND T.IsComplete = 1
              ) &gt; 0 THEN 1 ELSE 0
            END
          ) AS IsOrderPacked,
          (
            CASE
              WHEN (
                SELECT COUNT(*)
                  FROM Task T
                 WHERE T.IdDocumentBound = Out.IdOutboundOrder
                   AND T.TaskTypeCode IN ('RUTEO')
                   AND T.IsComplete = 1
              ) &gt; 0 THEN 1 ELSE 0
            END
          ) AS IsOrderRouted,
          (
            CASE
              WHEN (
                SELECT COUNT(*)
                  FROM Task T
                 WHERE T.IdDocumentBound = Out.IdOutboundOrder
                   AND T.TaskTypeCode IN ('LOAD')
                   AND T.IsComplete = 1
              ) &gt; 0 THEN 1 ELSE 0
            END
          ) AS IsOrderLoaded,
          (
            CASE
                  WHEN (
		                    SELECT COUNT(*)
		                      FROM Task T
		                     WHERE T.IdDocumentBound = Out.IdOutboundOrder
		                       AND T.TaskTypeCode IN ('PIKOR', 'PIKPS', 'PIKIT', 'PKLPN')
		                       AND T.IdTrackTaskType = 2
	                    ) &gt; 0 THEN 1 ELSE 0
	          END
          ) as HasPausedPicking
          FROM OutboundOrder Out
          LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType AND OutType.Status = 1
          INNER JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs ON Out.IdWhs = whs.IdWhs
          LEFT JOIN Country Co ON Out.IdCountryDelivery = Co.IdCountry
          LEFT JOIN State St ON Out.IdStateDelivery = St.IdState
          LEFT JOIN City Ci ON Out.IdCityDelivery = Ci.IdCity
          INNER JOIN v_Oub_DisptchProgXOrder Vw ON Out.IdOutboundOrder = Vw.IdOutboundOrder
          LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
          LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
          LEFT JOIN Branch B ON Out.IdBranch = B.IdBranch AND Out.IdOwn = B.IdOwn
          @SQLPart

          ORDER BY Whs.ShortWhsName,Own.OwnName,OutType.OutboundTypeName,Out.OutboundNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">Whs.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">Out.OutboundNumber</filter>
          <filter name="DateRange" type="textBetween">Out.EmissionDate</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">Own.IdOwn</filter>
          <filter name="ExpectedDateRange" type="textBetween">Out.ExpectedDate</filter>
          <filter name="ExpirationDateRange" type="textBetween">Out.ExpirationDate</filter>
          <filter name="PriorityRange" type="textBetween">Out.Priority</filter>
          <filter name="Customer" type="textLike">Out.CustomerName</filter>
          <filter name="Carrier" type="textLike">Car.CarrierName</filter>
          <filter name="Route" type="textLike">Out.RouteCode</filter>
          <filter name="Country" type="numericEqual">Out.IdCountryDelivery</filter>
          <filter name="State" type="numericEqual">Out.IdStateDelivery</filter>
          <filter name="City" type="numericEqual">Out.IdCityDelivery</filter>
          <filter name="GroupItem1" type="numericEqual">itm.IdGrpItem1</filter>
          <filter name="GroupItem2" type="numericEqual">itm.IdGrpItem2</filter>
          <filter name="GroupItem3" type="numericEqual">itm.IdGrpItem3</filter>
          <filter name="GroupItem4" type="numericEqual">itm.IdGrpItem4</filter>
          <filter name="OutboundType" type="numericIn">Out.IdOutboundType</filter>
          <filter name="Code" type="textLike">Out.ReferenceNumber</filter>
          <filter name="ListTrackOutboundType" type="numericIn">tra.IdTrackOutboundType</filter>
          <filter name="InmediateProcess" type="numericEqual">Out.InmediateProcess</filter>
        </filters>
      </query>

      <query code="DispatchAdvanced_FindAllWave">
        <sql>
          SELECT OO.IdOutboundOrder,
          W.WhsCode,
          W.ShortWhsName,
          O.OwnCode,
          O.OwnName,
          OO.OutboundNumber,
          OT.OutboundTypeName,
          OT.OutboudTypeCode,
          tra.NameTrackOutboundType,
          OO.Status,
          OO.ReferenceNumber,
          OO.Priority,
          OO.InmediateProcess,
          OO.EmissionDate,
          OO.ExpectedDate,
          OO.ShipmentDate,
          OO.ExpirationDate,
          OO.CancelUser,
          OO.CancelDate,
          OO.CustomerCode,
          OO.CustomerName,
          B.BranchName,
          OO.DeliveryAddress1,
          OO.DeliveryAddress2,
          OO.DeliveryPhone,
          OO.DeliveryEmail,
          OO.FullShipment,
          OO.RouteCode,
          Co.CountryName AS CountryDeliveryName,
          St.StateName AS StateDeliveryName,
          Ci.CityName AS CityDeliveryName,
          Car.CarrierName,
          Car.CarrierCode,
          final.QtyRequest AS QtySolicitado,
          final.QtyRelease,
          final.PorcRelease AS PctRelease,
          final.QtyPicking,
          final.PorcPicking AS PctPicking,
          final.QtySorting,
          final.PorcSorting AS PctSorting,
          final.QtyRouting,
          final.PorcRouting AS PctRouting,
          final.QtyPacking,
          final.PorcPacking AS PctPacking,
          final.QtyLoading,
          final.PorcLoading AS PctLoading,
          final.QtyShipping,
          final.PorcShipping AS PctShipping,
          (SELECT    TrackOutboundDate
          FROM  Dispatch D
          WHERE D.IdOutboundOrder = OO.IdOutboundOrder
          AND D.IdDispatchType IN (6, 23)
          AND D.TrackOutboundDate = ( SELECT  MIN(D.TrackOutboundDate)
          FROM Dispatch D
          WHERE D.IdOutboundOrder = OO.IdOutboundOrder
          AND D.IdDispatchType IN (6, 23))) AS ShippedDate
          FROM
          (
          SELECT tot.WaveId,
          tot.QtyRequest,
          tot.QtyRelease,
          CAST(((tot.QtyRelease / tot.QtyRequest) * 100) AS INT) AS PorcRelease,
          tot.QtyPicking,
          CAST(((tot.QtyPicking / tot.QtyRequest) * 100) AS INT) AS PorcPicking,
          tot.QtySorting,
          CAST(((tot.QtySorting / tot.QtyRequest) * 100) AS INT) AS PorcSorting,
          tot.QtyPacking,
          CAST(((tot.QtyPacking / tot.QtyRequest) * 100) AS INT) AS PorcPacking,
          tot.QtyRouting,
          CAST(((tot.QtyRouting / tot.QtyRequest) * 100) AS INT) AS PorcRouting,
          tot.QtyLoading,
          CAST(((tot.QtyLoading / tot.QtyRequest) * 100) AS INT) AS PorcLoading,
          tot.QtyShipping,
          CAST(((tot.QtyShipping / tot.QtyRequest) * 100) AS INT) AS PorcShipping
          FROM
          (
          SELECT
          req.WaveId,
          req.QtyRequest,
          (
          SELECT
          COALESCE(SUM(DD.ItemQty), 0) AS QtyRelease
          FROM Dispatch D
          JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE D.IdOutboundOrder IN (
          SELECT  DISTINCT(IdOutboundOrder)
          FROM Task T
          JOIN TaskOutboundOrder TOO
          ON T.IdTask = TOO.IdTask
          WHERE T.TaskTypeCode = 'PIKWV'
          AND T.IdOwn = req.IdOwn
          AND T.IdWhs = req.IdWhs
          AND T.IdDocumentBound = req.WaveId
          )
          AND DD.IdWmsProcessCode = 'RLEAS'
          ) AS QtyRelease,
          (
          SELECT
          COALESCE(SUM(DD.ItemQty), 0) AS QtyPicking
          FROM Dispatch D
          JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE D.IdOutboundOrder IN (
          SELECT  DISTINCT(IdOutboundOrder)
          FROM Task T
          JOIN TaskOutboundOrder TOO
          ON T.IdTask = TOO.IdTask
          WHERE T.TaskTypeCode = 'PIKWV'
          AND T.IdOwn = req.IdOwn
          AND T.IdWhs = req.IdWhs
          AND T.IdDocumentBound = req.WaveId
          )
          AND DD.IdWmsProcessCode = 'PKWAV'
          ) AS QtyPicking,
          (
          SELECT
          COALESCE(SUM(DD.ItemQty), 0) AS QtySorting
          FROM Dispatch D
          JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE D.IdOutboundOrder IN (
          SELECT  DISTINCT(IdOutboundOrder)
          FROM Task T
          JOIN TaskOutboundOrder TOO
          ON T.IdTask = TOO.IdTask
          WHERE T.TaskTypeCode = 'PIKWV'
          AND T.IdOwn = req.IdOwn
          AND T.IdWhs = req.IdWhs
          AND T.IdDocumentBound = req.WaveId
          )
          AND DD.IdWmsProcessCode = 'SORT'
          ) AS QtySorting,
          (
          SELECT
          COALESCE(SUM(DD.ItemQty), 0) AS QtyPacking
          FROM Dispatch D
          JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE D.IdOutboundOrder IN (
          SELECT  DISTINCT(IdOutboundOrder)
          FROM Task T
          JOIN TaskOutboundOrder TOO
          ON T.IdTask = TOO.IdTask
          WHERE T.TaskTypeCode = 'PIKWV'
          AND T.IdOwn = req.IdOwn
          AND T.IdWhs = req.IdWhs
          AND T.IdDocumentBound = req.WaveId
          )
          AND DD.IdWmsProcessCode = 'PACK'
          ) AS QtyPacking,
          (
          SELECT
          COALESCE(SUM(DD.ItemQty), 0) AS QtyRouting
          FROM Dispatch D
          JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE D.IdOutboundOrder IN (
          SELECT  DISTINCT(IdOutboundOrder)
          FROM Task T
          JOIN TaskOutboundOrder TOO
          ON T.IdTask = TOO.IdTask
          WHERE T.TaskTypeCode = 'PIKWV'
          AND T.IdOwn = req.IdOwn
          AND T.IdWhs = req.IdWhs
          AND T.IdDocumentBound = req.WaveId
          )
          AND DD.IdWmsProcessCode = 'RUTEO'
          ) AS QtyRouting,
          (
          SELECT
          COALESCE(SUM(DD.ItemQty), 0) AS QtyLoading
          FROM Dispatch D
          JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE D.IdOutboundOrder IN (
          SELECT  DISTINCT(IdOutboundOrder)
          FROM Task T
          JOIN TaskOutboundOrder TOO
          ON T.IdTask = TOO.IdTask
          WHERE T.TaskTypeCode = 'PIKWV'
          AND T.IdOwn = req.IdOwn
          AND T.IdWhs = req.IdWhs
          AND T.IdDocumentBound = req.WaveId
          )
          AND DD.IdWmsProcessCode = 'LOAD'
          ) AS QtyLoading,
          (
          SELECT
          COALESCE(SUM(DD.ItemQty), 0) AS QtyLoading
          FROM Dispatch D
          JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE D.IdOutboundOrder IN (
          SELECT  DISTINCT(IdOutboundOrder)
          FROM Task T
          JOIN TaskOutboundOrder TOO
          ON T.IdTask = TOO.IdTask
          WHERE T.TaskTypeCode = 'PIKWV'
          AND T.IdOwn = req.IdOwn
          AND T.IdWhs = req.IdWhs
          AND T.IdDocumentBound = req.WaveId
          )
          AND DD.IdWmsProcessCode = 'SHIPP'
          ) AS QtyShipping
          FROM
          (
          SELECT SUM(OD.ItemQty) AS QtyRequest,
          data.WaveId,
          data.IdOwn,
          data.IdWhs
          FROM OutboundDetail OD
          JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = OD.IdOutboundOrder
          JOIN (
          SELECT
          DISTINCT(orders.IdOutboundOrder),
          wave.IdOutboundOrder as WaveId,
          orders.IdOwn,
          orders.IdWhs
          FROM
          (
          SELECT TOO.IdOutboundOrder,
          T.IdOwn,
          T.IdWhs,
          T.IdDocumentBound
          FROM Task T
          JOIN TaskOutboundOrder TOO
          ON T.IdTask = TOO.IdTask
          WHERE T.TaskTypeCode = 'PIKWV'
          ) orders
          JOIN
          (
          SELECT OO.IdOutboundOrder,
          OO.IdOwn,
          OO.IdWhs
          FROM OutboundOrder OO
          JOIN OutboundType OT
          ON OO.IdOutboundType = OT.IdOutboundType
          JOIN v_Oub_LatestTrack tra
          ON OO.IdOutboundOrder = tra.IdOutboundOrder
          WHERE OT.OutboudTypeCode = 'PIKWV'
          @SQLPart
          ) wave
          ON orders.IdDocumentBound = wave.IdOutboundOrder
          AND orders.IdOwn = wave.IdOwn
          AND orders.IdWhs = wave.IdWhs
          ) data
          ON data.IdOutboundOrder = OO.IdOutboundOrder
          GROUP BY data.WaveId,
          data.IdOwn,
          data.IdWhs
          ) req
          )tot
          ) final
          JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = final.WaveId
          JOIN Owner O
          ON OO.IdOwn = O.IdOwn
          JOIN Warehouse W
          ON W.IdWhs = OO.IdWhs
          JOIN OutboundType OT
          ON OO.IdOutboundType = OT.IdOutboundType
          LEFT JOIN Branch B
          ON B.IdBranch = OO.IdBranch
          JOIN v_Oub_LatestTrack tra
          ON OO.IdOutboundOrder = tra.IdOutboundOrder
          LEFT JOIN Carrier Car
          ON OO.CarrierCode = Car.CarrierCode
          LEFT JOIN Country Co
          ON OO.IdCountryDelivery = Co.IdCountry
          LEFT JOIN State St
          ON OO.IdStateDelivery = St.IdState
          LEFT JOIN City Ci
          ON OO.IdCityDelivery = Ci.IdCity
          ORDER BY W.ShortWhsName,
          O.OwnName,
          OO.OutboundNumber;


          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
         <filters>
          <filter name="Warehouse" type="numericIn">OO.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="DateRange" type="textBetween">OO.EmissionDate</filter>
          <filter name="Owner" type="numericIn">OO.IdOwn</filter>
          <filter name="ExpectedDateRange" type="textBetween">OO.ExpectedDate</filter>
          <filter name="ExpirationDateRange" type="textBetween">OO.ExpirationDate</filter>
          <filter name="TrackOutboundType" type="numericIn">tra.IdTrackOutboundType</filter>
          <filter name="OutboundType" type="numericIn">OO.IdOutboundType</filter>
        </filters>
      </query>

      <query code="DispatchAdvanced_GetByAnyParameter">
        <sql>
          SELECT DISTINCT
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs.WhsCode,
          Whs.ShortWhsName,
          Whs.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          tra.NameTrackOutboundType,
          Out.Status,
          Out.ReferenceNumber,
          Out.Priority,
          Out.InmediateProcess,
          Vw.QtySolicitado,
          Vw.QtyRelease,
          Vw.QtyPicking,
          Vw.QtyPacking,
          Vw.QtyLoading,
          Vw.QtyShipping,
          Vw.PctPicking,
          Vw.PctPacking,
          Vw.PctLoading,
          Vw.PctShipping,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Co.CountryName as CountryDeliveryName,
          IdStateDelivery,
          StateName as StateDeliveryName,
          Out.IdCityDelivery,
          CityName as CityDeliveryName,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode
          FROM OutboundOrder Out
          LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType AND OutType.Status = 1
          INNER JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs ON Out.IdWhs = whs.IdWhs
          LEFT JOIN Country Co ON Out.IdCountryDelivery = Co.IdCountry
          LEFT JOIN State St ON Out.IdStateDelivery = St.IdState
          LEFT JOIN City Ci ON Out.IdCityDelivery = Ci.IdCity
          INNER JOIN v_Oub_DisptchProgXOrder Vw ON Out.IdOutboundOrder = Vw.IdOutboundOrder
          LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
          LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
          WHERE 1=1
          @SQLPart
          ORDER BY Whs.ShortWhsName,Own.OwnName,OutType.OutboundTypeName,Out.OutboundNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdOutboundOrder" type="numericEqual">OUT.IdOutboundOrder</filter>
          <filter name="IdWhs" type="numericEqual">OUT.IdWhs</filter>
          <filter name="IdOwn" type="numericEqual">OUT.IdOwn</filter>
          <filter name="OutboundNumber" type="textEqual">OUT.OutboundNumber</filter>
          <filter name="IdOutboundType" type="numericEqual">OUT.IdOutboundType</filter>
          <filter name="Status" type="numericEqual">OUT.Status</filter>
          <filter name="ReferenceNumber" type="textEqual">OUT.ReferenceNumber</filter>
          <filter name="LoadCode" type="numericEqual">OUT.LoadCode</filter>
          <filter name="LoadSeq" type="numericEqual">OUT.LoadSeq</filter>
          <filter name="Priority" type="numericEqual">OUT.Priority</filter>
          <filter name="InmediateProcess" type="numericEqual">OUT.InmediateProcess</filter>
          <filter name="EmissionDate" type="textEqual">OUT.EmissionDate</filter>
          <filter name="ExpectedDate" type="textEqual">OUT.ExpectedDate</filter>
          <filter name="ShipmentDate" type="textEqual">OUT.ShipmentDate</filter>
          <filter name="ExpirationDate" type="textEqual">OUT.ExpirationDate</filter>
          <filter name="CancelDate" type="textEqual">OUT.CancelDate</filter>
          <filter name="CancelUser" type="textEqual">OUT.CancelUser</filter>
          <filter name="CustomerCode" type="textEqual">OUT.CustomerCode</filter>
          <filter name="CustomerName" type="textEqual">OUT.CustomerName</filter>
          <filter name="DeliveryAddress1" type="textEqual">OUT.DeliveryAddress1</filter>
          <filter name="DeliveryAddress2" type="textEqual">OUT.DeliveryAddress2</filter>
          <filter name="IdCountryDelivery" type="numericEqual">OUT.IdCountryDelivery</filter>
          <filter name="IdStateDelivery" type="numericEqual">OUT.IdStateDelivery</filter>
          <filter name="IdCityDelivery" type="numericEqual">OUT.IdCityDelivery</filter>
          <filter name="DeliveryPhone" type="textEqual">OUT.DeliveryPhone</filter>
          <filter name="DeliveryEmail" type="textEqual">OUT.DeliveryEmail</filter>
          <filter name="IdWhsTarget" type="numericEqual">OUT.IdWhsTarget</filter>
          <filter name="FullShipment" type="numericEqual">OUT.FullShipment</filter>
          <filter name="CarrierCode" type="textEqual">OUT.CarrierCode</filter>
          <filter name="RouteCode" type="textEqual">OUT.RouteCode</filter>
          <filter name="Plate" type="textEqual">OUT.Plate</filter>
          <filter name="Invoice" type="textEqual">OUT.Invoice</filter>
          <filter name="FactAddress1" type="textEqual">OUT.FactAddress1</filter>
          <filter name="FactAddress2" type="textEqual">OUT.FactAddress2</filter>
          <filter name="IdCountryFact" type="numericEqual">OUT.IdCountryFact</filter>
          <filter name="IdStateFact" type="numericEqual">OUT.IdStateFact</filter>
          <filter name="IdCityFact" type="numericEqual">OUT.IdCityFact</filter>
          <filter name="FactPhone" type="textEqual">OUT.FactPhone</filter>
          <filter name="FactEmail" type="textEqual">OUT.FactEmail</filter>
          <filter name="AllowCrossDock" type="numericEqual">OUT.AllowCrossDock</filter>
          <filter name="AllowBackOrder" type="numericEqual">OUT.AllowBackOrder</filter>
          <filter name="SpecialField1" type="textEqual">OUT.SpecialField1</filter>
          <filter name="SpecialField2" type="textEqual">OUT.SpecialField2</filter>
          <filter name="SpecialField3" type="textEqual">OUT.SpecialField3</filter>
          <filter name="SpecialField4" type="textEqual">OUT.SpecialField4</filter>
          <filter name="DateCreated" type="textEqual">OUT.DateCreated</filter>
          <filter name="UserCreated" type="textEqual">OUT.UserCreated</filter>
          <filter name="DateModified" type="textEqual">OUT.DateModified</filter>
          <filter name="UserModified" type="textEqual">OUT.UserModified</filter>
        </filters>
      </query>

      <query code="DispatchAdvanced_GetByIdOutboundOrder">
        <sql>
          SELECT Od.IdOutboundDetail
          ,Od.LineNumber
          ,Od.LineCode
          ,Od.IdItem
          ,itm.Description
          ,itm.ItemCode
          ,Od.IdCtgItem
          ,Ctg.CtgName
          ,Od.ItemQty
          ,vw.QtyRelease
          ,vw.QtyPicking
          ,vw.QtyPacking
          ,vw.QtyLoading
          ,vw.QtyShipping
          ,vw.QtyRouting
          ,vw.PctRelease
          ,vw.PctPicking
          ,vw.PctPacking
          ,vw.PctLoading
          ,vw.PctShipping
          ,vw.PctRouting
          ,Od.Status
          ,Od.LotNumber
          ,Od.FifoDate
          ,Od.ExpirationDate
          ,Od.FabricationDate
          ,Od.GrpClass1
          ,Od.GrpClass2
          ,Od.GrpClass3
          ,Od.GrpClass4
          ,Od.GrpClass5
          ,Od.GrpClass6
          ,Od.GrpClass7
          ,Od.GrpClass8
          ,Od.SpecialField1
          ,Od.SpecialField2
          ,Od.SpecialField3
          ,Od.SpecialField4
		  ,IU.UomName
          FROM OutboundDetail Od
          INNER JOIN v_Oub_DisptchProgXOrderDet vw
          ON Od.IdOutboundDetail = vw.IdOutboundDetail
          LEFT JOIN CategoryItem Ctg
          ON Ctg.IdCtgItem = Od.IdCtgItem
          LEFT JOIN Item itm
          ON itm.IdItem = Od.IdItem
		  LEFT JOIN ItemUom IU
		         ON IU.IdItem = itm.IdItem
	            AND IU.IdUomType = itm.StackingSequence
          WHERE vw.IdOutboundDetail = Od.IdOutboundDetail
          AND Od.IdOutboundOrder = @IdOutboundOrder
          ORDER BY Od.LineNumber

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryOrderGrid
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="String">queryOrderGrid</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">Whs.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">Out.OutboundNumber</filter>
          <filter name="DateRange" type="textBetween">Out.EmissionDate</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">Own.IdOwn</filter>
        </filters>
      </query>

      <query code="DispatchAdvanced_GetByIdOutboundOrder_UsingVariableFields">
        <sql>
          SELECT 
                Od.IdOutboundDetail
                ,Od.LineNumber
                ,Od.LineCode
                ,Od.IdItem
                ,itm.Description
                ,itm.ItemCode
                ,Od.IdCtgItem
                ,Ctg.CtgName
                ,Od.ItemQty
                ,vw.QtyRelease
                ,vw.QtyPicking
                ,vw.QtyPacking
                ,vw.QtyLoading
                ,vw.QtyShipping
                ,vw.QtyRouting
                ,vw.PctRelease
                ,vw.PctPicking
                ,vw.PctPacking
                ,vw.PctLoading
                ,vw.PctShipping
                ,vw.PctRouting
                ,Od.Status
                ,Od.LotNumber
                ,Od.FifoDate
                ,Od.ExpirationDate
                ,Od.FabricationDate
                ,Od.GrpClass1
                ,Od.GrpClass2
                ,Od.GrpClass3
                ,Od.GrpClass4
                ,Od.GrpClass5
                ,Od.GrpClass6
                ,Od.GrpClass7
                ,Od.GrpClass8
				,IU.UomName
            FROM OutboundDetail Od
      INNER JOIN v_Oub_DisptchProgXOrderDet_UsingVariableFields vw
              ON Od.IdOutboundDetail = vw.IdOutboundDetail
       LEFT JOIN CategoryItem Ctg
              ON Ctg.IdCtgItem = Od.IdCtgItem
       LEFT JOIN Item itm
              ON itm.IdItem = Od.IdItem
	   LEFT JOIN ItemUom IU
		      ON IU.IdItem = itm.IdItem
	         AND IU.IdUomType = itm.StackingSequence
           WHERE vw.IdOutboundDetail = Od.IdOutboundDetail
             AND Od.IdOutboundOrder = @IdOutboundOrder
        ORDER BY Od.LineNumber

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryOrderGrid
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="String">queryOrderGrid</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">Whs.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">Out.OutboundNumber</filter>
          <filter name="DateRange" type="textBetween">Out.EmissionDate</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">Own.IdOwn</filter>
        </filters>
      </query>

      <query code="DispatchAdvanced_GetByWaveId">
        <sql>
          SELECT OD.IdOutboundDetail,
          OD.LineNumber,
          OD.LineCode,
          OD.IdItem,
          I.Description,
          I.ItemCode,
          I.LongItemName,
          CI.CtgName,
          OD.IdCtgItem,
          OD.ItemQty,
          OD.Status,
          OD.LotNumber,
          OD.FifoDate,
          OD.ExpirationDate,
          OD.FabricationDate,
          OD.GrpClass1,
          OD.GrpClass2,
          OD.GrpClass3,
          OD.GrpClass4,
          OD.GrpClass5,
          OD.GrpClass6,
          OD.GrpClass7,
          OD.GrpClass8,
          final.QtyRequest AS QtySolicitado,
          final.QtyRelease,
          final.PorcRelease AS PctRelease,
          final.QtyPicking,
          final.PorcPicking AS PctPicking,
          final.QtySorting,
          final.PorcSorting AS PctSorting,
          final.QtyPacking,
          final.PorcPacking AS PctPacking,
          final.QtyRouting,
          final.PorcRouting AS PctRouting,
          final.QtyLoading,
          final.PorcLoading AS PctLoading,
          final.QtyShipping,
          final.PorcShipping AS PctShipping,
		  IU.UomName
          FROM
          (
          SELECT tot.WaveId,
          tot.IdItem,
          tot.QtyRequest,
          tot.QtyRelease,
          CAST(((tot.QtyRelease / tot.QtyRequest) * 100) AS INT) AS PorcRelease,
          tot.QtyPicking,
          CAST(((tot.QtyPicking / tot.QtyRequest) * 100) AS INT) AS PorcPicking,
          tot.QtySorting,
          CAST(((tot.QtySorting / tot.QtyRequest) * 100) AS INT) AS PorcSorting,
          tot.QtyPacking,
          CAST(((tot.QtyPacking / tot.QtyRequest) * 100) AS INT) AS PorcPacking,
          tot.QtyRouting,
          CAST(((tot.QtyRouting / tot.QtyRequest) * 100) AS INT) AS PorcRouting,
          tot.QtyLoading,
          CAST(((tot.QtyLoading / tot.QtyRequest) * 100) AS INT) AS PorcLoading,
          tot.QtyShipping,
          CAST(((tot.QtyShipping / tot.QtyRequest) * 100) AS INT) AS PorcShipping
          FROM
          (
          SELECT
          req.WaveId,
          req.IdItem,
          req.QtyRequest,
          (
          SELECT
          COALESCE(SUM(DD.ItemQty), 0) AS QtyRelease
          FROM Dispatch D
          JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE D.IdOutboundOrder IN (
          SELECT  DISTINCT(IdOutboundOrder)
          FROM Task T
          JOIN TaskOutboundOrder TOO
          ON T.IdTask = TOO.IdTask
          WHERE T.TaskTypeCode = 'PIKWV'
          AND T.IdOwn = req.IdOwn
          AND T.IdWhs = req.IdWhs
          AND T.IdDocumentBound = req.WaveId
          )
          AND DD.IdWmsProcessCode = 'RLEAS'
          AND DD.IdItem = req.IdItem
          ) AS QtyRelease,
          (
          SELECT
          COALESCE(SUM(DD.ItemQty), 0) AS QtyPicking
          FROM Dispatch D
          JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE D.IdOutboundOrder IN (
          SELECT  DISTINCT(IdOutboundOrder)
          FROM Task T
          JOIN TaskOutboundOrder TOO
          ON T.IdTask = TOO.IdTask
          WHERE T.TaskTypeCode = 'PIKWV'
          AND T.IdOwn = req.IdOwn
          AND T.IdWhs = req.IdWhs
          AND T.IdDocumentBound = req.WaveId
          )
          AND DD.IdWmsProcessCode = 'PKWAV'
          AND DD.IdItem = req.IdItem
          ) AS QtyPicking,
          (
          SELECT
          COALESCE(SUM(DD.ItemQty), 0) AS QtySorting
          FROM Dispatch D
          JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE D.IdOutboundOrder IN (
          SELECT  DISTINCT(IdOutboundOrder)
          FROM Task T
          JOIN TaskOutboundOrder TOO
          ON T.IdTask = TOO.IdTask
          WHERE T.TaskTypeCode = 'PIKWV'
          AND T.IdOwn = req.IdOwn
          AND T.IdWhs = req.IdWhs
          AND T.IdDocumentBound = req.WaveId
          )
          AND DD.IdWmsProcessCode = 'SORT'
          AND DD.IdItem = req.IdItem
          ) AS QtySorting,
          (
          SELECT
          COALESCE(SUM(DD.ItemQty), 0) AS QtyPacking
          FROM Dispatch D
          JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE D.IdOutboundOrder IN (
          SELECT  DISTINCT(IdOutboundOrder)
          FROM Task T
          JOIN TaskOutboundOrder TOO
          ON T.IdTask = TOO.IdTask
          WHERE T.TaskTypeCode = 'PIKWV'
          AND T.IdOwn = req.IdOwn
          AND T.IdWhs = req.IdWhs
          AND T.IdDocumentBound = req.WaveId
          )
          AND DD.IdWmsProcessCode = 'PACK'
          AND DD.IdItem = req.IdItem
          ) AS QtyPacking,
          (
          SELECT
          COALESCE(SUM(DD.ItemQty), 0) AS QtyRouting
          FROM Dispatch D
          JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE D.IdOutboundOrder IN (
          SELECT  DISTINCT(IdOutboundOrder)
          FROM Task T
          JOIN TaskOutboundOrder TOO
          ON T.IdTask = TOO.IdTask
          WHERE T.TaskTypeCode = 'PIKWV'
          AND T.IdOwn = req.IdOwn
          AND T.IdWhs = req.IdWhs
          AND T.IdDocumentBound = req.WaveId
          )
          AND DD.IdWmsProcessCode = 'RUTEO'
          AND DD.IdItem = req.IdItem
          ) AS QtyRouting,
          (
          SELECT
          COALESCE(SUM(DD.ItemQty), 0) AS QtyLoading
          FROM Dispatch D
          JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE D.IdOutboundOrder IN (
          SELECT  DISTINCT(IdOutboundOrder)
          FROM Task T
          JOIN TaskOutboundOrder TOO
          ON T.IdTask = TOO.IdTask
          WHERE T.TaskTypeCode = 'PIKWV'
          AND T.IdOwn = req.IdOwn
          AND T.IdWhs = req.IdWhs
          AND T.IdDocumentBound = req.WaveId
          )
          AND DD.IdWmsProcessCode = 'LOAD'
          AND DD.IdItem = req.IdItem
          ) AS QtyLoading,
          (
          SELECT
          COALESCE(SUM(DD.ItemQty), 0) AS QtyLoading
          FROM Dispatch D
          JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE D.IdOutboundOrder IN (
          SELECT  DISTINCT(IdOutboundOrder)
          FROM Task T
          JOIN TaskOutboundOrder TOO
          ON T.IdTask = TOO.IdTask
          WHERE T.TaskTypeCode = 'PIKWV'
          AND T.IdOwn = req.IdOwn
          AND T.IdWhs = req.IdWhs
          AND T.IdDocumentBound = req.WaveId
          )
          AND DD.IdWmsProcessCode = 'SHIPP'
          AND DD.IdItem = req.IdItem
          ) AS QtyShipping
          FROM
          (
          SELECT SUM(OD.ItemQty) AS QtyRequest,
          data.WaveId,
          data.IdOwn,
          data.IdWhs,
          OD.IdItem
          FROM OutboundDetail OD
          JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = OD.IdOutboundOrder
          JOIN (
          SELECT
          distinct(orders.IdOutboundOrder),
          wave.IdOutboundOrder as WaveId,
          orders.IdOwn,
          orders.IdWhs
          FROM
          (
          SELECT TOO.IdOutboundOrder,
          T.IdOwn,
          T.IdWhs,
          T.IdDocumentBound
          FROM Task T
          JOIN TaskOutboundOrder TOO
          ON T.IdTask = TOO.IdTask
          WHERE T.TaskTypeCode = 'PIKWV'
          ) orders
          JOIN
          (
          SELECT   OO.IdOutboundOrder,
          OO.IdOwn,
          OO.IdWhs
          FROM OutboundOrder OO
          WHERE OO.IdOutboundOrder = @IdOutboundOrder
          ) wave
          ON orders.IdDocumentBound = wave.IdOutboundOrder
          AND orders.IdOwn = wave.IdOwn
          AND orders.IdWhs = wave.IdWhs
          ) data
          ON data.IdOutboundOrder = OO.IdOutboundOrder
          GROUP BY data.WaveId,
          data.IdOwn,
          data.IdWhs,
          OD.IdItem
          ) req
          )tot
          ) final
          JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = final.WaveId
          JOIN OutboundDetail OD
          ON OO.IdOutboundOrder = OD.IdOutboundOrder
          AND OD.IdItem = final.IdItem
          JOIN Item I
          ON I.IdItem = OD.IdItem
          LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = OD.IdCtgItem
		  LEFT JOIN ItemUom IU
		  ON IU.IdItem = I.IdItem
	      AND IU.IdUomType = I.StackingSequence
          ORDER BY OD.LineNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
      </query>
  
      <query code="DispatchAdvanced_GetByWaveId_UsingVariableFields">
        <sql>
                  SELECT   OD.IdOutboundDetail,
		                       OD.LineNumber,
			                     OD.LineCode,
			                     OD.IdItem,
			                     I.Description,
			                     I.ItemCode,
                           I.LongItemName,
                           CI.CtgName,
			                     final.IdCtgItem,
			                     OD.ItemQty,
			                     OD.Status,
			                     final.LotNumber,
			                     (CASE 
								              WHEN convert(varchar, final.FifoDate, 103) = '01/01/1900' THEN null 
								              ELSE final.FifoDate
						                END 
						               ) AS FifoDate,
						               (CASE 
								              WHEN convert(varchar, final.ExpirationDate, 103) = '01/01/1900' THEN null 
								              ELSE final.ExpirationDate
						                END 
						               ) AS ExpirationDate,
						               (CASE 
								              WHEN convert(varchar, final.FabricationDate, 103) = '01/01/1900' THEN null 
								              ELSE final.FabricationDate
						                END 
						               ) AS FabricationDate,
			                     OD.GrpClass1,
			                     OD.GrpClass2,
			                     OD.GrpClass3,
			                     OD.GrpClass4,
			                     OD.GrpClass5,
			                     OD.GrpClass6,
			                     OD.GrpClass7,
			                     OD.GrpClass8,
			                     final.QtyRequest AS QtySolicitado,
			                     final.QtyRelease,
			                     final.PorcRelease AS PctRelease,
			                     final.QtyPicking,
			                     final.PorcPicking AS PctPicking,
			                     final.QtySorting,
			                     final.PorcSorting AS PctSorting,
			                     final.QtyPacking,
			                     final.PorcPacking AS PctPacking,
                           final.QtyRouting,
                           final.PorcRouting AS PctRouting,
			                     final.QtyLoading,
			                     final.PorcLoading AS PctLoading,
			                     final.QtyShipping,
			                     final.PorcShipping AS PctShipping,
								 IU.UomName
			         FROM 
		                  (	
			                  SELECT tot.WaveId,
			                         tot.IdItem,
							                 tot.LotNumber,
							                 tot.FifoDate,
							                 tot.FabricationDate,
							                 tot.ExpirationDate,
							                 tot.IdCtgItem,
				                       tot.QtyRequest,
				                       tot.QtyRelease,
				                       CAST(((tot.QtyRelease / tot.QtyRequest) * 100) AS INT) AS PorcRelease,
				                       tot.QtyPicking,
				                       CAST(((tot.QtyPicking / tot.QtyRequest) * 100) AS INT) AS PorcPicking,
				                       tot.QtySorting,
				                       CAST(((tot.QtySorting / tot.QtyRequest) * 100) AS INT) AS PorcSorting,
				                       tot.QtyPacking,
				                       CAST(((tot.QtyPacking / tot.QtyRequest) * 100) AS INT) AS PorcPacking,
                               tot.QtyRouting,
                               CAST(((tot.QtyRouting / tot.QtyRequest) * 100) AS INT) AS PorcRouting,
				                       tot.QtyLoading,
				                       CAST(((tot.QtyLoading / tot.QtyRequest) * 100) AS INT) AS PorcLoading,
				                       tot.QtyShipping,
				                       CAST(((tot.QtyShipping / tot.QtyRequest) * 100) AS INT) AS PorcShipping
			                  FROM 
			                  (
				                  SELECT 
						                  req.WaveId,
						                  req.IdItem,
								              req.LotNumber,
								              req.FifoDate,
								              req.FabricationDate,
								              req.ExpirationDate,
								              req.IdCtgItem,
						                  req.QtyRequest,
						                  (
							                  SELECT 
								                        COALESCE(SUM(DD.ItemQty), 0) AS QtyRelease
							                    FROM Dispatch D
							                    JOIN DispatchDetail DD
								                    ON D.IdDispatch = DD.IdDispatch
							                   WHERE D.IdOutboundOrder IN (
									                   SELECT  DISTINCT(IdOutboundOrder)
										                    FROM Task T 
										                    JOIN TaskOutboundOrder TOO 
										                      ON T.IdTask = TOO.IdTask
									                     WHERE T.TaskTypeCode = 'PIKWV'
										                     AND T.IdOwn = req.IdOwn
										                     AND T.IdWhs = req.IdWhs
										                     AND T.IdDocumentBound = req.WaveId
								                  )
								                      AND DD.IdWmsProcessCode = 'RLEAS'
							                        AND DD.IdItem = req.IdItem	
											                AND COALESCE(DD.LotNumber,'') = req.LotNumber
											                AND COALESCE(DD.FifoDate,'') = req.FifoDate
											                AND COALESCE(DD.ExpirationDate,'') = req.ExpirationDate
											                AND COALESCE(DD.FabricationDate,'') = req.FabricationDate
											                AND COALESCE(DD.IdCtgItem,-1) = req.IdCtgItem
						                  ) AS QtyRelease,
						                  (
							                  SELECT 
								                       COALESCE(SUM(DD.ItemQty), 0) AS QtyPicking
							                    FROM Dispatch D
							                    JOIN DispatchDetail DD 
								                    ON D.IdDispatch = DD.IdDispatch	
							                   WHERE D.IdOutboundOrder = req.WaveId
							                     AND DD.IdWmsProcessCode = 'PKWAV'
							                     AND DD.IdItem = req.IdItem
										               AND COALESCE(DD.LotNumber,'') = req.LotNumber
											             AND COALESCE(DD.FifoDate,'') = req.FifoDate
											             AND COALESCE(DD.ExpirationDate,'') = req.ExpirationDate
											             AND COALESCE(DD.FabricationDate,'') = req.FabricationDate
											             AND COALESCE(DD.IdCtgItem,-1) = req.IdCtgItem
						                  ) AS QtyPicking,
						                  (
							                  SELECT 
								                       COALESCE(SUM(DD.ItemQty), 0) AS QtySorting
							                    FROM Dispatch D
							                    JOIN DispatchDetail DD 
								                    ON D.IdDispatch = DD.IdDispatch	
							                   WHERE D.IdOutboundOrder IN (
										                   SELECT  DISTINCT(IdOutboundOrder)
											                    FROM Task T 
											                    JOIN TaskOutboundOrder TOO 
											                      ON T.IdTask = TOO.IdTask
										                     WHERE T.TaskTypeCode = 'PIKWV'
											                     AND T.IdOwn = req.IdOwn
											                     AND T.IdWhs = req.IdWhs
											                     AND T.IdDocumentBound = req.WaveId
								                   )
							                     AND DD.IdWmsProcessCode = 'SORT'
							                     AND DD.IdItem = req.IdItem
										               AND COALESCE(DD.LotNumber,'') = req.LotNumber
											             AND COALESCE(DD.FifoDate,'') = req.FifoDate
											             AND COALESCE(DD.ExpirationDate,'') = req.ExpirationDate
											             AND COALESCE(DD.FabricationDate,'') = req.FabricationDate
											             AND COALESCE(DD.IdCtgItem,-1) = req.IdCtgItem
						                  ) AS QtySorting,
						                  (
								                 SELECT 
									                     COALESCE(SUM(DD.ItemQty), 0) AS QtyPacking
								                  FROM Dispatch D
								                  JOIN DispatchDetail DD
								                    ON D.IdDispatch = DD.IdDispatch
							                   WHERE D.IdOutboundOrder IN (
										                   SELECT  DISTINCT(IdOutboundOrder)
											                    FROM Task T 
											                    JOIN TaskOutboundOrder TOO 
											                      ON T.IdTask = TOO.IdTask
										                     WHERE T.TaskTypeCode = 'PIKWV'
											                     AND T.IdOwn = req.IdOwn
											                     AND T.IdWhs = req.IdWhs
											                     AND T.IdDocumentBound = req.WaveId
								                   )
								                   AND DD.IdWmsProcessCode = 'PACK'
								                   AND DD.IdItem = req.IdItem
										               AND COALESCE(DD.LotNumber,'') = req.LotNumber
											             AND COALESCE(DD.FifoDate,'') = req.FifoDate
											             AND COALESCE(DD.ExpirationDate,'') = req.ExpirationDate
											             AND COALESCE(DD.FabricationDate,'') = req.FabricationDate
											             AND COALESCE(DD.IdCtgItem,-1) = req.IdCtgItem
						                  ) AS QtyPacking,
                              (
								                 SELECT 
									                     COALESCE(SUM(DD.ItemQty), 0) AS QtyRouting
								                  FROM Dispatch D
								                  JOIN DispatchDetail DD
								                    ON D.IdDispatch = DD.IdDispatch
							                   WHERE D.IdOutboundOrder IN (
										                   SELECT  DISTINCT(IdOutboundOrder)
											                    FROM Task T 
											                    JOIN TaskOutboundOrder TOO 
											                      ON T.IdTask = TOO.IdTask
										                     WHERE T.TaskTypeCode = 'PIKWV'
											                     AND T.IdOwn = req.IdOwn
											                     AND T.IdWhs = req.IdWhs
											                     AND T.IdDocumentBound = req.WaveId
								                   )
								                   AND DD.IdWmsProcessCode = 'RUTEO'
								                   AND DD.IdItem = req.IdItem
										               AND COALESCE(DD.LotNumber,'') = req.LotNumber
											             AND COALESCE(DD.FifoDate,'') = req.FifoDate
											             AND COALESCE(DD.ExpirationDate,'') = req.ExpirationDate
											             AND COALESCE(DD.FabricationDate,'') = req.FabricationDate
											             AND COALESCE(DD.IdCtgItem,-1) = req.IdCtgItem
						                  ) AS QtyRouting,
						                  (
								                  SELECT 
									                     COALESCE(SUM(DD.ItemQty), 0) AS QtyLoading
								                  FROM Dispatch D
								                  JOIN DispatchDetail DD
								                    ON D.IdDispatch = DD.IdDispatch
							                     WHERE D.IdOutboundOrder IN (
										                   SELECT  DISTINCT(IdOutboundOrder)
											                  FROM Task T 
											                  JOIN TaskOutboundOrder TOO 
											                    ON T.IdTask = TOO.IdTask
										                   WHERE T.TaskTypeCode = 'PIKWV'
											                   AND T.IdOwn = req.IdOwn
											                   AND T.IdWhs = req.IdWhs
											                   AND T.IdDocumentBound = req.WaveId
								                   )
								                   AND DD.IdWmsProcessCode = 'LOAD'
								                   AND DD.IdItem = req.IdItem
										               AND COALESCE(DD.LotNumber,'') = req.LotNumber
											             AND COALESCE(DD.FifoDate,'') = req.FifoDate
											             AND COALESCE(DD.ExpirationDate,'') = req.ExpirationDate
											             AND COALESCE(DD.FabricationDate,'') = req.FabricationDate
											             AND COALESCE(DD.IdCtgItem,-1) = req.IdCtgItem
						                  ) AS QtyLoading,
						                  (
								                  SELECT 
									                      COALESCE(SUM(DD.ItemQty), 0) AS QtyLoading
								                  FROM Dispatch D
								                  JOIN DispatchDetail DD
								                    ON D.IdDispatch = DD.IdDispatch
							                     WHERE D.IdOutboundOrder IN (
										                   SELECT  DISTINCT(IdOutboundOrder)
											                  FROM Task T 
											                  JOIN TaskOutboundOrder TOO 
											                    ON T.IdTask = TOO.IdTask
										                   WHERE T.TaskTypeCode = 'PIKWV'
											                   AND T.IdOwn = req.IdOwn
											                   AND T.IdWhs = req.IdWhs
											                   AND T.IdDocumentBound = req.WaveId
								                   )
								                   AND DD.IdWmsProcessCode = 'SHIPP'
								                   AND DD.IdItem = req.IdItem
										               AND COALESCE(DD.LotNumber,'') = req.LotNumber
											             AND COALESCE(DD.FifoDate,'') = req.FifoDate
											             AND COALESCE(DD.ExpirationDate,'') = req.ExpirationDate
											             AND COALESCE(DD.FabricationDate,'') = req.FabricationDate
											             AND COALESCE(DD.IdCtgItem,-1) = req.IdCtgItem
						                  ) AS QtyShipping
				                   FROM
				                  (
					                  SELECT SUM(OD.ItemQty) AS QtyRequest,
						                       data.WaveId,
						                       data.IdOwn,
						                       data.IdWhs,
						                       OD.IdItem,
									                 COALESCE(OD.LotNumber,'') AS LotNumber,
									                 COALESCE(OD.FifoDate,'')  AS FifoDate,
									                 COALESCE(OD.ExpirationDate,'') AS ExpirationDate,
									                 COALESCE(OD.FabricationDate,'') AS FabricationDate,
									                 COALESCE(OD.IdCtgItem,-1) AS IdCtgItem			
					                    FROM OutboundDetail OD
					                    JOIN OutboundOrder OO
						                    ON OO.IdOutboundOrder = OD.IdOutboundOrder
					                    JOIN (
							                  SELECT 
									                    distinct(orders.IdOutboundOrder),		       
									                    wave.IdOutboundOrder as WaveId,
									                    orders.IdOwn,
									                    orders.IdWhs
							                  FROM
							                  (
								                    SELECT TOO.IdOutboundOrder,
										                       T.IdOwn,
										                       T.IdWhs,
										                       T.IdDocumentBound
									                    FROM Task T 
									                    JOIN TaskOutboundOrder TOO 
									                      ON T.IdTask = TOO.IdTask
								                     WHERE T.TaskTypeCode = 'PIKWV'
							                  ) orders
							                  JOIN
							                  (
								                  SELECT   OO.IdOutboundOrder,
										                       OO.IdOwn,
										                       OO.IdWhs
									                    FROM OutboundOrder OO		
								                     WHERE OO.IdOutboundOrder = @IdOutboundOrder
							                  ) wave
							                   ON orders.IdDocumentBound = wave.IdOutboundOrder
							                  AND orders.IdOwn = wave.IdOwn
							                  AND orders.IdWhs = wave.IdWhs
						                    ) data
						                  ON data.IdOutboundOrder = OO.IdOutboundOrder
				                    GROUP BY data.WaveId,
						                         data.IdOwn,
						                         data.IdWhs,
						                         OD.IdItem,
										                 COALESCE(OD.LotNumber,''),
										                 COALESCE(OD.FifoDate,''),
										                 COALESCE(OD.ExpirationDate,''),
										                 COALESCE(OD.FabricationDate,''),
										                 COALESCE(OD.IdCtgItem, -1)	
				                  ) req
			                  )tot
				        ) final
			        JOIN OutboundOrder OO
		            ON OO.IdOutboundOrder = final.WaveId
	            JOIN OutboundDetail OD
		            ON OO.IdOutboundOrder = OD.IdOutboundOrder
		           AND OD.IdItem = final.IdItem
		          JOIN Item I
		            ON I.IdItem = OD.IdItem
             LEFT JOIN CategoryItem CI
                    ON CI.IdCtgItem = OD.IdCtgItem
		     LEFT JOIN ItemUom IU
		            ON IU.IdItem = I.IdItem
	               AND IU.IdUomType = I.StackingSequence
	   
          ORDER BY OD.LineNumber;
          
        
           SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
            FROM CfgEntityProperty qf
            JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
            WHERE QueryName = @queryName
            ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
      </query>
  
      <query code="DispatchAdvanced_FindAllByProcess">
        <sql>
			SELECT
			OT.IdOutboundType,
			OT.OutboudTypeCode,
			OT.OutboundTypeName,
			(
			SELECT COUNT(OO.IdOutboundOrder) as OrdersQty
			FROM OutboundOrder OO
			JOIN OutboundType OOT
			ON OO.IdOutboundType = OOT.IdOutboundType
			WHERE OO.IdOutboundType = OT.IdOutboundType
			@SQLPart
			) AS OrdersQty,
			(
			SELECT COUNT(OD.LineNumber) as LinesQty
			FROM OutboundOrder OO
			JOIN OutboundType OOT
			ON OO.IdOutboundType = OOT.IdOutboundType
			JOIN OutboundDetail OD
			ON OO.IdOutboundOrder = OD.IdOutboundOrder
			WHERE OO.IdOutboundType = OT.IdOutboundType
			@SQLPart
			) AS LinesQty,
			(
			SELECT COALESCE(SUM(OD.ItemQty), 0) as ItemQty
			FROM OutboundOrder OO
			JOIN OutboundType OOT
			ON OO.IdOutboundType = OOT.IdOutboundType
			JOIN OutboundDetail OD
			ON OO.IdOutboundOrder = OD.IdOutboundOrder
			WHERE OO.IdOutboundType = OT.IdOutboundType
			@SQLPart
			) AS qtySolicitado,
			(
			SELECT COALESCE(SUM(DD.ItemQty), 0) as ItemQty
			FROM Dispatch D
			JOIN DispatchDetail DD
			ON D.IdDispatch = DD.IdDispatch
			JOIN OutboundOrder OO
			ON OO.IdOutboundOrder = D.IdOutboundOrder
			WHERE DD.IdWmsProcessCode = 'RLEAS'
			AND OO.IdOutboundType = OT.IdOutboundType
			@SQLPart
			) AS QtyRelease,
			(
			SELECT COALESCE(SUM(DD.ItemQty), 0) as ItemQty
			FROM Dispatch D
			JOIN DispatchDetail DD
			ON D.IdDispatch = DD.IdDispatch
			JOIN OutboundOrder OO
			ON OO.IdOutboundOrder = D.IdOutboundOrder
			WHERE DD.IdWmsProcessCode IN ('PICK', 'PKBAT', 'PKKIT', 'PKPSS', 'PKUNK', 'PKVAS', 'PKLPN')
			AND OO.IdOutboundType = OT.IdOutboundType
			@SQLPart
			) AS QtyPicking,
			(
			SELECT COALESCE(SUM(DD.ItemQty), 0) as ItemQty
			FROM Dispatch D
			JOIN DispatchDetail DD
			ON D.IdDispatch = DD.IdDispatch
			JOIN OutboundOrder OO
			ON OO.IdOutboundOrder = D.IdOutboundOrder
			WHERE DD.IdWmsProcessCode = 'PACK'
			AND OO.IdOutboundType = OT.IdOutboundType
			@SQLPart
			) AS QtyPacking,
			(
			SELECT COALESCE(SUM(DD.ItemQty), 0) as ItemQty
			FROM Dispatch D
			JOIN DispatchDetail DD
			ON D.IdDispatch = DD.IdDispatch
			JOIN OutboundOrder OO
			ON OO.IdOutboundOrder = D.IdOutboundOrder
			WHERE DD.IdWmsProcessCode = 'RUTEO'
			AND OO.IdOutboundType = OT.IdOutboundType
			@SQLPart
			) AS QtyRouting,
			(
			SELECT COALESCE(SUM(DD.ItemQty), 0) as ItemQty
			FROM Dispatch D
			JOIN DispatchDetail DD
			ON D.IdDispatch = DD.IdDispatch
			JOIN OutboundOrder OO
			ON OO.IdOutboundOrder = D.IdOutboundOrder
			WHERE DD.IdWmsProcessCode = 'LOAD'
			AND OO.IdOutboundType = OT.IdOutboundType
			@SQLPart
			) AS QtyLoading,
			(
			SELECT COALESCE(SUM(DD.ItemQty), 0) as ItemQty
			FROM Dispatch D
			JOIN DispatchDetail DD
			ON D.IdDispatch = DD.IdDispatch
			JOIN OutboundOrder OO
			ON OO.IdOutboundOrder = D.IdOutboundOrder
			WHERE DD.IdWmsProcessCode = 'SHIPP'
			AND OO.IdOutboundType = OT.IdOutboundType
			@SQLPart
			) AS QtyShipping,

			(SELECT COUNT(DISTINCT(OO.IdOutboundOrder)) AS OrdersQty
			FROM OutboundOrder OO
			JOIN OutboundTrack TRA
			ON OO.IdOutboundOrder = TRA.IdOutboundOrder
			WHERE TRA.IdTrackOutboundType = 9
			AND OO.IdOutboundType = OT.IdOutboundType
			@SQLPart
			) AS OrdersReleasedQty,

			(SELECT COUNT(OD.LineNumber) as LinesQty
			FROM OutboundOrder OO
			JOIN OutboundDetail OD
			ON OO.IdOutboundOrder = OD.IdOutboundOrder
			JOIN OutboundTrack TRA
			ON OO.IdOutboundOrder = TRA.IdOutboundOrder
			WHERE TRA.IdTrackOutboundType = 9
			AND OO.IdOutboundType = OT.IdOutboundType
			@SQLPart
			) AS OrdersReleasedLinesQty,

			(SELECT COUNT(DISTINCT(OO.IdOutboundOrder)) AS OrdersQty
			FROM OutboundOrder OO
			JOIN OutboundTrack TRA
			ON OO.IdOutboundOrder = TRA.IdOutboundOrder
			WHERE TRA.IdTrackOutboundType = 11
			AND OO.IdOutboundType = OT.IdOutboundType
			@SQLPart
			) AS OrdersOnPickingQty,

			(SELECT COUNT(OD.LineNumber) as LinesQty
			FROM OutboundOrder OO
			JOIN OutboundDetail OD
			ON OO.IdOutboundOrder = OD.IdOutboundOrder
			JOIN OutboundTrack TRA
			ON OO.IdOutboundOrder = TRA.IdOutboundOrder
			WHERE TRA.IdTrackOutboundType = 11
			AND OO.IdOutboundType = OT.IdOutboundType
			@SQLPart
			) AS OrdersOnPickingLinesQty,

			(SELECT COUNT(DISTINCT(OO.IdOutboundOrder)) AS OrdersQty
			FROM OutboundOrder OO
			JOIN OutboundTrack TRA
			ON OO.IdOutboundOrder = TRA.IdOutboundOrder
			WHERE TRA.IdTrackOutboundType = 21
			AND OO.IdOutboundType = OT.IdOutboundType
			@SQLPart
			) AS OrdersOnPackingQty,

			(SELECT COUNT(OD.LineNumber) as LinesQty
			FROM OutboundOrder OO
			JOIN OutboundDetail OD
			ON OO.IdOutboundOrder = OD.IdOutboundOrder
			JOIN OutboundTrack TRA
			ON OO.IdOutboundOrder = TRA.IdOutboundOrder
			WHERE TRA.IdTrackOutboundType = 21
			AND OO.IdOutboundType = OT.IdOutboundType
			@SQLPart
			) AS OrdersOnPackingLinesQty,

			(SELECT COUNT(DISTINCT(OO.IdOutboundOrder)) AS OrdersQty
			FROM OutboundOrder OO
			JOIN OutboundTrack TRA
			ON OO.IdOutboundOrder = TRA.IdOutboundOrder
			WHERE TRA.IdTrackOutboundType = 41
			AND OO.IdOutboundType = OT.IdOutboundType
			@SQLPart
			) AS OrdersOnRoutingQty,

			(SELECT COUNT(OD.LineNumber) as LinesQty
			FROM OutboundOrder OO
			JOIN OutboundDetail OD
			ON OO.IdOutboundOrder = OD.IdOutboundOrder
			JOIN OutboundTrack TRA
			ON OO.IdOutboundOrder = TRA.IdOutboundOrder
			WHERE TRA.IdTrackOutboundType = 41
			AND OO.IdOutboundType = OT.IdOutboundType
			@SQLPart
			) AS OrdersOnRoutingLinesQty,

			(SELECT COUNT(DISTINCT(OO.IdOutboundOrder)) AS OrdersQty
			FROM OutboundOrder OO
			JOIN OutboundTrack TRA
			ON OO.IdOutboundOrder = TRA.IdOutboundOrder
			WHERE TRA.IdTrackOutboundType = 51
			AND OO.IdOutboundType = OT.IdOutboundType
			@SQLPart
			) AS OrdersOnTruckLoadQty,

			(SELECT COUNT(OD.LineNumber) as LinesQty
			FROM OutboundOrder OO
			JOIN OutboundDetail OD
			ON OO.IdOutboundOrder = OD.IdOutboundOrder
			JOIN OutboundTrack TRA
			ON OO.IdOutboundOrder = TRA.IdOutboundOrder
			WHERE TRA.IdTrackOutboundType = 51
			AND OO.IdOutboundType = OT.IdOutboundType
			@SQLPart
			) AS OrdersOnTruckLoadLinesQty,

			(SELECT COUNT(OO.IdOutboundOrder) AS OrdersQty
			FROM OutboundOrder OO
			JOIN OutboundTrack TRA
			ON OO.IdOutboundOrder = TRA.IdOutboundOrder
			@SQLPart
			AND TRA.IdTrackOutboundType = 71
			AND OO.IdOutboundType = OT.IdOutboundType
			) AS OrdersDispatchedQty,

			(SELECT COUNT(OD.LineNumber) as LinesQty
			FROM OutboundOrder OO
			JOIN OutboundDetail OD
			ON OO.IdOutboundOrder = OD.IdOutboundOrder
			JOIN OutboundTrack TRA
			ON OO.IdOutboundOrder = TRA.IdOutboundOrder
			@SQLPart
			AND TRA.IdTrackOutboundType = 71
			AND OO.IdOutboundType = OT.IdOutboundType
			) AS OrdersDispatchedLinesQty

			FROM OutboundType OT
			WHERE OT.IdOutboundType IN (@outboundType)
			ORDER BY OT.IdOutboundType

			SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
			FROM CfgEntityProperty qf
			JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
			WHERE QueryName = @queryName
			ORDER BY FieldOrder
		</sql>
        <parameters>
          <parameter type="IntIn">outboundType</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
         <filters>
          <filter name="Warehouse" type="numericIn">OO.IdWhs</filter>
          <filter name="DateRange" type="textBetween">OO.EmissionDate</filter>
          <filter name="Owner" type="numericIn">OO.IdOwn</filter>
        </filters>
      </query>

      <query code="GetOutboundDispatchHeader">
        <sql>
          SELECT IdOutboundOrder
          ,IdWhs
          ,WhsName
          ,IdOwn
          ,OwnName
          ,OutboundNumber
          ,IdOutboundType
          ,OutboundTypeName
          ,Status
          ,IdTrackOutboundType
          ,NameTrackOutboundType
          ,DateTrack
          ,ReferenceNumber
          ,EmissionDate
          ,ExpectedDate
          ,CustomerCode
          ,CustomerName
          ,DeliveryAddress1
          ,DeliveryAddress2
          ,IdCountryDelivery
          ,CountryName
          ,IdStateDelivery
          ,StateName
          ,IdCityDelivery
          ,CityName
          ,DeliveryPhone
          ,IdDispatch
          ,IdDispatchType
          ,DispatchTypeName
          ,ReferenceDoc
          ,IdReferenceDocType
          ,ReferenceDocTypeName
          ,IdCarrier
          ,CarrierName
          ,IdTruckCode
          ,DriveCode
          ,DriverName
          FROM  v_Oub_DispatchHeader
          @SQLPart;
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Owner" type="numericIn">IdOwn</filter>
          <filter name="DocumentNbr" type="textEqual">OutboundNumber</filter>
        </filters>
      </query>

      <query code="GetBackOrderTaskToCreate">
        <sql>
          SELECT OD.IdOutboundOrder,
          OD.IdOutboundDetail,
          OD.IdItem,
          OD.LineNumber,
          OD.IdCtgItem,
          SUM(OD.ItemQty) QtyRequest,
          SUM(ISNULL(TD.ProposalQty,0)) QtyPicking
          FROM OutboundDetail OD
          LEFT JOIN TaskDetail TD
          ON TD.IdDocumentBound = OD.IdOutboundOrder
          AND TD.IdItem = OD.IdItem
          AND TD.LineNumber = OD.LineNumber
          WHERE OD.IdOutboundOrder = @idOutboundOrder
          GROUP BY OD.IdOutboundOrder,OD.IdOutboundDetail,OD.IdItem,OD.LineNumber,OD.IdCtgItem
          HAVING SUM(OD.ItemQty) > SUM(ISNULL(TD.ProposalQty,0))
        </sql>
        <parameters>
          <parameter type="Int">idOutboundOrder</parameter>
        </parameters>
      </query>
  
      <query code="GetFiscalDocumentsDispatchHeader">
        <sql>
          SELECT D.IdDispatch
          ,D.IdOutboundOrder
          ,OO.OutboundNumber
          ,OO.ReferenceNumber
          ,OO.DeliveryAddress1
          ,OO.DeliveryAddress2
          ,OT.IdOutboundType
          ,OT.OutboudTypeCode
          ,OT.OutboundTypeName
          ,D.Status
          ,D.IdTrackOutbound
          ,D.TrackOutboundDate
          ,D.IdDispatchType
          ,D.ReferenceDoc
          ,D.IdReferenceDocType
          ,D.IdCarrier
          ,D.IdTruckCode
          ,D.ShiftNumber
          ,D.IdWhs
          ,W.WhsName
          ,D.UserWms
          ,D.IdLocationForLift
          ,D.IdLocationStage
          ,D.SpecialField1
          ,D.SpecialField2
          ,D.SpecialField3
          ,D.SpecialField4
          ,D.DateCreated
          ,D.UserCreated
          ,D.DateModified
          ,D.UserModified
          ,C.IdCustomer
          ,C.CustomerCode
          ,C.CustomerName
          ,O.IdOwn
          ,O.OwnCode
          ,O.OwnName
          ,RD.ReferenceDocNumber
          ,RDT.ReferenceDocTypeName
          FROM Dispatch D
          INNER JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = D.IdOutboundOrder
          AND OO.IdWhs = D.IdWhs
          INNER JOIN OutboundType OT
          ON OO.IdOutboundType = OT.IdOutboundType
          AND OT.Status = 1
          INNER JOIN Customer C
          ON OO.CustomerCode = C.CustomerCode
          AND OO.IdOwn = C.IdOwn
          INNER JOIN ReferenceDoc RD
          ON OO.IdOutboundOrder = RD.IdOutboundOrder
          AND OO.IdWhs = RD.IdWhs
          AND OO.IdOwn = RD.IdOwn
          INNER JOIN ReferenceDocType RDT
          ON RD.IdReferenceDocType = RDT.IdReferenceDocType
          INNER JOIN Owner O
          ON OO.IdOwn = O.IdOwn
          INNER JOIN Warehouse W
          ON OO.IdWhs = W.IdWhs
          WHERE D.IdDispatchType = 1
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericEqual">OO.IdWhs</filter>
          <filter name="Owner" type="numericEqual">OO.IdOwn</filter>
          <filter name="Name" type="textLike">C.CustomerCode</filter>
          <filter name="Description" type="textLike">C.CustomerName</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="Code" type="textLike">RD.ReferenceDocNumber</filter>
          <filter name="DateRange" type="textBetween">D.DateCreated</filter>
        </filters>
      </query>

      <query code="InsertDispatch">
        <sql>
          INSERT INTO Dispatch
          (IdDispatch,
          IdOutboundOrder,
          Status,
          IdTrackOutbound,
          TrackOutboundDate,
          IdDispatchType,
          ReferenceDoc,
          IdReferenceDocType,
          IdCarrier,
          IdTruckCode,
          DriveCode,
          ShiftNumber,
          IdWhs,
          UserWms,
          IdLocationForLift,
          IdLocationStage,
          SpecialField1,
          SpecialField2,
          SpecialField3,
          SpecialField4,
          StateInterface,
          DateCreated,
          UserCreated)
          VALUES(
          @IdDispatch,
          @IdOutboundOrder,
          @Status,
          @IdTrackOutbound,
          @TrackOutboundDate,
          @IdDispatchType,
          @ReferenceDoc,
          @IdReferenceDocType,
          @IdCarrier,
          @IdTruckCode,
          @DriveCode,
          @ShiftNumber,
          @IdWhs,
          @UserWms,
          @IdLocationForLift,
          @IdLocationStage,
          @SpecialField1,
          @SpecialField2,
          @SpecialField3,
          @SpecialField4,
          @StateInterface,
          @DateCreated,
          @UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdDispatch</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="Int">IdTrackOutbound</parameter>
          <parameter type="DateTime">TrackOutboundDate</parameter>
          <parameter type="Int">IdDispatchType</parameter>
          <parameter type="String">ReferenceDoc</parameter>
          <parameter type="Int">IdReferenceDocType</parameter>
          <parameter type="Int">IdCarrier</parameter>
          <parameter type="String">IdTruckCode</parameter>
          <parameter type="String">DriveCode</parameter>
          <parameter type="String">ShiftNumber</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">UserWms</parameter>
          <parameter type="String">IdLocationForLift</parameter>
          <parameter type="String">IdLocationStage</parameter>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="String">SpecialField3</parameter>
          <parameter type="String">SpecialField4</parameter>
          <parameter type="String">StateInterface</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="DeleteDispatch">
        <sql>
          DELETE FROM Dispatch
           WHERE IdDispatch = @IdDispatch
        </sql>
        <parameters>
          <parameter type="Int">IdDispatch</parameter>
        </parameters>
      </query>

      <query code="DispatchDetail_DeleteByDispatch">
        <sql>
          DELETE FROM DispatchDetail
           WHERE IdDispatch = @IdDispatch
        </sql>
        <parameters>
          <parameter type="Int">IdDispatch</parameter>
        </parameters>
      </query>

      <!-- End Dispatch section  -->

      <!-- Begin DispatchDetail section -->

      <query code="GetDispatchDetailASN">
        <sql>
          SELECT DD.IdDispatchDetail
          ,DD.IdDispatch
          ,DD.LineNumber
          ,DD.IdItem
          ,I.ItemCode
          ,I.ShortItemName
          ,I.LongItemName
          ,OD.SpecialField1 AS OutboundDetailSpecialField1
          ,DD.ItemQty
          ,DD.FifoDate
          ,DD.ExpirationDate
          ,DD.FabricationDate
          ,DD.Price
          ,DD.IdLpnCode
          ,DD.SealNumber
          ,'BU' AS LpnTypeCode
          ,'BU' AS LpnTypeName
          ,W.IdWhs
          ,W.WhsName
          ,O.IdOwn
          ,O.OwnCode
          ,O.OwnName
          ,B.BranchCode
          ,B.BranchName
          ,IC.BarCode as ItemCustomerBarCode
          ,OutOrder.ReferenceNumber
          FROM DispatchDetail DD INNER JOIN
          Dispatch D ON D.IdDispatch = DD.IdDispatch INNER JOIN
          OutboundDetail OD ON D.IdOutboundOrder = OD.IdOutboundOrder AND
          OD.IdItem = DD.IdItem 
          INNER JOIN Item I ON DD.IdItem = I.IdItem
          INNER JOIN Owner O ON I.IdOwn = O.IdOwn INNER JOIN
          --LPN L ON DD.IdLpnCode = L.IdLpnCode INNER JOIN
          --LPNType LT ON L.IdLpnType = LT.IdLpnType INNER JOIN
          Warehouse W ON DD.IdWhs = W.IdWhs
          INNER JOIN OutboundOrder OutOrder
          ON OutOrder.IdOutboundOrder = OD.IdOutboundOrder
          LEFT JOIN Branch B
          ON B.IdBranch = OutOrder.IdBranch
          INNER JOIN Customer C
          ON C.CustomerCode = OutOrder.CustomerCode
          AND C.IdOwn = OutOrder.IdOwn
          LEFT JOIN ItemCustomer IC
          ON IC.IdItem = I.IdItem
          AND IC.IdCustomer = C.IdCustomer
          @SQLPart
          ORDER BY DD.LineNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @EntityPropertyName
          AND IdPage = @IdPage
          ORDER BY FieldOrder
        </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
        <parameter type="String">IdPage</parameter>
        <parameter type="String">EntityPropertyName</parameter>
      </parameters>
      <filters>
        <filter name="listDispatch" type="numericIn">DD.IdDispatch</filter>
        <filter name="listDispatchDetail" type="numericIn">DD.IdDispatchDetail</filter>
      </filters>
      </query>
  
      <query code="GetDispatchDetail">
        <sql>
          SELECT 
                  DD.IdDispatchDetail,
	                DD.IdDispatch,
		              DD.IdWmsProcessCode,
		              DD.LineNumber,
		              DD.IdItem,
		              DD.IdCtgItem,
		              DD.ItemQty,
		              DD.Status,
		              DD.LotNumber,
		              DD.FifoDate,
		              DD.ExpirationDate,
		              DD.FabricationDate,
		              DD.IdLpnCode,
		              DD.Price,
		              DD.IdWhs,
		              DD.UserWms,
		              DD.IdLocationForLift,
		              DD.IdLocationStage,
		              DD.GrpClass1,
		              DD.GrpClass2,
		              DD.GrpClass3,
		              DD.GrpClass4,
		              DD.GrpClass5,
		              DD.GrpClass6,
		              DD.GrpClass7,
		              DD.GrpClass8,
		              DD.SpecialField1,
		              DD.SpecialField2,
		              DD.SpecialField3,
		              DD.SpecialField4,
		              DD.UserCreated,
		              DD.DateCreated,
		              DD.UserModified,
		              DD.DateModified,
		              DD.SealNumber,
		              DD.IdLpnCodeContainer,
		              DD.LpnTypeCodeContainer
             FROM DispatchDetail DD
            WHERE DD.IdDispatchDetail = @IdDispatchDetail
        </sql>
        <parameters>
          <parameter type="Int">IdDispatchDetail</parameter>
        </parameters>
      </query>
  
      <query code="DispatchDetail_GetByAnyParameter">
        <sql>
          SELECT
          DD.IdDispatchDetail,
          DD.IdDispatch,
          DD.IdWmsProcessCode,
          DD.LineNumber,
          DD.IdItem,
          I.ItemCode,
          I.Description,
          I.LongItemName,
          I.ShortItemName,
          DD.IdCtgItem,
          CI.CtgCode,
          CI.CtgName,
          DD.ItemQty,
          DD.Status,
          DD.LotNumber,
          DD.FifoDate,
          DD.ExpirationDate,
          DD.FabricationDate,
          DD.IdLpnCode,
          DD.LpnTypeCode,
          DD.IdLpnCodeContainer,
          DD.LpnTypeCodeContainer,
          DD.Price,
          DD.IdWhs,
          DD.UserWms,
          DD.IdLocationForLift,
          DD.IdLocationStage,
          DD.GrpClass1,
          DD.GrpClass2,
          DD.GrpClass3,
          DD.GrpClass4,
          DD.GrpClass5,
          DD.GrpClass6,
          DD.GrpClass7,
          DD.GrpClass8,
          DD.SpecialField1,
          DD.SpecialField2,
          DD.SpecialField3,
          DD.SpecialField4,
          DD.DateCreated,
          DD.UserCreated,
          DD.DateModified,
          DD.UserModified,
          D.IdOutboundOrder,
          OO.OutboundNumber,
          DD.SealNumber
          FROM DispatchDetail DD INNER JOIN
          Item I ON DD.IdItem = I.IdItem LEFT JOIN
          CategoryItem CI ON DD.IdCtgItem = CI.IdCtgItem
          INNER JOIN Dispatch D
          ON D.IdDispatch = DD.IdDispatch
          LEFT JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = D.IdOutboundOrder
          WHERE 1=1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdDispatchDetail" type="numericEqual">DD.IdDispatchDetail</filter>
          <filter name="IdDispatch" type="numericEqual">DD.IdDispatch</filter>
          <filter name="IdWmsProcessCode" type="textEqual">DD.IdWmsProcessCode</filter>
          <filter name="LineNumber" type="numericEqual">DD.LineNumber</filter>
          <filter name="IdItem" type="numericEqual">DD.IdItem</filter>
          <filter name="IdCtgItem" type="numericEqual">DD.IdCtgItem</filter>
          <filter name="LotNumber" type="textEqual">DD.LotNumber</filter>
          <filter name="FifoDate" type="textEqual">DD.FifoDate</filter>
          <filter name="ExpirationDate" type="textEqual">DD.ExpirationDate</filter>
          <filter name="FabricationDate" type="textEqual">DD.FabricationDate</filter>
          <filter name="IdLpnCode" type="textEqual">DD.IdLpnCode</filter>
          <filter name="LpnTypeCode" type="textEqual">DD.LpnTypeCode</filter>
          <filter name="IdLpnCodeContainer" type="textEqual">DD.IdLpnCodeContainer</filter>
          <filter name="LpnTypeCodeContainer" type="textEqual">DD.LpnTypeCodeContainer</filter>
          <filter name="IdWhs" type="numericEqual">DD.IdWhs</filter>
          <filter name="UserWms" type="textEqual">DD.UserWms</filter>
          <filter name="IdLocationForLift" type="textEqual">DD.IdLocationForLift</filter>
          <filter name="IdLocationStage" type="textEqual">DD.IdLocationStage</filter>
          <filter name="GrpClass1" type="textEqual">DD.GrpClass1</filter>
          <filter name="GrpClass2" type="textEqual">DD.GrpClass2</filter>
          <filter name="GrpClass3" type="textEqual">DD.GrpClass3</filter>
          <filter name="GrpClass4" type="textEqual">DD.GrpClass4</filter>
          <filter name="GrpClass5" type="textEqual">DD.GrpClass5</filter>
          <filter name="GrpClass6" type="textEqual">DD.GrpClass6</filter>
          <filter name="GrpClass7" type="textEqual">DD.GrpClass7</filter>
          <filter name="GrpClass8" type="textEqual">DD.GrpClass8</filter>
          <filter name="SpecialField1" type="textEqual">DD.SpecialField1</filter>
          <filter name="SpecialField2" type="textEqual">DD.SpecialField2</filter>
          <filter name="SpecialField3" type="textEqual">DD.SpecialField3</filter>
          <filter name="SpecialField4" type="textEqual">DD.SpecialField4</filter>
          <filter name="DateCreated" type="textEqual">DD.DateCreated</filter>
          <filter name="UserCreated" type="textEqual">DD.UserCreated</filter>
          <filter name="DateModified" type="textEqual">DD.DateModified</filter>
          <filter name="UserModified" type="textEqual">DD.UserModified</filter>
        </filters>
        <sub-querys>
          <sub-query code="OrderByIdDispatchDetail">
            <sql>
              ORDER BY DD.IdDispatchDetail
            </sql>
            <parameters>
            </parameters>
          </sub-query>
		  <sub-query code="OrderByLPN">
			<sql>
				ORDER BY DD.IdLpnCode, DD.IdLpnCodeContainer
			</sql>
			<parameters>
			</parameters>
		  </sub-query>	
        </sub-querys>
      </query>

      <query code="DispatchDetail_GetTypeLpn">
        <sql>
          SELECT   DD.IdLpnCodeContainer,
                   DD.IdLpnCode,
	                 DD.IdItem,
	                 DD.ItemQty,
	                 IU.ConversionFactor
              FROM Dispatch D
              JOIN DispatchDetail DD
                ON DD.IdDispatch = D.IdDispatch
               AND D.IdWhs = DD.IdWhs
              JOIN OutboundOrder OO
                ON D.IdWhs = OO.IdWhs
               AND D.IdOutboundOrder = OO.IdOutboundOrder
              JOIN Customer C
                ON C.CustomerCode = OO.CustomerCode
               AND C.IdOwn = OO.IdOwn
              JOIN CustomerB2B CB2B
                ON CB2B.IdCustomer = C.IdCustomer
               AND CB2B.UomTypeLpn = 1
              JOIN ItemUom IU
                ON IU.IdItem = DD.IdItem
               AND UPPER(IU.UomName) = UPPER(CB2B.UomTypeLpnCode) 
              WHERE D.IdWhs = @IdWhs
                AND D.IdDispatch = @IdDispatch
                AND DD.IdLpnCode = @IdLpnCode
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdDispatch</parameter>
          <parameter type="String">IdLpnCode</parameter>
        </parameters>
      </query>
  
      <query code="InsertDispatchDetail">
        <sql>
          INSERT INTO DispatchDetail
          (IdDispatchDetail,
          IdDispatch,
          IdWmsProcessCode,
          LineNumber,
          IdItem,
          IdCtgItem,
          ItemQty,
          Status,
          LotNumber,
          FifoDate,
          ExpirationDate,
          FabricationDate,
          IdLpnCode,
          LpnTypeCode,
          IdLpnCodeContainer,
          LpnTypeCodeContainer,
          Price,
          IdWhs,
          UserWms,
          IdLocationForLift,
          IdLocationStage,
          SealNumber,
          GrpClass1,
          GrpClass2,
          GrpClass3,
          GrpClass4,
          GrpClass5,
          GrpClass6,
          GrpClass7,
          GrpClass8,
          SpecialField1,
          SpecialField2,
          SpecialField3,
          SpecialField4,
          DateCreated,
          UserCreated)
          VALUES(@IdDispatchDetail,
          @IdDispatch,
          @IdWmsProcessCode,
          @LineNumber,
          @IdItem,
          @IdCtgItem,
          @ItemQty,
          @Status,
          @LotNumber,
          @FifoDate,
          @ExpirationDate,
          @FabricationDate,
          @IdLpnCode,
          @LpnTypeCode,
          @IdLpnCodeContainer,
          @LpnTypeCodeContainer,
          @Price,
          @IdWhs,
          @UserWms,
          @IdLocationForLift,
          @IdLocationStage,
          @SealNumber,
          @GrpClass1,
          @GrpClass2,
          @GrpClass3,
          @GrpClass4,
          @GrpClass5,
          @GrpClass6,
          @GrpClass7,
          @GrpClass8,
          @SpecialField1,
          @SpecialField2,
          @SpecialField3,
          @SpecialField4,
          @DateCreated,
          @UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdDispatchDetail</parameter>
          <parameter type="Int">IdDispatch</parameter>
          <parameter type="String">IdWmsProcessCode</parameter>
          <parameter type="Int">LineNumber</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdCtgItem</parameter>
          <parameter type="Decimal">ItemQty</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">LotNumber</parameter>
          <parameter type="DateTime">FifoDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="DateTime">FabricationDate</parameter>
          <parameter type="String">IdLpnCode</parameter>
          <parameter type="String">LpnTypeCode</parameter>
          <parameter type="String">IdLpnCodeContainer</parameter>
          <parameter type="String">LpnTypeCodeContainer</parameter>
          <parameter type="Decimal">Price</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">UserWms</parameter>
          <parameter type="String">IdLocationForLift</parameter>
          <parameter type="String">IdLocationStage</parameter>
          <parameter type="String">SealNumber</parameter>
          <parameter type="String">GrpClass1</parameter>
          <parameter type="String">GrpClass2</parameter>
          <parameter type="String">GrpClass3</parameter>
          <parameter type="String">GrpClass4</parameter>
          <parameter type="String">GrpClass5</parameter>
          <parameter type="String">GrpClass6</parameter>
          <parameter type="String">GrpClass7</parameter>
          <parameter type="String">GrpClass8</parameter>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="String">SpecialField3</parameter>
          <parameter type="String">SpecialField4</parameter>      
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>
  
      <query code="DispatchDetail_Update">
        <sql>
          UPDATE dbo.DispatchDetail
          SET IdDispatch = @IdDispatch
          ,IdWmsProcessCode = @IdWmsProcessCode
          ,LineNumber = @LineNumber
          ,IdItem = @IdItem
          ,IdCtgItem = @IdCtgItem
          ,ItemQty = @ItemQty
          ,Status = @Status
          ,LotNumber = @LotNumber
          ,FifoDate = @FifoDate
          ,ExpirationDate = @ExpirationDate
          ,FabricationDate = @FabricationDate
          ,IdLpnCode = @IdLpnCode
          ,LpnTypeCode = @LpnTypeCode
          ,IdLpnCodeContainer = @IdLpnCodeContainer
          ,LpnTypeCodeContainer = @LpnTypeCodeContainer
          ,Price = @Price
          ,IdWhs = @IdWhs
          ,UserWms = @UserWms
          ,IdLocationForLift = @IdLocationForLift
          ,IdLocationStage = @IdLocationStage
          ,SealNumber = @SealNumber
          ,GrpClass1 = @GrpClass1
          ,GrpClass2 = @GrpClass2
          ,GrpClass3 = @GrpClass3
          ,GrpClass4 = @GrpClass4
          ,GrpClass5 = @GrpClass5
          ,GrpClass6 = @GrpClass6
          ,GrpClass7 = @GrpClass7
          ,GrpClass8 = @GrpClass8
          ,SpecialField1 = @SpecialField1
          ,SpecialField2 = @SpecialField2
          ,SpecialField3 = @SpecialField3
          ,SpecialField4 = @SpecialField4
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdDispatchDetail = @IdDispatchDetail
        </sql>
        <parameters>
          <parameter type="Int">IdDispatch</parameter>
          <parameter type="String">IdWmsProcessCode</parameter>
          <parameter type="Int">LineNumber</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdCtgItem</parameter>
          <parameter type="Decimal">ItemQty</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">LotNumber</parameter>
          <parameter type="DateTime">FifoDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="DateTime">FabricationDate</parameter>
          <parameter type="String">IdLpnCode</parameter>
          <parameter type="String">LpnTypeCode</parameter>
          <parameter type="String">IdLpnCodeContainer</parameter>
          <parameter type="String">LpnTypeCodeContainer</parameter>
          <parameter type="Decimal">Price</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">UserWms</parameter>
          <parameter type="String">IdLocationForLift</parameter>
          <parameter type="String">IdLocationStage</parameter>
          <parameter type="String">SealNumber</parameter>
          <parameter type="String">GrpClass1</parameter>
          <parameter type="String">GrpClass2</parameter>
          <parameter type="String">GrpClass3</parameter>
          <parameter type="String">GrpClass4</parameter>
          <parameter type="String">GrpClass5</parameter>
          <parameter type="String">GrpClass6</parameter>
          <parameter type="String">GrpClass7</parameter>
          <parameter type="String">GrpClass8</parameter>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="String">SpecialField3</parameter>
          <parameter type="String">SpecialField4</parameter>      
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
          <parameter type="Int">IdDispatchDetail</parameter>
        </parameters>
      </query>
  
      <query code="DispatchDetail_Delete">
        <sql>
          DELETE FROM DispatchDetail
          WHERE IdDispatchDetail = @idDispatchDetail
        </sql>
        <parameters>
          <parameter type="Int">idDispatchDetail</parameter>
        </parameters>
      </query>

      <query code="GetDispatchDetailASNABCDin">
        <sql>
          SELECT DD.IdDispatchDetail
          ,DD.IdDispatch
          ,DD.LineNumber
          ,DD.IdItem
          ,IC.ItemCodeCustomer
          ,I.ItemCode
          ,I.ShortItemName
          ,I.LongItemName
          ,OD.SpecialField1 AS OutboundDetailSpecialField1
          ,DD.ItemQty
          ,DD.FifoDate
          ,DD.ExpirationDate
          ,DD.FabricationDate
          ,DD.Price
          ,DD.IdLpnCode
          ,DD.SealNumber
          ,'BU' AS LpnTypeCode
          ,'BU' AS LpnTypeName
          ,W.IdWhs
          ,W.WhsName
          ,O.IdOwn
          ,O.OwnCode
          ,O.OwnName
          ,RD.ReferenceDocNumber
          ,RDT.ReferenceDocTypeName
          ,B.BranchCode
          ,B.BranchName
          FROM DispatchDetail DD
          INNER JOIN Dispatch D
          ON D.IdDispatch = DD.IdDispatch
          INNER JOIN OutboundDetail OD
          ON D.IdOutboundOrder = OD.IdOutboundOrder
          AND OD.IdItem = DD.IdItem
          INNER JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = OD.IdOutboundOrder
          INNER JOIN Item I
          ON DD.IdItem = I.IdItem
          INNER JOIN Customer C
          ON C.CustomerCode = OO.CustomerCode
          AND C.IdOwn = OO.IdOwn
          LEFT JOIN ItemCustomer IC
          ON IC.IdItem = I.IdItem
          AND IC.IdCustomer = C.IdCustomer
          INNER JOIN Owner O
          ON I.IdOwn = O.IdOwn
          INNER JOIN Warehouse W
          ON DD.IdWhs = W.IdWhs
          INNER JOIN ReferenceDoc RD
          ON RD.IdOutboundOrder = OO.IdOutboundOrder
          AND OO.IdWhs = RD.IdWhs
          AND OO.IdOwn = RD.IdOwn
          INNER JOIN ReferenceDocType RDT
          ON RDT.IdReferenceDocType = RD.IdReferenceDocType
          LEFT JOIN Branch B
          ON B.IdBranch = OO.IdBranch
          @SQLPart
          ORDER BY DD.LineNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @EntityPropertyName
          AND IdPage = @IdPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">IdPage</parameter>
          <parameter type="String">EntityPropertyName</parameter>
        </parameters>
        <filters>
          <filter name="listDispatch" type="numericIn">DD.IdDispatch</filter>
          <filter name="listDispatchDetail" type="numericIn">DD.IdDispatchDetail</filter>
        </filters>
      </query>

      <query code="GetDispatchDetailASNCorona">
        <sql>
          SELECT DD.IdDispatchDetail
          ,DD.IdDispatch
          ,DD.LineNumber
          ,DD.IdItem
          ,IC.ItemCodeCustomer
          ,I.ItemCode
          ,I.ShortItemName
          ,I.LongItemName
          ,OD.SpecialField1 AS OutboundDetailSpecialField1
          ,DD.ItemQty
          ,DD.FifoDate
          ,DD.ExpirationDate
          ,DD.FabricationDate
          ,DD.Price
          ,DD.IdLpnCode
          ,DD.SealNumber
          ,'BU' AS LpnTypeCode
          ,'BU' AS LpnTypeName
          ,W.IdWhs
          ,W.WhsName
          ,O.IdOwn
          ,O.OwnCode
          ,O.OwnName
          ,RD.ReferenceDocNumber
		      ,RDT.ReferenceDocTypeName
          ,RD.InvoiceDate
          ,B.BranchCode
          ,B.BranchName
          FROM DispatchDetail DD 
          INNER JOIN Dispatch D 
            ON D.IdDispatch = DD.IdDispatch 
          INNER JOIN OutboundDetail OD 
            ON D.IdOutboundOrder = OD.IdOutboundOrder 
            AND OD.IdItem = DD.IdItem 
          INNER JOIN OutboundOrder OO
			      ON OO.IdOutboundOrder = OD.IdOutboundOrder
          INNER JOIN Item I 
            ON DD.IdItem = I.IdItem 
          INNER JOIN Customer C
			      ON C.CustomerCode = OO.CustomerCode
           AND C.IdOwn = OO.IdOwn
		      LEFT JOIN ItemCustomer IC
			      ON IC.IdItem = I.IdItem 
			      AND IC.IdCustomer = C.IdCustomer
          INNER JOIN Owner O 
            ON I.IdOwn = O.IdOwn 
          INNER JOIN Warehouse W 
            ON DD.IdWhs = W.IdWhs
          INNER JOIN ReferenceDoc RD
		        ON RD.IdOutboundOrder = OO.IdOutboundOrder
			      AND OO.IdWhs = RD.IdWhs
			      AND OO.IdOwn = RD.IdOwn
		      INNER JOIN ReferenceDocType RDT
		        ON RDT.IdReferenceDocType = RD.IdReferenceDocType
          LEFT JOIN Branch B
            ON B.IdBranch = OO.IdBranch
            @SQLPart
          ORDER BY DD.LineNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @EntityPropertyName
          AND IdPage = @IdPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">IdPage</parameter>
          <parameter type="String">EntityPropertyName</parameter>
        </parameters>
        <filters>
          <filter name="listDispatch" type="numericIn">DD.IdDispatch</filter>
          <filter name="listDispatchDetail" type="numericIn">DD.IdDispatchDetail</filter>
        </filters>
      </query>

      <query code="GetDispatchDetailASNEasy">
        <sql>
          SELECT DD.IdDispatchDetail
          ,(
          SELECT COUNT(DISTINCT(IdLpnCode))
          FROM DispatchDetail DD2
          WHERE DD2.IdDispatch = D.IdDispatch
          AND DD2.IdItem = DD.IdItem
          ) AS CountLpn
          ,DD.IdDispatch
          ,DD.LineNumber
          ,DD.IdItem
          ,IC.ItemCodeCustomer
          ,I.ItemCode
          ,I.ShortItemName
          ,I.LongItemName
          ,OD.SpecialField1 AS OutboundDetailSpecialField1
          ,DD.ItemQty
          ,DD.FifoDate
          ,DD.ExpirationDate
          ,DD.FabricationDate
          ,DD.Price
          ,DD.IdLpnCode
          ,DD.SealNumber
          ,'BU' AS LpnTypeCode
          ,'BU' AS LpnTypeName
          ,W.IdWhs
          ,W.WhsName
          ,O.IdOwn
          ,O.OwnCode
          ,O.OwnName
          FROM DispatchDetail DD
          INNER JOIN Dispatch D
          ON D.IdDispatch = DD.IdDispatch
          INNER JOIN OutboundDetail OD
          ON D.IdOutboundOrder = OD.IdOutboundOrder
          AND OD.IdItem = DD.IdItem
          INNER JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = OD.IdOutboundOrder
          INNER JOIN Item I
          ON DD.IdItem = I.IdItem
          INNER JOIN Customer C
          ON C.CustomerCode = OO.CustomerCode
          AND C.IdOwn = OO.IdOwn
          LEFT JOIN ItemCustomer IC
          ON IC.IdItem = I.IdItem
          AND IC.IdCustomer = C.IdCustomer
          INNER JOIN Owner O
          ON I.IdOwn = O.IdOwn
          INNER JOIN Warehouse W
          ON DD.IdWhs = W.IdWhs
          @SQLPart
          ORDER BY DD.LineNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @EntityPropertyName
          AND IdPage = @IdPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">IdPage</parameter>
          <parameter type="String">EntityPropertyName</parameter>
        </parameters>
        <filters>
          <filter name="listDispatch" type="numericIn">DD.IdDispatch</filter>
          <filter name="listDispatchDetail" type="numericIn">DD.IdDispatchDetail</filter>
        </filters>
      </query>

      <query code="GetDispatchDetailASNHites">
        <sql>
          SELECT DD.IdDispatchDetail
          ,DD.IdDispatch
          ,DD.LineNumber
          ,DD.IdItem
          ,IC.ItemCodeCustomer
          ,I.ItemCode
          ,I.ShortItemName
          ,I.LongItemName
          ,OD.SpecialField1 AS OutboundDetailSpecialField1
          ,DD.ItemQty
          ,DD.FifoDate
          ,DD.ExpirationDate
          ,DD.FabricationDate
          ,DD.Price
          ,DD.IdLpnCode
          ,DD.SealNumber
          ,'BU' AS LpnTypeCode
          ,'BU' AS LpnTypeName
          ,W.IdWhs
          ,W.WhsName
          ,O.IdOwn
          ,O.OwnCode
          ,O.OwnName
          ,RD.ReferenceDocNumber
          ,RDT.ReferenceDocTypeName
          ,B.BranchCode
          ,B.BranchName
          FROM DispatchDetail DD
          INNER JOIN Dispatch D
          ON D.IdDispatch = DD.IdDispatch
          INNER JOIN OutboundDetail OD
          ON D.IdOutboundOrder = OD.IdOutboundOrder
          AND OD.IdItem = DD.IdItem
          INNER JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = OD.IdOutboundOrder
          INNER JOIN Item I
          ON DD.IdItem = I.IdItem
          INNER JOIN Customer C
          ON C.CustomerCode = OO.CustomerCode
          AND C.IdOwn = OO.IdOwn
          LEFT JOIN ItemCustomer IC
          ON IC.IdItem = I.IdItem
          AND IC.IdCustomer = C.IdCustomer
          INNER JOIN Owner O
          ON I.IdOwn = O.IdOwn
          INNER JOIN Warehouse W
          ON DD.IdWhs = W.IdWhs
          INNER JOIN ReferenceDoc RD
          ON RD.IdOutboundOrder = OO.IdOutboundOrder
          AND OO.IdWhs = RD.IdWhs
          AND OO.IdOwn = RD.IdOwn
          INNER JOIN ReferenceDocType RDT
          ON RDT.IdReferenceDocType = RD.IdReferenceDocType
          LEFT JOIN Branch B
          ON B.IdBranch = OO.IdBranch
          @SQLPart
          ORDER BY DD.LineNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @EntityPropertyName
          AND IdPage = @IdPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">IdPage</parameter>
          <parameter type="String">EntityPropertyName</parameter>
        </parameters>
        <filters>
          <filter name="listDispatch" type="numericIn">DD.IdDispatch</filter>
          <filter name="listDispatchDetail" type="numericIn">DD.IdDispatchDetail</filter>
        </filters>
      </query>

      <query code="GetDispatchDetailASNTottus">
        <sql>
          SELECT DD.IdDispatchDetail
          ,DD.IdDispatch
          ,DD.LineNumber
          ,DD.IdItem
          ,IC.ItemCodeCustomer
          ,I.ItemCode
          ,I.ShortItemName
          ,I.LongItemName
          ,OD.SpecialField1 AS OutboundDetailSpecialField1
          ,DD.ItemQty
          ,DD.FifoDate
          ,DD.ExpirationDate
          ,DD.FabricationDate
          ,DD.Price
          ,DD.IdLpnCode
          ,DD.SealNumber
          ,'BU' AS LpnTypeCode
          ,'BU' AS LpnTypeName
          ,W.IdWhs
          ,W.WhsName
          ,O.IdOwn
          ,O.OwnCode
          ,O.OwnName
          ,RD.ReferenceDocNumber
          ,RDT.ReferenceDocTypeName
          ,(SELECT COUNT(DISTINCT(DD2.IdLpnCode))
          FROM DispatchDetail DD2
          WHERE DD2.IdDispatch = D.IdDispatch
          AND DD2.LpnTypeCode = 'LPN'
          ) AS CountLpn
          ,B.BranchCode
          ,B.BranchName
          ,IC.BarCode as ItemCustomerBarCode
          FROM DispatchDetail DD
          INNER JOIN Dispatch D
          ON D.IdDispatch = DD.IdDispatch
          INNER JOIN OutboundDetail OD
          ON D.IdOutboundOrder = OD.IdOutboundOrder
          AND OD.IdItem = DD.IdItem
          INNER JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = OD.IdOutboundOrder
          INNER JOIN Item I
          ON DD.IdItem = I.IdItem
          INNER JOIN Customer C
          ON C.CustomerCode = OO.CustomerCode
          AND C.IdOwn = OO.IdOwn
          LEFT JOIN ItemCustomer IC
          ON IC.IdItem = I.IdItem
          AND IC.IdCustomer = C.IdCustomer
          INNER JOIN Owner O
          ON I.IdOwn = O.IdOwn
          INNER JOIN Warehouse W
          ON DD.IdWhs = W.IdWhs
          INNER JOIN ReferenceDoc RD
          ON RD.IdOutboundOrder = OO.IdOutboundOrder
          AND OO.IdWhs = RD.IdWhs
          AND OO.IdOwn = RD.IdOwn
          INNER JOIN ReferenceDocType RDT
          ON RDT.IdReferenceDocType = RD.IdReferenceDocType
          LEFT JOIN Branch B
          ON B.IdBranch = OO.IdBranch
          @SQLPart
          ORDER BY DD.LineNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @EntityPropertyName
          AND IdPage = @IdPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">IdPage</parameter>
          <parameter type="String">EntityPropertyName</parameter>
        </parameters>
        <filters>
          <filter name="listDispatch" type="numericIn">DD.IdDispatch</filter>
          <filter name="listDispatchDetail" type="numericIn">DD.IdDispatchDetail</filter>
        </filters>
      </query>

      <query code="GetDispatchDetailASNRipley">
        <sql>
          SELECT DD.IdDispatchDetail
          ,DD.IdDispatch
          ,DD.LineNumber
          ,DD.IdItem
          ,IC.ItemCodeCustomer
          ,I.ItemCode
          ,I.ShortItemName
          ,I.LongItemName
          ,I.Description
          ,OD.SpecialField1 AS OutboundDetailSpecialField1
          ,DD.ItemQty
          ,DD.FifoDate
          ,DD.ExpirationDate
          ,DD.FabricationDate
          ,DD.Price
          ,DD.IdLpnCode
          ,DD.SealNumber
          ,'BU' AS LpnTypeCode
          ,'BU' AS LpnTypeName
          ,W.IdWhs
          ,W.WhsName
          ,O.IdOwn
          ,O.OwnCode
          ,O.OwnName
          FROM DispatchDetail DD
          INNER JOIN Dispatch D
          ON D.IdDispatch = DD.IdDispatch
          INNER JOIN OutboundDetail OD
          ON D.IdOutboundOrder = OD.IdOutboundOrder
          AND OD.IdItem = DD.IdItem
          INNER JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = OD.IdOutboundOrder
          INNER JOIN Item I
          ON DD.IdItem = I.IdItem
          INNER JOIN Customer C
          ON C.CustomerCode = OO.CustomerCode
          AND C.IdOwn = OO.IdOwn
          LEFT JOIN ItemCustomer IC
          ON IC.IdItem = I.IdItem
          AND IC.IdCustomer = C.IdCustomer
          INNER JOIN Owner O
          ON I.IdOwn = O.IdOwn
          INNER JOIN Warehouse W
          ON DD.IdWhs = W.IdWhs
          @SQLPart
          ORDER BY DD.LineNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @EntityPropertyName
          AND IdPage = @IdPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">IdPage</parameter>
          <parameter type="String">EntityPropertyName</parameter>
        </parameters>
        <filters>
          <filter name="listDispatch" type="numericIn">DD.IdDispatch</filter>
          <filter name="listDispatchDetail" type="numericIn">DD.IdDispatchDetail</filter>
        </filters>
      </query>

      <query code="GetDispatchDetailASNParis">
        <sql>
          SELECT DD.IdDispatchDetail
          ,DD.IdDispatch
          ,DD.LineNumber
          ,DD.IdItem
          ,IC.ItemCodeCustomer
          ,I.ItemCode
          ,I.ShortItemName
          ,I.LongItemName
          ,I.Description
          ,OD.SpecialField1 AS OutboundDetailSpecialField1
          ,IU.BarCode
          ,DD.ItemQty
          ,DD.FifoDate
          ,DD.ExpirationDate
          ,DD.FabricationDate
          ,DD.Price
          ,DD.IdLpnCode
          ,DD.SealNumber
          ,'BU' AS LpnTypeCode
          ,'BU' AS LpnTypeName
          ,W.IdWhs
          ,W.WhsName
          ,O.IdOwn
          ,O.OwnCode
          ,O.OwnName
          ,UT.UomName
          ,IC.SpecialField1 as ICSpecialField1
          ,IC.SpecialField2 as ICSpecialField2
          ,IC.DepartmentItem
          ,IC.DepartmentDescription
          ,B.BranchCode
          ,B.BranchName
          FROM DispatchDetail DD
          INNER JOIN Dispatch D
          ON D.IdDispatch = DD.IdDispatch
          INNER JOIN OutboundDetail OD
          ON D.IdOutboundOrder = OD.IdOutboundOrder
          AND OD.IdItem = DD.IdItem
          INNER JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = OD.IdOutboundOrder
          INNER JOIN Item I
          ON DD.IdItem = I.IdItem
          INNER JOIN ItemUom IU
          ON I.IdItem = IU.IdItem
          AND UPPER(IU.UomName) = 'UNIDAD'
          INNER join UomType UT
          ON UT.IdUomType = IU.IdUomType
          INNER JOIN Customer C
          ON C.CustomerCode = OO.CustomerCode
          AND C.IdOwn = OO.IdOwn
          LEFT JOIN ItemCustomer IC
          ON IC.IdItem = I.IdItem
          AND IC.IdCustomer = C.IdCustomer
          INNER JOIN Owner O
          ON I.IdOwn = O.IdOwn
          INNER JOIN Warehouse W
          ON DD.IdWhs = W.IdWhs
          LEFT JOIN Branch B
          ON B.IdBranch = OO.IdBranch
          @SQLPart
          ORDER BY DD.LineNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @EntityPropertyName
          AND IdPage = @IdPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">IdPage</parameter>
          <parameter type="String">EntityPropertyName</parameter>
        </parameters>
        <filters>
          <filter name="listDispatch" type="numericIn">DD.IdDispatch</filter>
          <filter name="listDispatchDetail" type="numericIn">DD.IdDispatchDetail</filter>
        </filters>
      </query>

      <query code="GetDispatchDetailASNLaPolar">
        <sql>
          SELECT DD.IdDispatchDetail
          ,(
          SELECT COUNT(DISTINCT(IdLpnCode))
          FROM DispatchDetail DD2
          WHERE DD2.IdDispatch = D.IdDispatch
          AND DD2.IdItem = DD.IdItem
          ) AS CountLpn
          ,DD.IdDispatch
          ,DD.LineNumber
          ,DD.IdItem
          ,IC.ItemCodeCustomer
          ,I.ItemCode
          ,I.ShortItemName
          ,I.LongItemName
          ,I.Description
          ,OD.SpecialField1 AS OutboundDetailSpecialField1
          ,DD.ItemQty
          ,DD.FifoDate
          ,DD.ExpirationDate
          ,DD.FabricationDate
          ,DD.Price
          ,DD.IdLpnCode
          ,DD.SealNumber
          ,'BU' AS LpnTypeCode
          ,'BU' AS LpnTypeName
          ,W.IdWhs
          ,W.WhsName
          ,O.IdOwn
          ,O.OwnCode
          ,O.OwnName
          ,B.BranchCode
          ,B.BranchName
          FROM DispatchDetail DD
          INNER JOIN Dispatch D
          ON D.IdDispatch = DD.IdDispatch
          INNER JOIN OutboundDetail OD
          ON D.IdOutboundOrder = OD.IdOutboundOrder
          AND OD.IdItem = DD.IdItem
          INNER JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = OD.IdOutboundOrder
          INNER JOIN Item I
          ON DD.IdItem = I.IdItem
          INNER JOIN Customer C
          ON C.CustomerCode = OO.CustomerCode
          AND C.IdOwn = OO.IdOwn
          LEFT JOIN ItemCustomer IC
          ON IC.IdItem = I.IdItem
          AND IC.IdCustomer = C.IdCustomer
          INNER JOIN Owner O
          ON I.IdOwn = O.IdOwn
          INNER JOIN Warehouse W
          ON DD.IdWhs = W.IdWhs
          LEFT JOIN Branch B
          ON B.IdBranch = OO.IdBranch
          @SQLPart
          ORDER BY DD.LineNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @EntityPropertyName
          AND IdPage = @IdPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">IdPage</parameter>
          <parameter type="String">EntityPropertyName</parameter>
        </parameters>
        <filters>
          <filter name="listDispatch" type="numericIn">DD.IdDispatch</filter>
          <filter name="listDispatchDetail" type="numericIn">DD.IdDispatchDetail</filter>
        </filters>
      </query>

      <query code="GetFiscalDocumentsDispatchDetail">
        <sql>
          SELECT DD.IdDispatchDetail
          ,DD.IdDispatch
          ,DD.LineNumber
          ,DD.IdItem
          ,I.ItemCode
          ,I.ShortItemName
          ,I.LongItemName
          ,OD.SpecialField1 AS OutboundDetailSpecialField1
          ,IU.BarCode
          ,DD.ItemQty
          ,DD.FifoDate
          ,DD.ExpirationDate
          ,DD.FabricationDate
          ,DD.Price
          ,DD.IdLpnCode
          ,DD.SealNumber
          ,DD.LotNumber
          ,'BU' AS LpnTypeCode
          ,'BU' AS LpnTypeName
          ,W.IdWhs
          ,W.WhsName
          ,O.IdOwn
          ,O.OwnCode
          ,O.OwnName
          FROM DispatchDetail DD
          INNER JOIN Dispatch D
            ON D.IdDispatch = DD.IdDispatch
          INNER JOIN OutboundDetail OD
            ON D.IdOutboundOrder = OD.IdOutboundOrder
            AND OD.IdItem = DD.IdItem
          INNER JOIN Item I
            ON DD.IdItem = I.IdItem
          INNER JOIN ItemUom IU
            ON I.IdItem = IU.IdItem
            AND UPPER(IU.UomName) = 'UNIDAD'
          INNER JOIN Owner O
            ON I.IdOwn = O.IdOwn
          INNER JOIN Warehouse W
            ON DD.IdWhs = W.IdWhs
          WHERE DD.IdDispatch = @IdDispatch
          ORDER BY DD.LineNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @EntityPropertyName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">IdDispatch</parameter>
          <parameter type="String">IdPage</parameter>
          <parameter type="String">EntityPropertyName</parameter>
        </parameters>
        <filters>
        </filters>
      </query>
      <!-- End DispatchDetail section -->
  
      <!-- Begin DispatchSpecial section -->
      <query code="GetDispatchSpecialHeader">
        <sql>
          SELECT D.IdDispatch
          ,D.IdOutboundOrder
          ,OO.OutboundNumber
          ,OO.ReferenceNumber
          ,OO.DeliveryAddress1
          ,OO.DeliveryAddress2
          ,OT.IdOutboundType
          ,OT.OutboudTypeCode
          ,OT.OutboundTypeName
          ,D.Status
          ,D.IdTrackOutbound
          ,D.TrackOutboundDate
          ,D.IdDispatchType
          ,D.ReferenceDoc
          ,D.IdReferenceDocType
          --,RDT.ReferenceDocTypeCode
          --,RDT.ReferenceDocTypeName
          ,D.IdCarrier
          ,D.IdTruckCode
          --,D.IdDriveCode
          ,D.ShiftNumber
          ,D.IdWhs
          ,W.WhsName
          ,D.UserWms
          ,D.IdLocationForLift
          ,D.IdLocationStage
          ,D.SpecialField1
          ,D.SpecialField2
          ,D.SpecialField3
          ,D.SpecialField4
          ,D.DateCreated
          ,D.UserCreated
          ,D.DateModified
          ,D.UserModified
          ,C.IdCustomer
          ,C.CustomerCode
          ,C.CustomerName
          ,O.IdOwn
          ,O.OwnCode
          ,O.OwnName
          ,RD.ReferenceDocNumber
          ,B2B.ASNFile
          ,B2B.TemplateASNFile
          FROM Dispatch D
          INNER JOIN OutboundOrder OO ON OO.IdOutboundOrder = D.IdOutboundOrder
          AND OO.IdWhs = D.IdWhs
          INNER JOIN OutboundType OT ON OO.IdOutboundType = OT.IdOutboundType AND OT.Status = 1
          INNER JOIN Customer C ON OO.CustomerCode = C.CustomerCode
          AND OO.IdOwn = C.IdOwn
          INNER JOIN CustomerB2B B2B ON C.IdCustomer = B2B.IdCustomer
          INNER JOIN ReferenceDoc RD ON OO.IdOutboundOrder = RD.IdOutboundOrder
          AND OO.IdWhs = RD.IdWhs AND OO.IdOwn = RD.IdOwn
          INNER JOIN Owner O ON OO.IdOwn = O.IdOwn
          INNER JOIN Warehouse W ON OO.IdWhs = W.IdWhs
          --INNER JOIN ReferenceDocType RDT ON D.IdReferenceDocType = RDT.IdReferenceDocType
          WHERE D.IdDispatchType = 3
          AND B2B.ASNFile = 1
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericEqual">OO.IdWhs</filter>
          <filter name="Owner" type="numericEqual">OO.IdOwn</filter>
          <filter name="Name" type="textLike">C.CustomerCode</filter>
          <filter name="Description" type="textLike">C.CustomerName</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="Code" type="textLike">RD.ReferenceDocNumber</filter>
          <filter name="DateRange" type="textBetween">D.DateCreated</filter>
        </filters>
      </query>
      <!-- End DispatchSpecial section-->
  
  
      <!-- MOVEMENT section  -->
      <query code="GetMovementByReceipt">
        <sql>
          SELECT m.MovementID
          , m.Secuencia
          , m.Qty
          , r.IdReceipt
          , inb.IdInboundOrder
          , inb.InboundNumber
          , m.ItemID
          , i.ItemCode
          , i.Description
          , i.Status
          , m.Date
          , m.UserName
          , m.LocationNameSource
          , m.LocationNameDestination

          FROM MovementLog m
          JOIN Receipt r ON m.DocumentID = r.IdReceipt
          JOIN Item i ON m.ItemID = i.IdItem
          JOIN InboundOrder inb ON r.IdInboundOrder = inb.IdInboundOrder
          WHERE m.DocumentID = @DocumentID;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">DocumentID</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>


      <query code="GenericLog_FindAll">
        <sql>
          SELECT ML.IdMovement
          ,ML.IdMovementType
          ,MT.MovementName
          ,ML.StartTime
          ,ML.EndTime
          ,ML.UserName
          ,ML.IdWhs
          ,W.WhsName
          ,W.ShortWhsName
          ,ML.DocumentNumber
          ,ML.DocumentType
          ,IT.InboundTypeName
          ,ML.DocumentLineNumber
          ,ML.ReferenceNumber
          ,ML.IdOwn
          ,O.OwnName
          ,ML.IdItem
          ,I.ItemCode
          ,I.LongItemName AS Description
          ,ML.ItemQtyMov
          ,ML.IdUom
          ,IU.UomName
          ,IU.BarCode
          ,ML.IdCtgItem
          ,CI.CtgName
          ,ML.LotNumber
          ,ML.FifoDate
          ,ML.ExpirationDate
          ,ML.FabricationDate
          ,ML.IdLpnCodeSource
          ,ML.IdLpnCodeTarget
          ,ML.LpnParentSource
          ,ML.LpnParentTarget
          ,ML.IdLocCodeProposal
          ,ML.IdLocCodeSource
          ,ML.IdLocCodeTarget
          ,ML.QtyBeforeSource
          ,ML.QtyBeforeTarget
          ,ML.TotalWeight
          ,ML.ReasonCode
          ,ML.HoldCode
          ,ML.RoutingCode
          ,ML.SpecialField1
          ,ML.SpecialField2
          ,ML.SpecialField3
          ,ML.SpecialField4
          ,R.ReasonName
          FROM MovementLog ML
          INNER JOIN MovementType MT ON MT.IdMovementType = ML.IdMovementType
          INNER JOIN Warehouse W ON W.IdWhs = ML.IdWhs
          <!--LEFT JOIN InboundType IT ON IT.IdInboundType = ML.DocumentType-->
          LEFT JOIN InboundType IT ON IT.InboundTypeCode = ML.DocumentType AND IT.Status = 1
          LEFT JOIN Owner O ON O.IdOwn = ML.IdOwn
          LEFT JOIN Item I ON I.IdItem = ML.IdItem
          LEFT JOIN ItemUom IU ON IU.IdUom = ML.IdUom
          LEFT JOIN CategoryItem CI ON CI.IdCtgItem = ML.IdCtgItem
          LEFT JOIN Reason R
                 ON R.ReasonCode = ML.ReasonCode
          @SQLPart
          ORDER BY ML.IdMovement DESC;


          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @EntityPropertyName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">EntityPropertyName</parameter>
        </parameters>
        <filters>
          <filter name="WmsProcessType" type="textIn">MT.IdWmsProcessCode</filter>
          <filter name="Warehouse" type="numericIn">ML.IdWhs</filter>
          <filter name="Owner" type="numericIn" includeNulls="true">ML.IdOwn</filter>
          <filter name="MovementType" type="numericIn">ML.IdMovementType</filter>
          <filter name="DateRange" type="textBetween">ML.StartTime</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Description" type="textLike">I.LongItemName</filter>
          <filter name="DocumentNbr" type="textLike">ML.DocumentNumber</filter>
          <filter name="Driver" type="textLike">ML.UserName</filter>
          <filter name="LocationSource" type="textLike">ML.IdLocCodeSource</filter>
          <filter name="LocationTarget" type="textLike">ML.IdLocCodeTarget</filter>
          <filter name="LpnSource" type="textLike">ML.IdLpnCodeSource</filter>
          <filter name="LpnTarget" type="textLike">ML.IdLpnCodeTarget</filter>
          <filter name="InboundType" type="numericIn">IT.IdInboundType</filter>
        </filters>
      </query>

      <query code="GenericOutLog_FindAll">
        <sql>
          SELECT ML.IdMovement
          ,ML.IdMovementType
          ,MT.MovementName
          ,ML.StartTime
          ,ML.EndTime
          ,ML.UserName
          ,ML.IdWhs
          ,W.WhsName
          ,W.ShortWhsName
          ,ML.DocumentNumber
          ,ML.DocumentType
          ,OT.OutboundTypeName
          ,ML.DocumentLineNumber
          ,ML.ReferenceNumber
          ,ML.IdOwn
          ,O.OwnName
          ,ML.IdItem
          ,I.ItemCode
          ,I.LongItemName Description
          ,ML.ItemQtyMov
          ,ML.IdUom
          ,IU.UomName
          ,ML.IdCtgItem
          ,CI.CtgName
          ,ML.LotNumber
          ,ML.FifoDate
          ,ML.ExpirationDate
          ,ML.FabricationDate
          ,ML.IdLpnCodeSource
          ,ML.IdLpnCodeTarget
          ,ML.LpnParentSource
          ,ML.LpnParentTarget
          ,ML.IdLocCodeProposal
          ,ML.IdLocCodeSource
          ,ML.IdLocCodeTarget
          ,ML.QtyBeforeSource
          ,ML.QtyBeforeTarget
          ,ML.ReasonCode
          ,ML.HoldCode
          ,ML.RoutingCode
          ,ML.SpecialField1
          ,ML.SpecialField2
          ,ML.SpecialField3
          ,ML.SpecialField4
          ,ML.TotalWeight
          FROM MovementLog ML
          INNER JOIN MovementType MT ON MT.IdMovementType = ML.IdMovementType
          INNER JOIN Warehouse W ON W.IdWhs = ML.IdWhs
          LEFT JOIN OutboundType OT ON OT.OutboudTypeCode = ML.DocumentType AND OT.Status = 1
          LEFT JOIN Owner O ON O.IdOwn = ML.IdOwn
          LEFT JOIN Item I ON I.IdItem = ML.IdItem
          LEFT JOIN ItemUom IU ON IU.IdUom = ML.IdUom
          LEFT JOIN CategoryItem CI ON CI.IdCtgItem = ML.IdCtgItem
          @SQLPart
          ORDER BY ML.IdMovement DESC;


          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @EntityPropertyName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">EntityPropertyName</parameter>

        </parameters>
        <filters>
          <filter name="WmsProcessType" type="textIn">MT.IdWmsProcessCode</filter>
          <filter name="Warehouse" type="numericIn">ML.IdWhs</filter>
          <filter name="Owner" type="numericIn" includeNulls="true">ML.IdOwn</filter>
          <filter name="MovementType" type="numericIn">ML.IdMovementType</filter>
          <filter name="DateRange" type="textBetween">ML.StartTime</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Description" type="textLike">I.LongItemName</filter>
          <filter name="DocumentNbr" type="textLike">ML.DocumentNumber</filter>
          <filter name="Driver" type="textLike">ML.UserName</filter>
          <filter name="LocationSource" type="textLike">ML.IdLocCodeSource</filter>
          <filter name="LocationTarget" type="textLike">ML.IdLocCodeTarget</filter>
          <filter name="LpnSource" type="textLike">ML.IdLpnCodeSource</filter>
          <filter name="LpnParent" type="textLikeOr">ML.LpnParentSource,ML.LpnParentTarget</filter>
        </filters>
      </query>
  
      <query code="SSCCLog_FindAll">
        <sql>
          SELECT ML.IdMovement
          ,ML.IdMovementType
          ,ML.MovementName
          ,ML.StartTime
          ,ML.EndTime
          ,ML.UserName
          ,ML.IdWhs
          ,ML.WhsName
          ,ML.ShortWhsName
          ,ML.DocumentNumber
          ,ML.DocumentType
          ,ML.InboundTypeName
          ,ML.DocumentLineNumber
          ,ML.ReferenceNumber
          ,ML.IdOwn
          ,ML.OwnName
          ,ML.IdItem
          ,ML.ItemCode
          ,ML.Description
          ,ML.ItemQtyMov
          ,ML.IdUom
          ,ML.UomName
          ,ML.BarCode
          ,ML.IdCtgItem
          ,ML.CtgName
          ,ML.LotNumber
          ,ML.FifoDate
          ,ML.ExpirationDate
          ,ML.FabricationDate
          ,ML.IdLpnCodeSource
          ,ML.IdLpnCodeTarget
          ,ML.LpnParentSource
          ,ML.LpnParentTarget
          ,ML.IdLocCodeProposal
          ,ML.IdLocCodeSource
          ,ML.IdLocCodeTarget
          ,ML.QtyBeforeSource
          ,ML.QtyBeforeTarget
          ,ML.ReasonCode
          ,ML.HoldCode
          ,ML.RoutingCode
          FROM (
          SELECT ML.IdMovement
          ,ML.IdMovementType
          ,MT.MovementName
          ,ML.StartTime
          ,ML.EndTime
          ,ML.UserName
          ,ML.IdWhs
          ,W.WhsName
          ,W.ShortWhsName
          ,ML.DocumentNumber
          ,ML.DocumentType
          ,IT.InboundTypeName
          ,ML.DocumentLineNumber
          ,ML.ReferenceNumber
          ,ML.IdOwn
          ,O.OwnName
          ,ML.IdItem
          ,I.ItemCode
          ,I.LongItemName AS Description
          ,ML.ItemQtyMov
          ,ML.IdUom
          ,IU.UomName
          ,IU.BarCode
          ,ML.IdCtgItem
          ,CI.CtgName
          ,ML.LotNumber
          ,ML.FifoDate
          ,ML.ExpirationDate
          ,ML.FabricationDate
          ,COALESCE(L.SealNumber, OO.SealNumber, ML.IdLpnCodeSource) AS IdLpnCodeSource
          ,COALESCE(L1.SealNumber, OO1.SealNumber, ML.IdLpnCodeTarget) AS IdLpnCodeTarget
          ,ML.LpnParentSource
          ,ML.LpnParentTarget
          ,ML.IdLocCodeProposal
          ,ML.IdLocCodeSource
          ,ML.IdLocCodeTarget
          ,ML.QtyBeforeSource
          ,ML.QtyBeforeTarget
          ,ML.ReasonCode
          ,ML.HoldCode
          ,ML.RoutingCode
          FROM MovementLog ML
          INNER JOIN MovementType MT ON MT.IdMovementType = ML.IdMovementType
          INNER JOIN Warehouse W ON W.IdWhs = ML.IdWhs
          LEFT JOIN InboundType IT ON IT.InboundTypeCode = ML.DocumentType AND IT.Status = 1
          LEFT JOIN Owner O ON O.IdOwn = ML.IdOwn
          LEFT JOIN Item I ON I.IdItem = ML.IdItem
          LEFT JOIN ItemUom IU ON IU.IdUom = ML.IdUom
          LEFT JOIN CategoryItem CI ON CI.IdCtgItem = ML.IdCtgItem
          LEFT JOIN LPN L ON L.IdOwn = ML.IdOwn AND L.IdLpnCode = ML.IdLpnCodeSource 
          LEFT JOIN LPN L1 ON L1.IdOwn = ML.IdOwn AND L1.IdLpnCode = ML.IdLpnCodeTarget 
          LEFT JOIN  (SELECT DD.SealNumber, OO.IdWhs, OO.IdOwn, OO.OutboundNumber ,DD.IdLpnCode
			          FROM OutboundOrder OO INNER JOIN 
			               Dispatch D ON OO.IdOutboundOrder = D.IdOutboundOrder INNER JOIN 
				           DispatchDetail DD ON D.IdDispatch = DD.IdDispatch 
			          WHERE OO.IdWhs = D.IdWhs
			          AND DD.SealNumber IS NOT NULL) OO ON OO.IdLpnCode = ML.IdLpnCodeSource 
			          AND OO.IdWhs = ML.IdWhs 
			          AND OO.IdOwn = ML.IdOwn 
			          AND OO.OutboundNumber = ML.DocumentNumber
          LEFT JOIN  (SELECT DD.SealNumber, OO.IdWhs, OO.IdOwn, OO.OutboundNumber ,DD.IdLpnCode
			          FROM OutboundOrder OO INNER JOIN 
			               Dispatch D ON OO.IdOutboundOrder = D.IdOutboundOrder INNER JOIN 
				           DispatchDetail DD ON D.IdDispatch = DD.IdDispatch 
			          WHERE OO.IdWhs = D.IdWhs
			          AND DD.SealNumber IS NOT NULL) OO1 ON OO1.IdLpnCode = ML.IdLpnCodeTarget
			          AND OO1.IdWhs = ML.IdWhs 
			          AND OO1.IdOwn = ML.IdOwn 
			          AND OO1.OutboundNumber = ML.DocumentNumber          
          WHERE ML.IdMovementType &lt;&gt;  51001)ML
          @SQLPart
          ORDER BY ML.IdMovement DESC;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @EntityPropertyName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">EntityPropertyName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">ML.IdWhs</filter>
          <filter name="Owner" type="numericIn" includeNulls="true">ML.IdOwn</filter>
          <filter name="MovementType" type="numericIn">ML.IdMovementType</filter>
          <filter name="DateRange" type="textBetween">ML.StartTime</filter>
          <filter name="Item" type="textLike">ML.BarCode</filter>
          <filter name="LotNumberRange" type="textLike">ML.LotNumber</filter>
          <filter name="DocumentNbr" type="textLike">ML.DocumentNumber</filter>
          <filter name="Code" type="textLikeOr">ML.IdLpnCodeSource,ML.IdLpnCodeTarget</filter>
          <filter name="LpnParent" type="textLikeOr">ML.LpnParentSource,ML.LpnParentTarget</filter>
          <filter name="FabricationDateRange" type="textEqual">ML.FabricationDate</filter>
          <filter name="ExpirationDateRange" type="textEqual">ML.ExpirationDate</filter>
        </filters>        
      </query>

      <query code="DispatchMovement_FindAll">
        <sql>
          SELECT
          Mov.IdMovement
          ,Mov.IdMovementType
          ,MT.MovementName
          ,Mov.StartTime
          ,Mov.EndTime
          ,Mov.UserName
          ,Mov.DocumentNumber
          ,Mov.DocumentType
          ,Mov.DocumentLineNumber
          ,Mov.ReferenceNumber
          ,Mov.LotNumber
          ,Mov.FifoDate
          ,Mov.ExpirationDate
          ,Mov.FabricationDate
          ,Mov.ItemQtyMov
          ,Mov.QtyBeforeSource
          ,Mov.QtyBeforeTarget
          ,Mov.ReasonCode
          ,Mov.RoutingCode
          ,Mov.HoldCode
          ,Whs.IdWhs
          ,Whs.WhsCode
          ,Whs.ShortWhsName
          ,Whs.WhsName
          ,Own.IdOwn
          ,Own.OwnCode
          ,Own.OwnName
          ,Own.TradeName
          ,Itm.IdItem
          ,Itm.ItemCode
          ,Itm.Description
          ,CtgItm.IdCtgItem
          ,CtgItm.CtgName
          ,Mov.IdLpnCodeSource
          ,Mov.IdLpnCodeTarget
          ,Mov.IdLocCodeProposal
          ,Mov.IdLocCodeSource
          ,Mov.IdLocCodeTarget
          ,Mov.SpecialField1
          ,Mov.SpecialField2
          ,Mov.SpecialField3
          ,Mov.SpecialField4
          ,Mov.SpecialField5
          ,Mov.SpecialField6
          ,Mov.SpecialField7

          FROM MovementLog Mov

          LEFT JOIN CategoryItem  CtgItm ON Mov.IdCtgItem = CtgItm.IdCtgItem
          INNER JOIN Warehouse Whs ON Mov.IdWhs = Whs.IdWhs
          INNER JOIN Owner Own ON Mov.IdOwn = Own.IdOwn
          LEFT OUTER JOIN Item Itm ON Mov.IdItem = Itm.IdItem
          INNER JOIN movementtype MT ON Mov.idmovementtype = MT.idmovementtype

          WHERE MT.IdWmsProcessCode IN ('PICK','PACK','LOAD','SHIPP')

          @SQLPart

          ORDER BY Mov.IdMovement DESC;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">Mov.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">Mov.DocumentNumber</filter>
          <filter name="DateRange" type="textBetween">Mov.EndTime</filter>
          <filter name="Item" type="textLike">Itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">Mov.IdOwn</filter>
          <filter name="Name" type="textLike">Mov.IdLocCodeTarget</filter>
        </filters>
      </query>

      <query code="SaveMovement">
        <sql>
          INSERT INTO MovementLog
          (IdMovement, IdMovementType, StartTime, EndTime, UserName,IdWhs,DocumentNumber,DocumentType,DocumentLineNumber,
          ReferenceNumber,IdOwn,IdItem,IdUom,IdCtgItem,LotNumber,FifoDate,ExpirationDate,FabricationDate,IdLpnCodeSource,
          IdLpnCodeTarget,LpnParentSource,LpnParentTarget,IdLocCodeProposal,IdLocCodeSource,IdLocCodeTarget,ItemQtyMov,QtyBeforeSource,QtyBeforeTarget,
          ReasonCode,HoldCode,RoutingCode,
          SpecialField1, SpecialField2, SpecialField3, SpecialField4, SpecialField5, SpecialField6, SpecialField7,TotalWeight)
          VALUES(
          @IdMovement,
          @IdMovementType,
          @StartTime,
          @EndTime,
          @UserName,
          @IdWhs,
          @DocumentNumber,
          @DocumentType,
          @DocumentLineNumber,
          @ReferenceNumber,
          @IdOwn,
          @IdItem,
          @IdUom,
          @IdCtgItem,
          @LotNumber,
          @FifoDate,
          @ExpirationDate,
          @FabricationDate,
          @IdLpnCodeSource,
          @IdLpnCodeTarget,
          @LpnParentSource,
          @LpnParentTarget,
          @IdLocCodeProposal,
          @IdLocCodeSource,
          @IdLocCodeTarget,
          @ItemQtyMov,
          @QtyBeforeSource,
          @QtyBeforeTarget,
          @ReasonCode,
          @HoldCode,
          @RoutingCode,
          @SpecialField1,
          @SpecialField2,
          @SpecialField3,
          @SpecialField4,
          @SpecialField5,
          @SpecialField6,
          @SpecialField7,
          @TotalWeight)
        </sql>
        <parameters>
          <parameter type="Int">IdMovement</parameter>
          <parameter type="Int">IdMovementType</parameter>
          <parameter type="DateTime">StartTime</parameter>
          <parameter type="DateTime">EndTime</parameter>
          <parameter type="String">UserName</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">DocumentNumber</parameter>
          <parameter type="String">DocumentType</parameter>
          <parameter type="String">DocumentLineNumber</parameter>
          <parameter type="String">ReferenceNumber</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdUom</parameter>
          <parameter type="Int">IdCtgItem</parameter>
          <parameter type="String">LotNumber</parameter>
          <parameter type="DateTime">FifoDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="DateTime">FabricationDate</parameter>
          <parameter type="String">IdLpnCodeSource</parameter>
          <parameter type="String">IdLpnCodeTarget</parameter>
          <parameter type="String">LpnParentSource</parameter>
          <parameter type="String">LpnParentTarget</parameter>
          <parameter type="String">IdLocCodeProposal</parameter>
          <parameter type="String">IdLocCodeSource</parameter>
          <parameter type="String">IdLocCodeTarget</parameter>
          <parameter type="Decimal">ItemQtyMov</parameter>
          <parameter type="Decimal">QtyBeforeSource</parameter>
          <parameter type="Decimal">QtyBeforeTarget</parameter>
          <parameter type="String">ReasonCode</parameter>
          <parameter type="String">HoldCode</parameter>
          <parameter type="String">RoutingCode</parameter>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="String">SpecialField3</parameter>
          <parameter type="String">SpecialField4</parameter>
          <parameter type="String">SpecialField5</parameter>
          <parameter type="String">SpecialField6</parameter>
          <parameter type="String">SpecialField7</parameter>
          <parameter type="Decimal">TotalWeight</parameter>
        </parameters>
      </query>


      <query code="EstractMovementLogWithOwn">
        <sql>
          SELECT TOP(@QtyMovementToRet) ML.IdMovement, ML.IdMovementType, ML.StartTime, ML.EndTime,
          ML.UserName, ML.IdWhs, ML.DocumentNumber, ML.DocumentType,
          ML.DocumentLineNumber, ML.ReferenceNumber, ML.IdOwn, ML.IdItem,
          I.ItemCode, IU.UomCode, ML.IdCtgItem, CI.CtgName, ML.LotNumber, ML.FifoDate,
          ML.ExpirationDate, ML.FabricationDate, ML.IdLpnCodeSource,
          ML.IdLpnCodeTarget, ML.LpnParentSource, ML.LpnParentTarget,
          ML.IdLocCodeProposal, ML.IdLocCodeSource, ML.IdLocCodeTarget, ML.ItemQtyMov,
          ML.QtyBeforeSource, ML.QtyBeforeTarget, ML.ReasonCode,
          ML.HoldCode, ML.RoutingCode
          FROM MovementLog ML
          LEFT JOIN Item I
          ON I.IdItem = ML.IdItem
          LEFT JOIN ItemUom IU
          ON IU.IdUom = ML.IdUom
          LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = ML.IdCtgItem
          WHERE IdMovementType = @IdMovementType
          AND ML.IdOwn = @IdOwn
          AND ML.IdMovement > @IdMovement
        </sql>
        <parameters>
          <parameter type="Int">QtyMovementToRet</parameter>
          <parameter type="Int">IdMovementType</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdMovement</parameter>
        </parameters>
      </query>
  
      <query code="EstractMovementLog">
        <sql>
          SELECT TOP(@QtyMovementToRet) ML.IdMovement, ML.IdMovementType, ML.StartTime, ML.EndTime,
          ML.UserName, ML.IdWhs, ML.DocumentNumber, ML.DocumentType,
          ML.DocumentLineNumber, ML.ReferenceNumber, ML.IdOwn, ML.IdItem,
          I.ItemCode, IU.UomCode, ML.IdCtgItem, CI.CtgName, ML.LotNumber, ML.FifoDate,
          ML.ExpirationDate, ML.FabricationDate, ML.IdLpnCodeSource,
          ML.IdLpnCodeTarget, ML.LpnParentSource, ML.LpnParentTarget,
          ML.IdLocCodeProposal, ML.IdLocCodeSource, ML.IdLocCodeTarget, ML.ItemQtyMov,
          ML.QtyBeforeSource, ML.QtyBeforeTarget, ML.ReasonCode,
          ML.HoldCode, ML.RoutingCode
          FROM MovementLog ML
          LEFT JOIN Item I
          ON I.IdItem = ML.IdItem
          LEFT JOIN ItemUom IU
          ON IU.IdUom = ML.IdUom
          LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = ML.IdCtgItem
          WHERE IdMovementType = @IdMovementType
          AND ML.IdMovement > @IdMovement
        </sql>
        <parameters>
          <parameter type="Int">QtyMovementToRet</parameter>
          <parameter type="Int">IdMovementType</parameter>
          <parameter type="Int">IdMovement</parameter>
        </parameters>
      </query>

      <query code="GetMovementUserProductivity">
        <sql>
          SELECT T.MovementName
          , L.IdMovement
          , L.IdMovementType
          , L.StartTime
          , L.EndTime
          , U.FirstName + ' ' + U.LastName AS UserName
          , W.IdWhs
          , W.WhsCode
          , W.WhsName
          , L.DocumentNumber
          , L.DocumentType
          , L.DocumentLineNumber
          , L.IdLpnCodeTarget
          , O.IdOwn
          , O.OwnCode
          , O.OwnName
          , L.IdItem
          , L.ItemQtyMov
          FROM (SELECT IdMovement
                , IdMovementType
                , StartTime
                , EndTime
                , DocumentNumber
                , DocumentType
                , DocumentLineNumber
                , IdLpnCodeTarget
                , COALESCE(IdOwn, 1) AS IdOwn
                , IdWhs
                , IdItem
                , ItemQtyMov
                , UserName
                FROM MovementLog) L
          INNER JOIN MovementType T
          ON L.IdMovementType = T.IdMovementType
          INNER JOIN Warehouse W
          ON L.IdWhs = W.IdWhs
          INNER JOIN CfgUserWms U
          ON L.UserName = U.UserName
          LEFT JOIN Owner O
          ON L.IdOwn = O.IdOwn
          @SQLPart;
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
          <filter name="Owner" type="numericIn">L.IdOwn</filter>
          <filter name="MovementType" type="numericIn">L.IdMovementType</filter>
          <filter name="DateRange" type="textBetween">EndTime</filter>
          <filter name="Name" type="textLike">U.UserName</filter>
        </filters>
      </query>

      <query code="MovLog_FindRotationItem">
        <sql>
          SELECT W.IdWhs,
                 W.WhsCode,
                 W.WhsName,
                 W.ShortWhsName,
                 O.IdOwn,
                 O.OwnCode,
                 O.OwnName,
                 MV.StartTime,
                 MV.EndTime,
                 T.IdMovementType,
                 T.MovementName,
                 I.IdItem,
                 I.ItemCode,
                 I.Description,
                 MV.ItemQtyMov,
				         MV.IdCtgItem,
				         CT.CtgName,
				         MV.LotNumber,
				         MV.FifoDate,
				         MV.ExpirationDate,
				         MV.FabricationDate,
                 MV.IdLpnCodeSource,
                 MV.IdLpnCodeTarget,
                 MV.LpnParentSource,
                 MV.LpnParentTarget,
                 MV.IdLocCodeProposal,
                 MV.IdLocCodeSource,
                 MV.IdLocCodeTarget,
				         U.UserName
            FROM MovementLog MV
            JOIN MovementType T
              ON MV.IdMovementType = T.IdMovementType
            JOIN Warehouse W
              ON MV.IdWhs = W.IdWhs
            JOIN Owner O
              ON MV.IdOwn = O.IdOwn
            JOIN CfgUserWms U
              ON MV.UserName = U.UserName
            JOIN Item I
              ON MV.IdItem = I.IdItem
             AND MV.IdOwn = I.IdOwn
			      LEFT JOIN CategoryItem CT 
			        ON CT.IdCtgItem = MV.IdCtgItem
			        AND CT.IdOwn = MV.IdOwn
                      @SQLPart
              ORDER BY MV.EndTime, MV.IdItem, MV.LotNumber;
                 
            SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
              FROM CfgEntityProperty qf
              JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
             WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">MV.IdWhs</filter>
          <filter name="Owner" type="numericIn">MV.IdOwn</filter>
          <filter name="MovementType" type="numericIn">MV.IdMovementType</filter>
          <filter name="DateRange" type="textBetween">MV.EndTime</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
        </filters>
      </query>
  
      <query code="MovLog_FindRotationLocation">
        <sql>
          SELECT W.IdWhs,
          W.WhsCode,
          W.WhsName,
          W.ShortWhsName,
          O.IdOwn,
          O.OwnCode,
          O.OwnName,
          MV.StartTime,
          MV.EndTime,
          T.IdMovementType,
          T.MovementName,
          MV.IdItem,
          I.ItemCode,
          I.Description,
          MV.ItemQtyMov,
          MV.IdCtgItem,
          CT.CtgName,
          MV.LotNumber,
          MV.FifoDate,
          MV.ExpirationDate,
          MV.FabricationDate,
          MV.IdLpnCodeSource,
          MV.IdLpnCodeTarget,
          MV.LpnParentSource,
          MV.LpnParentTarget,
          MV.IdLocCodeProposal,
          MV.IdLocCodeSource,
          COALESCE(MostUsedLocations.CountLocation, 0) AS CountLocation,
          MV.IdLocCodeTarget,
          U.UserName
          FROM MovementLog MV
          JOIN MovementType T
          ON MV.IdMovementType = T.IdMovementType
          JOIN Warehouse W
          ON MV.IdWhs = W.IdWhs
          JOIN Owner O
          ON MV.IdOwn = O.IdOwn
          JOIN CfgUserWms U
          ON MV.UserName = U.UserName
          JOIN Item I
          ON MV.IdItem = I.IdItem
          AND MV.IdOwn = I.IdOwn
          JOIN (  SELECT  MV.IdLocCodeSource,
          COUNT(MV.IdLocCodeSource) as CountLocation
          FROM MovementLog MV INNER JOIN
          Item I ON MV.IdItem = I.IdItem
          AND MV.IdOwn = I.IdOwn
          @SQLPart
          AND MV.IdLocCodeSource IS NOT NULL
          GROUP BY MV.IdLocCodeSource
          ) AS MostUsedLocations
          ON MostUsedLocations.IdLocCodeSource = MV.IdLocCodeSource
          LEFT JOIN CategoryItem CT
          ON CT.IdCtgItem = MV.IdCtgItem
          AND CT.IdOwn = MV.IdOwn
          @SQLPart
          ORDER BY CountLocation DESC,
          IdLocCodeSource ASC;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">MV.IdWhs</filter>
          <filter name="Owner" type="numericIn">MV.IdOwn</filter>
          <filter name="MovementType" type="numericIn">MV.IdMovementType</filter>
          <filter name="DateRange" type="textBetween">MV.EndTime</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
        </filters>
      </query>
   
      <query code="MovLog_FindRotationLocationByItem">
        <sql>
          SELECT
               final.Porc as PorcLocationUsed,
	             CASE
			            WHEN final.Porc &gt;= 0 AND final.Porc &lt; 20 THEN 'Low'
			            WHEN final.Porc &gt;= 20 AND final.Porc &lt; 40 THEN 'NormalLow'
			            WHEN final.Porc &gt;= 40 AND final.Porc &lt; 60 THEN 'Normal'
			            WHEN final.Porc &gt;= 60 AND final.Porc &lt; 80 THEN 'NormalHigh'
			            WHEN final.Porc &gt;= 80 AND final.Porc &lt;= 100 THEN 'High'
	             END AS Range,
	             final.IdLocCodeSource,
               final.CountLocation,
	             final.SumLocation,
	             final.PositionX,
	             final.PositionY,
	             final.PositionZ
            FROM 
          ( 	
	          SELECT CAST(((CAST(tot.CountLocation as FLOAT) / CAST(tot.SumLocation as FLOAT)) * 100) AS INT) AS Porc,
		               tot.CountLocation,
		               CAST(tot.SumLocation AS INT) AS SumLocation,
		               tot.IdLocCodeSource,
		               tot.PositionX,
		               tot.PositionY,
		               tot.PositionZ
	           FROM (

		          SELECT (
			
				            SELECT  
						              CAST(COUNT(MV.IdLocCodeSource) AS INT) AS SumLocation			
				             FROM MovementLog MV 
				             JOIN Location L
					             ON L.IdLocCode = MV.IdLocCodeSource
                     JOIN MovementType MT
                       ON MV.IdMovementType = MT.IdMovementType
				                  @SQLPart
					            AND MV.IdLocCodeSource IS NOT NULL
					            AND L.LocTypeCode &lt; &gt; 'FKL'
                      AND MT.IdWmsProcessCode IN (
                          'PLPN',
                          'PITEM',
                          'RLPN',
                          'RITEM',
                          'REPL',
                          'MOVD',
                          'MDLPN',
                          'MOVD',
                          'MDITM',
                          'PICK',
                          'PKWAV',
                          'PKBAT',
                          'PKPSS',
                          'PKKIT',
                          'PKVAS',
                          'PKMES',
                          'PKLPN',
                          'RUTEO'
                      )
                      
          ) AS SumLocation,
          data.CountLocation,
          data.IdLocCodeSource,
          data.PositionX,
          data.PositionY,
          data.PositionZ
          FROM (

              SELECT      MV.IdLocCodeSource,
                          COUNT(MV.IdLocCodeSource) as CountLocation,
                          MV.IdOwn,
                          MV.IdWhs,
                          MV.IdItem,
                          L.PositionX,
                          L.PositionY,
                          L.PositionZ
                     FROM MovementLog MV
                     JOIN Location L
                       ON L.IdLocCode = MV.IdLocCodeSource
                     JOIN MovementType MT
                       ON MV.IdMovementType = MT.IdMovementType
                          @SQLPart
                      AND MV.IdLocCodeSource IS NOT NULL
                      AND L.LocTypeCode &lt; &gt; 'FKL'
                      AND MT.IdWmsProcessCode IN (
                          'PLPN',
                          'PITEM',
                          'RLPN',
                          'RITEM',
                          'REPL',
                          'MOVD',
                          'MDLPN',
                          'MOVD',
                          'MDITM',
                          'PICK',
                          'PKWAV',
                          'PKBAT',
                          'PKPSS',
                          'PKKIT',
                          'PKVAS',
                          'PKMES',
                          'PKLPN',
                          'RUTEO'
                      )
			           GROUP BY MV.IdLocCodeSource,
						              MV.IdOwn,
						              MV.IdWhs,
						              MV.IdItem,
						              L.PositionX,
						              L.PositionY,
						              L.PositionZ
		          ) data
	          ) tot
          )final
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">MV.IdWhs</filter>
          <filter name="Owner" type="numericIn">MV.IdOwn</filter>
          <filter name="MovementType" type="numericIn">MV.IdMovementType</filter>
          <filter name="DateRange" type="textBetween">MV.EndTime</filter>
          <filter name="Item" type="textLike">MV.IdItem</filter>
        </filters>
      </query>
   
      <!--Filtro Movement Type Todos-->
      <query code="MovementType_FindAll">
        <sql>
          SELECT IdMovementType
          ,MovementName
          ,IdWmsProcessCode
          FROM MovementType
          ORDER BY IdMovementType
        </sql>
      </query>


      <!--Filtro Movement Type Movimientos Internos-->
      <query code="MovementType_FindAllMovement">
        <sql>
          SELECT IdMovementType
          ,MovementName
          ,IdWmsProcessCode
          FROM MovementType
          @SQLPart
          ORDER BY IdMovementType
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>

        </parameters>
        <filters>
          <filter name="WmsProcessType" type="textIn">IdWmsProcessCode</filter>
        </filters>
      </query>
      <!-- End MOVEMENT section  -->


      <!--Begin Translation-->
      <query code="Translation_DeleteByNotInDictionary">
        <sql>
          DELETE
          FROM CfgTranslate
          WHERE IdDictionary
          NOT IN (Select IdDictionary FROM CfgDictionary)
        </sql>
      </query>


      <query code="Translate_GetByIdDictionary">
        <sql>
          SELECT IdLanguage
          ,IdDictionary
          ,TextValue
          ,ShortTextValue
          ,CodStatus
          FROM CfgTranslate
          WHERE IdDictionary = @IdDictionary;
        </sql>
        <parameters>
          <parameter type="Int">IdDictionary</parameter>
        </parameters>
      </query>

      <query code="Translate_DeleteByIdDictionaryAndIdLanguaje">
        <sql>
          DELETE CfgTranslate
          WHERE IdDictionary = @IdDictionary
          AND IdLanguage = @IdLanguage;
        </sql>
        <parameters>
          <parameter type="Int">IdDictionary</parameter>
          <parameter type="Int">IdLanguage</parameter>
        </parameters>
      </query>


      <query code="Translate_GetByLanguageAndDictionary">
        <sql>
          SELECT IdLanguage
          ,IdDictionary
          ,TextValue
          ,ShortTextValue
          ,CodStatus
          FROM CfgTranslate
          WHERE IdLanguage = @IdLanguage
          AND IdDictionary = @IdDictionary;
        </sql>
        <parameters>
          <parameter type="Int">IdLanguage</parameter>
          <parameter type="Int">IdDictionary</parameter>
        </parameters>
      </query>

      <query code="Translate_Insert">
        <sql>
          INSERT INTO CfgTranslate
          (IdLanguage
          ,IdDictionary
          ,TextValue
          ,ShortTextValue
          ,CodStatus
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdLanguage
          ,@IdDictionary
          ,@TextValue
          ,@ShortTextValue
          ,@CodStatus
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdLanguage</parameter>
          <parameter type="Int">IdDictionary</parameter>
          <parameter type="String">TextValue</parameter>
          <parameter type="String">ShortTextValue</parameter>
          <parameter type="Int">CodStatus</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>
      <query code="Translate_Update">
        <sql>
          UPDATE CfgTranslate
          SET TextValue = @TextValue
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdLanguage = @IdLanguage
          AND IdDictionary = @IdDictionary
        </sql>
        <parameters>
          <parameter type="Int">IdLanguage</parameter>
          <parameter type="Int">IdDictionary</parameter>
          <parameter type="String">TextValue</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>


      <query code="Translation_GetByContent">
        <sql>
          SELECT d.IdObjectKey, d.IdObjectKeyContainer, d.ObjectType, t.TextValue
          FROM CfgDictionary d
          INNER JOIN CfgTranslate t ON d.IdDictionary = t.IdDictionary
          WHERE (d.IdControlContainer = @IdControlContainer OR d.IdControlContainer = 'all')
          AND t.IdLanguage = @IdLanguage
          AND d.IdModule = @idModule
        </sql>
        <parameters>
          <parameter type="String">IdControlContainer</parameter>
          <parameter type="Int">IdLanguage</parameter>
          <parameter type="Int">idModule</parameter>
        </parameters>
      </query>

      <!--End Translation-->

      <!--Begin Module-->

      <query code="Module_FindAll">
        <sql>
          SELECT IdModule
          ,Name
          ,Description
          ,CodStatus
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM CfgModule
        </sql>
      </query>

      <!--END Module-->

      <!--Begin RoleModule-->

      <query code="RoleModule_FindAll">
        <sql>
          SELECT RM.IdRoleModule
          ,R.IdRole
          ,R.Name AS NameRole
          ,M.IdModule
          ,M.Name AS NameModule
          ,RM.UsrSysIng
          ,RM.FecSysIng
          FROM CfgRoleModule RM INNER JOIN
          CfgRole R ON RM.IdRole = R.IdRole INNER JOIN
          CfgModule M ON RM.IdModule = M.IdModule
        </sql>
        <parameters>
        </parameters>
      </query>

      <query code="RoleModule_FindByIdModule">
        <sql>
          SELECT RM.IdRoleModule
          ,R.IdRole
          ,R.Name AS NameRole
          ,R.IsBaseRole
          ,M.IdModule
          ,M.Name AS NameModule
          ,RM.UsrSysIng
          ,RM.FecSysIng
          FROM CfgRoleModule RM INNER JOIN
          CfgRole R ON RM.IdRole = R.IdRole INNER JOIN
          CfgModule M ON RM.IdModule = M.IdModule
          WHERE RM.IdModule = @IdModule
        </sql>
        <parameters>
          <parameter type="Int">IdModule</parameter>
        </parameters>
      </query>
  
      <query code="RoleModule_FindByIdModuleIdUser">
        <sql>
          SELECT RM.IdRoleModule
          ,R.IdRole
          ,R.Name AS NameRole
          ,R.IsBaseRole
          ,M.IdModule
          ,M.Name AS NameModule
          ,RM.UsrSysIng
          ,RM.FecSysIng
          FROM CfgRoleModule RM INNER JOIN
          CfgRole R ON RM.IdRole = R.IdRole INNER JOIN
          CfgModule M ON RM.IdModule = M.IdModule INNER JOIN 
          CfgUserWmsRole UR ON RM.IdRole = UR.IdRole
          WHERE RM.IdModule = @IdModule
          AND UR.IdUserWms = @IdUser
        </sql>
        <parameters>
          <parameter type="Int">IdModule</parameter>
          <parameter type="Int">IdUser</parameter>
        </parameters>
      </query>

      <query code="RoleModule_FinModuleByIdRole">
        <sql>
          SELECT RM.IdRoleModule
          ,R.IdRole
          ,R.Name AS NameRole
          ,M.IdModule
          ,M.Name AS NameModule
          ,RM.UsrSysIng
          ,RM.FecSysIng
          FROM CfgRoleModule RM INNER JOIN
          CfgRole R ON RM.IdRole = R.IdRole INNER JOIN
          CfgModule M ON RM.IdModule = M.IdModule
          WHERE RM.IdRole = @IdRole
        </sql>
        <parameters>
          <parameter type="Int">IdRole</parameter>
        </parameters>
      </query>

      <query code="RoleModule_Insert">
        <sql>
          INSERT INTO CfgRoleModule
          (IdRoleModule, IdRole, IdModule, UsrSysIng, FecSysIng)
          VALUES
          (@IdRoleModule,
          @IdRole,
          @IdModule,
          @UsrSysIng,
          @FecSysIng)
        </sql>
        <parameters>
          <parameter type="Int">IdRoleModule</parameter>
          <parameter type="Int">IdRole</parameter>
          <parameter type="Int">IdModule</parameter>
          <parameter type="String">UsrSysIng</parameter>
          <parameter type="DateTime">FecSysIng</parameter>
        </parameters>
      </query>

      <query code="RoleModule_Delete">
        <sql>
          DELETE
          FROM CfgRoleModule
          WHERE IdRoleModule= @IdRoleModule
        </sql>
        <parameters>
          <parameter type="Int">IdRoleModule</parameter>
        </parameters>
      </query>

      <query code="RoleModule_Update">
        <sql>
          UPDATE CfgRoleModule SET
          IdModule = @IdModule,
          UsrSysIng = @UsrSysIng,
          FecSysIng = @FecSysIng
          WHERE
          IdRoleModule = @IdRoleModule
        </sql>
        <parameters>
          <parameter type="Int">IdRoleModule</parameter>
          <parameter type="Int">IdModule</parameter>          
          <parameter type="String">UsrSysIng</parameter>
          <parameter type="DateTime">FecSysIng</parameter>
        </parameters>
      </query>

      <!--END RoleModule-->

      <!--Begin Diccionary-->
      <query code="Object_GetType">
        <sql>
          SELECT DISTINCT ObjectType
          FROM CfgDictionary
        </sql>
      </query>
      <query code="Container_GetObject">
        <sql>
          SELECT DISTINCT IdControlContainer
          FROM CfgDictionary
        </sql>
      </query>
      <query code="Dictionary_GetByStatus">
        <sql>
          SELECT  IdDictionary,
          IdObjectKey,
          IdObjectKeyContainer,
          IdControlContainer,
          IdModule,
          ObjectType,
          TextProperty,
          TextValue,
          CodStatus
          FROM    CfgDictionary
          WHERE   CodStatus = @codStatus
        </sql>
        <parameters>
          <parameter type="Boolean">codStatus</parameter>
        </parameters>
      </query>
      <query code="Dictionary_GetByKey">
        <sql>
          SELECT  IdDictionary,
          IdObjectKey,
          IdObjectKeyContainer,
          IdControlContainer,
          IdModule,
          ObjectType,
          TextProperty,
          TextValue,
          CodStatus
          FROM    CfgDictionary
          WHERE   IdControlContainer = @idControlContainer
          AND     IdObjectKeyContainer = @idObjectKeyContainer
          AND     IdObjectKey = @idObjectKey
          AND		TextValue = @textValue
        </sql>
        <parameters>
          <parameter type="String">idControlContainer</parameter>
          <parameter type="String">idObjectKeyContainer</parameter>
          <parameter type="String">idObjectKey</parameter>
          <parameter type="String">textValue</parameter>
        </parameters>
      </query>

      <query code="Dictionary_DeleteByStatus">
        <sql>
          DELETE
          FROM CfgDictionary
          WHERE IdObjectKeyContainer NOT IN('Menu_Item', 'Parameter')
          AND IdDictionary not in(Select IdDictionary From cfgTranslate)
          AND CodStatus = @codStatus
        </sql>
        <parameters>
          <parameter type="Boolean">codStatus</parameter>
        </parameters>
      </query>

      <query code="Dictionary_Delete">
        <sql>
          DELETE
          FROM CfgDictionaryWms
          WHERE idDictionaryWms = @id
        </sql>
        <parameters>
          <parameter type="Int">id</parameter>
        </parameters>
      </query>

      <query code="Dictionary_Insert">
        <sql>
          INSERT INTO CfgDictionary
          (IdDictionary,
          IdObjectKey,
          IdModule,
          ObjectType,
          TextProperty,
          TextValue,
          IdObjectKeyContainer,
          IdControlContainer,
          CodStatus,
          DateCreated,
          UserCreated)
          VALUES
          (@idDictionary,
          @idObjectKey,
          @idModule,
          @objectType,
          @textProperty,
          @textValue,
          @idObjectKeyContainer,
          @idControlContainer,
          @codStatus,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idDictionary</parameter>
          <parameter type="String">idObjectKey</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">objectType</parameter>
          <parameter type="String">textProperty</parameter>
          <parameter type="String">textValue</parameter>
          <parameter type="String">idObjectKeyContainer</parameter>
          <parameter type="String">idControlContainer</parameter>
          <parameter type="Boolean">codStatus</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="Dictionary_Update">
        <sql>
          UPDATE CfgDictionary SET
          IdObjectKey = @idObjectKey,
          IdModule = @idModule,
          ObjectType = @objectType,
          TextProperty = @textProperty,
          TextValue = @textValue,
          IdObjectKeyContainer = @idObjectKeyContainer,
          IdControlContainer = @idControlContainer,
          CodStatus = @codStatus,
          DateModified = @dateModified,
          UserModified = @userModified
          WHERE
          IdDictionary = @idDictionary;
        </sql>
        <parameters>
          <parameter type="Int">idDictionary</parameter>
          <parameter type="String">idObjectKey</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">objectType</parameter>
          <parameter type="String">textProperty</parameter>
          <parameter type="String">textValue</parameter>
          <parameter type="String">idObjectKeyContainer</parameter>
          <parameter type="String">idControlContainer</parameter>
          <parameter type="Boolean">codStatus</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="Dictionary_UpdateByStatus">
        <sql>
          UPDATE CfgDictionary
          SET	CodStatus = @codStatus
          WHERE IdObjectKey NOT IN('Menu_Item', 'Parameter')
        </sql>
        <parameters>
          <parameter type="Boolean">codStatus</parameter>
        </parameters>
      </query>

      <query code="Dictionary_GetProperty">
        <sql>
          SELECT DISTINCT TextProperty
          FROM CfgDictionary
        </sql>
      </query>

      <query code="Dictionary_TranslateView">
        <sql>
          SELECT IdModule
          ,ModuleName
          ,IdDictionary
          ,IdObjectKey
          ,IdObjectKeyContainer
          ,IdControlContainer
          ,ObjectType
          ,TextProperty
          ,TextBase
          ,CodStatus
          ,IdLanguage
          ,LangName
          ,TextValue
          FROM v_Cfg_DictionaryTranslate
          WHERE  (IdLanguage IS NULL OR IdLanguage = @IdLanguage)
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdLanguage</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">TextBase</filter>
          <filter name="Name" type="textLike">TextValue</filter>
          <filter name="ObjectType" type="textEqual">ObjectType</filter>
          <filter name="Module" type="numericEqual">IdModule</filter>
          <filter name="PropertyName" type="textLike">TextProperty</filter>
          <filter name="ObjectContainer" type="textEqual">IdControlContainer</filter>
        </filters>
      </query>


      <!--End Diccionary-->

      <!-- MENU section  -->
      <query code="Menu_FindAllByLanguage">
        <sql>
          SELECT DISTINCT
          mnu.IdObject AS IdMenu,
          mnu.Name,
          mnu.MenuOrder,
          COALESCE(t.TextValue, mnu.TextValue) AS TextValue,
          ISNULL((SELECT COALESCE(tr0.TextValue, m0.TextValue) + ' > ' + COALESCE(tr1.TextValue, m1.TextValue)
          FROM CfgObject m1
          JOIN CfgObject m0 ON m0.IdObject = m1.IdObjectContainer
          LEFT JOIN CfgDictionary d0 ON m0.IdDictionary = d0.IdDictionary
          LEFT JOIN CfgTranslate tr0 ON d0.IdDictionary = tr0.IdDictionary
          LEFT JOIN CfgDictionary d1 ON m1.IdDictionary = d1.IdDictionary
          LEFT JOIN CfgTranslate tr1 ON d1.IdDictionary = tr1.IdDictionary
          WHERE m1.IdObject = mnu.IdObjectContainer), '') AS WinPath,
          COALESCE(t.ShortTextValue, mnu.ShortTextValue) AS  ShortTitle,
          mnu.IdObjectContainer AS IdParentMenu
          , ISNULL((SELECT DISTINCT pag.Name
          FROM CfgObject pag
          JOIN CfgPermission p ON p.IdObject = pag.IdObject
          WHERE pag.ObjectType = 'aspx Page'
          AND pag.IdObjectContainer = mnu.IdObject
          AND p.IdRole IN (SELECT idRole FROM CfgUserWmsRole WHERE IdUserWms = @idUser)
          AND p.IsEjecute = 1) , '') AspxPage,
          (SELECT ParameterValue FROM CompanyParameter WHERE ParameterCode = 'MaxOpenedPages') AS MaxOpenedPages,
          (SELECT COALESCE(t2.TextValue, d2.TextValue) AS TextValue FROM CfgDictionary d2 LEFT JOIN CfgTranslate t2 ON d2.IdDictionary = t2.IdDictionary WHERE d2.TextProperty = 'MaxOpenedPagesMessage' AND COALESCE(t.IdLanguage, @IdLanguage) = @IdLanguage) AS MaxOpenedPagesMessage
          FROM CfgObject mnu
          JOIN CfgPermission p ON p.IdObject = mnu.IdObject
          LEFT JOIN CfgDictionary d ON mnu.IdDictionary = d.IdDictionary
          LEFT JOIN CfgTranslate t ON d.IdDictionary = t.IdDictionary
          WHERE mnu.ObjectType = 'Menu Item'
          AND p.IdRole IN(SELECT idRole FROM CfgUserWmsRole WHERE IdUserWms = @idUser)
          AND p.IsEjecute = 1
          AND mnu.CodStatus = 1
          AND COALESCE(t.IdLanguage, @IdLanguage) = @IdLanguage
          ORDER BY mnu.MenuOrder
        </sql>
        <parameters>
          <parameter type="Int">IdLanguage</parameter>
          <parameter type="Int">idUser</parameter>
        </parameters>
      </query>

      <query code="Menu_FindByBaseLanguage">
        <sql>
          SELECT DISTINCT
          mnu.IdObject AS IdMenu,
          mnu.Name,
          mnu.TextValue,
          ISNULL((SELECT m0.TextValue + ' > ' + m1.TextValue
          FROM CfgObject m1
          JOIN CfgObject m0 ON m0.IdObject = m1.IdObjectContainer
          WHERE m1.IdObject = mnu.IdObjectContainer), '') AS WinPath,
          mnu.ShortTextValue AS ShortTitle,
          mnu.IdObjectContainer AS IdParentMenu
          , mnu.MenuOrder
          , ISNULL((SELECT DISTINCT pag.Name
          FROM CfgObject pag
          JOIN CfgPermission p ON p.IdObject = pag.IdObject
          WHERE pag.ObjectType = 'aspx Page'
          AND pag.IdObjectContainer = mnu.IdObject
          AND p.IdRole IN (SELECT idRole FROM CfgUserWmsRole WHERE IdUserWms = @idUser)
          AND p.IsEjecute = 1) , '') AspxPage,
          (SELECT ParameterValue FROM CompanyParameter WHERE ParameterCode = 'MaxOpenedPages') AS MaxOpenedPages,
          (SELECT d2.TextValue FROM CfgDictionary d2 WHERE d2.TextProperty = 'MaxOpenedPagesMessage') AS MaxOpenedPagesMessage
          FROM CfgObject mnu
          JOIN CfgPermission p ON p.IdObject = mnu.IdObject
          WHERE mnu.ObjectType = 'Menu Item'
          AND p.IdRole IN(SELECT idRole FROM CfgUserWmsRole WHERE IdUserWms = @idUser)
          AND p.IsEjecute = 1
          AND mnu.CodStatus = 1
          AND mnu.IdModule = 1
          ORDER BY mnu.MenuOrder
        </sql>
        <parameters>
          <parameter type="Int">idUser</parameter>
        </parameters>
      </query>
  
      <query code="Menu_FindByUrl">
        <sql>
          select q.*
          from (
		          SELECT DISTINCT
                    mnu.IdObject AS IdMenu,
                    mnu.Name,
                    mnu.TextValue,
                    ISNULL((SELECT m0.TextValue + ' > ' + m1.TextValue
                    FROM CfgObject m1
                    JOIN CfgObject m0 ON m0.IdObject = m1.IdObjectContainer
                    WHERE m1.IdObject = mnu.IdObjectContainer), '') AS WinPath,
                    mnu.ShortTextValue AS ShortTitle,
                    mnu.IdObjectContainer AS IdParentMenu
                    , mnu.MenuOrder
                    , ISNULL((SELECT DISTINCT pag.Name
                    FROM CfgObject pag
                    JOIN CfgPermission p ON p.IdObject = pag.IdObject
                    WHERE pag.ObjectType = 'aspx Page'
                    AND pag.IdObjectContainer = mnu.IdObject
                    AND p.IsEjecute = 1) , '') AspxPage,
                    (SELECT ParameterValue FROM CompanyParameter WHERE ParameterCode = 'MaxOpenedPages') AS MaxOpenedPages,
                    (SELECT d2.TextValue FROM CfgDictionary d2 WHERE d2.TextProperty = 'MaxOpenedPagesMessage') AS MaxOpenedPagesMessage
                    FROM CfgObject mnu
                    JOIN CfgPermission p ON p.IdObject = mnu.IdObject
                    WHERE mnu.ObjectType = 'Menu Item'
                    AND p.IsEjecute = 1
                    AND mnu.CodStatus = 1
                    AND mnu.IdModule = 1

          ) as q
          where q.AspxPage LIKE @aspxPage
        </sql>
        <parameters>
          <parameter type="String">aspxPage</parameter>
        </parameters>
      </query>
      <!-- End MENU section  -->

      <!-- ROLE section  -->
      <query code="Role_GetByUser">
        <sql>
          SELECT    r.idRole,
          r.isBaseRole,
          r.name,
          r.description,
          r.codStatus,
		      m.IdModule
          FROM	CfgRole r
          JOIN	CfgUserWmsRole ur 
		      ON r.IdRole = ur.IdRole
		      LEFT JOIN CfgRoleModule rm
		      ON rm.IdRole = r.IdRole
		      LEFT JOIN CfgModule m ON 
		      m.IdModule = rm.IdModule
          WHERE	ur.IdUserWms = @userId;
        </sql>
        <parameters>
          <parameter type="Int">userId</parameter>
        </parameters>
      </query>

      <query code="Role_GetByNotInUser">
        <sql>
          SELECT
          idRole,
          isBaseRole,
          Name,
          Description,
          CodStatus
          FROM CfgRole
          WHERE idRole NOT IN (SELECT idRole FROM CfgUserWmsRole WHERE IdUserWms = @userId);
        </sql>
        <parameters>
          <parameter type="Int">userId</parameter>
        </parameters>
      </query>

      <query code="Role_GetById">
        <sql>
          SELECT  idRole,
          isBaseRole,
          name,
          description,
          codStatus
          FROM	CfgRole
          WHERE	idRole = @id;
        </sql>
        <parameters>
          <parameter type="Int">id</parameter>
        </parameters>
      </query>

      <query code="Role_FindAll">
        <sql>
          SELECT r.IdRole, r.IsBaseRole, r.Name, r.Description, r.CodStatus
          FROM CfgRole r
          INNER JOIN CfgRoleModule rm
          ON rm.IdRole = r.IdRole
          INNER JOIN CfgModule m
          ON m.IdModule = rm.IdModule
          @SQLPart
          ORDER BY m.Name, r.Name;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textLike">r.Name</filter>
          <filter name="Description" type="textLike">r.Description</filter>
          <filter name="Status" type="numericEqual">r.CodStatus</filter>
        </filters>
      </query>

      <query code="Role_Update">
        <sql>
          UPDATE CfgRole SET
          IsBaseRole = @isBaseRole,
          Name = @name,
          Description = @description,
          CodStatus = @codStatus,
          DateModified = @dateModified,
          UserModified = @userModified
          WHERE
          IdRole = @idRole
        </sql>
        <parameters>
          <parameter type="Int">idRole</parameter>
          <parameter type="Int">isBaseRole</parameter>
          <parameter type="String">name</parameter>
          <parameter type="String">description</parameter>
          <parameter type="Boolean">codStatus</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="Role_Insert">
        <sql>
          INSERT INTO CfgRole
          (IdRole, IsBaseRole, Name, Description, CodStatus, DateCreated, UserCreated)

          VALUES
          (@idRole,
          @isBaseRole,
          @name,
          @description,
          @codStatus,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idRole</parameter>
          <parameter type="Int">isBaseRole</parameter>
          <parameter type="String">name</parameter>
          <parameter type="String">description</parameter>
          <parameter type="Boolean">codStatus</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="RoleUser_Delete">
        <sql>
          DELETE
          FROM CfgUserWmsRole
          WHERE IdUserWms = @idUser
        </sql>
        <parameters>
          <parameter type="Int">idUser</parameter>
        </parameters>
      </query>

      <query code="Role_Delete">
        <sql>
          DELETE FROM CfgPermission WHERE IdRole = @idRole;

          DELETE FROM CfgTemplateLineRole Where IdRole = @idRole;

          DELETE FROM CfgRole WHERE IdRole = @idRole
        </sql>
        <parameters>
          <parameter type="Int">idRole</parameter>
        </parameters>
      </query>

      <!--End ROLE -->

      <!-- PERMISSION section  -->
      <query code="Permission_GetByRole">
        <sql>
          SELECT
          COALESCE((SELECT DISTINCT p.IdPermission
          FROM CfgObject mnuPerm
          JOIN CfgPermission pPerm ON pPerm.IdObject = mnu.IdObject
          WHERE ObjectType = 'Menu Item'
          AND pPerm.IsEjecute = 1
          AND pPerm.IdRole = @idRole), -1) IdPermission,
          mnu.IdObject AS IdMenu,
          mnu.Name,
          COALESCE(t.TextValue, mnu.TextValue) AS TextValue,
          ISNULL((SELECT m0.TextValue + ' > ' + m1.TextValue
          FROM CfgObject m1
          JOIN CfgObject m0 ON m0.IdObject = m1.IdObjectContainer
          WHERE m1.IdObject = mnu.IdObjectContainer), '') AS WinPath,
          mnu.IdObjectContainer AS IdParentMenu,
          COALESCE((SELECT DISTINCT pag.IdObject
          FROM CfgObject pag
          JOIN CfgPermission p ON p.IdObject = pag.IdObject
          WHERE pag.ObjectType = 'aspx Page'
          AND pag.IdObjectContainer = mnu.IdObject
          AND p.IsEjecute = 1) , '') idMenuPage,
          COALESCE((SELECT DISTINCT pag.Name
          FROM CfgObject pag
          JOIN CfgPermission p ON p.IdObject = pag.IdObject
          WHERE pag.ObjectType = 'aspx Page'
          AND pag.IdObjectContainer = mnu.IdObject
          AND p.IsEjecute = 1) , '') aspxPage
          FROM CfgObject mnu
          JOIN CfgPermission p ON p.IdObject = mnu.IdObject
          LEFT JOIN CfgDictionary d ON mnu.IdDictionary = d.IdDictionary
          LEFT JOIN CfgTranslate t ON d.IdDictionary = t.IdDictionary
          AND COALESCE(t.IdLanguage, @idLanguage) = @idLanguage
          WHERE mnu.ObjectType = 'Menu Item'
          AND p.IsEjecute = 1
          AND p.IdRole = 1
          ORDER BY mnu.MenuOrder
        </sql>
        <parameters>
          <parameter type="Int">idRole</parameter>
          <parameter type="Int">idLanguage</parameter>
        </parameters>
      </query>

      <query code="Permission_GetByRoleModule">
        <sql>
          SELECT
          COALESCE((SELECT DISTINCT p.IdPermission
          FROM CfgObject mnuPerm
          JOIN CfgPermission pPerm ON pPerm.IdObject = mnu.IdObject
          WHERE ObjectType = 'Menu Item'
          AND pPerm.IsEjecute = 1
          AND pPerm.IdRole = @idRole), -1) IdPermission,
          mnu.IdObject AS IdMenu,
          mnu.Name,
          COALESCE(t.TextValue, mnu.TextValue) AS TextValue,
          ISNULL((SELECT m0.TextValue + ' > ' + m1.TextValue
          FROM CfgObject m1
          JOIN CfgObject m0 ON m0.IdObject = m1.IdObjectContainer
          WHERE m1.IdObject = mnu.IdObjectContainer), '') AS WinPath,
          mnu.IdObjectContainer AS IdParentMenu,
          COALESCE((SELECT DISTINCT pag.IdObject
          FROM CfgObject pag
          JOIN CfgPermission p ON p.IdObject = pag.IdObject
          WHERE pag.ObjectType = 'aspx Page'
          AND pag.IdObjectContainer = mnu.IdObject
          AND p.IsEjecute = 1) , '') idMenuPage,
          COALESCE((SELECT DISTINCT pag.Name
          FROM CfgObject pag
          JOIN CfgPermission p ON p.IdObject = pag.IdObject
          WHERE pag.ObjectType = 'aspx Page'
          AND pag.IdObjectContainer = mnu.IdObject
          AND p.IsEjecute = 1) , '') aspxPage
          FROM CfgObject mnu
          JOIN CfgPermission p ON p.IdObject = mnu.IdObject
          LEFT JOIN CfgDictionary d ON mnu.IdDictionary = d.IdDictionary
          LEFT JOIN CfgTranslate t ON d.IdDictionary = t.IdDictionary
          AND COALESCE(t.IdLanguage, @idLanguage) = @idLanguage
          WHERE mnu.ObjectType = 'Menu Item'
          AND p.IsEjecute = 1
          AND p.IdRole = 1
          AND mnu.IdModule = @idModule
          AND mnu.CodStatus = 1
          ORDER BY mnu.MenuOrder
        </sql>
        <parameters>
          <parameter type="Int">idRole</parameter>
          <parameter type="Int">idLanguage</parameter>
          <parameter type="Int">idModule</parameter>
        </parameters>
      </query>

      <query code="Permission_Insert">
        <sql>
          INSERT INTO CfgPermission
          (IdPermission,
          IdRole,
          IdObject,
          IsView,
          IsCreate,
          IsUpdate,
          IsDelete,
          IsEjecute,
          DateCreated,
          UserCreated)

          VALUES
          (@idPermission,
          @idRole,
          @idObject,
          1,
          1,
          1,
          1,
          1,
          @dateCreated,
          @userCreated)

        </sql>
        <parameters>
          <parameter type="Int">idPermission</parameter>
          <parameter type="Int">idRole</parameter>
          <parameter type="Int">idObject</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="Permission_DeleteByRole">
        <sql>
          DELETE FROM CfgPermission
          WHERE IdRole = @idRole;
        </sql>
        <parameters>
          <parameter type="Int">idRole</parameter>
        </parameters>
      </query>
      <!-- End PERMISSION section  -->

      <!-- DEVICE section  -->
      <!-- Terminal section  -->

      <query code="Terminal_FindAll">
        <sql>
          SELECT  IdMobileDevice,
          dt.IdDisplayType,
          dt.Name AS DisplayType,
          Code,
          md.Name,
          Type,
          CodStatus
          FROM CfgMobileDevices md
          INNER JOIN CfgDisplayType dt ON md.IdDisplayType = dt.IdDisplayType
          @SQLPart
          ORDER BY dt.Name,md.Name;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">Code</filter>
          <filter name="Name" type="textLike">md.Name</filter>
          <filter name="Status" type="numericEqual">CodStatus</filter>
        </filters>
      </query>

      <query code="Terminal_Insert">
        <sql>
          INSERT INTO CfgMobileDevices
          (IdMobileDevice
          , IdDisplayType
          , Code
          , Name
          , Type
          , CodStatus
          , DateCreated
          , UserCreated)


          VALUES
          (@idMobileDevice,
          @idDisplayType,
          @code,
          @name,
          @type,
          @codStatus,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idMobileDevice</parameter>
          <parameter type="Int">idDisplayType</parameter>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="String">type</parameter>
          <parameter type="Boolean">codStatus</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="Terminal_Delete">
        <sql>
          DELETE
          FROM CfgMobileDevices
          WHERE IdMobileDevice = @idTerminal;
        </sql>
        <parameters>
          <parameter type="Int">idTerminal</parameter>
        </parameters>
      </query>

      <query code="Terminal_Update">
        <sql>
          UPDATE CfgMobileDevices SET
          IdDisplayType = @idDisplayType,
          Code = @code,
          Name = @name,
          Type = @type,
          CodStatus = @codStatus,
          DateModified = @dateModified,
          UserModified = @userModified
          WHERE
          IdMobileDevice = @idTerminal
        </sql>
        <parameters>
          <parameter type="Int">idTerminal</parameter>
          <parameter type="Int">idDisplayType</parameter>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="String">type</parameter>
          <parameter type="Boolean">codStatus</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="GetTerminalByCode">
        <sql>
          SELECT t.IdMobileDevice
          ,t.Code
          ,t.Name
          ,t.Type
          ,t.CodStatus
          FROM CfgMobileDevices t
          WHERE t.Code = @terminalCode
        </sql>
        <parameters>
          <parameter type="String">terminalCode</parameter>
        </parameters>
      </query>

      <query code="DisplayType_FindAll">
        <sql>
          SELECT  IdDisplayType,
          Name,
          MaxLines,
          MaxColumns,
          IdModule
          FROM dbo.CfgDisplayType
        </sql>
      </query>
      <!-- End Terminal section  -->

      <!-- Printer section  -->
      <query code="Printer_FindAll">
        <sql>
          SELECT
          P.IdPrinter
          ,P.PrinterName
          ,P.Description
          ,P.IdWhs
          ,P.IdPrinterType
          ,W.WhsCode
          ,W.WhsName
          ,P.DateCreated
          ,P.UserCreated
          ,P.DateModified
          ,P.UserModified
          ,PT.PrinterTypeCode
          ,PT.PrinterTypeName
          ,PS.IdPrintServer
          ,PS.ServerName
          FROM Printer P
          LEFT JOIN Warehouse W ON P.IdWhs = W.IdWhs
          LEFT JOIN PrinterType PT ON P.IdPrinterType = PT.IdPrinterType
          LEFT JOIN PrintServerPrinter PSP ON P.IdPrinter = PSP.IdPrinter
          LEFT JOIN PrintServer PS ON PSP.IdPrintServer = PS.IdPrintServer
          @SQLPart
          ORDER BY W.WhsName,PT.PrinterTypeName,PS.ServerName,P.PrinterName;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">P.IdWhs</filter>
          <filter name="Name" type="textLike">P.PrinterName</filter>
        </filters>
      </query>

      <query code="Printer_GetByAnyParameter">
        <sql>
          SELECT
          P.IdPrinter
          ,P.PrinterName
          ,P.Description
          ,P.IdWhs
          ,P.IdPrinterType
          ,W.WhsCode
          ,W.WhsName
          ,P.DateCreated
          ,P.UserCreated
          ,P.DateModified
          ,P.UserModified
          ,PT.PrinterTypeCode
          ,PT.PrinterTypeName
          ,PT.IdPrinterType
          FROM Printer P
          LEFT JOIN Warehouse W ON P.IdWhs = W.IdWhs
          LEFT JOIN PrinterType PT ON P.IdPrinterType = PT.IdPrinterType
          WHERE 1=1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdPrinter" type="numericEqual">P.IdPrinter</filter>
          <filter name="IdWhs" type="numericEqual">P.IdWhs</filter>
          <filter name="Name" type="textEqual">P.PrinterName</filter>
          <filter name="IdPrinterType" type="numericEqual">P.IdPrinterType</filter>
        </filters>
      </query>

      <query code="GetPrinterByName">
        <sql>
          SELECT IdPrinter
          ,PrinterName
          ,Description
          ,IdWhs
          ,IdPrinterType
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM Printer
          WHERE PrinterName = @Name;
        </sql>
        <parameters>
          <parameter type="String">Name</parameter>
        </parameters>
      </query>

      <query code="GetPrinterByIdFromUserRelation">
        <sql>
          SELECT IdPrinter
          FROM UserPrinter
          WHERE IdPrinter = @IdPrinter
        </sql>
        <parameters>
          <parameter type="Int">IdPrinter</parameter>
        </parameters>
      </query>

      <query code="Printer_Insert">
        <sql>
          INSERT INTO Printer
          (IdPrinter
          ,PrinterName
          ,Description
          ,IdWhs
          ,IdPrinterType
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdPrinter
          ,@PrinterName
          ,@Description
          ,@IdWhs
          ,@IdPrinterType
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdPrinter</parameter>
          <parameter type="String">PrinterName</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdPrinterType</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="Printer_Update">
        <sql>
          UPDATE Printer
          SET PrinterName = @PrinterName
          ,Description = @Description
          ,IdWhs = @IdWhs
          ,IdPrinterType = @IdPrinterType
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdPrinter = @IdPrinter
        </sql>
        <parameters>
          <parameter type="Int">IdPrinter</parameter>
          <parameter type="String">PrinterName</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdPrinterType</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query code="Printer_Delete">
        <sql>
          DELETE FROM PrintServerPrinter
          WHERE IdPrinter = @IdPrinter

          DELETE FROM Printer
          WHERE IdPrinter = @IdPrinter
        </sql>
        <parameters>
          <parameter type="Int">IdPrinter</parameter>
        </parameters>
      </query>

      <query code="GetPrinterByIdLocationAndIdWhs">
        <sql>
          SELECT P.IdPrinter
          ,P.PrinterName
          ,p.IdWhs
          ,WP.IdWmsProcessCode
          ,wp.Name AS WmsProcessName
          ,L.IdLocCode
          ,LP.DefaultPrint
          ,LP.DateCreated
          ,LP.UserCreated
          ,LP.DateModified
          ,LP.UserModified
          FROM LocationPrinter LP
          INNER JOIN Printer P ON LP.IdPrinter = P.IdPrinter
          INNER JOIN Location L ON L.IdLocCode = LP.IdLocCode
          INNER JOIN WmsProcess WP ON WP.IdWmsProcessCode = LP.IdWmsProcessCode
          WHERE P.IdWhs = @IdWhs
          AND LP.IdLocCode = @IdLocCode
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">IdLocCode</parameter>
        </parameters>
      </query>

      <query code="GetPrinterByNotInIdLocationAndIdWhs">
        <sql>
          SELECT P.IdPrinter
          ,P.PrinterName
          ,P.Description
          ,P.IdWhs
          ,P.DateCreated
          ,P.UserCreated
          ,P.DateModified
          ,P.UserModified
          ,P.IdPrinterType
          FROM Printer P
          WHERE P.IdWhs = @IdWhs
          AND NOT EXISTS (SELECT 1
                          FROM LocationPrinter LP
                          WHERE LP.IdLocCode = @IdLocCode
                          AND LP.IdPrinter = P.IdPrinter)
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">IdLocCode</parameter>
        </parameters>
      </query>

  <query code="LocationPrinter_InsertPrinter">
    <sql>
      INSERT INTO LocationPrinter
      (IdLocCode
      ,IdPrinter
      ,IdWmsProcessCode
      ,DefaultPrint
      ,DateCreated
      ,UserCreated)
      VALUES (
      @IdLocCode
      ,@IdPrinter
      ,@IdWmsProcessCode
      ,@DefaultPrint
      ,@DateCreated
      ,@UserCreated)
    </sql>
    <parameters>
      <parameter type="String">IdLocCode</parameter>
      <parameter type="Int">IdPrinter</parameter>
      <parameter type="String">IdWmsProcessCode</parameter>
      <parameter type="Int">DefaultPrint</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
    </parameters>
  </query>

  <query code="LocationPrinter_Delete">
    <sql>
      DELETE FROM LocationPrinter
      WHERE IdLocCode = @IdLocCode
    </sql>
    <parameters>
      <parameter type="String">IdLocCode</parameter>
    </parameters>
  </query>

  <query code="GetLocationPrinterByIdPrinter">
    <sql>
      SELECT P.IdPrinter
      ,P.PrinterName
      ,p.IdWhs
      ,WP.IdWmsProcessCode
      ,wp.Name AS WmsProcessName
      ,L.IdLocCode
      ,LP.DefaultPrint
      ,LP.DateCreated
      ,LP.UserCreated
      ,LP.DateModified
      ,LP.UserModified
      FROM LocationPrinter LP
      INNER JOIN Printer P ON LP.IdPrinter = P.IdPrinter
      INNER JOIN Location L ON L.IdLocCode = LP.IdLocCode
      INNER JOIN WmsProcess WP ON WP.IdWmsProcessCode = LP.IdWmsProcessCode
      WHERE LP.IdPrinter = @IdPrinter
    </sql>
    <parameters>
      <parameter type="Int">IdPrinter</parameter>
    </parameters>
  </query>

      <query code="GetPrinterByUserAndLabel">
        <sql>
          SELECT P.IdPrinter,
          P.PrinterName,
          P.Description,
          P.IdWhs
          FROM Printer P
          INNER JOIN UserPrinter UP ON UP.IdPrinter = P.IdPrinter
          INNER JOIN LabelPrinter LP ON UP.IdPrinter = LP.IdPrinter
          INNER JOIN WarehouseUserWms WUW ON WUW.IdUserWms = UP.IdUserWms
          WHERE UP.IdUserWms = @idUserWms
          AND LP.IdLabel = @idLabel
          AND P.IdWhs = WUW.IdWhs
        </sql>
        <parameters>
          <parameter type="Int">idUserWms</parameter>
          <parameter type="Int">idLabel</parameter>
        </parameters>
      </query>
      
        <query code="GetPrinterByLocationAndLabel">
          <sql>
            SELECT P.IdPrinter,
            P.PrinterName,
            P.Description,
            P.IdWhs
            FROM Printer P
            INNER JOIN LocationPrinter LOCP ON LOCP.IdPrinter = P.IdPrinter
            INNER JOIN LabelPrinter LP ON LOCP.IdPrinter = LP.IdPrinter
            INNER JOIN Location LOC ON LOC.IdLocCode = LOCP.IdLocCode
            WHERE LOC.IdLocCode = @idLocCode
            AND LP.IdLabel = @idLabel
            AND P.IdWhs = LOC.IdWhs
          </sql>
          <parameters>
            <parameter type="String">idLocCode</parameter>
            <parameter type="Int">idLabel</parameter>
          </parameters>
        </query>

        <query code="GetPrinterByLocation">
          <sql>
            SELECT
            P.IdPrinter,
            P.PrinterName,
            P.Description,
            P.IdPrinterType,
            LP.IdWmsProcessCode,
            LP.DefaultPrint,
            LP.DateCreated,
            LP.UserCreated,
            LP.DateModified,
            LP.UserModified,
            PT.IdPrinterType,
            PT.PrinterTypeCode,
            PT.PrinterTypeName
            FROM LocationPrinter LP
            INNER JOIN Printer P ON P.IdPrinter = LP.IdPrinter
            LEFT JOIN PrinterType PT ON PT.IdPrinterType = P.IdPrinterType
            WHERE LP.IdLocCode = @idLocCode
          </sql>
          <parameters>
            <parameter type="String">idLocCode</parameter>
          </parameters>
        </query>

      <query code="GetLabelPrinter">
        <sql>
          SELECT LP.IdLabel
          ,LP.IdPrinter
          ,P.PrinterName
          ,P.IdWhs
          ,P.IdPrinterType
          ,L.LabelCode
          ,L.LabelName
          ,L.PathTemplate
          ,LP.DateCreated
          ,LP.UserCreated
          FROM LabelPrinter LP
          INNER JOIN Printer P ON LP.IdPrinter = P.IdPrinter
          INNER JOIN Label L ON L.IdLabel = LP.IdLabel
          WHERE LP.IdPrinter = @IdPrinter
        </sql>
        <parameters>
          <parameter type="Int">IdPrinter</parameter>
        </parameters>
      </query>
  
      <query code="LabelPrinter_Insert">
        <sql>
          INSERT INTO LabelPrinter
          (IdLabel
          ,IdPrinter
          ,DateCreated
          ,UserCreated)
          VALUES (
          @IdLabel
          ,@IdPrinter
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdLabel</parameter>
          <parameter type="Int">IdPrinter</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="LabelPrinter_Delete">
        <sql>
          DELETE FROM LabelPrinter
          WHERE IdPrinter = @IdPrinter
        </sql>
        <parameters>
          <parameter type="Int">IdPrinter</parameter>
        </parameters>
      </query>
  
  <!-- End Printer section  -->
  
      <!--Print Server section-->
      <query code="PrintServer_FindAll">
        <sql>
          SELECT
          IdPrintServer,
          ServerName,
          ServiceName,
          IpAddress,
          IpPort,
          Status,
          TimeoutPrint,
          IntervalPrint,
          TimeoutSql,
          IntervalSql,
          QtyTaskPerQuery,
          DateCreated,
          UserCreated,
          DateModified,
          UserModified
          FROM PrintServer
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, 
          Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textLike">ServerName</filter>
        </filters>
      </query>

      <query code="PrintServer_GetParameters">
        <sql>
          SELECT
          IdPrintServer,
          ServerName,
          ServiceName,
          IpAddress,
          IpPort,
          Status,
          TimeoutPrint,
          IntervalPrint,
          TimeoutSql,
          IntervalSql,
          QtyTaskPerQuery,
          DateCreated,
          UserCreated,
          DateModified,
          UserModified
          FROM PrintServer
          WHERE ServerName = @ServerName
          AND ServiceName = @ServiceName
        </sql>
        <parameters>
          <parameter type="String">ServerName</parameter>
          <parameter type="String">ServiceName</parameter>
        </parameters>
        <filters>
        </filters>
      </query>


  <query code="PrintServer_Insert">
        <sql>
          INSERT INTO PrintServer
          (IdPrintServer,
          ServerName,
          ServiceName,
          IpAddress,
          IpPort,
          Status,
          TimeoutPrint,
          IntervalPrint,
          TimeoutSql,
          IntervalSql,
          QtyTaskPerQuery,
          DateCreated,
          UserCreated)
          VALUES
          (@IdPrintServer,
          @ServerName,
          @ServiceName,
          @IpAddress,
          @IpPort,
          @Status,
          @TimeoutPrint,
          @IntervalPrint,
          @TimeoutSql,
          @IntervalSql,
          @QtyTaskPerQuery,
          @DateCreated,
          @UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdPrintServer</parameter>
          <parameter type="String">ServerName</parameter>
          <parameter type="String">ServiceName</parameter>
          <parameter type="String">IpAddress</parameter>
          <parameter type="Int">IpPort</parameter>
          <parameter type="Int">Status</parameter>
          <parameter type="Int">TimeoutPrint</parameter>
          <parameter type="Int">IntervalPrint</parameter>
          <parameter type="Int">TimeoutSql</parameter>
          <parameter type="Int">IntervalSql</parameter>
          <parameter type="Int">QtyTaskPerQuery</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="PrintServer_Update">
        <sql>
          UPDATE PrintServer
          SET ServerName = @ServerName,
          ServiceName = @ServiceName,
          IpAddress = @IpAddress,
          IpPort = @IpPort,
          Status = @Status,
          TimeoutPrint = @TimeoutPrint,
          IntervalPrint = @IntervalPrint,
          TimeoutSql = @TimeoutSql,
          IntervalSql = @IntervalSql,
          QtyTaskPerQuery = @QtyTaskPerQuery,
          DateModified = @DateModified,
          UserModified = @UserModified
          WHERE IdPrintServer = @IdPrintServer
        </sql>
        <parameters>
          <parameter type="Int">IdPrintServer</parameter>
          <parameter type="String">ServerName</parameter>
          <parameter type="String">ServiceName</parameter>
          <parameter type="String">IpAddress</parameter>
          <parameter type="Int">IpPort</parameter>
          <parameter type="Int">Status</parameter>
          <parameter type="Int">TimeoutPrint</parameter>
          <parameter type="Int">IntervalPrint</parameter>
          <parameter type="Int">TimeoutSql</parameter>
          <parameter type="Int">IntervalSql</parameter>
          <parameter type="Int">QtyTaskPerQuery</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query code="PrintServer_Delete">
        <sql>
          DELETE FROM PrintServer
          WHERE IdPrintServer = @IdPrintServer
        </sql>
        <parameters>
          <parameter type="Int">IdPrintServer</parameter>
        </parameters>
      </query>

      <query code="GetPrintServerByIdFromPrinterRelation">
        <sql>
          SELECT IdPrintServer
          FROM PrintServerPrinter
          WHERE IdPrintServer = @IdPrintServer
        </sql>
        <parameters>
          <parameter type="Int">IdPrintServer</parameter>
        </parameters>
      </query>
      <!--End Print Server-->
  
      <!--Print Server Printer section-->
      <query code="PrintServerPrinter_Insert">
        <sql>
          INSERT INTO PrintServerPrinter
          (IdPrintServer
          ,IdPrinter
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdPrintServer
          ,@IdPrinter
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdPrintServer</parameter>
          <parameter type="Int">IdPrinter</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="PrintServerPrinter_DeletebyIdPrinter">
        <sql>
          DELETE FROM PrintServerPrinter
          WHERE IdPrinter = @IdPrinter
        </sql>
        <parameters>
          <parameter type="Int">IdPrinter</parameter>
        </parameters>
      </query>
      <!--End Print Server Printer-->

      <!-- Printer Type section  -->
      <query code="PrinterType_FindAll">
        <sql>
          SELECT
          PT.IdPrinterType
          ,PT.PrinterTypeCode
          ,PT.PrinterTypeName
          ,PT.Status
          ,PT.DateCreated
          ,PT.UserCreated
          ,PT.DateModified
          ,PT.UserModified
          FROM PrinterType PT
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textLike">PT.PrinterTypeName</filter>
        </filters>
      </query>


      <query code="GetPrinterTypeByCode">
        <sql>
          SELECT IdPrinterType
          ,PrinterTypeName
          ,PrinterTypeCode
          ,Status
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM PrinterType
          WHERE PrinterTypeCode = @PrinterTypeCode;
        </sql>
        <parameters>
          <parameter type="String">PrinterTypeCode</parameter>
        </parameters>
      </query>

      <query code="GetPrinterTypeByName">
        <sql>
          SELECT IdPrinterType
          ,PrinterTypeName
          ,PrinterTypeCode
          ,Status
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM PrinterType
          WHERE PrinterTypeName = @PrinterTypeName;
        </sql>
        <parameters>
          <parameter type="String">PrinterTypeName</parameter>
        </parameters>
      </query>    
  
      <query code="PrinterType_Insert">
        <sql>
          INSERT INTO PrinterType
          (IdPrinterType
          ,PrinterTypeName
          ,PrinterTypeCode
          ,Status
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdPrinterType
          ,@PrinterTypeName
          ,@PrinterTypeCode
          ,@Status
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdPrinterType</parameter>
          <parameter type="String">PrinterTypeName</parameter>
          <parameter type="String">PrinterTypeCode</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="PrinterType_Update">
        <sql>
          UPDATE PrinterType
          SET PrinterTypeName = @PrinterTypeName
          ,PrinterTypeCode = @PrinterTypeCode
          ,Status = @Status
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdPrinterType = @IdPrinterType
        </sql>
        <parameters>
          <parameter type="Int">IdPrinterType</parameter>
          <parameter type="String">PrinterTypeName</parameter>
          <parameter type="String">PrinterTypeCode</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query code="PrinterType_Delete">
        <sql>
          DELETE FROM PrinterType
          WHERE IdPrinterType = @IdPrinterType
        </sql>
        <parameters>
          <parameter type="Int">IdPrinterType</parameter>
        </parameters>
      </query>
      <!-- End Printer Type section  -->
      <!-- End DEVICE section  -->

      <!-- Company section  -->
      <query code="Company_FindAll">
        <sql>
          SELECT
          co.IdCompany,
          co.CompanyCode,
          co.CompanyName,
          co.ShortCompanyName,
          co.TradeName,
          co.Address1,
          co.Address2,
          co.IdCountry,
          cou.CountryName,
          co.IdState,
          st.StateName,
          co.IdCity,
          ci.CityName,
          co.Phone1,
          co.Phone2,
          co.Fax1,
          co.Fax2,
          co.Email,
          co.ZipCode,
          co.RulePutCode,
          co.RulePickCode,
          co.RuleRplCode,
          co.RuleCDockCode,
          co.DateCreated,
          co.UserCreated,
          co.DateModified,
          co.UserModified,
          co.GLN
          FROM	Company co

          INNER JOIN Country cou ON cou.IdCountry = co.IdCountry
          INNER JOIN State st ON st.IdState = co.IdState
          INNER JOIN City	ci ON ci.IdCity = co.IdCity;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="Company_Update">
        <sql>
          UPDATE Company
          SET CompanyCode = @CompanyCode
          ,CompanyName = @CompanyName
          ,ShortCompanyName = @ShortCompanyName
          ,TradeName = @TradeName
          ,Address1 = @Address1
          ,Address2 = @Address2
          ,IdCountry = @IdCountry
          ,IdState = @IdState
          ,IdCity = @IdCity
          ,Phone1 = @Phone1
          ,Phone2 = @Phone2
          ,Fax1 = @Fax1
          ,Fax2 = @Fax2
          ,Email = @Email
          ,ZipCode = @ZipCode
          ,DateModified = @dateModified
          ,UserModified = @userModified
          ,GLN = @GLN
          WHERE IdCompany = @IdCompany
        </sql>
        <parameters>
          <parameter type="Int">IdCompany</parameter>
          <parameter type="String">CompanyCode</parameter>
          <parameter type="String">CompanyName</parameter>
          <parameter type="String">ShortCompanyName</parameter>
          <parameter type="String">TradeName</parameter>
          <parameter type="String">Address1</parameter>
          <parameter type="String">Address2</parameter>
          <parameter type="Int">IdCountry</parameter>
          <parameter type="Int">IdState</parameter>
          <parameter type="Int">IdCity</parameter>
          <parameter type="String">Phone1</parameter>
          <parameter type="String">Phone2</parameter>
          <parameter type="String">Fax1</parameter>
          <parameter type="String">Fax2</parameter>
          <parameter type="String">Email</parameter>
          <parameter type="String">ZipCode</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="String">GLN</parameter>
        </parameters>
      </query>
      <!-- End  Company section  -->


	<!--Begin SimpliRouteVisit-->

	<query code="SimpliRouteVisit_Delete">
		<sql>
			DELETE
			FROM SimpliRouteVisit
			WHERE IdSimpliRouteVisit = @idSimpliRouteVisit;
		</sql>
		<parameters>
			<parameter type="Int">idSimpliRouteVisit</parameter>
		</parameters>
	</query>
	
		<query code="SimpliRouteVisit_Update">
		<sql>
			UPDATE SimpliRouteVisit
			SET IdLpnCode = @IdLpnCode
			,ListXml = @ListXml
			,Route = @Route
			,IdVisit = @IdVisit
			,IdTruckCode = @IdTruckCode
			,DateCreated = @DateCreated
			WHERE IdSimpliRouteVisit = @idSimpliRouteVisit
		</sql>
		<parameters>
			<parameter type="Int">IdSimpliRouteVisit</parameter>
			<parameter type="String">IdLpnCode</parameter>
			<parameter type="String">ListXml</parameter>
			<parameter type="String">Route</parameter>
			<parameter type="Int">IdVisit</parameter>
			<parameter type="String">IdTruckCode</parameter>
			<parameter type="DateTime">DateCreated</parameter>
	
		</parameters>
	</query>


	<query code="GetSimpliRouteVisitByAnyParameter">
		<sql>


			SELECT
			TD.IsComplete  AS LoadTaskStatus,
			SRV.IdSimpliRouteVisit,
			SRV.IdVisit,
			SRV.Route,
			SRV.IdLpnCode,
			SRV.IdTruckCode,
			SRV.DateCreated,
			SRV.ListXml

			from taskdetail TD
			INNER JOIN Task T ON TD.IdTask = T.IdTask
			INNER JOIN SimpliRouteVisit SRV ON TD.IdLpnSourceProposal = SRV.IdLpnCode

            WHERE 1 = 1
			AND T.TaskTypeCode = 'LOAD'
			@SQLPart
			
			--ORDER BY SRV.IdSimpliRouteVisit;

		</sql>
		<parameters>
			<parameter type="SQLPart">@SQLPart</parameter>
		</parameters>
		<filters>
			<filter name="Warehouse" type="numericIn">T.IdWhs</filter>
			<filter name="Owner" type="numericIn">T.IdOwn</filter>
			<filter name="IdSimpliRouteVisit" type="numericIn">SRV.IdSimpliRouteVisit</filter>
			<filter name="IdVisit" type="numericIn">SRV.IdVisit</filter>
			<filter name="Route" type="textEqual">SRV.Route</filter>
			<filter name="Code" type="textLike">SRV.IdLpnCode</filter>
			<filter name="IdTruckCode" type="textLike">SRV.IdTruckCode</filter>
			<filter name="DateCreated" type="textEqual">SRV.DateCreated</filter>
			<filter name="ListXml" type="textLike">SRV.ListXml</filter>
			<filter name="Status" type="numericIn">TD.isComplete</filter>
		</filters>
	</query>
	

	<query code="SimpliRouteVisit_Insert">
		<sql>
			INSERT INTO SimpliRouteVisit
			(IdSimpliRouteVisit,
			IdVisit,
			Route,
			IdLpnCode,
			IdTruckCode,
			DateCreated,
			ListXml)
			VALUES
			(@IdSimpliRouteVisit,
			@IdVisit,
			@Route,
			@IdLpnCode,
			@IdTruckCode,
			@DateCreated,
			@ListXml)
		</sql>
		<parameters>
			<parameter type="Int">IdSimpliRouteVisit</parameter>
			<parameter type="Int">IdVisit</parameter>
			<parameter type="String">Route</parameter>
			<parameter type="String">IdLpnCode</parameter>
			<parameter type="String">IdTruckCode</parameter>
			<parameter type="DateTime">DateCreated</parameter>
			<parameter type="String">ListXml</parameter>
		</parameters>
	</query>

	<!--End SimpliRouteVisit-->


	<!--Begin Country-->
      <query code="Country_FindAll">
        <sql>
          SELECT IdCountry,
          CountryName
          FROM COUNTRY
		      ORDER BY CountryName;
        </sql>
      </query>
  
      <query code="GetCountryByAnyParameter">
        <sql>
          SELECT 
            C.IdCountry,
            C.CountryName,
            C.DateCreated,
            C.UserCreated,
            C.DateModified,
            C.UserModified
          FROM COUNTRY C
          @SQLPart
          ORDER BY C.IdCountry;
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdCountry" type="numericIn">C.IdCountry</filter>
          <filter name="CountryName" type="textEqual">C.CountryName</filter>
          <filter name="DateCreated" type="textEqual">C.DateCreated</filter>
          <filter name="UserCreated" type="textEqual">C.UserCreated</filter>
          <filter name="DateModified" type="textEqual">C.DateModified</filter>
          <filter name="UserModified" type="textEqual">C.UserModified</filter>
        </filters>
      </query>

  
      <query code="Country_Insert">
        <sql>
          INSERT INTO Country
          (IdCountry
          ,CountryName
          ,DateCreated
          ,UserCreated)
          VALUES
          (@idCountry
          ,@countryName
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idCountry</parameter>
          <parameter type="String">countryName</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

	

	<query code="RequestApiSend_Insert">
		<sql>
			INSERT INTO RequestApiSend
			(IdRequestSend
			,IdEmp
			,UserName
			,ReferenceNumber
			,Origin
			,ErrorMessage
			,Status
			,SendDate
			)
			VALUES
			(@IdRequestSend
			,@IdEmp
			,@UserName
			,@ReferenceNumber
			,@Origin
			,@ErrorMessage
			,@Status
			,@SendDate
			)
		</sql>
		<parameters>
			<parameter type="Int">IdRequestSend</parameter>
			<parameter type="Int">IdEmp</parameter>
			<parameter type="String">UserName</parameter>
			<parameter type="String">ReferenceNumber</parameter>
			<parameter type="String">Origin</parameter>
			<parameter type="String">ErrorMessage</parameter>
			<parameter type="String">Status</parameter>
			<parameter type="DateTime">SendDate</parameter>
		</parameters>
	</query>
  
      <query code="Country_Update">
        <sql>
          UPDATE Country
          SET CountryName = @countryName
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdCountry = @idCountry
        </sql>
        <parameters>
          <parameter type="Int">idCountry</parameter>
          <parameter type="String">countryName</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>



  
      <query code="Country_Delete">
        <sql>
          DELETE
          FROM Country
          WHERE IdCountry = @idCountry;
        </sql>
        <parameters>
          <parameter type="Int">idCountry</parameter>
        </parameters>
      </query>
      <!--End Country-->

      <!--Begin State-->
      <query code="State_FindAll">
        <sql>
          SELECT IdState
          ,IdCountry
          ,StateName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM State
		      ORDER BY StateName;
        </sql>
      </query>

      <query code="State_GetByCountry">
        <sql>
          SELECT IdState
          ,IdCountry
          ,StateName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM State
          WHERE IdCountry = @idCountry;
        </sql>
      </query>

    <query code="State_LoadByCountry">
      <sql>
        SELECT IdState
        ,IdCountry
        ,StateName
        ,DateCreated
        ,UserCreated
        ,DateModified
        ,UserModified
        FROM State
        WHERE IdCountry = @idCountry;
      </sql>
      <parameters>
        <parameter type="Int">idCountry</parameter>
      </parameters>
    </query>
  
      <query code="GetStateByAnyParameter">
        <sql>
          SELECT 
            S.IdState,
            S.IdCountry,
            S.StateName,
            S.DateCreated,
            S.UserCreated,
            S.DateModified,
            S.UserModified,
            C.CountryName
          FROM State S
          INNER JOIN Country C
          ON S.IdCountry = C.IdCountry
          @SQLPart
          ORDER BY S.IdState;
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdState" type="numericIn">S.IdState</filter>
          <filter name="IdCountry" type="numericIn">S.IdCountry</filter>
          <filter name="StateName" type="textEqual">S.StateName</filter>
          <filter name="DateCreated" type="textEqual">S.DateCreated</filter>
          <filter name="UserCreated" type="textEqual">S.UserCreated</filter>
          <filter name="DateModified" type="textEqual">S.DateModified</filter>
          <filter name="UserModified" type="textEqual">S.UserModified</filter>
        </filters>
      </query>

      <query code="State_Insert">
        <sql>
          INSERT INTO State
          (IdState
          ,IdCountry
          ,StateName
          ,DateCreated
          ,UserCreated)
          VALUES
          (@idState
          ,@idCountry
          ,@stateName
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idState</parameter>
          <parameter type="Int">idCountry</parameter>
          <parameter type="String">stateName</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="State_Update">
        <sql>
          UPDATE State
          SET StateName = @stateName
          ,IdCountry = @idCountry
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdState = @idState
        </sql>
        <parameters>
          <parameter type="Int">idState</parameter>
          <parameter type="Int">idCountry</parameter>
          <parameter type="String">stateName</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="State_Delete">
        <sql>
          DELETE
          FROM State
          WHERE IdState = @idState;
        </sql>
        <parameters>
          <parameter type="Int">idState</parameter>
        </parameters>
      </query>
      <!--End State-->

      <!--Begin City-->
      <query code="city_FindAll">
        <sql>
          SELECT IdCity
          ,IdState
          ,IdCountry
          ,CityName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM City
    		  ORDER BY CityName;
        </sql>
      </query>
      <query code="city_FindByStateAndCountry">
        <sql>
          SELECT IdCity,
          CityName
          FROM CITY CI
          WHERE CI.IdState = @idState
          AND CI.IdCountry = @idCountry;
        </sql>
        <parameters>
          <parameter type="Int">idCountry</parameter>
          <parameter type="Int">idState</parameter>
        </parameters>
      </query>
  
      <query code="GetCityByAnyParameter">
        <sql>
            SELECT 
                   C.IdCity,
                   C.IdState,
                   C.IdCountry,
                   C.CityName,
                   S.StateName,
                   CT.CountryName,
                   C.DateCreated,
                   C.UserCreated,
                   C.DateModified,
                   C.UserModified
              FROM CITY C
        INNER JOIN State S
                ON C.IdState = S.IdState
        INNER JOIN Country CT
                ON CT.IdCountry = S.IdCountry
                   @SQLPart
          ORDER BY C.IdCountry,
                   C.IdState,
                   C.IdCity;
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdCity" type="numericIn">C.IdCity</filter>
          <filter name="IdState" type="numericIn">S.IdState</filter>
          <filter name="IdCountry" type="numericIn">CT.IdCountry</filter>
          <filter name="CityName" type="textEqual">C.CityName</filter>
          <filter name="DateCreated" type="textEqual">C.DateCreated</filter>
          <filter name="UserCreated" type="textEqual">C.UserCreated</filter>
          <filter name="DateModified" type="textEqual">C.DateModified</filter>
          <filter name="UserModified" type="textEqual">C.UserModified</filter>
        </filters>
      </query>
  
      <query code="City_Insert">
        <sql>
          INSERT INTO City
          (IdCity
          ,IdState
          ,IdCountry
          ,CityName
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdCity
          ,@idState
          ,@idCountry
          ,@cityName
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idCity</parameter>
          <parameter type="Int">idState</parameter>
          <parameter type="Int">idCountry</parameter>
          <parameter type="String">cityName</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>
  
      <query code="City_Update">
        <sql>
          UPDATE City
          SET CityName = @cityName
          ,IdState = @idState
          ,IdCountry = @idCountry
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdCity = @idCity
        </sql>
        <parameters>
          <parameter type="Int">idCity</parameter>
          <parameter type="Int">idState</parameter>
          <parameter type="Int">idCountry</parameter>
          <parameter type="String">cityName</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>
  
      <query code="City_Delete">
        <sql>
          DELETE
          FROM City
          WHERE IdCity = @idCity;
        </sql>
        <parameters>
          <parameter type="Int">idCity</parameter>
        </parameters>
      </query>
      <!--End City-->

      <!-- WAREHOUSE section  -->
      <query code="Warehouse_FindAll">
        <sql>
          SELECT  w.IdWhs,
          w.WhsCode,
          w.WhsName,
          w.ShortWhsName,
          w.Address1,
          w.Address2,
          w.IdCountry,
          co.CountryName,
          w.IdState,
          st.StateName,
          w.IdCity,
          ci.CityName,
          w.Phone1,
          w.Phone2,
          w.Fax1,
          w.Fax2,
          w.Email,
          w.ZipCode,
          w.CodStatus,
          w.GLN
          FROM dbo.Warehouse w
          INNER JOIN Country co ON co.IdCountry = w.IdCountry
          INNER JOIN State st ON st.IdState = w.IdState
          INNER JOIN City	ci ON ci.IdCity = w.IdCity
          @SQLPart
          ORDER BY w.WhsName, w.ShortWhsName, w.WhsCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">w.WhsCode</filter>
          <filter name="Name" type="textLike">w.ShortWhsName</filter>
          <filter name="Status" type="numericEqual">w.CodStatus</filter>
        </filters>
      </query>

      <query code="Warehouse_Update">
        <sql>
          UPDATE Warehouse
          SET WhsName = @name
          ,ShortWhsName = @shortName
          ,Address1 = @address1
          ,Address2 = @address2
          ,IdCountry = @idCountry
          ,IdState = @idState
          ,IdCity = @idCity
          ,Phone1 = @phone1
          ,Phone2 = @Phone2
          ,Fax1 = @fax1
          ,Fax2 = @fax2
          ,Email = @email
          ,ZipCode = @zipCode
          ,CodStatus = @codStatus
          ,DateModified = @dateModified
          ,UserModified = @userModified
          ,GLN = @GLN
          WHERE IdWhs = @idWarehouse
        </sql>
        <parameters>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="String">name</parameter>
          <parameter type="String">shortName</parameter>
          <parameter type="String">address1</parameter>
          <parameter type="String">address2</parameter>
          <parameter type="Int">idCountry</parameter>
          <parameter type="Int">idState</parameter>
          <parameter type="Int">idCity</parameter>
          <parameter type="String">phone1</parameter>
          <parameter type="String">phone2</parameter>
          <parameter type="String">fax1</parameter>
          <parameter type="String">fax2</parameter>
          <parameter type="String">email</parameter>
          <parameter type="String">zipCode</parameter>
          <parameter type="Boolean">codStatus</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="String">GLN</parameter>
        </parameters>
      </query>

      <query code="Warehouse_Insert">
        <sql>
          INSERT INTO Warehouse
          (IdWhs
          ,WhsCode
          ,WhsName
          ,ShortWhsName
          ,Address1
          ,Address2
          ,IdCountry
          ,IdState
          ,IdCity
          ,Phone1
          ,Phone2
          ,Fax1
          ,Fax2
          ,Email
          ,ZipCode
          ,CodStatus
          ,DateCreated
          ,UserCreated
          ,GLN)

          VALUES
          (@idWhs
          ,@code
          ,@name
          ,@shortName
          ,@address1
          ,@address2
          ,@idCountry
          ,@idState
          ,@idCity
          ,@phone1
          ,@phone2
          ,@fax1
          ,@fax2
          ,@email
          ,@zipCode
          ,@codStatus
          ,@dateCreated
          ,@userCreated
          ,@GLN)
        </sql>
        <parameters>
          <parameter type="Int">idWhs</parameter>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="String">shortName</parameter>
          <parameter type="String">address1</parameter>
          <parameter type="String">address2</parameter>
          <parameter type="Int">idCountry</parameter>
          <parameter type="Int">idState</parameter>
          <parameter type="Int">idCity</parameter>
          <parameter type="String">phone1</parameter>
          <parameter type="String">phone2</parameter>
          <parameter type="String">fax1</parameter>
          <parameter type="String">fax2</parameter>
          <parameter type="String">email</parameter>
          <parameter type="String">zipCode</parameter>
          <parameter type="Boolean">codStatus</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
          <parameter type="String">GLN</parameter>
        </parameters>
      </query>

      <query code="Warehouse_Delete">
        <sql>
          DELETE
          FROM Warehouse
          WHERE IdWhs = @idWhs;
        </sql>
        <parameters>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="GetWarehouseByCode">
        <sql>
          SELECT w.IdWhs, w.WhsCode, w.ShortWhsName, w.WhsName
          FROM Warehouse w
          WHERE w.WhsCode = @warehouseCode
        </sql>
        <parameters>
          <parameter type="String">warehouseCode</parameter>
        </parameters>
      </query>


      <query code="GetWarehouseByUser">
        <sql>
          SELECT u.IdWhs
          ,w.WhsCode
          ,w.ShortWhsName
          ,w.WhsName
          ,u.DefaultWhs
          FROM WarehouseUserWms u
          INNER JOIN Warehouse w ON w.IdWhs = u.IdWhs
          WHERE IdUserWms = @IdUserWms
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
        </parameters>
      </query>

      <query code="GetRelationWhsUserByWhs">
        <sql>
          SELECT u.IdWhs
          ,w.WhsCode
          ,w.ShortWhsName
          ,w.WhsName
          ,u.DefaultWhs
          FROM WarehouseUserWms u
          INNER JOIN Warehouse w ON w.IdWhs = u.IdWhs
          WHERE u.IdWhs = @IdWhs
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="GetRelationWhsWorkZoneByWhs">
        <sql>
          SELECT IdWhs
          ,IdWorkZone
          ,WorkZoneName
          FROM WorkZone
          WHERE IdWhs = @IdWhs
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="GetRelationWhsInboundByWhs">
        <sql>
          SELECT IdWhs
          FROM InboundOrder
          WHERE IdWhs = @IdWhs
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="GetRelationWhsOutBoundByWhs">
        <sql>
          SELECT IdWhs
          FROM OutboundOrder
          WHERE IdWhs = @IdWhs
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="GetRelationWhsReceiptByWhs">
        <sql>
          SELECT IdWhs
          FROM Receipt
          WHERE IdWhs = @IdWhs
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="WarehouseUser_Insert">
        <sql>
          INSERT INTO WarehouseUserWms
          (IdUserWms
          ,IdWhs
          ,DefaultWhs
          ,DateCreated
          ,UserCreated)

          VALUES
          (@IdUserWms
          ,@IdWhs
          ,@DefaultWhs
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">DefaultWhs</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="GrpItem1_FindAll">
        <sql>
          SELECT G1.IdGrpItem1
          ,G1.GrpItem1Code
          ,G1.GrpItem1Name
          ,G1.DateCreated
          ,G1.UserCreated
          ,G1.DateModified
          ,G1.UserModified
          ,G1.IdOwn
          ,O.OwnName
          FROM GroupItem1 G1 INNER JOIN
          Owner O ON O.IdOwn = G1.IdOwn
          AND G1.IdOwn = @idOwn
          WHERE (EXISTS
          (SELECT * FROM Item I
          WHERE G1.IdGrpItem1 = I.IdGrpItem1 AND I.IdOwn = @idOwn) OR @withItems = 0)
        </sql>
        <parameters>
          <parameter type="Int">withItems</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

    <query code="GrpItem1_FindAll_NoParameters">
      <sql>
        SELECT G1.IdGrpItem1
        ,G1.GrpItem1Code
        ,G1.GrpItem1Name
        ,G1.DateCreated
        ,G1.UserCreated
        ,G1.DateModified
        ,G1.UserModified
        ,G1.IdOwn
        ,O.OwnName
        FROM GroupItem1 G1 INNER JOIN
        Owner O ON O.IdOwn = G1.IdOwn
      </sql>
    </query>

    <query code="GrpItem1_FindAll_Filters">
      <sql>
        SELECT G1.IdGrpItem1
        ,G1.GrpItem1Code
        ,G1.GrpItem1Name
        ,G1.DateCreated
        ,G1.UserCreated
        ,G1.DateModified
        ,G1.UserModified
        ,G1.IdOwn
        ,O.OwnName
        FROM GroupItem1 G1 INNER JOIN
        Owner O ON G1.IdOwn = O.IdOwn
        @SQLPart;
        
        SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
        FROM CfgEntityProperty qf
        JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
        WHERE QueryName = @queryName
        ORDER BY FieldOrder
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
        <parameter type="String">queryName</parameter>
      </parameters>
      <filters>
        <filter name="Code" type="textLike">G1.GrpItem1Code</filter>
        <filter name="Name" type="textLike">G1.GrpItem1Name</filter>
        <filter name="Owner" type="numericIn">G1.IdOwn</filter>
      </filters>
    </query>

      <query code="GrpItem1_GetByCode">
        <sql>
          SELECT G1.IdGrpItem1
          ,G1.GrpItem1Code
          ,G1.GrpItem1Name
          ,G1.DateCreated
          ,G1.UserCreated
          ,G1.DateModified
          ,G1.UserModified
          ,G1.IdOwn
          ,O.OwnName
          FROM GroupItem1 G1 INNER JOIN
          Owner O ON O.IdOwn = G1.IdOwn
          WHERE G1.GrpItem1Code = @grpItem1Code
        </sql>
        <parameters>
          <parameter type="String">grpItem1Code</parameter>
        </parameters>
      </query>

      <query code="GrpItem1_GetByCodeAndOwn">
        <sql>
          SELECT G1.IdGrpItem1
          ,G1.GrpItem1Code
          ,G1.GrpItem1Name
          ,G1.DateCreated
          ,G1.UserCreated
          ,G1.DateModified
          ,G1.UserModified
          ,G1.IdOwn
          ,O.OwnName
          FROM GroupItem1 G1 INNER JOIN
          Owner O ON G1.IdOwn = O.IdOwn
          WHERE G1.GrpItem1Code = @grpItem1Code
          AND O.IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="String">grpItem1Code</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="GrpItem1_GetByIdOwner">
        <sql>
          SELECT G1.IdGrpItem1
          ,G1.GrpItem1Code
          ,G1.GrpItem1Name
          ,G1.DateCreated
          ,G1.UserCreated
          ,G1.DateModified
          ,G1.UserModified
          ,G1.IdOwn
          ,O.OwnName
          FROM GroupItem1 G1 INNER JOIN
          Owner O ON G1.IdOwn = O.IdOwn
          WHERE O.IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>


      <query code="GrpItem1_Insert">
        <sql>
          INSERT INTO GroupItem1
          (IdGrpItem1
          ,GrpItem1Code
          ,GrpItem1Name
          ,DateCreated
          ,UserCreated
          ,IdOwn)
          VALUES
          (@idGrpItem1
          ,@grpItem1Code
          ,@grpItem1Name
          ,@dateCreated
          ,@userCreated
          ,@idOwn)
        </sql>
        <parameters>
          <parameter type="Int">idGrpItem1</parameter>
          <parameter type="String">grpItem1Code</parameter>
          <parameter type="String">grpItem1Name</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="GrpItem1_Update">
        <sql>
          UPDATE GroupItem1
          SET GrpItem1Code = @grpItem1Code
          ,GrpItem1Name = @grpItem1Name
          ,DateModified = @dateModified
          ,UserModified = @userModified
          ,IdOwn = @idOwn
          WHERE IdGrpItem1 = @idGrpItem1
        </sql>
        <parameters>
          <parameter type="String">grpItem1Code</parameter>
          <parameter type="String">grpItem1Name</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="Int">idOwn</parameter>
          <parameter type="Int">idGrpItem1</parameter>
        </parameters>
      </query>

      <query code="GrpItem1_Delete">
        <sql>
          DELETE FROM GroupItem1
          WHERE IdGrpItem1 = @idGrpItem1
        </sql>
        <parameters>
          <parameter type="Int">idGrpItem1</parameter>
        </parameters>
      </query>
  
      <query code="GrpItem2_FindAll">
        <sql>
          SELECT G2.IdGrpItem2
          ,G2.GrpItem2Code
          ,G2.GrpItem2Name
          ,G1.IdGrpItem1
          ,G1.GrpItem1Name
          ,G1.GrpItem1Code
          ,G2.DateCreated
          ,G2.UserCreated
          ,G2.DateModified
          ,G2.UserModified
          ,G1.IdOwn
          ,O.OwnName
          FROM GroupItem2 G2
          INNER JOIN GroupItem1 G1 ON G2.IdGrpItem1 = G1.IdGrpItem1
          INNER JOIN Owner O ON O.IdOwn = G1.IdOwn
          AND G1.IdOwn = @idOwn
          WHERE (EXISTS
          (SELECT * FROM Item I
          WHERE G1.IdGrpItem1 = I.IdGrpItem1 AND G2.IdGrpItem2 = I.IdGrpItem2 AND I.IdOwn = @idOwn) OR @withItems=0)
        </sql>
        <parameters>
          <parameter type="Int">withItems</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="GrpItem2_FindAll_Filters">
        <sql>
          SELECT G2.IdGrpItem2
          ,G2.GrpItem2Code
          ,G2.GrpItem2Name
          ,G1.IdGrpItem1
          ,G1.GrpItem1Code
          ,G1.GrpItem1Name
          ,G2.DateCreated
          ,G2.UserCreated
          ,G2.DateModified
          ,G2.UserModified
          ,G1.IdOwn
          ,O.OwnName
          FROM GroupItem2 G2 INNER JOIN
          GroupItem1 G1 ON G2.IdGrpItem1 = G1.IdGrpItem1 INNER JOIN
          Owner O ON G1.IdOwn = O.IdOwn
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">G2.GrpItem2Code</filter>
          <filter name="Name" type="textLike">G2.GrpItem2Name</filter>
          <filter name="Owner" type="numericIn">G1.IdOwn</filter>
        </filters>
      </query>

      <query code="GrpItem2_GetByIdGrpItem1">
        <sql>
          SELECT G2.IdGrpItem2
          ,G2.GrpItem2Code
          ,G2.GrpItem2Name
          ,G1.IdGrpItem1
          ,G1.GrpItem1Name
          ,G1.GrpItem1Code
          ,G2.DateCreated
          ,G2.UserCreated
          ,G2.DateModified
          ,G2.UserModified
          ,G1.IdOwn
          ,O.OwnName
          FROM GroupItem2 G2
          INNER JOIN GroupItem1 G1 ON G2.IdGrpItem1 = G1.IdGrpItem1
          INNER JOIN Owner O ON G1.IdOwn = O.IdOwn
          WHERE G2.IdGrpItem1 = @IdGrpItem1
        </sql>
        <parameters>
          <parameter type="Int">IdGrpItem1</parameter>
        </parameters>
      </query>

      <query code="GrpItem2_GetByCode">
        <sql>
          SELECT G2.IdGrpItem2
          ,G2.GrpItem2Code
          ,G2.GrpItem2Name
          ,G2.DateCreated
          ,G2.UserCreated
          ,G2.DateModified
          ,G2.UserModified
          FROM GroupItem2 G2
          WHERE GrpItem2Code = @grpItem2Code
          AND IdGrpItem1 = @idGrpItem1
        </sql>
        <parameters>
          <parameter type="String">grpItem2Code</parameter>
          <parameter type="Int">idGrpItem1</parameter>
        </parameters>
      </query>

      <query code="GrpItem2_Insert">
        <sql>
          INSERT INTO GroupItem2
          (IdGrpItem2
          ,GrpItem2Code
          ,GrpItem2Name
          ,IdGrpItem1
          ,DateCreated
          ,UserCreated)
          VALUES
          (@idGrpItem2
          ,@grpItem2Code
          ,@grpItem2Name
          ,@idGrpItem1
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idGrpItem2</parameter>
          <parameter type="String">grpItem2Code</parameter>
          <parameter type="String">grpItem2Name</parameter>
          <parameter type="Int">idGrpItem1</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="GrpItem2_Update">
        <sql>
          UPDATE GroupItem2
          SET GrpItem2Code = @grpItem2Code
          ,GrpItem2Name = @grpItem2Name
          ,IdGrpItem1 = @idGrpItem1
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdGrpItem2 = @idGrpItem2
        </sql>
        <parameters>
          <parameter type="String">grpItem2Code</parameter>
          <parameter type="String">grpItem2Name</parameter>
          <parameter type="Int">idGrpItem1</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="Int">idGrpItem2</parameter>
        </parameters>
      </query>

      <query code="GrpItem2_Delete">
        <sql>
          DELETE FROM GroupItem2
          WHERE IdGrpItem2 = @idGrpItem2
        </sql>
        <parameters>
          <parameter type="Int">idGrpItem2</parameter>
        </parameters>
      </query>
  
      <query code="GrpItem3_FindAll">
        <sql>
          SELECT G3.IdGrpItem3
          ,G3.GrpItem3Code
          ,G3.GrpItem3Name
          ,G3.IdGrpItem1
          ,G3.IdGrpItem2
          ,G3.DateCreated
          ,G3.UserCreated
          ,G3.DateModified
          ,G3.UserModified
          FROM GroupItem3 G3
          INNER JOIN GroupItem2 G2 ON G3.IdGrpItem2 = G2.IdGrpItem2
          INNER JOIN GroupItem1 G1 ON G2.IdGrpItem1 = G1.IdGrpItem1
          INNER JOIN Owner O ON G1.IdOwn = O.IdOwn
          AND G1.IdOwn = @idOwn
          WHERE (EXISTS
          (SELECT * FROM Item I
          WHERE G1.IdGrpItem1 = I.IdGrpItem1 AND G2.IdGrpItem2 = I.IdGrpItem2 AND G3.IdGrpItem3 = I.IdGrpItem3 AND I.IdOwn = @idOwn)
          OR @withItems=0)
        </sql>
        <parameters>
          <parameter type="Int">withItems</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="GrpItem3_GetByIdGrpItem1AndIdGrpItem2">
        <sql>
          SELECT G3.IdGrpItem3
          ,G3.GrpItem3Code
          ,G3.GrpItem3Name
          ,G3.IdGrpItem1
          ,G3.IdGrpItem2
          ,G3.DateCreated
          ,G3.UserCreated
          ,G3.DateModified
          ,G3.UserModified
          FROM GroupItem3 G3
          INNER JOIN GroupItem2 G2 ON G3.IdGrpItem2 = G2.IdGrpItem2
          INNER JOIN GroupItem1 G1 ON G2.IdGrpItem1 = G1.IdGrpItem1
          INNER JOIN Owner O ON G1.IdOwn = O.IdOwn
          WHERE G3.IdGrpItem1 = @IdGrpItem1
          AND G3.IdGrpItem2 = @IdGrpItem2
        </sql>
        <parameters>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
        </parameters>
      </query>
  
      <query code="GrpItem3_GetByCode">
        <sql>
          SELECT G3.IdGrpItem3
          ,G3.GrpItem3Code
          ,G3.GrpItem3Name
          ,G3.DateCreated
          ,G3.UserCreated
          ,G3.DateModified
          ,G3.UserModified
          FROM GroupItem3 G3
          WHERE GrpItem3Code = @grpItem3Code
          AND IdGrpItem2 = @idGrpItem2
        </sql>
        <parameters>
          <parameter type="String">grpItem3Code</parameter>
          <parameter type="Int">idGrpItem2</parameter>
        </parameters>
      </query>

      <query code="GrpItem3_Insert">
        <sql>
          INSERT INTO GroupItem3
          (IdGrpItem3
          ,GrpItem3Code
          ,GrpItem3Name
          ,IdGrpItem1
          ,IdGrpItem2
          ,DateCreated
          ,UserCreated)
          VALUES
          (@idGrpItem3
          ,@grpItem3Code
          ,@grpItem3Name
          ,@idGrpItem1
          ,@idGrpItem2
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idGrpItem3</parameter>
          <parameter type="String">grpItem3Code</parameter>
          <parameter type="String">grpItem3Name</parameter>
          <parameter type="Int">idGrpItem1</parameter>
          <parameter type="Int">idGrpItem2</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="GrpItem3_Update">
        <sql>
          UPDATE GroupItem3
          SET GrpItem3Code = @grpItem3Code
          ,GrpItem3Name = @grpItem3Name
          ,IdGrpItem1 = @idGrpItem1
          ,IdGrpItem2 = @idGrpItem2
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdGrpItem3 = @idGrpItem3
        </sql>
        <parameters>
          <parameter type="String">grpItem3Code</parameter>
          <parameter type="String">grpItem3Name</parameter>
          <parameter type="Int">idGrpItem1</parameter>
          <parameter type="Int">idGrpItem2</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="Int">idGrpItem3</parameter>
        </parameters>
      </query>
  
      <query code="GrpItem4_FindAll">
        <sql>
          SELECT G4.IdGrpItem4
          ,G4.GrpItem4Code
          ,G4.GrpItem4Name
          ,G4.IdGrpItem1
          ,G4.IdGrpItem2
          ,G4.IdGrpItem3
          ,G4.DateCreated
          ,G4.UserCreated
          ,G4.DateModified
          ,G4.UserModified
          FROM GroupItem4 G4
          INNER JOIN GroupItem3 G3 ON G4.IdGrpItem3 = G3.IdGrpItem3
          INNER JOIN GroupItem2 G2 ON G3.IdGrpItem2 = G2.IdGrpItem2
          INNER JOIN GroupItem1 G1 ON G2.IdGrpItem1 = G1.IdGrpItem1
          INNER JOIN Owner O ON G1.IdOwn = O.IdOwn
          AND G1.IdOwn = @idOwn
          WHERE (EXISTS
          (SELECT * FROM Item I
          WHERE G1.IdGrpItem1 = I.IdGrpItem1 AND G2.IdGrpItem2 = I.IdGrpItem2 AND G3.IdGrpItem3 = I.IdGrpItem3 AND G4.IdGrpItem4 = I.IdGrpItem4 AND I.IdOwn = @idOwn)
          OR @withItems=0)
        </sql>
        <parameters>
          <parameter type="Int">withItems</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="GrpItem4_GetByCode">
        <sql>
          SELECT G4.IdGrpItem4
          ,G4.GrpItem4Code
          ,G4.GrpItem4Name
          ,G4.IdGrpItem1
          ,G4.IdGrpItem2
          ,G4.IdGrpItem3
          ,G4.DateCreated
          ,G4.UserCreated
          ,G4.DateModified
          ,G4.UserModified
          FROM GroupItem4 G4
          WHERE GrpItem4Code = @grpItem4Code
          AND IdGrpItem3 = @idGrpItem3
        </sql>
        <parameters>
          <parameter type="String">grpItem3Code</parameter>
          <parameter type="Int">idGrpItem3</parameter>
        </parameters>
      </query>

      <query code="GrpItem4_GetByIdGrpItem1IdGrpItem2AndIdGrpItem3">
        <sql>
          SELECT G4.IdGrpItem4
          ,G4.GrpItem4Code
          ,G4.GrpItem4Name
          ,G4.IdGrpItem1
          ,G4.IdGrpItem2
          ,G4.IdGrpItem3
          ,G4.DateCreated
          ,G4.UserCreated
          ,G4.DateModified
          ,G4.UserModified
          FROM GroupItem4 G4
          INNER JOIN GroupItem3 G3 ON G4.IdGrpItem3 = G3.IdGrpItem3
          INNER JOIN GroupItem2 G2 ON G3.IdGrpItem2 = G2.IdGrpItem2
          INNER JOIN GroupItem1 G1 ON G2.IdGrpItem1 = G1.IdGrpItem1
          INNER JOIN Owner O ON G1.IdOwn = O.IdOwn
          WHERE G4.IdGrpItem1 = @IdGrpItem1
          AND G4.IdGrpItem2 = @IdGrpItem2
          AND G4.IdGrpItem3 = @IdGrpItem3
        </sql>
        <parameters>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
          <parameter type="Int">IdGrpItem3</parameter>
        </parameters>
      </query>

      <!--Inicio Treeview-->

      <query code="GrpItem1_GetTreeview">
        <sql>
          SELECT IdOwn
          ,OwnName
          ,IdGrpItem1
          ,GrpItem1Name
          ,CantItems
          FROM v_Cfg_WmsSummaryGroupItem1
          WHERE IdOwn = @IdOwn
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="GrpItem2_GetTreeview">
        <sql>
          SELECT IdOwn
          ,OwnName
          ,IdGrpItem1
          ,IdGrpItem2
          ,GrpItem2Name
          ,CantItems
          FROM v_Cfg_WmsSummaryGroupItem2
          WHERE IdOwn = @IdOwn
          AND IdGrpItem1 = @IdGrpItem1;
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
        </parameters>
      </query>

      <query code="GrpItem3_GetTreeview">
        <sql>
          SELECT IdOwn
          ,IdGrpItem1
          ,IdGrpItem2
          ,OwnName
          ,IdGrpItem3
          ,GrpItem3Name
          ,CantItems
          FROM v_Cfg_WmsSummaryGroupItem3
          WHERE IdOwn = @IdOwn
          AND IdGrpItem1 = @IdGrpItem1
          AND IdGrpItem2 = @IdGrpItem2;
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
        </parameters>
      </query>

      <query code="GrpItem4_GetTreeview">
        <sql>
          SELECT IdOwn
          ,IdGrpItem1
          ,IdGrpItem2
          ,IdGrpItem3
          ,OwnName
          ,IdGrpItem4
          ,GrpItem4Name
          ,CantItems
          FROM v_Cfg_WmsSummaryGroupItem4
          WHERE IdOwn = @IdOwn
          AND IdGrpItem1 = @IdGrpItem1
          AND IdGrpItem2 = @IdGrpItem2
          AND IdGrpItem3 = @IdGrpItem3;
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
          <parameter type="Int">IdGrpItem3</parameter>
        </parameters>
      </query>

      <!--fin treeview-->
      <!-- End WAREHOUSE section  -->


      <!-- VENDOR section Begin  -->
      <query code="Vendor_Update">
        <sql>
          UPDATE Vendor
          SET IdOwn = @idOwn,
          VendorCode = @vendorCode,
          VendorName = @vendorName,
          Address1 = @address1,
          Address2 = @address2,
          IdCountry = @idCountry,
          IdState = @idState,
          IdCity = @idCity,
          Phone = @phone,
          Fax = @fax,Email = @email,
          HasInspection = @hasInspection,
          SpecialField1 = @specialField1,
          SpecialField2 = @specialField2,
          SpecialField3 = @specialField3,
          SpecialField4 = @specialField4,
          DateModified = @dateModified,
          UserModified = @userModified
          WHERE IdVendor = @idVendor
        </sql>
        <parameters>
          <parameter type="Int">idVendor</parameter>
          <parameter type="String">vendorCode</parameter>
          <parameter type="String">vendorName</parameter>
          <parameter type="String">address1</parameter>
          <parameter type="String">address2</parameter>
          <parameter type="Int">idCountry</parameter>
          <parameter type="Int">idState</parameter>
          <parameter type="Int">idCity</parameter>
          <parameter type="String">phone</parameter>
          <parameter type="String">fax</parameter>
          <parameter type="String">email</parameter>
          <parameter type="Int">hasInspection</parameter>
          <parameter type="Int">idOwn</parameter>
          <parameter type="String">specialField1</parameter>
          <parameter type="String">specialField2</parameter>
          <parameter type="String">specialField3</parameter>
          <parameter type="String">specialField4</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="Vendor_Insert">
        <sql>
          INSERT INTO Vendor
          (IdVendor,
          IdOwn,
          VendorCode,
          VendorName,
          Address1,
          Address2,
          IdCountry,
          IdState,
          IdCity,
          Phone,
          Fax,
          Email,
          HasInspection,
          SpecialField1,
          SpecialField2,
          SpecialField3,
          SpecialField4,
          DateCreated,
          UserCreated)
          VALUES
          (@idVendor,
          @idOwn,
          @vendorCode,
          @vendorName,
          @address1,
          @address2,
          @idCountry,
          @idState,
          @idCity,
          @phone,
          @fax,
          @email,
          @hasInspection,
          @specialField1,
          @specialField2,
          @specialField3,
          @specialField4,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idVendor</parameter>
          <parameter type="Int">idOwn</parameter>
          <parameter type="String">vendorCode</parameter>
          <parameter type="String">vendorName</parameter>
          <parameter type="String">address1</parameter>
          <parameter type="String">address2</parameter>
          <parameter type="Int">idCountry</parameter>
          <parameter type="Int">idState</parameter>
          <parameter type="Int">idCity</parameter>
          <parameter type="String">phone</parameter>
          <parameter type="String">fax</parameter>
          <parameter type="String">email</parameter>
          <parameter type="Int">hasInspection</parameter>
          <parameter type="String">specialField1</parameter>
          <parameter type="String">specialField2</parameter>
          <parameter type="String">specialField3</parameter>
          <parameter type="String">specialField4</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="Vendor_Delete">
        <sql>
          DELETE
          FROM Vendor
          WHERE idVendor = @idVendor;
        </sql>
        <parameters>
          <parameter type="Int">idVendor</parameter>
        </parameters>
      </query>

      <query code="Vendor_GetByAnyParameter">
        <sql>
          SELECT
          IdVendor,
          IdOwn,
          VendorCode,
          VendorName,
          Address1,
          Address2,
          IdCountry,
          IdState,
          IdCity,
          Phone,
          Fax,
          Email,
          HasInspection,
          SpecialField1,
          SpecialField2,
          SpecialField3,
          SpecialField4,
          DateCreated,
          UserCreated,
          DateModified,
          UserModified
          FROM Vendor
          WHERE 1=1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdVendor" type="numericEqual">IdVendor</filter>
          <filter name="IdOwn" type="numericEqual">IdOwn</filter>
          <filter name="VendorCode" type="textEqual">VendorCode</filter>
          <filter name="VendorName" type="textEqual">VendorName</filter>
          <filter name="Address1" type="textEqual">Address1</filter>
          <filter name="Address2" type="textEqual">Address2</filter>
          <filter name="IdCountry" type="numericEqual">IdCountry</filter>
          <filter name="IdState" type="numericEqual">IdState</filter>
          <filter name="IdCity" type="numericEqual">IdCity</filter>
          <filter name="Phone" type="textEqual">Phone</filter>
          <filter name="Fax" type="textEqual">Fax</filter>
          <filter name="Email" type="textEqual">Email</filter>
          <filter name="SpecialField1" type="textEqual">SpecialField1</filter>
          <filter name="SpecialField2" type="textEqual">SpecialField2</filter>
          <filter name="SpecialField3" type="textEqual">SpecialField3</filter>
          <filter name="SpecialField4" type="textEqual">SpecialField4</filter>
          <filter name="DateCreated" type="textEqual">DateCreated</filter>
          <filter name="UserCreated" type="textEqual">UserCreated</filter>
          <filter name="DateModified" type="textEqual">DateModified</filter>
          <filter name="UserModified" type="textEqual">UserModified</filter>
        </filters>
        <sub-querys>
          <sub-query code="OrderByIdVendor">
            <sql>
              ORDER BY IdVendor
            </sql>
            <parameters>
            </parameters>
          </sub-query>
        </sub-querys>
      </query>
  
      <query code="Vendor_FindAll">
        <sql>
          SELECT IdVendor
          ,o.IdOwn
          ,o.OwnCode
          ,o.OwnName
          ,o.TradeName
          ,v.VendorCode
          ,v.VendorName
          ,v.Address1
          ,v.Address2
          ,co.IdCountry
          ,co.CountryName
          ,s.IdState
          ,s.StateName
          ,ci.IdCity
          ,ci.CityName
          ,v.Phone
          ,v.Fax
          ,v.Email
          ,v.HasInspection
          ,v.SpecialField1
          ,v.SpecialField2
          ,v.SpecialField3
          ,v.SpecialField4
          ,v.DateCreated
          ,v.UserCreated
          ,v.DateModified
          ,v.UserModified
          FROM Vendor v
          LEFT JOIN Country co ON co.IdCountry = v.IdCountry
          LEFT JOIN State s ON s.IdState = v.IdState
          LEFT JOIN City ci ON ci.IdCity = v.IdCity
          JOIN Owner o ON o.idOwn = v.idOwn
          @SQLPart
          ORDER BY o.OwnName, v.VendorName, v.VendorCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">v.VendorCode</filter>
          <filter name="Name" type="textLike">v.VendorName</filter>
          <filter name="Owner" type="numericIn">o.IdOwn</filter>
          <filter name="CodeNumeric" type="textLike">v.Address2</filter>
        </filters>
      </query>

      <query code="Vendor_GetById">
        <sql>
          SELECT IdVendor
          ,IdOwn
          ,VendorCode
          ,VendorName
          ,Address1
          ,Address2
          ,co.IdCountry
          ,co.CountryName
          ,s.IdState
          ,s.StateName
          ,ci.IdCity
          ,ci.CityName
          ,Phone
          ,Fax
          ,Email
          ,HasInspection
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4
          ,v.DateCreated
          ,v.UserCreated
          ,v.DateModified
          ,v.UserModified
          FROM Vendor v
          INNER JOIN Country co ON co.IdCountry = v.IdCountry
          INNER JOIN State s ON s.IdState = s.IdState
          INNER JOIN City ci ON ci.IdCity = v.IdCity
          WHERE IdVendor = @idVendor;
        </sql>
        <parameters>
          <parameter type="Int">idVendor</parameter>
        </parameters>
      </query>

      <query code="Vendor_GetByOwner">
        <sql>
          SELECT IdVendor
          ,IdOwn
          ,VendorCode
          ,VendorName
          FROM Vendor v
          WHERE (idOwn = @idOwn OR @idOwn = -2)
        </sql>
        <parameters>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="Vendor_GetByCodeAndOwner">
        <sql>
          SELECT IdVendor
          ,IdOwn
          ,VendorCode
          ,VendorName
          FROM Vendor v
          WHERE VendorCode = @vendorCode
          AND idOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="String">vendorCode</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="Vendor_GetByIdAndOwner">
        <sql>
          SELECT IdVendor
          ,IdOwn
          ,VendorCode
          ,VendorName
          FROM Vendor v
          WHERE IdVendor = @idVendor
          AND idOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="Int">idVendor</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="Vendor_GetByNameAndOwner">
        <sql>
          SELECT IdVendor
          ,IdOwn
          ,VendorCode
          ,VendorName
          FROM Vendor v
          WHERE VendorName LIKE @vendorName
          AND (idOwn = @idOwn OR @idOwn = -2)
        </sql>
        <parameters>
          <parameter type="String">vendorName</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="GetVendorByCodeAndOwnerFilter">
        <sql>
          SELECT V.IdVendor
          ,V.IdOwn
          ,O.OwnCode
          ,O.OwnName
          ,V.VendorCode
          ,V.VendorName
          ,V.Address1
          ,V.Address2
          ,V.Phone
          ,V.Fax
          ,V.Email
          ,V.HasInspection
          ,V.SpecialField1
          ,V.SpecialField2
          ,V.SpecialField3
          ,V.SpecialField4
          ,V.DateCreated
          ,V.UserCreated
          ,V.DateModified
          ,V.UserModified
          FROM Vendor V INNER JOIN
          Owner O ON V.IdOwn = O.IdOwn
          WHERE V.VendorCode LIKE @code
          AND V.VendorName LIKE @name
          AND V.IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <!-- End VENDOR section  -->

      <!-- Branch section Begin  -->
      <query code="Branch_Insert">
        <sql>
          INSERT INTO Branch
          (IdBranch,
          IdCustomer,
          IdOwn,
          BranchCode,
          BranchName,
          BranchAddress,
          IdCountry,
          IdState,
          IdCity,
          Distance,
          Phone,
          SpecialField1,
          SpecialField2,
          SpecialField3,
          SpecialField4,
          DateCreated,
          UserCreated)
          VALUES
          (@idBranch,
          @idCustomer,
          @idOwn,
          @branchCode,
          @branchName,
          @branchAddress,
          @idCountry,
          @idState,
          @idCity,
          @distance,
          @phone,
          @specialField1,
          @specialField2,
          @specialField3,
          @specialField4,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>          
          <parameter type="Int">idBranch</parameter>
          <parameter type="Int">idCustomer</parameter>
          <parameter type="Int">idOwn</parameter>
          <parameter type="String">branchCode</parameter>
          <parameter type="String">branchName</parameter>
          <parameter type="String">branchAddress</parameter>
          <parameter type="Int">idCountry</parameter>
          <parameter type="Int">idState</parameter>
          <parameter type="Int">idCity</parameter>
          <parameter type="String">distance</parameter>
          <parameter type="String">phone</parameter>
          <parameter type="String">specialField1</parameter>
          <parameter type="String">specialField2</parameter>
          <parameter type="String">specialField3</parameter>
          <parameter type="String">specialField4</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>
  
      <query code="Branch_Update">
        <sql>
          UPDATE Branch
          SET IdCustomer = @idCustomer,
          IdOwn = @idOwn,
          BranchCode = @branchCode,
          BranchName = @branchName,
          BranchAddress = @branchAddress,
          IdCountry = @idCountry,
          IdState = @idState,
          IdCity = @idCity,
          Distance = @distance,
          Phone = @phone,
          SpecialField1 = @specialField1,
          SpecialField2 = @specialField2,
          SpecialField3 = @specialField3,
          SpecialField4 = @specialField4,
          DateModified = @dateModified,
          UserModified = @userModified
          WHERE IdBranch = @idBranch
        </sql>
        <parameters>
          <parameter type="Int">idBranch</parameter>
          <parameter type="Int">idCustomer</parameter>
          <parameter type="Int">idOwn</parameter>
          <parameter type="String">branchCode</parameter>
          <parameter type="String">branchName</parameter>
          <parameter type="String">branchAddress</parameter>
          <parameter type="Int">idCountry</parameter>
          <parameter type="Int">idState</parameter>
          <parameter type="Int">idCity</parameter>
          <parameter type="String">distance</parameter>
          <parameter type="String">phone</parameter>
          <parameter type="String">specialField1</parameter>
          <parameter type="String">specialField2</parameter>
          <parameter type="String">specialField3</parameter>
          <parameter type="String">specialField4</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="Branch_Delete">
        <sql>
          DELETE
          FROM Branch
          WHERE idBranch = @idBranch;
        </sql>
        <parameters>
          <parameter type="Int">idBranch</parameter>
        </parameters>
      </query>

      <query code="Branch_GetByIdCustomer">
        <sql>
          SELECT
          B.IdBranch
          ,B.IdCustomer
          ,C.CustomerName
          ,B.IdOwn
          ,O.OwnName
          ,B.BranchCode
          ,B.BranchName
          ,B.BranchAddress
          ,B.IdCountry
          ,Country.CountryName
          ,B.IdState
          ,State.StateName
          ,B.IdCity
          ,City.CityName
          ,B.Distance
          ,B.Phone
          ,B.SpecialField1
          ,B.SpecialField2
          ,B.SpecialField3
          ,B.SpecialField4
          ,B.DateCreated
          ,B.UserCreated
          ,B.DateModified
          ,B.UserModified
          ,B.PrefixLabel
          FROM Branch B INNER JOIN
          Customer C ON B.IdCustomer = C.IdCustomer INNER JOIN
          Owner O ON B.IdOwn = O.IdOwn LEFT JOIN
          Country  ON B.IdCountry = Country.IdCountry LEFT JOIN
          State ON B.IdState = State.IdState LEFT JOIN
          City ON B.IdCity = City.IdCity
          WHERE B.IdCustomer = @idCustomer;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idCustomer</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
      </query>

      <query code="Branch_GetByCodeAndCustomerAndOwner">
        <sql>
          SELECT
          B.IdBranch
          ,B.IdCustomer
          ,C.CustomerName
          ,B.IdOwn
          ,O.OwnName
          ,B.BranchCode
          ,B.BranchName
          ,B.BranchAddress
          ,B.IdCountry
          ,Country.CountryName
          ,B.IdState
          ,State.StateName
          ,B.IdCity
          ,City.CityName
          ,B.Distance
          ,B.Phone
          ,B.SpecialField1
          ,B.SpecialField2
          ,B.SpecialField3
          ,B.SpecialField4
          ,B.DateCreated
          ,B.UserCreated
          ,B.DateModified
          ,B.UserModified
          ,B.PrefixLabel
          FROM Branch B INNER JOIN
          Customer C ON B.IdCustomer = C.IdCustomer INNER JOIN
          Owner O ON B.IdOwn = O.IdOwn LEFT JOIN
          Country  ON B.IdCountry = Country.IdCountry LEFT JOIN
          State ON B.IdState = State.IdState LEFT JOIN
          City ON B.IdCity = City.IdCity
          WHERE B.BranchCode = @code
          AND B.IdCustomer = @idCustomer
          AND B.IdOwn = @idOwn;
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="Int">idCustomer</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="Branch_GetByAnyParameter">
        <sql>
          SELECT
          B.IdBranch,
          B.IdCustomer,
          B.IdOwn,
          B.BranchCode,
          B.BranchName,
          B.BranchAddress,
          B.IdState,
          B.IdCountry,
          --B.CityName,
          B.Distance,
          B.Phone,
          B.DateCreated,
          B.UserCreated,
          B.DateModified,
          B.UserModified,
          B.PrefixLabel,
          C.Correlative,
          C.IdWhs,
          C.NumberLength,
		  C.LabelCode,
		  C.LabelCodePrice
          FROM BRANCH B
          LEFT JOIN CorrelativeCustomerB2B C
          ON B.IdBranch = C.IdBranch
          AND B.IdOwn = C.IdOwn
          AND B.IdCustomer = C.IdCustomer
          @SQLPart
          ORDER BY B.IdBranch;
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdBranch" type="numericIn">B.IdBranch</filter>
          <filter name="IdCustomer" type="numericIn">B.IdCustomer</filter>
          <filter name="IdOwn" type="numericIn">B.IdOwn</filter>
          <filter name="BranchCode" type="textEqual">B.BranchCode</filter>
          <filter name="BranchName" type="textLike">B.BranchName</filter>
          <filter name="BranchAddress" type="textEqual">B.BranchAddress</filter>
          <filter name="IdState" type="numericIn">B.IdState</filter>
          <filter name="IdCountry" type="numericIn">B.IdCountry</filter>
          <filter name="IdCity" type="numericIn">B.IdCity</filter>
          <filter name="Distance" type="textEqual">B.Distance</filter>
          <filter name="Phone" type="textEqual">B.Phone</filter>
          <filter name="SpecialField1" type="textEqual">B.SpecialField1</filter>
          <filter name="SpecialField2" type="textEqual">B.SpecialField2</filter>
          <filter name="SpecialField3" type="textEqual">B.SpecialField3</filter>
          <filter name="SpecialField4" type="textEqual">B.SpecialField4</filter>
          <filter name="DateCreated" type="textEqual">B.DateCreated</filter>
          <filter name="UserCreated" type="textEqual">B.UserCreated</filter>
          <filter name="DateModified" type="textEqual">B.DateModified</filter>
          <filter name="UserModified" type="textEqual">B.UserModified</filter>
        </filters>
      </query>

      <query code="Branch_UpdatePrefixLabel">
        <sql>
          UPDATE Branch
          SET PrefixLabel = @prefixLabel,
          DateModified = @dateModified,
          UserModified = @userModified
          WHERE IdBranch = @idBranch 
        </sql>
        <parameters>
          <parameter type="String">prefixLabel</parameter>
          <parameter type="Int">idBranch</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>
      <!-- End Branch section  -->

      <!-- Owner section  -->
      <query code="Owner_FindAll">
        <sql>
          SELECT   o.IdOwn
          ,o.OwnCode
          ,o.OwnName
          ,o.TradeName
          ,o.Address1
          ,o.Address2
          ,co.IdCountry
          ,co.CountryName
          ,s.IdState
          ,s.StateName
          ,ci.IdCity
          ,ci.CityName
          ,o.Phone1
          ,o.Phone2
          ,o.Fax1
          ,o.Fax2
          ,o.Email
          ,o.DateCreated
          ,o.UserCreated
          ,o.DateModified
          ,o.UserModified
          ,o.GLN
		  ,o.AllowCourier
          FROM Owner o
          LEFT JOIN Country co ON co.IdCountry = o.IdCountry
          LEFT JOIN State s ON s.IdState = o.IdState
          LEFT JOIN City ci ON ci.IdCity = o.IdCity
          @SQLPart
          ORDER BY o.OwnName;
          
          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">o.OwnCode</filter>
          <filter name="Name" type="textLike">o.OwnName</filter>
        </filters>
      </query>

      <query code="owner_GetById">
        <sql>
          SELECT   o.IdOwn
          ,o.OwnCode
          ,o.OwnName
          ,o.TradeName
          ,o.Address1
          ,o.Address2
          ,co.IdCountry
          ,co.CountryName
          ,s.IdState
          ,s.StateName
          ,ci.IdCity
          ,ci.CityName
          ,o.Phone1
          ,o.Phone2
          ,o.Fax1
          ,o.Fax2
          ,o.Email
          ,o.DateCreated
          ,o.UserCreated
          ,o.DateModified
          ,o.UserModified

          FROM Owner o
          INNER JOIN Country co ON co.IdCountry = o.IdCountry
          INNER JOIN State s ON s.IdState = o.IdState
          INNER JOIN City ci ON ci.IdCity = o.IdCity

          WHERE IdOwn = @IdOwn;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="GetOwnerByCode">
        <sql>
          SELECT IdOwn
          ,OwnCode
          FROM owner
          WHERE OwnCode = @ownerCode
        </sql>
        <parameters>
          <parameter type="String">ownerCode</parameter>
        </parameters>
      </query>

      <query code="Owner_Insert">
        <sql>
			INSERT INTO Owner
			(IdOwn
			,OwnCode
			,OwnName
			,TradeName
			,Address1
			,Address2
			,IdCountry
			,IdState
			,IdCity
			,Phone1
			,Phone2
			,Fax1
			,Fax2
			,Email
			,DateCreated
			,UserCreated
			,GLN
			,AllowCourier)

			VALUES
			(@IdOwn
			,@OwnCode
			,@OwnName
			,@TradeName
			,@Address1
			,@Address2
			,@IdCountry
			,@IdState
			,@IdCity
			,@Phone1
			,@Phone2
			,@Fax1
			,@Fax2
			,@Email
			,@dateCreated
			,@userCreated
			,@GLN
			,@AllowCourier)
		</sql>
        <parameters>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">OwnCode</parameter>
          <parameter type="String">OwnName</parameter>
          <parameter type="String">TradeName</parameter>
          <parameter type="String">Address1</parameter>
          <parameter type="String">Address2</parameter>
          <parameter type="Int">IdCountry</parameter>
          <parameter type="Int">IdState</parameter>
          <parameter type="Int">IdCity</parameter>
          <parameter type="String">Phone1</parameter>
          <parameter type="String">Phone2</parameter>
          <parameter type="String">Fax1</parameter>
          <parameter type="String">Fax2</parameter>
          <parameter type="String">Email</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
          <parameter type="String">GLN</parameter>
		  <parameter type="Boolean">AllowCourier</parameter>
        </parameters>
      </query>

      <query code="Owner_Update">
        <sql>
			UPDATE Owner
			SET OwnCode = @OwnCode
			,OwnName = @OwnName
			,TradeName = @TradeName
			,Address1 = @Address1
			,Address2 = @Address2
			,IdCountry = @IdCountry
			,IdState = @IdState
			,IdCity = @IdCity
			,Phone1 = @Phone1
			,Phone2 = @Phone2
			,Fax1 = @Fax1
			,Fax2 = @Fax2
			,Email = @Email
			,DateModified = @dateModified
			,UserModified = @userModified
			,GLN = @GLN
			,AllowCourier = @AllowCourier
			WHERE IdOwn = @IdOwn
		</sql>
        <parameters>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">OwnCode</parameter>
          <parameter type="String">OwnName</parameter>
          <parameter type="String">TradeName</parameter>
          <parameter type="String">Address1</parameter>
          <parameter type="String">Address2</parameter>
          <parameter type="Int">IdCountry</parameter>
          <parameter type="Int">IdState</parameter>
          <parameter type="Int">IdCity</parameter>
          <parameter type="String">Phone1</parameter>
          <parameter type="String">Phone2</parameter>
          <parameter type="String">Fax1</parameter>
          <parameter type="String">Fax2</parameter>
          <parameter type="String">Email</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="String">GLN</parameter>
		  <parameter type="Boolean">AllowCourier</parameter>
        </parameters>
      </query>

      <query code="Owner_Delete">
        <sql>
          DELETE FROM Owner
          WHERE IdOwn = @IdOwn
        </sql>
        <parameters>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="GetAllOwners">
        <sql>
          SELECT IdOwn
          ,OwnCode
          ,OwnName
          ,TradeName
          ,Address1
          ,Address2
          ,IdCountry
          ,IdState
          ,IdCity
          ,Phone1
          ,Phone2
          ,Fax1
          ,Fax2
          ,Email
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM Owner
        </sql>
        <parameters>
        </parameters>
      </query>

      <query code="GetOwnerById">
        <sql>
          SELECT IdOwn
          ,OwnCode
          ,OwnName
          ,TradeName
          ,Address1
          ,Address2
          ,IdCountry
          ,IdState
          ,IdCity
          ,Phone1
          ,Phone2
          ,Fax1
          ,Fax2
          ,Email
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM Owner
          WHERE IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>
      
      
      
      <!-- End Owner section  -->


      <!-- WorkZone section begin -->

      <query code="WorkZone_FindAll">
        <sql>

          SELECT wo.IdWorkZone
          ,wo.WorkZoneName
          ,wo.Description
          ,wo.CodStatus
          ,wa.IdWhs
          ,wa.WhsCode
          ,wa.ShortWhsName
          ,wa.WhsName
          ,wo.TypeZone
          FROM WorkZone wo
          INNER JOIN Warehouse wa ON wo.IdWhs = wa.IdWhs
          @SQLPart
          ORDER BY wa.WhsName, wo.WorkZoneName;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder

        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textLike">wo.WorkZoneName</filter>
          <filter name="Description" type="textLike">wo.Description</filter>
          <filter name="Status" type="numericEqual">wo.CodStatus</filter>
          <filter name="Warehouse" type="numericIn">wa.IdWhs</filter>
          <filter name="ZoneType" type="numericIn">wo.TypeZone</filter>
        </filters>
      </query>

      <query code="WorkZone_GetByWhs">
        <sql>
          SELECT DISTINCT IdWorkZone, WorkZoneName, IdWhs, Description, CodStatus
          FROM Workzone
          WHERE (IdWhs = @IdWhs OR @IdWhs = -2)
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="WorkZone_GetByWhsAndTypeZone">
        <sql>
          SELECT DISTINCT IdWorkZone, WorkZoneName, IdWhs, Description, CodStatus
          FROM Workzone
          WHERE (IdWhs = @IdWhs OR @IdWhs = -2)
          AND (TypeZone = @TypeZone OR @TypeZone = -2)
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">TypeZone</parameter>
        </parameters>
      </query>

      <query code="WorkZone_GetById">
        <sql>
          SELECT IdWorkZone, WorkZoneName
          FROM Workzone
          WHERE (IdWorkZone = @Id OR @Id = -2)
        </sql>
        <parameters>
          <parameter type="Int">Id</parameter>
        </parameters>
      </query>

      <query code="WorkZone_GetByLocationInTaskSimulation">
        <sql>
          SELECT
          wz.IdWorkZone
          ,wz.WorkZoneName
          ,wz.Description
          ,wz.CodStatus
          FROM workZone wz
          WHERE wz.CodStatus = 1
          AND wz.IdWhs = @idWhs
          AND wz.IdWorkZone IN
          (SELECT wzl.IdWorkZone
          FROM workzonelocation wzl
          INNER JOIN TaskDetailSimulation td ON td.IdLocSourceProposal = wzl.IdLocCode
          WHERE td.IdTask IN
          (SELECT t.IdTask
          FROM TaskSimulation t
          WHERE t.IdUser = @idUser
          AND t.TaskTypeCode = @taskTypeCode))
        </sql>
        <parameters>
          <parameter type="Int">idWhs</parameter>
          <parameter type="String">taskTypeCode</parameter>
          <parameter type="Int">idUser</parameter>
        </parameters>
      </query>

      <query code="WorkZone_GetByLocationAndTypeZoneInTaskSimulation">
        <sql>
          SELECT
          wz.IdWorkZone
          ,wz.WorkZoneName
          ,wz.Description
          ,wz.CodStatus
          FROM workZone wz
          WHERE wz.CodStatus = 1
          AND wz.IdWhs = @idWhs
          AND wz.TypeZone = @typeZone
          AND wz.IdWorkZone IN
          (SELECT wzl.IdWorkZone
          FROM workzonelocation wzl
          INNER JOIN TaskDetailSimulation td ON td.IdLocSourceProposal = wzl.IdLocCode
          WHERE td.IdTask IN
          (SELECT t.IdTask
          FROM TaskSimulation t
          WHERE t.IdUser = @idUser
          AND t.TaskTypeCode = @taskTypeCode))
        </sql>
        <parameters>
          <parameter type="Int">idWhs</parameter>
          <parameter type="String">taskTypeCode</parameter>
          <parameter type="Int">idUser</parameter>
          <parameter type="Int">typeZone</parameter>
        </parameters>
      </query>
  
      <query code="WorkZone_GetByLocation">
        <sql>
          SELECT
          wz.IdWorkZone
          ,wz.WorkZoneName
          ,wz.Description
          ,wz.CodStatus
          FROM workZone wz
          WHERE wz.IdWorkZone IN
          (SELECT wzl.IdWorkZone
          FROM workzonelocation wzl
          WHERE wzl.IdLocCode = @idLocationCode)
          AND wz.IdWhs = @idWhs
          AND wz.CodStatus = 1
        </sql>
        <parameters>
          <parameter type="String">idLocationCode</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="WorkZone_GetByLocation_ForkLift">
        <sql>
          SELECT
          wz.IdWorkZone
          ,wz.WorkZoneName
          ,wz.Description
          ,wz.CodStatus
          FROM workZone wz
          WHERE wz.IdWorkZone IN
          (SELECT wzl.IdWorkZone
          FROM WorkZoneForkLift wzl
          WHERE wzl.IdLocCode = @idLocCode)
          AND wz.IdWhs = @idWhs
          AND wz.CodStatus = 1
        </sql>
        <parameters>
          <parameter type="String">idLocCode</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>
      
      <query code="WorkZone_GetByNameAndWarehouse">
        <sql>
          SELECT
          IdWhs,
          IdWorkZone,
          WorkZoneName
          FROM WorkZone
          WHERE WorkZoneName = @Name
          AND IdWhs = @IdWhs
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">Name</parameter>
        </parameters>
      </query>

      <query code="WorkZone_GetByItem">
        <sql>
          SELECT DISTINCT W.IdWorkZone, W.WorkZoneName
          FROM Workzone W
          JOIN WorkZoneItem WI ON W.IdWorkZone = WI.IdWorkZone
          WHERE WI.IdItem = @idItem
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
        </parameters>
      </query>

      <query code="WorkZone_GetByNotInItem">
        <sql>
          SELECT DISTINCT IdWorkZone, WorkZoneName
          FROM Workzone
          WHERE IdWorkZone NOT IN
          (SELECT IdWorkZone FROM WorkZoneItem
          WHERE IdItem = @idItem)
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
        </parameters>
      </query>

      <query code="WorkZone_GetTypeZoneByNotInItem">
        <sql>
          SELECT DISTINCT IdWorkZone, WorkZoneName
          FROM Workzone
          WHERE IdWorkZone NOT IN
          (SELECT IdWorkZone FROM WorkZoneItem
          WHERE IdItem = @idItem)
          AND TypeZone = @TypeZone
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">TypeZone</parameter>
        </parameters>
      </query>

      <query code="WorkZone_GetTypeZoneByNotInLocation">
        <sql>
          SELECT DISTINCT IdWorkZone, WorkZoneName
          FROM Workzone
          WHERE IdWorkZone NOT IN
          (SELECT IdWorkZone FROM WorkZoneForkLift
          WHERE IdLocCode = @IdLocCode)
          AND TypeZone = @TypeZone
          AND IdWhs = @IdWhs
        </sql>
        <parameters>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="Int">TypeZone</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

           

      <query code="WorkZone_Insert">
        <sql>
          INSERT INTO WorkZone
          (IdWorkZone
          ,IdWhs
          ,WorkZoneName
          ,Description
          ,CodStatus
          ,DateCreated
          ,UserCreated
          ,TypeZone)

          VALUES
          (@IdWorkZone
          ,@IdWhs
          ,@WorkZoneName
          ,@Description
          ,@CodStatus
          ,@dateCreated
          ,@userCreated
          ,@TypeZone)
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">WorkZoneName</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="Boolean">CodStatus</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
          <parameter type="Int">TypeZone</parameter>
        </parameters>
      </query>

      <query code="WorkZone_Update">
        <sql>
          UPDATE WorkZone
          SET IdWorkZone = @IdWorkZone
          ,IdWhs = @IdWhs
          ,WorkZoneName = @WorkZoneName
          ,Description = @Description
          ,CodStatus = @CodStatus
          ,DateModified = @dateModified
          ,UserModified = @userModified
          ,TypeZone = @TypeZone
          WHERE IdWorkZone = @IdWorkZone
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">WorkZoneName</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="Boolean">CodStatus</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="Int">TypeZone</parameter>
        </parameters>
      </query>

      <query code="GetCountUserFromWorkZone">
        <sql>
          SELECT IdUserWms
          FROM UserWorkZone
          WHERE IdWorkZone = @IdWorkZone
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
        </parameters>
      </query>

      <query code="GetCountItemFromWorkZone">
        <sql>
          SELECT IdItem
          FROM WorkZoneItem
          WHERE IdWorkZone = @IdWorkZone
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
        </parameters>
      </query>

      <query code="GetCountLocationFromWorkZone">
        <sql>
          SELECT IdLocCode
          FROM WorkZoneLocation
          WHERE IdWorkZone = @IdWorkZone
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
        </parameters>
      </query>

      <query code="WorkZone_Delete">
        <sql>
          DELETE WorkZoneItem WHERE IdWorkZone = @IdWorkZone;

          DELETE UserWorkZone WHERE IdWorkZone = @IdWorkZone;

          DELETE WorkZone WHERE IdWorkZone = @IdWorkZone
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
        </parameters>
      </query>


      <query code="WorkZone_InsertLocations">
        <sql>
          INSERT INTO WorkZoneLocation
          (IdWorkZone
          ,IdLocCode
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdWorkZone
          ,@IdLocCode
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="WorkZone_InsertLocationsForkLift">
        <sql>
          INSERT INTO WorkZoneForkLift
          (IdWorkZone
          ,IdLocCode
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdWorkZone
          ,@IdLocCode
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="WorkZoneForkLift_InsertLocations">
        <sql>
          INSERT INTO WorkZoneForkLift
          (IdWorkZone
          ,IdLocCode
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdWorkZone
          ,@IdLocCode
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="Int">IdWorkZone</parameter>          
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="WorkZoneLocation_Delete">
        <sql>
          DELETE FROM WorkZoneLocation
          WHERE IdWorkZone = @IdWorkZone
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
        </parameters>
      </query>

      <query code="WorkZoneForkLift_Delete">
        <sql>
          DELETE FROM WorkZoneForkLift
          WHERE IdLocCode = @IdLocCode
        </sql>
        <parameters>
          <parameter type="String">IdLocCode</parameter>
        </parameters>
      </query>
      

      <query code="WorkZoneLocation_DeleteByLoc">
        <sql>
          DELETE FROM WorkZoneLocation
          WHERE IdWorkZone = @IdWorkZone
          AND IdLocCode = @IdLocCode
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
          <parameter type="String">IdLocCode</parameter>
        </parameters>
      </query>

      <!-- WorkZone section end -->


      <!-- Hangar section begin-->
      <query code="hangar_FindAll">
        <sql>
          SELECT    H.IdHng
          , H.HngCode
          , H.HngName
          , H.PositionX
          , H.PositionY
          , H.PositionZ
          , H.Length
          , H.Width
          , H.Height
          , H.CodStatus
          , H.DateCreated
          , H.UserCreated
          , H.DateModified
          , H.UserModified
          , H.GLN
          , W.IdWhs
          , W.WhsCode
          , W.ShortWhsName
          , W.WhsName
          FROM Hangar H
          INNER JOIN Warehouse W ON H.IdWhs = W.IdWhs
          @SQLPart
          ORDER BY W.WhsName, H.HngName;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">H.HngCode</filter>
          <filter name="Name" type="textLike">H.HngName</filter>
          <filter name="Status" type="numericEqual">H.CodStatus</filter>
          <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
        </filters>
      </query>

      <query code="hangar_GetByCode">
        <sql>
          SELECT H.IdHng
          , H.HngCode
          , H.HngName
          , H.PositionX
          , H.PositionY
          , H.PositionZ
          , H.Length
          , H.Width
          , H.Height
          , H.CodStatus
          , H.DateCreated
          , H.UserCreated
          , H.DateModified
          , H.UserModified
          , W.IdWhs
          , W.WhsCode
          , W.ShortWhsName
          , W.WhsName
          FROM Hangar H INNER JOIN
          Warehouse W ON H.IdWhs = W.IdWhs
          WHERE H.HngCode = @code;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="String">code</parameter>
        </parameters>
      </query>

      <query code="hangar_GetById">
        <sql>
          SELECT H.IdHng
          , H.HngCode
          , H.HngName
          , H.PositionX
          , H.PositionY
          , H.PositionZ
          , H.Length
          , H.Width
          , H.Height
          , H.CodStatus
          , H.DateCreated
          , H.UserCreated
          , H.DateModified
          , H.UserModified
          , W.IdWhs
          , W.WhsCode
          , W.ShortWhsName
          , W.WhsName
          FROM Hangar H INNER JOIN
          Warehouse W ON H.IdWhs = W.IdWhs
          WHERE H.IdHng = @idHangar;
        </sql>
        <parameters>
          <parameter type="Int">idHangar</parameter>
        </parameters>
      </query>

      <query code="Hangar_GetFullByWhs">
        <sql>
          SELECT H.IdHng
          , H.HngCode
          , H.HngName
          , H.PositionX
          , H.PositionY
          , H.PositionZ
          , H.Length
          , H.Width
          , H.Height
          , H.CodStatus
          , H.DateCreated
          , H.UserCreated
          , H.DateModified
          , H.UserModified
          , W.IdWhs
          , W.WhsCode
          , W.ShortWhsName
          , W.WhsName
          FROM Hangar H INNER JOIN
          Warehouse W ON H.IdWhs = W.IdWhs
          WHERE H.IdWhs = @idWhs;
        </sql>
        <parameters>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="hangar_GetByWhs">
        <sql>
          SELECT DISTINCT IdHng, HngName
          FROM Hangar
          WHERE (IdWhs = @IdWhs OR @IdWhs = -2)
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="Hangar_Insert">
        <sql>
          INSERT INTO Hangar
          (IdHng
          ,IdWhs
          ,HngCode
          ,HngName
          ,PositionX
          ,PositionY
          ,PositionZ
          ,Length
          ,Width
          ,Height
          ,CodStatus
          ,DateCreated
          ,UserCreated
          ,GLN)

          VALUES
          (@IdHng
          ,@IdWhs
          ,@HngCode
          ,@HngName
          ,@PositionX
          ,@PositionY
          ,@PositionZ
          ,@Length
          ,@Width
          ,@Height
          ,@CodStatus
          ,@DateCreated
          ,@UserCreated
          ,@GLN)
        </sql>
        <parameters>
          <parameter type="Int">IdHng</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">HngCode</parameter>
          <parameter type="String">HngName</parameter>
          <parameter type="Int">PositionX</parameter>
          <parameter type="Int">Positiony</parameter>
          <parameter type="Int">Positionz</parameter>
          <parameter type="Decimal">Length</parameter>
          <parameter type="Decimal">Width</parameter>
          <parameter type="Decimal">Height</parameter>
          <parameter type="Boolean">CodStatus</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
          <parameter type="String">GLN</parameter>
        </parameters>
      </query>

      <query code="Hangar_Update">
        <sql>
          UPDATE Hangar
          SET IdWhs = @idWhs
          ,HngCode = @hngCode
          ,HngName = @hngName
          ,PositionX = @positionX
          ,PositionY = @positionY
          ,PositionZ = @positionZ
          ,Length = @length
          ,Width = @width
          ,Height = @height
          ,CodStatus = @codStatus
          ,DateModified = @dateModified
          ,UserModified = @userModified
          ,GLN = @GLN
          WHERE IdHng = @idHng
        </sql>
        <parameters>
          <parameter type="Int">idHng</parameter>
          <parameter type="Int">idWhs</parameter>
          <parameter type="String">hngCode</parameter>
          <parameter type="String">hngName</parameter>
          <parameter type="Int">positionX</parameter>
          <parameter type="Int">positiony</parameter>
          <parameter type="Int">positionz</parameter>
          <parameter type="Decimal">length</parameter>
          <parameter type="Decimal">width</parameter>
          <parameter type="Decimal">height</parameter>
          <parameter type="Boolean">codStatus</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="String">GLN</parameter>
        </parameters>
      </query>

      <query code="hangar_Delete">
        <sql>
          DELETE FROM Hangar
          WHERE IdHng = @idHng
        </sql>
        <parameters>
          <parameter type="Int">idHng</parameter>
        </parameters>
      </query>
      <!-- Hangar section end -->



      <!-- ITEM section begin -->
      <query code="Item_FindAll">
        <sql>
          SELECT DISTINCT i.IdItem
          ,i.ItemCode
          ,i.IdOwn
          ,own.OwnCode
          ,own.OwnName
          ,own.TradeName
          ,i.AltItemCode
          ,i.Description
          ,gr1.IdGrpItem1
          ,gr1.GrpItem1Name
          ,gr2.IdGrpItem2
          ,gr2.GrpItem2Name
          ,gr3.IdGrpItem3
          ,gr3.GrpItem3Name
          ,gr4.IdGrpItem4
          ,gr4.GrpItem4Name
          ,i.LongItemName
          ,i.ShortItemName
          ,i.Status
          ,i.ItemComment
          ,i.ShelfLife
          ,i.ExpirationDays
          ,i.CtrlSerialInbound
          ,i.CtrlSerialInternal
          ,i.CtrlSerialOutbound
          ,i.LotControlInbound
          ,i.LotControlInternal
          ,i.LotControlOutbound
          ,i.Weight
          ,i.Volume
          ,i.Length
          ,i.Width
          ,i.Height
          ,i.NestedVolume
          ,i.InspectionRequerid
          ,i.InspectionCode
          ,i.IdPutawayZone
          ,pz.WorkZoneName AS PutawayZoneName
          ,i.ControlExpDate
          ,i.ControlFabDate
          ,i.Acumulable
          ,i.ReOrderPoint
          ,i.ReOrderQty
          ,i.PalletQty
          ,i.CutMinimum
          ,i.Originator
          ,i.VASProfile
          ,i.Hazard
          ,i.Price
          ,i.InventoryType
          ,i.StackingSequence
          ,i.CommentControl
          ,i.CompatibilityCode
          ,i.MSDSUrl
          ,i.PictureUrl
          ,i.GrpClass1
          ,i.GrpClass2
          ,i.GrpClass3
          ,i.GrpClass4
          ,i.GrpClass5
          ,i.GrpClass6
          ,i.GrpClass7
          ,i.GrpClass8
          ,i.SpecialField1
          ,i.SpecialField2
          ,i.SpecialField3
          ,i.DateCreated
          ,i.UserCreated
          ,i.DateModified
          ,i.UserModified
          ,(SELECT IU.UomName FROM ItemUOM IU WHERE i.IdItem = IU.IdItem AND i.StackingSequence = IU.IdUomType) AS SpecialField4
          FROM Item i
          LEFT JOIN GroupItem1 gr1 ON gr1.IdGrpItem1 = i.IdGrpItem1
          LEFT JOIN GroupItem2 gr2 ON gr2.IdGrpItem2 = i.IdGrpItem2
          LEFT JOIN GroupItem3 gr3 ON gr3.IdGrpItem3 = i.IdGrpItem3
          LEFT JOIN GroupItem4 gr4 ON gr4.IdGrpItem4 = i.IdGrpItem4
          LEFT JOIN Owner own ON own.IdOwn = i.IdOwn
          LEFT JOIN WorkZone pz ON pz.IdWorkZone = i.IdPutawayZone
          LEFT JOIN ItemUom IU ON iu.IdItem = i.IdItem --AND IU.IdUomType = i.StackingSequence
          @SQLPart
          ORDER BY own.OwnName,gr1.GrpItem1Name,gr2.GrpItem2Name,gr3.GrpItem3Name,gr4.GrpItem4Name, i.ItemCode, i.Description, i.LongItemName, i.ShortItemName;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Item" type="textLike">i.ItemCode</filter>
          <filter name="Name" type="textLike">i.LongItemName</filter>
          <filter name="Description" type="textLike">i.Description</filter>
          <filter name="Status" type="numericEqual">i.Status</filter>
          <filter name="Owner" type="numericIn">i.IdOwn</filter>
          <filter name="Code" type="textLike">iu.Barcode</filter>
          <filter name="GroupItem1" type="numericEqual">I.IdGrpItem1</filter>
          <filter name="GroupItem2" type="numericEqual">I.IdGrpItem2</filter>
          <filter name="GroupItem3" type="numericEqual">I.IdGrpItem3</filter>
          <filter name="GroupItem4" type="numericEqual">I.IdGrpItem4</filter> 
        </filters>
      </query>

      <query code="GetItemByIdAndOwner">
        <sql>
          SELECT
          IdItem
          ,ItemCode
          ,Description
          ,IdOwn
          ,ShortItemName
          ,LongItemName
          ,Status
          ,CtrlSerialInbound
          ,CtrlSerialInternal
          ,CtrlSerialOutbound
          ,LotControlInbound
          ,LotControlInternal
          ,LotControlOutbound
          ,Weight
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NestedVolume
          ,IdPutawayZone
          ,ReOrderPoint
          ,ReOrderQty
          ,PalletQty
          FROM item i
          WHERE IdItem = @idItem
          AND IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="GetItemByCode">
        <sql>
          SELECT
          IdItem
          ,ItemCode
          ,Description
          ,IdOwn
          ,AltItemCode
          ,LongItemName
          ,ShortItemName
          ,Status
          ,ItemComment
          ,ShelfLife
          ,ExpirationDays
          ,CtrlSerialInbound
          ,CtrlSerialInternal
          ,CtrlSerialOutbound
          ,LotControlInbound
          ,LotControlInternal
          ,LotControlOutbound
          ,Weight
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NestedVolume
          ,InspectionRequerid
          ,InspectionCode
          ,IdPutawayZone
          ,ControlExpDate
          ,ControlFabDate
          ,Acumulable
          ,ReOrderPoint
          ,ReOrderQty
          ,PalletQty
          ,CutMinimum
          ,Originator
          ,VASProfile
          ,Hazard
          ,Price
          ,InventoryType
          ,StackingSequence
          ,CommentControl
          ,CompatibilityCode
          FROM item
          WHERE ItemCode LIKE @ItemCode
        </sql>
        <parameters>
          <parameter type="String">ItemCode</parameter>
        </parameters>
      </query>

      <query code="GetItemByCodeAndOwnNotInKit">
        <sql>
          SELECT
          IdItem
          ,ItemCode
          ,Description
          ,IdOwn
          ,AltItemCode
          ,LongItemName
          ,ShortItemName
          ,Status
          ,ItemComment
          ,ShelfLife
          ,ExpirationDays
          ,CtrlSerialInbound
          ,CtrlSerialInternal
          ,CtrlSerialOutbound
          ,LotControlInbound
          ,LotControlInternal
          ,LotControlOutbound
          ,Weight
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NestedVolume
          ,InspectionRequerid
          ,InspectionCode
          ,IdPutawayZone
          ,ControlExpDate
          ,ControlFabDate
          ,Acumulable
          ,ReOrderPoint
          ,ReOrderQty
          ,PalletQty
          ,CutMinimum
          ,Originator
          ,VASProfile
          ,Hazard
          ,Price
          ,InventoryType
          ,StackingSequence
          ,CommentControl
          ,CompatibilityCode
          FROM item
          WHERE ItemCode LIKE @ItemCode
          AND IdOwn = @IdOwn
          AND IdItem NOT IN (SELECT IdItemKit FROM Kit)
        </sql>
        <parameters>
          <parameter type="String">ItemCode</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>


      <query code="GetItemByCodeAndOwner">
        <sql>
          SELECT
          IdItem
          ,ItemCode
          ,Description
          ,IdOwn
          ,AltItemCode
          ,LongItemName
          ,ShortItemName
          ,Status
          ,ItemComment
          ,ShelfLife
          ,ExpirationDays
          ,CtrlSerialInbound
          ,CtrlSerialInternal
          ,CtrlSerialOutbound
          ,LotControlInbound
          ,LotControlInternal
          ,LotControlOutbound
          ,Weight
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NestedVolume
          ,InspectionRequerid
          ,InspectionCode
          ,IdPutawayZone
          ,ControlExpDate
          ,ControlFabDate
          ,Acumulable
          ,ReOrderPoint
          ,ReOrderQty
          ,PalletQty
          ,CutMinimum
          ,Originator
          ,VASProfile
          ,Hazard
          ,Price
          ,InventoryType
          ,StackingSequence
          ,CommentControl
          ,CompatibilityCode
          FROM item
          WHERE ItemCode LIKE @ItemCode
          AND IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="String">ItemCode</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="GetItemByOwner">
        <sql>
          SELECT
          IdItem
          ,ItemCode
          ,Description
          ,IdOwn
          ,AltItemCode
          ,LongItemName
          ,ShortItemName
          ,Status
          ,ItemComment
          ,ShelfLife
          ,ExpirationDays
          ,CtrlSerialInbound
          ,CtrlSerialInternal
          ,CtrlSerialOutbound
          ,LotControlInbound
          ,LotControlInternal
          ,LotControlOutbound
          ,Weight
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NestedVolume
          ,InspectionRequerid
          ,InspectionCode
          ,IdPutawayZone
          ,ControlExpDate
          ,ControlFabDate
          ,Acumulable
          ,ReOrderPoint
          ,ReOrderQty
          ,PalletQty
          ,CutMinimum
          ,Originator
          ,VASProfile
          ,Hazard
          ,Price
          ,InventoryType
          ,StackingSequence
          ,CommentControl
          ,CompatibilityCode
          FROM item
          WHERE  IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="GetItemByCodeAndOwnerFilter">
        <sql>
          SELECT
          IdItem
          ,ItemCode
          ,Description
          ,IdOwn
          ,AltItemCode
          ,LongItemName
          ,ShortItemName
          ,Status
          ,ItemComment
          ,ShelfLife
          ,ExpirationDays
          ,CtrlSerialInbound
          ,CtrlSerialInternal
          ,CtrlSerialOutbound
          ,LotControlInbound
          ,LotControlInternal
          ,LotControlOutbound
          ,Weight
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NestedVolume
          ,InspectionRequerid
          ,InspectionCode
          ,IdPutawayZone
          ,ControlExpDate
          ,ControlFabDate
          ,Acumulable
          ,ReOrderPoint
          ,ReOrderQty
          ,PalletQty
          ,CutMinimum
          ,Originator
          ,VASProfile
          ,Hazard
          ,Price
          ,InventoryType
          ,StackingSequence
          ,CommentControl
          ,CompatibilityCode
          FROM item
          WHERE ItemCode LIKE @code
          AND LongItemName LIKE @name
          AND IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="GetItemByCodeAndOwnerFilterNotInKit">
        <sql>
          SELECT
          IdItem
          ,ItemCode
          ,Description
          ,IdOwn
          ,AltItemCode
          ,LongItemName
          ,ShortItemName
          ,Status
          ,ItemComment
          ,ShelfLife
          ,ExpirationDays
          ,CtrlSerialInbound
          ,CtrlSerialInternal
          ,CtrlSerialOutbound
          ,LotControlInbound
          ,LotControlInternal
          ,LotControlOutbound
          ,Weight
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NestedVolume
          ,InspectionRequerid
          ,InspectionCode
          ,IdPutawayZone
          ,ControlExpDate
          ,ControlFabDate
          ,Acumulable
          ,ReOrderPoint
          ,ReOrderQty
          ,PalletQty
          ,CutMinimum
          ,Originator
          ,VASProfile
          ,Hazard
          ,Price
          ,InventoryType
          ,StackingSequence
          ,CommentControl
          ,CompatibilityCode
          FROM item
          WHERE ItemCode LIKE @code
          AND LongItemName LIKE @name
          AND IdOwn = @idOwn
          AND IdItem NOT IN (SELECT IdItemKit FROM Kit)
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="GetItemByCodeAndFilter">
        <sql>
          SELECT
          IdItem
          ,ItemCode
          ,Description
          ,IdOwn
          ,AltItemCode
          ,LongItemName
          ,ShortItemName
          ,Status
          ,ItemComment
          ,ShelfLife
          ,ExpirationDays
          ,CtrlSerialInbound
          ,CtrlSerialInternal
          ,CtrlSerialOutbound
          ,LotControlInbound
          ,LotControlInternal
          ,LotControlOutbound
          ,Weight
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NestedVolume
          ,InspectionRequerid
          ,InspectionCode
          ,IdPutawayZone
          ,ControlExpDate
          ,ControlFabDate
          ,Acumulable
          ,ReOrderPoint
          ,ReOrderQty
          ,PalletQty
          ,CutMinimum
          ,Originator
          ,VASProfile
          ,Hazard
          ,Price
          ,InventoryType
          ,StackingSequence
          ,CommentControl
          ,CompatibilityCode
          ,IdGrpItem1
          ,IdGrpItem2
          ,IdGrpItem3
          ,IdGrpItem4
          FROM item
          WHERE ItemCode LIKE @code
          AND LongItemName LIKE @name;
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
        </parameters>
      </query>

      <query code="Item_GetByAnyParameter">
        <sql>
          SELECT
          I.IdItem,
          I.ItemCode,
          I.IdOwn,
          O.OwnCode,
          O.OwnName,
          I.AltItemCode,
          I.Description,
          I.IdGrpItem1,
          GI1.GrpItem1Code,
          GI1.GrpItem1Name,
          I.IdGrpItem2,
          GI2.GrpItem2Code,
          GI2.GrpItem2Name,
          I.IdGrpItem3,
          GI3.GrpItem3Code,
          GI3.GrpItem3Name,
          I.IdGrpItem4,
          GI4.GrpItem4Code,
          GI4.GrpItem4Name,
          I.LongItemName,
          I.ShortItemName,
          I.Status,
          I.ItemComment,
          I.ShelfLife,
          I.ExpirationDays,
          I.CtrlSerialInbound,
          I.CtrlSerialInternal,
          I.CtrlSerialOutbound,
          I.LotControlInbound,
          I.LotControlInternal,
          I.LotControlOutbound,
          I.Weight,
          I.Volume,
          I.Length,
          I.Width,
          I.Height,
          I.NestedVolume,
          I.InspectionRequerid,
          I.InspectionCode,
          I.IdPutawayZone,
          I.ControlExpDate,
          I.ControlFabDate,
          I.Acumulable,
          I.ReOrderPoint,
          I.ReOrderQty,
          I.PalletQty,
          I.CutMinimum,
          I.Originator,
          I.VASProfile,
          I.Hazard,
          I.Price,
          I.InventoryType,
          I.StackingSequence,
          I.CommentControl,
          I.CompatibilityCode,
          I.MSDSUrl,
          I.PictureUrl,
          I.GrpClass1,
          I.GrpClass2,
          I.GrpClass3,
          I.GrpClass4,
          I.GrpClass5,
          I.GrpClass6,
          I.GrpClass7,
          I.GrpClass8,
          I.SpecialField1,
          I.SpecialField2,
          I.SpecialField3,
          I.SpecialField4,
          I.DateCreated,
          I.UserCreated,
          I.DateModified,
          I.UserModified
          FROM Item I INNER JOIN
          Owner O ON I.IdOwn = O.IdOwn LEFT JOIN
          GroupItem1 GI1 ON I.IdGrpItem1 = GI1.IdGrpItem1 
          AND GI1.IdOwn = O.IdOwn LEFT JOIN
          GroupItem2 GI2 ON I.IdGrpItem2 = GI2.IdGrpItem2
          AND I.IdGrpItem1 = GI2.IdGrpItem1 LEFT JOIN
          GroupItem3 GI3 ON I.IdGrpItem3 = GI3.IdGrpItem3
          AND I.IdGrpItem1 = GI3.IdGrpItem1
          AND I.IdGrpItem2 = GI3.IdGrpItem2 LEFT JOIN
          GroupItem4 GI4 ON I.IdGrpItem4 = GI4.IdGrpItem4
          AND I.IdGrpItem1 = GI4.IdGrpItem1
          AND I.IdGrpItem2 = GI4.IdGrpItem2
          AND I.IdGrpItem3 = GI4.IdGrpItem3
          WHERE 1=1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdItem" type="numericEqual">I.IdItem</filter>
          <filter name="ItemCode" type="textEqual">I.ItemCode</filter>
          <filter name="IdOwn" type="numericEqual">I.IdOwn</filter>
          <filter name="AltItemCode" type="textEqual">I.AltItemCode</filter>
          <filter name="Description" type="textEqual">I.Description</filter>
          <filter name="IdGrpItem1" type="numericEqual">I.IdGrpItem1</filter>
          <filter name="IdGrpItem2" type="numericEqual">I.IdGrpItem2</filter>
          <filter name="IdGrpItem3" type="numericEqual">I.IdGrpItem3</filter>
          <filter name="IdGrpItem4" type="numericEqual">I.IdGrpItem4</filter>
          <filter name="Description" type="textEqual">I.Description</filter>
          <filter name="Description" type="textEqual">I.Description</filter>
          <filter name="LongItemName" type="textEqual">I.LongItemName</filter>
          <filter name="ShortItemName" type="textEqual">I.ShortItemName</filter>
          <filter name="ItemComment" type="textEqual">I.ItemComment</filter>
          <filter name="ShelfLife" type="numericEqual">I.ShelfLife</filter>
          <filter name="ExpirationDays" type="numericEqual">I.ExpirationDays</filter>
          <filter name="Weight" type="numericEqual">I.Weight</filter>
          <filter name="Volume" type="numericEqual">I.Volume</filter>
          <filter name="Length" type="numericEqual">I.Length</filter>
          <filter name="Width" type="numericEqual">I.Width</filter>
          <filter name="Height" type="numericEqual">I.Height</filter>
          <filter name="NestedVolume" type="numericEqual">I.NestedVolume</filter>
          <filter name="InspectionCode" type="textEqual">I.InspectionCode</filter>
          <filter name="IdPutawayZone" type="numericEqual">I.IdPutawayZone</filter>
          <filter name="ReOrderPoint" type="numericEqual">I.ReOrderPoint</filter>
          <filter name="ReOrderQty" type="numericEqual">I.ReOrderQty</filter>
          <filter name="PalletQty" type="numericEqual">I.PalletQty</filter>
          <filter name="CutMinimum" type="numericEqual">I.CutMinimum</filter>
          <filter name="Originator" type="textEqual">I.Originator</filter>
          <filter name="VASProfile" type="textEqual">I.VASProfile</filter>
          <filter name="Price" type="numericEqual">I.Price</filter>
          <filter name="InventoryType" type="textEqual">I.InventoryType</filter>
          <filter name="StackingSequence" type="numericEqual">I.StackingSequence</filter>
          <filter name="CompatibilityCode" type="textEqual">I.CompatibilityCode</filter>
          <filter name="MSDSUrl" type="textEqual">I.MSDSUrl</filter>
          <filter name="PictureUrl" type="textEqual">I.PictureUrl</filter>
          <filter name="GrpClass1" type="textEqual">I.GrpClass1</filter>
          <filter name="GrpClass2" type="textEqual">I.GrpClass2</filter>
          <filter name="GrpClass3" type="textEqual">I.GrpClass3</filter>
          <filter name="GrpClass4" type="textEqual">I.GrpClass4</filter>
          <filter name="GrpClass5" type="textEqual">I.GrpClass5</filter>
          <filter name="GrpClass6" type="textEqual">I.GrpClass6</filter>
          <filter name="GrpClass7" type="textEqual">I.GrpClass7</filter>
          <filter name="GrpClass8" type="textEqual">I.GrpClass8</filter>
          <filter name="SpecialField1" type="textEqual">I.SpecialField1</filter>
          <filter name="SpecialField2" type="textEqual">I.SpecialField2</filter>
          <filter name="SpecialField3" type="textEqual">I.SpecialField3</filter>
          <filter name="SpecialField4" type="textEqual">I.SpecialField4</filter>
          <filter name="DateCreated" type="textEqual">I.DateCreated</filter>
          <filter name="UserCreated" type="textEqual">I.UserCreated</filter>
          <filter name="DateModified" type="textEqual">I.DateModified</filter>
          <filter name="UserModified" type="textEqual">I.UserModified</filter>
        </filters>
        <sub-querys>
          <sub-query code="OrderByIdItem">
            <sql>
              ORDER BY I.IdItem
            </sql>
            <parameters>
            </parameters>
          </sub-query>
        </sub-querys>
      </query>


  <query code="Item_Insert">
    <sql>
      INSERT INTO Item
      (IdItem,
      ItemCode,
      IdOwn,
      AltItemCode,
      Description,
      IdGrpItem1,
      IdGrpItem2,
      IdGrpItem3,
      IdGrpItem4,
      LongItemName,
      ShortItemName,
      Status,
      ItemComment,
      ShelfLife,
      ExpirationDays,
      CtrlSerialInbound,
      CtrlSerialInternal,
      CtrlSerialOutbound,
      LotControlInbound,
      LotControlInternal,
      LotControlOutbound,
      Weight,
      Volume,
      Length,
      Width,
      Height,
      NestedVolume,
      InspectionRequerid,
      InspectionCode,
      IdPutawayZone,
      ControlExpDate,
      ControlFabDate,
      Acumulable,
      ReOrderPoint,
      ReOrderQty,
      PalletQty,
      CutMinimum,
      Originator,
      VASProfile,
      Hazard,
      Price,
      InventoryType,
      StackingSequence,
      CommentControl,
      CompatibilityCode,
      MSDSUrl,
      PictureUrl,
      GrpClass1,
      GrpClass2,
      GrpClass3,
      GrpClass4,
      GrpClass5,
      GrpClass6,
      GrpClass7,
      GrpClass8,
      SpecialField1,
      SpecialField2,
      SpecialField3,
      SpecialField4,
      DateCreated,
      UserCreated)
      VALUES
      (@IdItem,
      @ItemCode,
      @IdOwn,
      @AltItemCode,
      @Description,
      @IdGrpItem1,
      @IdGrpItem2,
      @IdGrpItem3,
      @IdGrpItem4,
      @LongItemName,
      @ShortItemName,
      @Status,
      @ItemComment,
      @ShelfLife,
      @ExpirationDays,
      @CtrlSerialInbound,
      @CtrlSerialInternal,
      @CtrlSerialOutbound,
      @LotControlInbound,
      @LotControlInternal,
      @LotControlOutbound,
      @Weight,
      @Volume,
      @Length,
      @Width,
      @Height,
      @NestedVolume,
      @InspectionRequerid,
      @InspectionCode,
      @IdPutawayZone,
      @ControlExpDate,
      @ControlFabDate,
      @Acumulable,
      @ReOrderPoint,
      @ReOrderQty,
      @PalletQty,
      @CutMinimum,
      @Originator,
      @VASProfile,
      @Hazard,
      @Price,
      @InventoryType,
      @StackingSequence,
      @CommentControl,
      @CompatibilityCode,
      @MSDSUrl,
      @PictureUrl,
      @GrpClass1,
      @GrpClass2,
      @GrpClass3,
      @GrpClass4,
      @GrpClass5,
      @GrpClass6,
      @GrpClass7,
      @GrpClass8,
      @SpecialField1,
      @SpecialField2,
      @SpecialField3,
      @SpecialField4,
      @dateCreated,
      @userCreated)
    </sql>
    <parameters>
      <parameter type="Int">IdItem</parameter>
      <parameter type="String">ItemCode</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="String">AltItemCode</parameter>
      <parameter type="String">Description</parameter>
      <parameter type="Int">IdGrpItem1</parameter>
      <parameter type="Int">IdGrpItem2</parameter>
      <parameter type="Int">IdGrpItem3</parameter>
      <parameter type="Int">IdGrpItem4</parameter>
      <parameter type="String">LongItemName</parameter>
      <parameter type="String">ShortItemName</parameter>
      <parameter type="Boolean">Status</parameter>
      <parameter type="String">ItemComment</parameter>
      <parameter type="Int">ShelfLife</parameter>
      <parameter type="Int">ExpirationDays</parameter>
      <parameter type="Int">CtrlSerialInbound</parameter>
      <parameter type="Int">CtrlSerialInternal</parameter>
      <parameter type="Int">CtrlSerialOutbound</parameter>
      <parameter type="Int">LotControlInbound</parameter>
      <parameter type="Int">LotControlInternal</parameter>
      <parameter type="Int">LotControlOutbound</parameter>
      <parameter type="Decimal">Weight</parameter>
      <parameter type="Decimal">Volume</parameter>
      <parameter type="Decimal">Length</parameter>
      <parameter type="Decimal">Width</parameter>
      <parameter type="Decimal">Height</parameter>
      <parameter type="Decimal">NestedVolume</parameter>
      <parameter type="Int">InspectionRequerid</parameter>
      <parameter type="String">InspectionCode</parameter>
      <parameter type="Int">IdPutawayZone</parameter>
      <parameter type="Boolean">ControlExpDate</parameter>
      <parameter type="Boolean">ControlFabDate</parameter>
      <parameter type="Boolean">Acumulable</parameter>
      <parameter type="Decimal">ReOrderPoint</parameter>
      <parameter type="Decimal">ReOrderQty</parameter>
      <parameter type="Int">PalletQty</parameter>
      <parameter type="Int">CutMinimum</parameter>
      <parameter type="String">Originator</parameter>
      <parameter type="String">VASProfile</parameter>
      <parameter type="Boolean">Hazard</parameter>
      <parameter type="Decimal">Price</parameter>
      <parameter type="String">InventoryType</parameter>
      <parameter type="Int">StackingSequence</parameter>
      <parameter type="Boolean">CommentControl</parameter>
      <parameter type="String">CompatibilityCode</parameter>
      <parameter type="String">MSDSUrl</parameter>
      <parameter type="String">PictureUrl</parameter>
      <parameter type="String">GrpClass1</parameter>
      <parameter type="String">GrpClass2</parameter>
      <parameter type="String">GrpClass3</parameter>
      <parameter type="String">GrpClass4</parameter>
      <parameter type="String">GrpClass5</parameter>
      <parameter type="String">GrpClass6</parameter>
      <parameter type="String">GrpClass7</parameter>
      <parameter type="String">GrpClass8</parameter>
      <parameter type="String">SpecialField1</parameter>
      <parameter type="String">SpecialField2</parameter>
      <parameter type="String">SpecialField3</parameter>
      <parameter type="String">SpecialField4</parameter>
      <parameter type="DateTime">dateCreated</parameter>
      <parameter type="String">userCreated</parameter>
    </parameters>
  </query>

  <query code="Item_Update">
    <sql>
      UPDATE Item
      SET ItemCode = @ItemCode,
      IdOwn = @IdOwn,
      AltItemCode = @AltItemCode,
      Description = @Description,
      IdGrpItem1 = @IdGrpItem1,
      IdGrpItem2 = @IdGrpItem2,
      IdGrpItem3 = @IdGrpItem3,
      IdGrpItem4 = @IdGrpItem4,
      LongItemName = @LongItemName,
      ShortItemName = @ShortItemName,
      Status = @Status,
      ItemComment = @ItemComment,
      ShelfLife = @ShelfLife,
      ExpirationDays = @ExpirationDays,
      CtrlSerialInbound = @CtrlSerialInbound,
      CtrlSerialInternal = @CtrlSerialInternal,
      CtrlSerialOutbound = @CtrlSerialOutbound,
      LotControlInbound = @LotControlInbound,
      LotControlInternal = @LotControlInternal,
      LotControlOutbound = @LotControlOutbound,
      Weight = @Weight,
      Volume = @Volume,
      Length = @Length,
      Width = @Width,
      Height = @Height,
      NestedVolume = @NestedVolume,
      InspectionRequerid = @InspectionRequerid,
      InspectionCode = @InspectionCode,
      IdPutawayZone = @IdPutawayZone,
      ControlExpDate = @ControlExpDate,
      ControlFabDate = @ControlFabDate,
      Acumulable = @Acumulable,
      ReOrderPoint = @ReOrderPoint,
      ReOrderQty = @ReOrderQty,
      PalletQty = @PalletQty,
      CutMinimum = @CutMinimum,
      Originator = @Originator,
      VASProfile = @VASProfile,
      Hazard = @Hazard,
      Price = @Price,
      InventoryType = @InventoryType,
      StackingSequence = @StackingSequence,
      CommentControl = @CommentControl,
      CompatibilityCode = @CompatibilityCode,
      MSDSUrl = @MSDSUrl,
      PictureUrl = @PictureUrl,
      GrpClass1 = @GrpClass1,
      GrpClass2 = @GrpClass2,
      GrpClass3 = @GrpClass3,
      GrpClass4 = @GrpClass4,
      GrpClass5 = @GrpClass5,
      GrpClass6 = @GrpClass6,
      GrpClass7 = @GrpClass7,
      GrpClass8 = @GrpClass8,
      SpecialField1 = @SpecialField1,
      SpecialField2 = @SpecialField2,
      SpecialField3 = @SpecialField3,
      SpecialField4 = @SpecialField4,
      DateModified = @dateModified,
      UserModified = @userModified
      WHERE IdItem = @IdItem
    </sql>
    <parameters>
      <parameter type="Int">IdItem</parameter>
      <parameter type="String">ItemCode</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="String">AltItemCode</parameter>
      <parameter type="String">Description</parameter>
      <parameter type="Int">IdGrpItem1</parameter>
      <parameter type="Int">IdGrpItem2</parameter>
      <parameter type="Int">IdGrpItem3</parameter>
      <parameter type="Int">IdGrpItem4</parameter>
      <parameter type="String">LongItemName</parameter>
      <parameter type="String">ShortItemName</parameter>
      <parameter type="Boolean">Status</parameter>
      <parameter type="String">ItemComment</parameter>
      <parameter type="Int">ShelfLife</parameter>
      <parameter type="Int">ExpirationDays</parameter>
      <parameter type="Int">CtrlSerialInbound</parameter>
      <parameter type="Int">CtrlSerialInternal</parameter>
      <parameter type="Int">CtrlSerialOutbound</parameter>
      <parameter type="Int">LotControlInbound</parameter>
      <parameter type="Int">LotControlInternal</parameter>
      <parameter type="Int">LotControlOutbound</parameter>
      <parameter type="Decimal">Weight</parameter>
      <parameter type="Decimal">Volume</parameter>
      <parameter type="Decimal">Length</parameter>
      <parameter type="Decimal">Width</parameter>
      <parameter type="Decimal">Height</parameter>
      <parameter type="Decimal">NestedVolume</parameter>
      <parameter type="Int">InspectionRequerid</parameter>
      <parameter type="String">InspectionCode</parameter>
      <parameter type="Int">IdPutawayZone</parameter>
      <parameter type="Boolean">ControlExpDate</parameter>
      <parameter type="Boolean">ControlFabDate</parameter>
      <parameter type="Boolean">Acumulable</parameter>
      <parameter type="Decimal">ReOrderPoint</parameter>
      <parameter type="Decimal">ReOrderQty</parameter>
      <parameter type="Int">PalletQty</parameter>
      <parameter type="Int">CutMinimum</parameter>
      <parameter type="String">Originator</parameter>
      <parameter type="String">VASProfile</parameter>
      <parameter type="Boolean">Hazard</parameter>
      <parameter type="Decimal">Price</parameter>
      <parameter type="String">InventoryType</parameter>
      <parameter type="Int">StackingSequence</parameter>
      <parameter type="Boolean">CommentControl</parameter>
      <parameter type="String">CompatibilityCode</parameter>
      <parameter type="String">MSDSUrl</parameter>
      <parameter type="String">PictureUrl</parameter>
      <parameter type="String">GrpClass1</parameter>
      <parameter type="String">GrpClass2</parameter>
      <parameter type="String">GrpClass3</parameter>
      <parameter type="String">GrpClass4</parameter>
      <parameter type="String">GrpClass5</parameter>
      <parameter type="String">GrpClass6</parameter>
      <parameter type="String">GrpClass7</parameter>
      <parameter type="String">GrpClass8</parameter>
      <parameter type="String">SpecialField1</parameter>
      <parameter type="String">SpecialField2</parameter>
      <parameter type="String">SpecialField3</parameter>
      <parameter type="String">SpecialField4</parameter>
      <parameter type="DateTime">dateModified</parameter>
      <parameter type="String">userModified</parameter>
    </parameters>
  </query>

      <query code="GetCountItemFromInbound">
        <sql>
          SELECT COUNT(I.IDITEM)AS COUNT
          FROM INBOUNDDETAIL I
          WHERE I.IDITEM = @idItem
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
        </parameters>
      </query>

      <query code="GetCountItemFromStock">
        <sql>
          SELECT COUNT(S.IDITEM)AS COUNT
          FROM STOCK S
          WHERE S.IDITEM = @idItem
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
        </parameters>
      </query>

      <query code="Item_Delete">
        <sql>
          DELETE FROM CustomRuleItem WHERE IdItem = @IdItem;

          DELETE FROM WorkZoneItem WHERE IdItem = @IdItem;

          DELETE FROM ItemUom WHERE idItem = @IdItem;

          DELETE FROM Item WHERE IdItem = @IdItem
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
        </parameters>
      </query>
      <query code="GetItemUomByBarCode">
        <sql>
          SELECT
          iu.IdUom
          ,iu.IdItem
          ,iu.UomCode
          ,iu.ConversionFactor
          ,iu.BarCode
          ,iu.UomName
          ,iu.Length
          ,iu.Width
          ,iu.Height
          ,iu.Volume
          ,iu.Weight
          ,iu.Status
          ,iu.LayoutUomQty
          ,iu.LayoutUnitQty
          ,iu.LayoutMaxWeightUpon
          ,iu.PutawayZone
          ,iu.PickArea
          ,i.IdItem
          ,i.ItemCode
          ,i.Description
          ,i.IdOwn
          ,o.OwnName
          ,i.ShortItemName
          ,i.Status
          ,i.CtrlSerialInbound
          ,i.CtrlSerialInternal
          ,i.CtrlSerialOutbound
          ,i.LotControlInbound
          ,i.LotControlInternal
          ,i.LotControlOutbound
          ,i.Weight
          ,i.Volume
          ,i.Length
          ,i.Width
          ,i.Height
          ,i.NestedVolume
          ,i.IdPutawayZone
          ,i.ReOrderPoint
          ,i.ReOrderQty
          ,i.PalletQty
          FROM ItemUom iu
          INNER JOIN item i ON i.IdItem = iu.IdItem
          INNER JOIN Owner o ON o.IdOwn = i.IdOwn
          WHERE iu.BarCode = @BarCode
          AND i.Status = 1
        </sql>
        <parameters>
          <parameter type="String">BarCode</parameter>
        </parameters>
      </query>

      <query code="GetItemUomByBarCodeAndOwner">
        <sql>
          SELECT
          IU.IdUom,
          IU.IdItem,
          IU.UomCode,
          IU.ConversionFactor,
          IU.BarCode,
          IU.UomName,
          IU.Length,
          IU.Width,
          IU.Height,
          IU.Volume,
          IU.Weight,
          IU.Status,
          IU.LayoutUomQty,
          IU.LayoutUnitQty,
          IU.LayoutMaxWeightUpon,
          IU.PutawayZone,
          IU.PickArea,
          I.IdItem,
          I.ItemCode,
          I.Description,
          I.IdOwn,
          O.OwnName,
          I.ShortItemName,
          I.Status,
          I.CtrlSerialInbound,
          I.CtrlSerialInternal,
          I.CtrlSerialOutbound,
          I.LotControlInbound,
          I.LotControlInternal,
          I.LotControlOutbound,
          I.Weight,
          I.Volume,
          I.Length,
          I.Width,
          I.Height,
          I.NestedVolume,
          I.IdPutawayZone,
          I.ReOrderPoint,
          I.ReOrderQty,
          I.PalletQty
          FROM ItemUom IU
          INNER JOIN item I ON I.IdItem = IU.IdItem
          INNER JOIN Owner O ON o.IdOwn = I.IdOwn
          WHERE IU.BarCode = @BarCode
          AND I.IdOwn = @idOwn
          AND I.Status = 1
        </sql>
        <parameters>
          <parameter type="String">BarCode</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="GetItemUomByItemAndOwnerAndUomType">
        <sql>
          SELECT
          IU.IdUom,
          IU.IdItem,
          IU.UomCode,
          IU.ConversionFactor,
          IU.BarCode,
          IU.UomName,
          IU.Length,
          IU.Width,
          IU.Height,
          IU.Volume,
          IU.Weight,
          IU.Status,
          IU.LayoutUomQty,
          IU.LayoutUnitQty,
          IU.LayoutMaxWeightUpon,
          IU.PutawayZone,
          IU.PickArea,
          IU.IdUomType,
          I.IdItem,
          I.ItemCode,
          I.Description,
          I.IdOwn,
          O.OwnName,
          I.ShortItemName,
          I.Status,
          I.CtrlSerialInbound,
          I.CtrlSerialInternal,
          I.CtrlSerialOutbound,
          I.LotControlInbound,
          I.LotControlInternal,
          I.LotControlOutbound,
          I.Weight,
          I.Volume,
          I.Length,
          I.Width,
          I.Height,
          I.NestedVolume,
          I.IdPutawayZone,
          I.ReOrderPoint,
          I.ReOrderQty,
          I.PalletQty
          FROM ItemUom IU
          INNER JOIN item I ON I.IdItem = IU.IdItem
          INNER JOIN Owner O ON o.IdOwn = I.IdOwn
          WHERE IU.IdItem = @idItem
          AND I.IdOwn = @idOwn
          AND IU.IdUomType = @idUomType
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idOwn</parameter>
          <parameter type="Int">idUomType</parameter>
        </parameters>
      </query>
  
      <query code="ItemUom_FindAll">
        <sql>
          SELECT
          iu.IdUom
          ,iu.IdItem
          ,iu.UomCode
          ,iu.ConversionFactor
          ,iu.BarCode
          ,iu.UomName
          ,iu.Length
          ,iu.Width
          ,iu.Height
          ,iu.Volume
          ,iu.Weight
          ,iu.Status
          ,iu.LayoutUomQty
          ,iu.LayoutUnitQty
          ,iu.LayoutMaxWeightUpon
          ,iu.PutawayZone
          ,iu.PickArea
          ,i.IdItem
          ,i.ItemCode
          ,i.Description
          ,i.IdOwn
          ,o.TradeName
          ,o.OwnCode
          ,o.OwnName
          ,i.ShortItemName
          ,i.Status
          ,i.CtrlSerialInbound
          ,i.CtrlSerialInternal
          ,i.CtrlSerialOutbound
          ,i.LotControlInbound
          ,i.LotControlInternal
          ,i.LotControlOutbound
          ,i.Weight
          ,i.Volume
          ,i.Length
          ,i.Width
          ,i.Height
          ,i.NestedVolume
          ,i.IdPutawayZone
          ,i.ReOrderPoint
          ,i.ReOrderQty
          ,i.PalletQty
          ,ut.UomName AS UomNameUomType
          FROM ItemUom iu
          INNER JOIN UomType ut ON iu.IdUomType = ut.IdUomType
          INNER JOIN item i ON i.IdItem = iu.IdItem
          INNER JOIN Owner o ON o.IdOwn = i.IdOwn
          AND o.IdOwn = ut.IdOwn
          @SQLPart
          ORDER BY I.ItemCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Item" type="textLike">i.ItemCode</filter>
          <filter name="Name" type="textLike">i.LongItemName</filter>
          <filter name="Description" type="textLike">i.Description</filter>
          <filter name="Status" type="numericEqual">i.Status</filter>
          <filter name="Owner" type="numericIn">i.IdOwn</filter>
          <filter name ="UomType" type="numericIn">iu.IdUomType</filter>
        </filters>
      </query>

      <query code="ItemUomLot_FindAll">
        <sql>
          SELECT
          distinct(iu.IdItem)
          ,iu.IdUom
          ,iu.UomCode
          ,iu.ConversionFactor
          ,iu.BarCode
          ,iu.UomName
          ,iu.Length
          ,iu.Width
          ,iu.Height
          ,iu.Volume
          ,iu.Weight
          ,iu.Status
          ,iu.LayoutUomQty
          ,iu.LayoutUnitQty
          ,iu.LayoutMaxWeightUpon
          ,iu.PutawayZone
          ,iu.PickArea
          ,i.IdItem ItemIdItem
          ,i.ItemCode
          ,i.Description
          ,i.IdOwn
          ,o.TradeName
          ,o.OwnCode
          ,o.OwnName
          ,i.ShortItemName
          ,i.Status
          ,i.CtrlSerialInbound
          ,i.CtrlSerialInternal
          ,i.CtrlSerialOutbound
          ,i.LotControlInbound
          ,i.LotControlInternal
          ,i.LotControlOutbound
          ,i.Weight
          ,i.Volume
          ,i.Length ItemLength
          ,i.Width ItemWidth
          ,i.Height ItemHeight
          ,i.NestedVolume
          ,i.IdPutawayZone
          ,i.ReOrderPoint
          ,i.ReOrderQty
          ,i.LongItemName
          ,i.PalletQty, 'LOTE','Vencimiento', '1 Copia'
          FROM ItemUom iu
          INNER JOIN item i ON i.IdItem = iu.IdItem
          INNER JOIN Owner o ON o.IdOwn = i.IdOwn
          <!--INNER JOIN v_Cfg_WmsItemParameters v ON i.IdItem = v.IdItem-->
          @SQLPart
          <!--AND v.IdParameter IN (1007,1008,1009)
          AND  v.IdOwn = i.IdOwn
          AND v.parameterValue = 1;-->

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Item" type="textLike">i.ItemCode</filter>
          <filter name="Name" type="textLike">i.LongItemName</filter>
          <filter name="Description" type="textLike">i.Description</filter>
          <filter name="Status" type="numericEqual">i.Status</filter>
          <filter name="Owner" type="numericIn">i.IdOwn</filter>
        </filters>
      </query>

      <query code="GetItemUomByCode">
        <sql>
          SELECT DISTINCT
          iu.IdUom
          ,iu.IdItem
          ,iu.UomCode
          ,iu.ConversionFactor
          ,iu.BarCode
          ,iu.UomName
          ,iu.Length
          ,iu.Width
          ,iu.Height
          ,iu.Volume
          ,iu.Weight
          ,iu.Status
          ,iu.LayoutUomQty
          ,iu.LayoutUnitQty
          ,iu.LayoutMaxWeightUpon
          ,iu.PutawayZone
          ,iu.PickArea
          ,i.ItemCode
          ,i.Description
          ,i.Status
          ,i.LotControlInbound
          ,i.IdOwn
          FROM ItemUom iu
          INNER JOIN item i ON i.IdItem = iu.IdItem
          WHERE iu.UomCode = @UomCode
        </sql>
        <parameters>
          <parameter type="String">UomCode</parameter>
        </parameters>
      </query>

      <query code="ItemUom_GetByCodeAndOwner">
        <sql>
          SELECT DISTINCT
          iu.IdUom
          ,iu.IdItem
          ,iu.UomCode
          ,iu.ConversionFactor
          ,iu.BarCode
          ,iu.UomName
          ,iu.Length
          ,iu.Width
          ,iu.Height
          ,iu.Volume
          ,iu.Weight
          ,iu.Status
          ,iu.LayoutUomQty
          ,iu.LayoutUnitQty
          ,iu.LayoutMaxWeightUpon
          ,iu.PutawayZone
          ,iu.PickArea
          ,i.ItemCode
          ,i.Description
          ,i.Status
          ,i.LotControlInbound
          ,i.IdOwn
          FROM ItemUom iu
          INNER JOIN item i ON i.IdItem = iu.IdItem
          WHERE iu.UomCode = @code
          AND i.IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="ItemUom_GetByBarCodeAndOwner">
        <sql>
          SELECT DISTINCT
          iu.IdUom
          ,iu.IdItem
          ,iu.UomCode
          ,iu.ConversionFactor
          ,iu.BarCode
          ,iu.UomName
          ,iu.Length
          ,iu.Width
          ,iu.Height
          ,iu.Volume
          ,iu.Weight
          ,iu.Status
          ,iu.LayoutUomQty
          ,iu.LayoutUnitQty
          ,iu.LayoutMaxWeightUpon
          ,iu.PutawayZone
          ,iu.PickArea
          ,i.ItemCode
          ,i.Description
          ,i.Status
          ,i.LotControlInbound
          ,i.IdOwn
          FROM ItemUom iu
          INNER JOIN item i ON i.IdItem = iu.IdItem
          WHERE iu.BarCode = @barCode
          AND i.IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="String">barCode</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

  <query code="ItemUom_Insert">
    <sql>
      INSERT INTO ItemUom
      (IdUom,
      IdItem,
      UomCode,
      ConversionFactor,
      BarCode,
      IdUomType,
      UomName,
      Length,
      Width,
      Height,
      Volume,
      Weight,
      Status,
      LayoutUomQty,
      LayoutUnitQty,
      LayoutMaxWeightUpon,
      PutawayZone,
      PickArea,
      SpecialField1,
      SpecialField2,
      SpecialField3,
      SpecialField4,
      DateCreated,
      UserCreated,
      BigTicket)
      VALUES
      (@IdUom,
      @IdItem,
      @UomCode,
      @ConversionFactor,
      @BarCode,
      @IdUomType,
      @UomName,
      @Length,
      @Width,
      @Height,
      @Volume,
      @Weight,
      @Status,
      @LayoutUomQty,
      @LayoutUnitQty,
      @LayoutMaxWeightUpon,
      @PutawayZone,
      @PickArea,
      @SpecialField1,
      @SpecialField2,
      @SpecialField3,
      @SpecialField4,
      @dateCreated,
      @userCreated,
      @BigTicket)
    </sql>
    <parameters>
      <parameter type="Int">IdUom</parameter>
      <parameter type="Int">IdItem</parameter>
      <parameter type="String">UomCode</parameter>
      <parameter type="Decimal">ConversionFactor</parameter>
      <parameter type="String">BarCode</parameter>
      <parameter type="Int">IdUomType</parameter>
      <parameter type="String">UomName</parameter>
      <parameter type="Decimal" >Length</parameter>
      <parameter type="Decimal">Width</parameter>
      <parameter type="Decimal">Height</parameter>
      <parameter type="Decimal">Volume</parameter>
      <parameter type="Decimal">Weight</parameter>
      <parameter type="Boolean">Status</parameter>
      <parameter type="Int">LayoutUomQty</parameter>
      <parameter type="Int">LayoutUnitQty</parameter>
      <parameter type="Decimal">LayoutMaxWeightUpon</parameter>
      <parameter type="String">PutawayZone</parameter>
      <parameter type="String">PickArea</parameter>
      <parameter type="String">SpecialField1</parameter>
      <parameter type="String">SpecialField2</parameter>
      <parameter type="String">SpecialField3</parameter>
      <parameter type="String">SpecialField4</parameter>
      <parameter type="DateTime">dateCreated</parameter>
      <parameter type="String">userCreated</parameter>
      <parameter type="Boolean">BigTicket</parameter>
    </parameters>
  </query>

  <query code="ItemUom_Update">
    <sql>
      UPDATE ItemUom
      SET IdUom = @IdUom,
      IdItem = @IdItem,
      UomCode = @UomCode,
      ConversionFactor = @ConversionFactor,
      BarCode = @BarCode,
      IdUomType = @IdUomType,
      UomName = @UomName,
      Length = @Length,
      Width = @Width,
      Height = @Height,
      Volume = @Volume,
      Weight = @Weight,
      Status = @Status,
      LayoutUomQty = @LayoutUomQty,
      LayoutUnitQty = @LayoutUnitQty,
      LayoutMaxWeightUpon = @LayoutMaxWeightUpon,
      PutawayZone = @PutawayZone,
      PickArea = @PickArea,
      SpecialField1 = @SpecialField1,
      SpecialField2 = @SpecialField2,
      SpecialField3 = @SpecialField3,
      SpecialField4 = @SpecialField4,
      DateModified = @dateModified,
      UserModified = @userModified,
      BigTicket = @BigTicket
      WHERE IdUom = @IdUom
    </sql>
    <parameters>
      <parameter type="Int">IdUom</parameter>
      <parameter type="Int">IdItem</parameter>
      <parameter type="String">UomCode</parameter>
      <parameter type="Decimal">ConversionFactor</parameter>
      <parameter type="String">BarCode</parameter>
      <parameter type="Int">IdUomType</parameter>
      <parameter type="String">UomName</parameter>
      <parameter type="Decimal" >Length</parameter>
      <parameter type="Decimal">Width</parameter>
      <parameter type="Decimal">Height</parameter>
      <parameter type="Decimal">Volume</parameter>
      <parameter type="Decimal">Weight</parameter>
      <parameter type="Boolean">Status</parameter>
      <parameter type="Int">LayoutUomQty</parameter>
      <parameter type="Int">LayoutUnitQty</parameter>
      <parameter type="Decimal">LayoutMaxWeightUpon</parameter>
      <parameter type="String">PutawayZone</parameter>
      <parameter type="String">PickArea</parameter>
      <parameter type="String">SpecialField1</parameter>
      <parameter type="String">SpecialField2</parameter>
      <parameter type="String">SpecialField3</parameter>
      <parameter type="String">SpecialField4</parameter>
      <parameter type="DateTime">dateModified</parameter>
      <parameter type="String">userModified</parameter>
      <parameter type="Boolean">BigTicket</parameter>
    </parameters>
  </query>

      <query code="ItemUom_Delete">
        <sql>
          DELETE
          FROM ItemUom
          WHERE idUom = @idUom;
        </sql>
        <parameters>
          <parameter type="Int">IdUom</parameter>
        </parameters>
      </query>

      <query code="ItemUom_GetItemUomByIdItem">
        <sql>
          SELECT
          iu.IdUom
          ,iu.IdItem
          ,i.Description
          ,iu.UomCode
          ,iu.ConversionFactor
          ,iu.BarCode
          ,iu.IdUomType
          ,iu.UomName
          ,iu.Length
          ,iu.Width
          ,iu.Height
          ,iu.Volume
          ,iu.Weight
          ,iu.Status
          ,iu.LayoutUomQty
          ,iu.LayoutUnitQty
          ,iu.LayoutMaxWeightUpon
          ,iu.PutawayZone
          ,iu.PickArea
          ,i.ItemCode
          ,i.Description
          ,i.Status
          ,i.LotControlInbound
          ,i.IdOwn
          ,iu.BigTicket
          FROM ItemUom iu
          INNER JOIN item i ON i.IdItem = iu.IdItem
          WHERE iu.IdItem = @IdItem
          ORDER BY iu.ConversionFactor;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = 'ItemUom_GetItemUomByIdItem'
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
        </parameters>
      </query>

      <query code="ItemUom_GetItemUomByIdItemAndIdUom">
        <sql>
          SELECT
          iu.IdUom
          ,iu.IdItem
          ,iu.UomCode
          ,iu.ConversionFactor
          ,iu.BarCode
          ,iu.UomName
          ,iu.Length
          ,iu.Width
          ,iu.Height
          ,iu.Volume
          ,iu.Weight
          ,iu.Status
          ,iu.LayoutUomQty
          ,iu.LayoutUnitQty
          ,iu.LayoutMaxWeightUpon
          ,iu.PutawayZone
          ,iu.PickArea
          ,i.ItemCode
          ,i.Description
          ,i.Status
          ,i.LotControlInbound
          ,i.IdOwn
          FROM ItemUom iu
          INNER JOIN item i ON i.IdItem = iu.IdItem
          WHERE iu.IdItem = @IdItem
          AND iu.IdItemUom = @IdUom
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdUom</parameter>
        </parameters>
      </query>


      <query code="ItemUom_GetByIdUomType">
        <sql>
          SELECT
          iu.IdUom
          ,iu.IdItem
          ,ut.IdUomType
          ,ut.UomName
          ,iu.UomCode
          ,iu.ConversionFactor
          ,iu.BarCode
          ,iu.UomName
          ,iu.Length
          ,iu.Width
          ,iu.Height
          ,iu.Volume
          ,iu.Weight
          ,iu.Status
          ,iu.LayoutUomQty
          ,iu.LayoutUnitQty
          ,iu.LayoutMaxWeightUpon
          ,iu.PutawayZone
          ,iu.PickArea
          FROM ItemUom iu
          INNER JOIN UomType ut ON ut.IdUomType = iu.IdUomType
          WHERE iu.IdUomType = @IdUomType
        </sql>
        <parameters>
          <parameter type="Int">IdUomType</parameter>
        </parameters>
      </query>
  
       <query code="ItemUom_GetByAnyParameter">
        <sql>
          SELECT
          IU.IdUom,
          IU.IdItem,
          IU.UomCode,
          IU.ConversionFactor,
          IU.BarCode,
          IU.IdUomType,
          IU.UomName,
          IU.Length,
          IU.Width,
          IU.Height,
          IU.Volume,
          IU.Weight,
          IU.Status,
          IU.LayoutUomQty,
          IU.LayoutUnitQty,
          IU.LayoutMaxWeightUpon,
          IU.PutawayZone,
          IU.PickArea,
          IU.SpecialField1,
          IU.SpecialField2,
          IU.SpecialField3,
          IU.SpecialField4,
          IU.DateCreated,
          IU.UserCreated,
          IU.DateModified,
          IU.UserModified,
          I.IdItem,
          I.ItemCode,
          I.Description,
          I.IdOwn,
          O.OwnName,
          I.ShortItemName,
          I.Status,
          I.CtrlSerialInbound,
          I.CtrlSerialInternal,
          I.CtrlSerialOutbound,
          I.LotControlInbound,
          I.LotControlInternal,
          I.LotControlOutbound,
          I.Weight,
          I.Volume,
          I.Length,
          I.Width,
          I.Height,
          I.NestedVolume,
          I.IdPutawayZone,
          I.ReOrderPoint,
          I.ReOrderQty,
          I.PalletQty,
          I.InspectionRequerid,
          I.InspectionCode,
          I.Price
          FROM ItemUom IU
          INNER JOIN Item I ON I.IdItem = iu.IdItem
          INNER JOIN Owner O ON O.IdOwn = I.IdOwn
          WHERE 1=1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdUom" type="numericEqual">IU.IdUom</filter>
          <filter name="IdItem" type="numericEqual">IU.IdItem</filter>
          <filter name="UomCode" type="textEqual">IU.UomCode</filter>
          <filter name="ConversionFactor" type="numericEqual">IU.ConversionFactor</filter>
          <filter name="BarCode" type="textEqual">IU.BarCode</filter>
          <filter name="IdUomType" type="numericEqual">IU.IdUomType</filter>
          <filter name="UomName" type="textEqual">IU.UomName</filter>
          <filter name="Length" type="numericEqual">IU.Length</filter>
          <filter name="Width" type="numericEqual">IU.Width</filter>
          <filter name="Height" type="numericEqual">IU.Height</filter>
          <filter name="Volume" type="numericEqual">IU.Volume</filter>
          <filter name="Weight" type="numericEqual">IU.Weight</filter>
          <filter name="Status" type="numericEqual">IU.Status</filter>
          <filter name="LayoutUomQty" type="numericEqual">IU.LayoutUomQty</filter>
          <filter name="LayoutUnitQty" type="numericEqual">IU.LayoutUnitQty</filter>
          <filter name="LayoutMaxWeightUpon" type="numericEqual">IU.LayoutMaxWeightUpon</filter>
          <filter name="PutawayZone" type="textEqual">IU.PutawayZone</filter>
          <filter name="PickArea" type="textEqual">IU.PickArea</filter>
          <filter name="SpecialField1" type="textEqual">IU.SpecialField1</filter>
          <filter name="SpecialField2" type="textEqual">IU.SpecialField2</filter>
          <filter name="SpecialField3" type="textEqual">IU.SpecialField3</filter>
          <filter name="SpecialField4" type="textEqual">IU.SpecialField4</filter>
          <filter name="DateCreated" type="textEqual">IU.DateCreated</filter>
          <filter name="UserCreated" type="textEqual">IU.UserCreated</filter>
          <filter name="DateModified" type="textEqual">IU.DateModified</filter>
          <filter name="UserModified" type="textEqual">IU.UserModified</filter>
        </filters>
        <sub-querys>
          <sub-query code="OrderByIdUom">
            <sql>
              ORDER BY IU.IdUom
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="OrderByConversionFactor">
            <sql>
              ORDER BY IU.ConversionFactor
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="ConversionFactorGreateThanOne">
            <sql>
              AND IU.ConversionFactor > 1
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="ByUserOwner">
            <sql>
              AND EXISTS (SELECT IdOwn
              FROM UserOwner UO
              WHERE IdUserWms = @idUser
              AND O.IdOwn = UO.IdOwn)
            </sql>
            <parameters>
              <parameter type="Int">idUser</parameter>
            </parameters>
          </sub-query>
        </sub-querys>
      </query>

      <query code="Item_DeleteWorkZone">
        <sql>
          DELETE FROM WorkZoneItem
          WHERE IdItem = @idItem
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
        </parameters>
      </query>

      <query code="Item_InsertWorkZones">
        <sql>
          INSERT INTO WorkZoneItem
          (IdItem,
          IdWorkZone,
          DateCreated,
          UserCreated)
          VALUES
          (@idItem,
          @idWorkZone,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idWorkZone</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="Item_DeleteCustomRule">
        <sql>
          DELETE FROM CustomRuleItem
          WHERE IdItem = @idItem
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
        </parameters>
      </query>

      <query code="Item_InsertCustomRule">
        <sql>
          INSERT INTO CustomRuleItem
          (IdItem,
          IdCustomRule)
          VALUES
          (@idItem,
           @idCustomRule)
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idCustomRule</parameter>
        </parameters>
      </query>

      <query code="Item_DeleteItemVas">
        <sql>
          DELETE FROM ItemVas
          WHERE IdItem = @idItem
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
        </parameters>
      </query>

      <query code="Item_InsertItemVas">
        <sql>
          INSERT INTO ItemVas
          (IdItem,
          IdVas,
          Secuence,
          DateCreated,
          UserCreated)
          VALUES
          (@idItem,
          @idVas,
          @secuence,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idVas</parameter>
          <parameter type="Int">secuence</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="Item_GetBy_SpecialParameters">
        <sql>
          SELECT I.IdItem
          ,I.ItemCode
          ,I.IdOwn
          ,I.AltItemCode
          ,I.Description
          ,I.IdGrpItem1
          ,I.IdGrpItem2
          ,I.IdGrpItem3
          ,I.IdGrpItem4
          ,I.LongItemName
          ,I.ShortItemName
          ,I.Status
          ,I.ItemComment
          ,I.Width
          FROM Item I
          LEFT JOIN GroupItem1 Grp1 ON I.IdGrpItem1 = Grp1.IdGrpItem1 AND I.IdOwn = Grp1.IdOwn
          LEFT JOIN GroupItem2 Grp2 ON I.IdGrpItem2 = Grp2.IdGrpItem2
          LEFT JOIN GroupItem3 Grp3 ON I.IdGrpItem3 = Grp3.IdGrpItem3
          LEFT JOIN GroupItem4 Grp4 ON I.IdGrpItem4 = Grp4.IdGrpItem4
          WHERE ((I.IdGrpItem1 = @idGrpItem1 AND @idGrpItem1 &lt;&gt; -2) OR (@idGrpItem1 = -2))
          AND ((I.IdGrpItem2 = @idGrpItem2 AND @idGrpItem2 &lt;&gt; -2) OR (@idGrpItem2 = -2))
          AND ((I.IdGrpItem3 = @idGrpItem3 AND @idGrpItem3 &lt;&gt; -2) OR (@idGrpItem3 = -2))
          AND ((I.IdGrpItem4 = @idGrpItem4 AND @idGrpItem4 &lt;&gt; -2) OR (@idGrpItem4 = -2))
          AND I.ItemCode LIKE @code
          AND I.LongItemName LIKE @name
          AND I.Description LIKE @description
          AND I.IdOwn = @idOwn

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idOwn</parameter>
          <parameter type="Int">idGrpItem1</parameter>
          <parameter type="Int">idGrpItem2</parameter>
          <parameter type="Int">idGrpItem3</parameter>
          <parameter type="Int">idGrpItem4</parameter>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="String">description</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="Item_GetBy_SpecialParametersAndParameterValue">
        <sql>
          SELECT I.IdItem
          ,I.ItemCode
          ,I.IdOwn
          ,I.AltItemCode
          ,I.Description
          ,I.IdGrpItem1
          ,I.IdGrpItem2
          ,I.IdGrpItem3
          ,I.IdGrpItem4
          ,I.LongItemName
          ,I.ShortItemName
          ,I.Status
          ,I.ItemComment
          FROM Item I
          LEFT JOIN ItemParameter IP ON IP.IdItem = I.IdItem
          LEFT JOIN GroupItem1 Grp1 ON I.IdGrpItem1 = Grp1.IdGrpItem1 AND I.IdOwn = Grp1.IdOwn
          LEFT JOIN GroupItem2 Grp2 ON I.IdGrpItem2 = Grp2.IdGrpItem2
          LEFT JOIN GroupItem3 Grp3 ON I.IdGrpItem3 = Grp3.IdGrpItem3
          LEFT JOIN GroupItem4 Grp4 ON I.IdGrpItem4 = Grp4.IdGrpItem4
          WHERE (I.IdGrpItem1 = @idGrpItem1 AND @idGrpItem1 &lt;&gt; -2 OR I.IdGrpItem1 is null OR @idGrpItem1 = -2)
          AND (I.IdGrpItem2 = @idGrpItem2 AND @idGrpItem2 &lt;&gt; -2 OR I.IdGrpItem2 is null OR @idGrpItem2 = -2)
          AND (I.IdGrpItem3 = @idGrpItem3 AND @idGrpItem3 &lt;&gt; -2 OR I.IdGrpItem3 is null OR @idGrpItem3 = -2)
          AND (I.IdGrpItem4 = @idGrpItem4 AND @idGrpItem4 &lt;&gt; -2 OR I.IdGrpItem4 is null OR @idGrpItem4 = -2)
          AND I.ItemCode LIKE @code
          AND I.LongItemName LIKE @name
          AND I.Description LIKE @description
          AND I.IdOwn = @idOwn
          AND IP.IdParameter = @idParameter
          AND IP.ParameterValue = @parameterValue

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idOwn</parameter>
          <parameter type="Int">idGrpItem1</parameter>
          <parameter type="Int">idGrpItem2</parameter>
          <parameter type="Int">idGrpItem3</parameter>
          <parameter type="Int">idGrpItem4</parameter>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="String">description</parameter>
          <parameter type="Int">idParameter</parameter>
          <parameter type="String">parameterValue</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="Item_GetBy_Groups">
        <sql>
          SELECT I.IdItem
          ,I.ItemCode
          ,I.IdOwn
          ,I.AltItemCode
          ,I.Description
          ,I.IdGrpItem1
          ,I.IdGrpItem2
          ,I.IdGrpItem3
          ,I.IdGrpItem4
          ,I.LongItemName
          ,I.ShortItemName
          ,I.Status
          ,I.ItemComment
          ,I.Width
          FROM Item I
          LEFT JOIN GroupItem1 Grp1 ON I.IdGrpItem1 = Grp1.IdGrpItem1 AND I.IdOwn = Grp1.IdOwn
          LEFT JOIN GroupItem2 Grp2 ON I.IdGrpItem2 = Grp2.IdGrpItem2
          LEFT JOIN GroupItem3 Grp3 ON I.IdGrpItem3 = Grp3.IdGrpItem3
          LEFT JOIN GroupItem4 Grp4 ON I.IdGrpItem4 = Grp4.IdGrpItem4
          WHERE ((I.IdGrpItem1 = @idGrpItem1 AND @idGrpItem1 &lt;&gt; -2) OR (@idGrpItem1 = -2))
          AND ((I.IdGrpItem2 = @idGrpItem2 AND @idGrpItem2 &lt;&gt; -2) OR (@idGrpItem2 = -2))
          AND ((I.IdGrpItem3 = @idGrpItem3 AND @idGrpItem3 &lt;&gt; -2) OR (@idGrpItem3 = -2))
          AND ((I.IdGrpItem4 = @idGrpItem4 AND @idGrpItem4 &lt;&gt; -2) OR (@idGrpItem4 = -2))

        </sql>
        <parameters>
          <parameter type="Int">idGrpItem1</parameter>
          <parameter type="Int">idGrpItem2</parameter>
          <parameter type="Int">idGrpItem3</parameter>
          <parameter type="Int">idGrpItem4</parameter>
        </parameters>
      </query>

  <query code="Item_GetBy_GroupsAndFilters">
    <sql>
      SELECT I.IdItem
      ,I.ItemCode
      ,I.IdOwn
      ,I.AltItemCode
      ,I.Description
      ,I.IdGrpItem1
      ,I.IdGrpItem2
      ,I.IdGrpItem3
      ,I.IdGrpItem4
      ,I.LongItemName
      ,I.ShortItemName
      ,I.Status
      ,I.ItemComment
      ,I.Width
      FROM Item I
      LEFT JOIN GroupItem1 Grp1 ON I.IdGrpItem1 = Grp1.IdGrpItem1 AND I.IdOwn = Grp1.IdOwn
      LEFT JOIN GroupItem2 Grp2 ON I.IdGrpItem2 = Grp2.IdGrpItem2
      LEFT JOIN GroupItem3 Grp3 ON I.IdGrpItem3 = Grp3.IdGrpItem3
      LEFT JOIN GroupItem4 Grp4 ON I.IdGrpItem4 = Grp4.IdGrpItem4
      WHERE ((I.IdGrpItem1 = @idGrpItem1 AND @idGrpItem1 &lt;&gt; -2) OR (@idGrpItem1 = -2))
      AND ((I.IdGrpItem2 = @idGrpItem2 AND @idGrpItem2 &lt;&gt; -2) OR (@idGrpItem2 = -2))
      AND ((I.IdGrpItem3 = @idGrpItem3 AND @idGrpItem3 &lt;&gt; -2) OR (@idGrpItem3 = -2))
      AND ((I.IdGrpItem4 = @idGrpItem4 AND @idGrpItem4 &lt;&gt; -2) OR (@idGrpItem4 = -2))
      AND I.ItemCode LIKE @code
      AND I.LongItemName LIKE @name
      AND I.Description LIKE @description
      @SQLPart

    </sql>
    <parameters>
      <parameter type="Int">idGrpItem1</parameter>
      <parameter type="Int">idGrpItem2</parameter>
      <parameter type="Int">idGrpItem3</parameter>
      <parameter type="Int">idGrpItem4</parameter>
      <parameter type="String">code</parameter>
      <parameter type="String">name</parameter>
      <parameter type="String">description</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="IdOwn" type="numericEqual">I.IdOwn</filter>
    </filters>
  </query>

      <query code="Kit_GetCountItemFromOutbound">
        <sql>

          SELECT COUNT(O.IdItem) AS COUNT
          FROM OutboundDetail O
          WHERE O.IDITEM = @idItem
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
        </parameters>
      </query>
  
  
      <query code="Kit_GetCountItemKitFromStock">
        <sql>
          SELECT COUNT(StockId) AS COUNT
          FROM STOCK
          WHERE IdItem in
          (SELECT IdItemBase from KIT Where IdItemKit = @IdItemKit)
        </sql>
        <parameters>
          <parameter type="Int">IdItemKit</parameter>
        </parameters>
      </query>
      <query code="Kit_GetCountKitFromStock">
        <sql>
          SELECT COUNT(StockId) AS COUNT
          FROM STOCK
          WHERE IdItem in
          (SELECT IdItemKit from KIT Where IdItemKit = @IdItemKit)
        </sql>
        <parameters>
          <parameter type="Int">IdItemKit</parameter>
        </parameters>
      </query>
      <query code="Item_Kit_GetByItemCodeItemName">
        <sql>
          <!--TRAE LOS Items pero solo los que estan asociados a Kits-->
          <!--Se Usa en UnKiting-->
          SELECT I.IdItem IdItemKit
          ,I.ItemCode
          ,I.LongItemName
          ,I.ShortItemName
          ,I.Description
          ,I.ShortItemName
          ,I.IdItem
          FROM ITEM I
          INNER JOIN KIT K ON I.IdItem = K.IdItemBase
          AND Status = 1
          AND IdItem IN (SELECT IdItemBase FROM Kit)
          WHERE ItemCode LIKE @code
          AND LongItemName LIKE @name
          AND IdOwn = @IdOwn
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>


      <!-- ITEM section end -->


      <!--Category ITEM Section Begin-->
      <query code="CategoryItem_GetByAnyParameter">
        <sql>
          SELECT   IdCtgItem
          , IdOwn
          , CtgCode
          , CtgName
          FROM CategoryItem
          WHERE 1=1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdCtgItem" type="numericEqual">IdCtgItem</filter>
          <filter name="IdOwn" type="numericEqual">IdOwn</filter>
          <filter name="CtgCode" type="textEqual">CtgCode</filter>
          <filter name="CtgName" type="textEqual">CtgName</filter>
        </filters>
      </query>
  
      <query code="CategoryItem_FindAll">
        <sql>
          SELECT
          Ca.IdCtgItem
          ,Ca.IdOwn
          ,o.OwnName
          ,Ca.CtgCode
          ,Ca.CtgName
          ,Ca.DateCreated
          ,Ca.UserCreated
          ,Ca.DateModified
          ,Ca.UserModified
          FROM CategoryItem Ca
          INNER JOIN Owner o ON Ca.IdOwn = o.IdOwn
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">Ca.CtgCode</filter>
          <filter name="Name" type="textLike">Ca.CtgName</filter>
          <filter name="Owner" type="numericIn">Ca.IdOwn</filter>
        </filters>
      </query>

      <query code="CategoryItem_Insert">
        <sql>
          INSERT INTO CategoryItem
          (IdCtgItem
          ,IdOwn
          ,CtgCode
          ,CtgName
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdCtgItem
          ,@IdOwn
          ,@CtgCode
          ,@CtgName
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdCtgItem</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">CtgCode</parameter>
          <parameter type="String">CtgName</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="CategoryItem_Update">
        <sql>
          UPDATE CategoryItem
          SET IdOwn = @IdOwn
          ,CtgCode = @CtgCode
          ,CtgName = @CtgName
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdCtgItem = @IdCtgItem
        </sql>
        <parameters>
          <parameter type="Int">IdCtgItem</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">CtgCode</parameter>
          <parameter type="String">CtgName</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query code="CategoryItem_Delete">
        <sql>
          DELETE CategoryItem
          WHERE IdCtgItem = @IdCtgItem
        </sql>
        <parameters>
          <parameter type="Int">IdCtgItem</parameter>
        </parameters>
      </query>

      <query code="CategoryItem_GetByOwner">
        <sql>
          SELECT IdCtgItem,
          IdOwn,
          CtgCode,
          CtgName
          FROM CategoryItem
          WHERE (IdOwn = @idOwn OR idOwn = -2)
        </sql>
        <parameters>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="CategoryItem_GetByCodeAndOwn">
        <sql>
          SELECT IdCtgItem,
          IdOwn,
          CtgCode,
          CtgName
          FROM CategoryItem
          WHERE CtgCode = @ctgCode
          AND IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="String">ctgCode</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="GetCategoryItemByCode">
        <sql>
          SELECT IdCtgItem,
          IdOwn,
          CtgCode,
          CtgName
          FROM CategoryItem
          WHERE CtgCode = @ctgCode
        </sql>
        <parameters>
          <parameter type="String">ctgCode</parameter>
        </parameters>
      </query>

      <query code="GetCategoryItemByTaskDetail">
        <sql>
          SELECT IdCtgItem
          FROM TaskDetail
          WHERE IdCtgItem = @IdCtgItem
        </sql>
        <parameters>
          <parameter type="Int">IdCtgItem</parameter>
        </parameters>
      </query>

      <query code="GetCategoryItemByStock">
        <sql>
          SELECT IdCtgItem
          FROM Stock
          WHERE IdCtgItem = @IdCtgItem
        </sql>
        <parameters>
          <parameter type="Int">IdCtgItem</parameter>
        </parameters>
      </query>
      <!--Category ITEM Section FIN-->




      <!--KIT ITEM Section Begin-->
      <query code="Kits_GetByOwner">
        <sql>
          <!--TRAE LA INFORMACION DE UN KIT-->
          SELECT I.IdItem IdItemKit
          ,I.ItemCode KitItemCode
          ,O.IdOwn KitIdOwn
          ,O.OwnCode KitOwnCode
          ,O.OwnName KitOwnName
          ,I.LongItemName KitLongItemName
          ,I.ShortItemName KitShortItemName
          ,I.Description KitDescription
          ,I.ShortItemName KitShortItemName
          ,I.IdGrpItem1 KitIdGrpItem1
          ,G1.GrpItem1Name KitGrpItem1Name
          ,I.IdGrpItem2 KitIdGrpItem2
          ,G2.GrpItem2Name KitGrpItem2Name
          ,I.IdGrpItem3 KitIdGrpItem3
          ,G3.GrpItem3Name KitGrpItem3Name
          ,I.IdGrpItem4 KitIdGrpItem4
          ,G4.GrpItem4Name KitGrpItem4Name
          ,G4.GrpItem4Name
          FROM ITEM I
          INNER JOIN Owner O ON I.IdOwn = O.IdOwn
          INNER JOIN KIT K ON I.IdItem = K.IdItemKit
          LEFT JOIN GroupItem1 G1 ON G1.IdGrpItem1 = I.IdGrpItem1
          AND I.IdOwn = G1.IdOwn
          LEFT JOIN GroupItem2 G2 ON G2.IdGrpItem2 = I.IdGrpItem2
          LEFT JOIN GroupItem3 G3 ON G3.IdGrpItem3 = I.IdGrpItem3
          LEFT JOIN GroupItem4 G4 ON G4.IdGrpItem4 = I.IdGrpItem4
          AND Status = 1
          AND IdItem IN (SELECT IdItemKit FROM Kit)
          @SQLPart
          GROUP By I.IdItem
          ,I.ItemCode
          ,O.IdOwn
          ,O.OwnCode
          ,O.OwnName
          ,I.LongItemName
          ,I.ShortItemName
          ,I.Description
          ,I.ShortItemName
          ,I.IdGrpItem1
          ,G1.GrpItem1Name
          ,I.IdGrpItem2
          ,G2.GrpItem2Name
          ,I.IdGrpItem3
          ,G3.GrpItem3Name
          ,I.IdGrpItem4
          ,G4.GrpItem4Name;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Owner" type="numericIn">i.IdOwn</filter>
          <filter name="Item" type="textLike">i.ItemCode</filter>
          <filter name="Name" type="textLike">i.LongItemName</filter>
        </filters>
      </query>




      <query code="Kits_GetDetail">
        <sql>
          <!--TRAE LOS ITEMS (DETALLE) CORRESPONDIENTES A UN KIT-->
          SELECT
          K.IdItemKit
          ,K.IdItemBase
          ,I.ItemCode BaseItemCode
          ,I.LongItemName BaseLongItemName
          ,I.Description BaseDescription
          ,I.ShortItemName BaseShortItemName
          ,I.IdGrpItem1 BaseIdGrpItem1
          ,G1.GrpItem1Name BaseGrpItem1Name
          ,I.IdGrpItem2 BaseIdGrpItem2
          ,G2.GrpItem2Name BaseGrpItem2Name
          ,I.IdGrpItem3 BaseIdGrpItem3
          ,G3.GrpItem3Name BaseGrpItem3Name
          ,I.IdGrpItem4 BaseIdGrpItem4
          ,G4.GrpItem4Name BaseGrpItem4Name
          ,K.ItemQty
          FROM Item I
          JOIN Kit K ON I.IdItem = K.IdItemBase
          LEFT JOIN GroupItem1 G1 ON G1.IdGrpItem1 = I.IdGrpItem1
          AND I.IdOwn = G1.IdOwn
          LEFT JOIN GroupItem2 G2 ON G2.IdGrpItem2 = I.IdGrpItem2
          LEFT JOIN GroupItem3 G3 ON G3.IdGrpItem3 = I.IdGrpItem3
          LEFT JOIN GroupItem4 G4 ON G4.IdGrpItem4 = I.IdGrpItem4
          WHERE K.IdItemKit = @IdItemKit;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdItemKit</parameter>
        </parameters>
      </query>

      <query code="Kits_GetByItemCodeItemName">
        <sql>
          <!--TRAE LOS KIT-->
          SELECT I.IdItem IdItemKit
          ,I.ItemCode KitItemCode
          ,I.LongItemName KitLongItemName
          ,I.ShortItemName KitShortItemName
          ,I.Description KitDescription
          ,I.ShortItemName KitShortItemName
          FROM ITEM I
          INNER JOIN KIT K ON I.IdItem = K.IdItemKit
          AND Status = 1
          AND IdItem IN (SELECT IdItemKit FROM Kit)
          WHERE ItemCode LIKE @code
          AND LongItemName LIKE @name
          AND IdOwn = @idOwn
          GROUP By I.IdItem
          ,I.ItemCode
          ,I.LongItemName
          ,I.ShortItemName
          ,I.Description
          ,I.ShortItemName
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>




      <query code="Kits_GetById">
        <sql>
          <!--TRAE LOS ITEMS (DETALLE) CORRESPONDIENTES A UN KIT-->
          SELECT IdItemKit FROM Kit
          WHERE IdItemKit = @IdItemKit
          AND IdItemBase = @IdItemBase
        </sql>
        <parameters>
          <parameter type="Int">IdItemKit</parameter>
          <parameter type="Int">IdItemBase</parameter>
        </parameters>
      </query>

      <query code="Kits_Insert">
        <sql>
          INSERT INTO Kit
          (IdItemKit
          ,IdItemBase
          ,ItemQty
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdItemKit
          ,@IdItemBase
          ,@ItemQty
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdItemKit</parameter>
          <parameter type="Int">IdItemBase</parameter>
          <parameter type="Decimal">ItemQty</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="Kits_Update">
        <sql>
          UPDATE Kit
          SET ItemQty = @ItemQty
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdItemKit = @IdItemKit
          AND IdItemBase = @IdItemBase;
        </sql>
        <parameters>
          <parameter type="Int">IdItemKit</parameter>
          <parameter type="Int">IdItemBase</parameter>
          <parameter type="Decimal">ItemQty</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query code="Kits_DeleteByItem">
        <sql>
          DELETE FROM Kit
          WHERE IdItemKit = @IdItemKit
          AND IdItemBase = @IdItemBase
        </sql>
        <parameters>
          <parameter type="Int">IdItemKit</parameter>
          <parameter type="Int">IdItemBase</parameter>
        </parameters>
      </query>

      <query code="Kits_Delete">
        <sql>
          DELETE FROM Kit
          WHERE IdItemKit = @IdItemKit
        </sql>
        <parameters>
          <parameter type="Int">IdItemKit</parameter>
        </parameters>
      </query>

      <!--KIT ITEM Section FIN-->

      <!-- Company Parameters section begin -->
      <query code="CfgParameter_GetByUser">
        <sql>
          SELECT
          cp.IdParameter,
          m.IdModule,
          m.Name ModuleName,
          cp.ParameterCode,
          cp.Description,
          cp.ParameterValue,
          cp.Type,
          cp.MinValue,
          cp.MaxValue,
          cp.DefaultValue,
          cp.AllowEdit,
          cp.AllowDisplay,
          cp.Scope
          FROM CompanyParameter cp
          INNER JOIN CfgModule m ON cp.IdModule = m.IdModule

          <!-- TODO:  - por ahora solo trae la configuracion a nivel de Company. -->
          <!--		- mas adelante hay que traer la configuracion a nivel de User -> Warehouse -> Company . -->
          <!--		- empezando por el nivel de mayor detalle (User) y subiendo si no esta configurado . -->
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>



      <query code="CfgParameter_FindAll">
        <sql>
          SELECT
          cp.IdParameter,
          m.IdModule,
          m.Name ModuleName,
          cp.ParameterCode,
          cp.Description,
          cp.ParameterValue,
          cp.Type,
          cp.MinValue,
          cp.MaxValue,
          cp.DefaultValue,
          cp.AllowEdit,
          cp.AllowDisplay,
          cp.Scope
          FROM CompanyParameter cp
          INNER JOIN CfgModule m ON cp.IdModule = m.IdModule
          WHERE cp.IdModule = 1
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Scope" type="textEqual">cp.Scope</filter>
          <filter name="Name" type="textLike">cp.ParameterCode</filter>
          <filter name="Description" type="textLike">cp.Description</filter>
        </filters>
      </query>

	<query code="CfgOwnerParameter_FindAll">
		<sql>
			SELECT O.IdOwn,O.OwnName,
			W.IdWhs,W.WhsName,
			CP.IdParameter,CP.ParameterCode,
			CP.Description,
			COALESCE(WP.ParameterValue,OP.ParameterValue,CP.ParameterValue,'') ParameterValue,
			CP.Type,CP.MinValue,
			CP.MaxValue,CP.DefaultValue,
			CP.AllowEdit,CP.AllowDisplay,
			CP.Scope
			FROM CompanyParameter CP
			CROSS JOIN OWNER O
			CROSS JOIN Warehouse W
			INNER JOIN OwnerParameter OP
			ON OP.IdOwn = O.IdOwn
			AND OP.IdParameter = CP.IdParameter
			INNER JOIN WarehouseParameter WP
			ON WP.IdWhs = W.IdWhs
			AND WP.IdOwn = O.IdOwn
			AND WP.IdParameter = CP.IdParameter
			WHERE CP.IdModule = 1
			@SQLPart;

			SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView,
			VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
			FROM CfgEntityProperty qf
			JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
			WHERE QueryName = @queryName
			ORDER BY FieldOrder;
		</sql>
		<parameters>
			<parameter type="String">queryName</parameter>
			<parameter type="SQLPart">@SQLPart</parameter>
		</parameters>
		<filters>
			<filter name="Scope" type="textEqual">CP.Scope</filter>
			<filter name="Name" type="textLike">CP.ParameterCode</filter>
			<filter name="Description" type="textLike">CP.Description</filter>
			<filter name="Warehouse" type="numericIn">W.IdWhs</filter>
			<filter name="Owner" type="numericIn">O.IdOwn</filter>
		</filters>
	</query>

      <!--Region Item parameters-->
      <query code="CfgParameterItemsCompany_FindAll">
        <sql>
          SELECT IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,Diferencias
          FROM v_Cfg_WmsItemParamByCmp
          ORDER BY IdParameter;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
      </query>

      <query code="CfgParameterOwnerItems_FindAll">
        <sql>
          SELECT IdOwn
          ,OwnName
          ,IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,Diferencias
          FROM v_Cfg_WmsItemParamByOwn
          WHERE IdOwn = @IdOwn
          ORDER BY IdParameter;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="CfgParameterOwnAndWhs_FindAll">
        <sql>
          SELECT IdOwn
          ,OwnName
          ,IdWhs
          ,WhsName
          ,IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,Diferencias
          FROM v_Cfg_WmsItemParamByWhs
          WHERE IdOwn = @IdOwn
          AND IdWhs = @IdWhs
          ORDER BY IdParameter;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="CfgParamItemByOwnWhsItems_FindAll">
        <sql>
          SELECT IdOwn
          ,OwnName
          ,IdWhs
          ,WhsName
          ,IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,Diferencias
          FROM v_Cfg_WmsItemParamByWhs
          WHERE IdOwn = @IdOwn
          AND IdWhs = @IdWhs
          ORDER BY IdParameter;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="CfgParamItemByOwnWhsItem_FindAll">
        <sql>
          SELECT IdOwn
          ,OwnName
          ,IdWhs
          ,WhsName
          ,IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          --,Diferencias
          ,IdItem
          ,ItemCode
          FROM v_Cfg_WmsItemParamByItem
          WHERE IdOwn = @IdOwn
          AND IdWhs = @IdWhs
          AND IdItem = @IdItem
          ORDER BY IdParameter;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdItem</parameter>
        </parameters>
      </query>


      <query code="Cfg_GetParamItemByOwnWhsGrp1">
        <sql>
          SELECT IdOwn
          ,OwnName
          ,IdWhs
          ,WhsName
          ,IdGrpItem1
          ,GrpItem1Name
          ,IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,Diferencias
          FROM v_Cfg_WmsItemParamByGrp1
          WHERE IdOwn = @IdOwn
          AND IdWhs = @IdWhs
          AND IdGrpItem1 = @IdGrpItem1
          ORDER BY IdParameter;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
        </parameters>
      </query>

      <query code="Cfg_GetParamItemByOwnWhsGrp2">
        <sql>
          SELECT IdOwn
          ,OwnName
          ,IdWhs
          ,WhsName
          ,IdGrpItem1
          ,GrpItem1Name
          ,IdGrpItem2
          ,GrpItem2Name
          ,IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,Diferencias
          FROM v_Cfg_WmsItemParamByGrp2
          WHERE IdOwn = @IdOwn
          AND IdWhs = @IdWhs
          AND IdGrpItem1 = @IdGrpItem1
          AND IdGrpItem2 = @IdGrpItem2
          ORDER BY IdParameter;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
        </parameters>
      </query>

      <query code="Cfg_GetParamItemByOwnWhsGrp3">
        <sql>
          SELECT IdOwn
          ,OwnName
          ,IdWhs
          ,WhsName
          ,IdGrpItem1
          ,GrpItem1Name
          ,IdGrpItem2
          ,GrpItem2Name
          ,IdGrpItem3
          ,GrpItem3Name
          ,IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,Diferencias
          FROM v_Cfg_WmsItemParamByGrp3
          WHERE IdOwn = @IdOwn
          AND IdWhs = @IdWhs
          AND IdGrpItem1 = @IdGrpItem1
          AND IdGrpItem2 = @IdGrpItem2
          AND IdGrpItem3 = @IdGrpItem3
          ORDER BY IdParameter;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
          <parameter type="Int">IdGrpItem3</parameter>
        </parameters>
      </query>

      <query code="Cfg_GetParamItemByOwnWhsGrp4">
        <sql>
          SELECT IdOwn
          ,OwnName
          ,IdWhs
          ,WhsName
          ,IdGrpItem1
          ,GrpItem1Name
          ,IdGrpItem2
          ,GrpItem2Name
          ,IdGrpItem3
          ,GrpItem3Name
          ,IdGrpItem4
          ,GrpItem4Name
          ,IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,Diferencias
          FROM v_Cfg_WmsItemParamByGrp4
          WHERE IdOwn = @IdOwn
          AND IdWhs = @IdWhs
          AND IdGrpItem1 = @IdGrpItem1
          AND IdGrpItem2 = @IdGrpItem2
          AND IdGrpItem3 = @IdGrpItem3
          AND IdGrpItem4 = @IdGrpItem4
          ORDER BY IdParameter;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
          <parameter type="Int">IdGrpItem3</parameter>
          <parameter type="Int">IdGrpItem4</parameter>
        </parameters>
      </query>

      <query code="CfgParam_InsertItemParameterGrp1">
        <sql>
          DELETE FROM GroupItem1Parameter
          WHERE IdParameter = @IdParameter
          AND IdWhs = @IdWhs
          AND IdOwn = @IdOwn
          AND IdGrpItem1 = @IdGrpItem1;

          INSERT INTO GroupItem1Parameter
          (IdParameter
          ,IdOwn
          ,IdWhs
          ,IdGrpItem1
          ,ParameterValue
          ,DateCreated
          ,UserCreated)
          VALUES (
          @IdParameter
          ,@IdOwn
          ,@IdWhs
          ,@IdGrpItem1
          ,@ParameterValue
          ,@DateCreated
          ,@UserCreated)

        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="String">ParameterValue</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="CfgParam_InsertItemParameterGrp2">
        <sql>
          DELETE FROM GroupItem2Parameter
          WHERE IdParameter = @IdParameter
          AND IdWhs = @IdWhs
          AND IdOwn = @IdOwn
          AND IdGrpItem1 = @IdGrpItem1
          AND IdGrpItem2 = @IdGrpItem2;

          INSERT INTO GroupItem2Parameter
          (IdParameter
          ,IdOwn
          ,IdWhs
          ,IdGrpItem1
          ,IdGrpItem2
          ,ParameterValue
          ,DateCreated
          ,UserCreated)
          VALUES (
          @IdParameter
          ,@IdOwn
          ,@IdWhs
          ,@IdGrpItem1
          ,@IdGrpItem2
          ,@ParameterValue
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
          <parameter type="String">ParameterValue</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="CfgParam_InsertItemParameterGrp3">
        <sql>
          DELETE FROM GroupItem3Parameter
          WHERE IdParameter = @IdParameter
          AND IdWhs = @IdWhs
          AND IdOwn = @IdOwn
          AND IdGrpItem1 = @IdGrpItem1
          AND IdGrpItem2 = @IdGrpItem2
          AND IdGrpItem3 = @IdGrpItem3;

          INSERT INTO GroupItem3Parameter
          (IdParameter
          ,IdOwn
          ,IdWhs
          ,IdGrpItem1
          ,IdGrpItem2
          ,IdGrpItem3
          ,ParameterValue
          ,DateCreated
          ,UserCreated)
          VALUES (
          @IdParameter
          ,@IdOwn
          ,@IdWhs
          ,@IdGrpItem1
          ,@IdGrpItem2
          ,@IdGrpItem3
          ,@ParameterValue
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
          <parameter type="Int">IdGrpItem3</parameter>
          <parameter type="String">ParameterValue</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="CfgParam_InsertItemParameterGrp4">
        <sql>
          DELETE FROM GroupItem4Parameter
          WHERE IdParameter = @IdParameter
          AND IdWhs = @IdWhs
          AND IdOwn = @IdOwn
          AND IdGrpItem1 = @IdGrpItem1
          AND IdGrpItem2 = @IdGrpItem2
          AND IdGrpItem3 = @IdGrpItem3
          AND IdGrpItem4 = @IdGrpItem4;

          INSERT INTO GroupItem4Parameter
          (IdParameter
          ,IdOwn
          ,IdWhs
          ,IdGrpItem1
          ,IdGrpItem2
          ,IdGrpItem3
          ,IdGrpItem4
          ,ParameterValue
          ,DateCreated
          ,UserCreated)
          VALUES (
          @IdParameter
          ,@IdOwn
          ,@IdWhs
          ,@IdGrpItem1
          ,@IdGrpItem2
          ,@IdGrpItem3
          ,@IdGrpItem4
          ,@ParameterValue
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
          <parameter type="Int">IdGrpItem3</parameter>
          <parameter type="Int">IdGrpItem4</parameter>
          <parameter type="String">ParameterValue</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="CfgParam_InsertParameterByItem">
        <sql>
          DELETE FROM ItemParameter
          WHERE IdParameter = @IdParameter
          AND   IdWhs = @IdWhs
          AND IdItem IN (SELECT IdItem from Item I @SQLPart);

          INSERT INTO ItemParameter
          (IdParameter
          ,IdWhs
          ,IdItem
          ,ParameterValue
          ,DateCreated
          ,UserCreated)
          SELECT @IdParameter
          ,@IdWhs
          ,IdItem
          ,@ParameterValue
          ,@DateCreated
          ,@UserCreated
          FROM Item I
          @SQLPart
          AND (I.IdGrpItem1 = @IdGrpItem1 OR @IdGrpItem1 = -2)
          AND (I.IdGrpItem2 = @IdGrpItem2 OR @IdGrpItem2 = -2)
          AND (I.IdGrpItem3 = @IdGrpItem3 OR @IdGrpItem3 = -2)
          AND (I.IdGrpItem4 = @IdGrpItem4 OR @IdGrpItem4 = -2)
          AND I.IdOwn = @idOwn

        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
          <parameter type="Int">IdGrpItem3</parameter>
          <parameter type="Int">IdGrpItem4</parameter>
          <parameter type="String">ParameterValue</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Item" type="numericIn">I.IdItem</filter>
        </filters>
      </query>

      <query code="CfgParameter_DeleteParamCompanyOverwrite">
        <sql>
          DELETE FROM OwnerParameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM WarehouseParameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem1Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem2Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem3Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem4Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM ItemParameter
          WHERE IdParameter = @IdParameter;
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
        </parameters>
      </query>

      <query code="CfgParameter_DeleteParamOwnerOverwrite">
        <sql>
          DELETE FROM WarehouseParameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem1Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem2Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem3Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem4Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM ItemParameter
          WHERE IdParameter = @IdParameter;
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
        </parameters>
      </query>

      <query code="CfgParameter_DeleteParamWarehouseOverwrite">
        <sql>
          DELETE FROM GroupItem1Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem2Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem3Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem4Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM ItemParameter
          WHERE IdParameter = @IdParameter;
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
        </parameters>
      </query>

      <query code="CfgParameter_DeleteParamGroupItem1Overwrite">
        <sql>
          DELETE FROM GroupItem2Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem3Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem4Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM ItemParameter
          WHERE IdParameter = @IdParameter;
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
        </parameters>
      </query>

      <query code="CfgParameter_DeleteParamGroupItem2Overwrite">
        <sql>
          DELETE FROM GroupItem3Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem4Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM ItemParameter
          WHERE IdParameter = @IdParameter;
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
        </parameters>
      </query>

      <query code="CfgParameter_DeleteParamGroupItem3Overwrite">
        <sql>
          DELETE FROM GroupItem4Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM ItemParameter
          WHERE IdParameter = @IdParameter;
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
        </parameters>
      </query>

      <query code="CfgParameter_DeleteParamGroupItem4Overwrite">
        <sql>
          DELETE FROM ItemParameter
          WHERE IdParameter = @IdParameter;
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
        </parameters>
      </query>

	<query code="CfgParameter_DeleteParamOwnerAndWarehouse">
		<sql>
			DELETE FROM OwnerParameter
			WHERE IdParameter = @IdParameter
			AND IdOwn = @IdOwn;

			DELETE FROM WarehouseParameter
			WHERE IdParameter = @IdParameter
			AND IdWhs = @IdWhs;
		</sql>
		<parameters>
			<parameter type="Int">IdParameter</parameter>
			<parameter type="Int">IdOwn</parameter>
			<parameter type="Int">IdWhs</parameter>
		</parameters>
	</query>
      <!--end Regtion Item parameters-->

      <!--Region LPNs parameters-->
      <query code="CfgParameterLPNCompany_FindAll">
        <sql>
          SELECT
          cp.IdParameter,
          m.IdModule,
          m.Name ModuleName,
          cp.ParameterCode,
          cp.Description,
          cp.ParameterValue,
          cp.Type,
          cp.MinValue,
          cp.MaxValue,
          cp.DefaultValue,
          cp.AllowEdit,
          cp.AllowDisplay,
          cp.Scope
          FROM v_Cfg_WmsLpnParamByCmp cp
          INNER JOIN CfgModule m ON cp.IdModule = m.IdModule
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textLike">cp.ParameterCode</filter>
          <filter name="Description" type="textLike">cp.Description</filter>
        </filters>
      </query>

      <query code="CfgParameterOwnerLPN_FindAll">
        <sql>
          SELECT     Wo.IdOwn
          ,Wo.OwnName
          ,Wo.IdParameter
          ,Wo.IdModule
          ,m.Name ModuleName
          ,Wo.ParameterCode
          ,Wo.Description
          ,Wo.ParameterValue
          ,Wo.Type
          ,Wo.MinValue
          ,Wo.MaxValue
          ,Wo.DefaultValue
          ,Wo.AllowEdit
          ,Wo.AllowDisplay
          ,Wo.Scope
          ,Wo.DateCreated
          ,Wo.UserCreated
          ,Wo.DateModified
          ,Wo.UserModified
          FROM v_Cfg_WmsLpnParamByOwn Wo
          INNER JOIN CfgModule m ON Wo.IdModule = m.IdModule
          WHERE IdOwn = @IdOwn
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
        <filters>
          <filter name="Scope" type="textEqual">Scope</filter>
          <filter name="Name" type="textLike">ParameterCode</filter>
          <filter name="Description" type="textLike">Description</filter>
        </filters>
      </query>

      <query code="CfgParameterWarehouseLPN_FindAll">
        <sql>
          SELECT
          V.IdOwn
          ,V.OwnName
          ,V.IdWhs
          ,V.WhsName
          ,V.IdParameter
          ,V.ParameterCode
          ,V.Description
          ,V.ParameterValue
          ,V.Type
          ,V.MinValue
          ,V.MaxValue
          ,V.DefaultValue
          ,V.AllowEdit
          ,V.AllowDisplay
          ,V.IdModule
          ,m.Name ModuleName
          ,V.Scope
          ,V.DateCreated
          ,V.UserCreated
          ,V.DateModified
          ,V.UserModified
          FROM v_Cfg_WmsLpnParamByOwnWhs V
          INNER JOIN CfgModule m ON V.IdModule = m.IdModule
          WHERE IdOwn = @IdOwn
          AND IdWhs = @IdWhs
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
        <filters>
          <filter name="Scope" type="textEqual">Scope</filter>
          <filter name="Name" type="textLike">ParameterCode</filter>
          <filter name="Description" type="textLike">Description</filter>
        </filters>
      </query>

      <query code="CfgParameter_InsertParamOwn">
        <sql>
          DELETE FROM OwnerParameter
          WHERE IdParameter = @IdParameter
          AND IdOwn = @IdOwn;

          INSERT INTO OwnerParameter
          (IdParameter
          ,IdOwn
          ,ParameterValue
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdParameter
          ,@IdOwn
          ,@ParameterValue
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">ParameterValue</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="CfgParameter_InsertParamOwnWhs">
        <sql>
          DELETE FROM WarehouseParameter
          WHERE IdParameter = @IdParameter
          AND IdOwn = @IdOwn
          AND IdWhs = @IdWhs;

          INSERT INTO WarehouseParameter
          (IdParameter
          ,IdOwn
          ,IdWhs
          ,ParameterValue
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdParameter
          ,@IdOwn
          ,@IdWhs
          ,@ParameterValue
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">ParameterValue</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <!--end Region LPNs parameters-->

      <!--Region Location parameters-->
      <query code="CfgParamLocationCompany_FindAll">
        <sql>
          SELECT IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,IdModule
          ,Scope
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM v_Cfg_WmsLocParamByCmp cp
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textLike">cp.ParameterCode</filter>
          <filter name="Description" type="textLike">cp.Description</filter>
        </filters>
      </query>


      <query code="GetParamLocByWhs">
        <sql>
          SELECT IdOwn
          ,Ownname
          ,IdWhs
          ,WhsName
          ,IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,IdModule
          ,Scope
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM v_Cfg_WmsLocParamByWhs
          WHERE IdWhs = @IdWhs

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>
      <!--end Region Locations parameters-->


      <!--Region Documents Parameters-->
      <query code="CfgParamDocCompany_FindAll">
        <sql>
          SELECT V.IdParameter
          ,V.ParameterCode
          ,V.Description
          ,V.ParameterValue
          ,V.Type
          ,V.MinValue
          ,V.MaxValue
          ,V.DefaultValue
          ,V.AllowEdit
          ,V.AllowDisplay
          ,V.IdModule
          ,M.Name AS ModuleName
          ,V.Scope
          ,V.DateCreated
          ,V.UserCreated
          ,V.DateModified
          ,V.UserModified
          FROM v_Cfg_WmsDocParamByCmp V
          INNER JOIN CfgModule M ON V.IdModule = M.IdModule
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textLike">cp.ParameterCode</filter>
          <filter name="Description" type="textLike">cp.Description</filter>
        </filters>
      </query>

      <query code="CfgParameterOwnerDoc_FindAll">
        <sql>
          SELECT     Wo.IdOwn
          ,Wo.OwnName
          ,Wo.IdParameter
          ,Wo.IdModule
          ,m.Name AS ModuleName
          ,Wo.ParameterCode
          ,Wo.Description
          ,Wo.ParameterValue
          ,Wo.Type
          ,Wo.MinValue
          ,Wo.MaxValue
          ,Wo.DefaultValue
          ,Wo.AllowEdit
          ,Wo.AllowDisplay
          ,Wo.Scope
          ,Wo.DateCreated
          ,Wo.UserCreated
          ,Wo.DateModified
          ,Wo.UserModified
          FROM v_Cfg_WmsDocParamByOwn Wo
          INNER JOIN CfgModule m ON Wo.IdModule = m.IdModule
          WHERE IdOwn = @IdOwn
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
        <filters>
          <filter name="Scope" type="textEqual">Scope</filter>
          <filter name="Name" type="textLike">ParameterCode</filter>
          <filter name="Description" type="textLike">Description</filter>
        </filters>
      </query>

      <query code="CfgParameterWarehouseDoc_FindAll">
        <sql>
          SELECT
          V.IdOwn
          ,V.OwnName
          ,V.IdWhs
          ,V.WhsName
          ,V.IdParameter
          ,V.ParameterCode
          ,V.Description
          ,V.ParameterValue
          ,V.Type
          ,V.MinValue
          ,V.MaxValue
          ,V.DefaultValue
          ,V.AllowEdit
          ,V.AllowDisplay
          ,V.IdModule
          ,m.Name AS ModuleName
          ,V.Scope
          ,V.DateCreated
          ,V.UserCreated
          ,V.DateModified
          ,V.UserModified
          FROM v_Cfg_WmsDocParamByOwnWhs V
          INNER JOIN CfgModule m ON V.IdModule = m.IdModule
          WHERE IdOwn = @IdOwn
          AND IdWhs = @IdWhs
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
        <filters>
          <filter name="Scope" type="textEqual">Scope</filter>
          <filter name="Name" type="textLike">ParameterCode</filter>
          <filter name="Description" type="textLike">Description</filter>
        </filters>
      </query>    
  
      <!--End Region Documents Parameters-->
  

      <query code="CfgParameter_UpdateParameterValue">
        <sql>
          UPDATE CompanyParameter
          SET  ParameterValue = @ParameterValue
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE ParameterCode = @Code
        </sql>
        <parameters>
          <parameter type="String">Code</parameter>
          <parameter type="String">ParameterValue</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>

        </parameters>
      </query>

      <query code="CfgParameter_GetScopes">
        <sql>
          SELECT Distinct Scope
          FROM CompanyParameter
          Where IdModule = 1
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="CfgParameter_GetByParameterCode">
        <sql>
          SELECT
          IdParameter,
          ParameterCode,
          Description,
          ParameterValue,
          Type,
          MinValue,
          MaxValue,
          DefaultValue,
          AllowEdit,
          AllowDisplay,
          Scope
          FROM CompanyParameter
          WHERE ParameterCode = @ParameterCode
        </sql>
        <parameters>
          <parameter type="String">ParameterCode</parameter>
        </parameters>
      </query>

      <query code="ParameterHistory_Insert">
        <sql>
          INSERT INTO ParameterHistory
          (IdParameterHistory
          ,ChangeDate
          ,ChangeUser
          ,IdOwn
          ,IdWhs
          ,IdLocation
          ,IdItem
          ,ParameterCode
          ,ParamValueBefore
          ,ParamValueAfter)
          VALUES
          (@IdParameter
          ,@ChangeDate
          ,@ChangeUser
          ,@IdOwn
          ,@IdWhs
          ,@IdLocation
          ,@IdItem
          ,@ParameterCode
          ,@ParamValueBefore
          ,@ParamValueAfter)
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
          <parameter type="DateTime">ChangeDate</parameter>
          <parameter type="String">ChangeUser</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">IdLocation</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="String">ParameterCode</parameter>
          <parameter type="String">ParamValueBefore</parameter>
          <parameter type="String">ParamValueAfter</parameter>
        </parameters>
      </query>



      <!-- Company Parameters section end-->

      <!-- OutboundType section begin-->
      <query code="OutboundType_FindAll">
        <sql>
          SELECT IdOutboundType
          ,OutboudTypeCode
          ,OutboundTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM OutboundType
          WHERE Status = 1
          @SQLPart
          ORDER BY IdOutboundType
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="OutboundType" type="numericIn">IdOutboundType</filter>
        </filters>

      </query>

      <query code="OutboundType_GetByCode">
        <sql>
          SELECT IdOutboundType
          ,OutboudTypeCode
          ,OutboundTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM OutboundType
          WHERE OutboudTypeCode = @outboundTypeCode
        </sql>
        <parameters>
          <parameter type="String">outboundTypeCode</parameter>
        </parameters>
      </query>

      <query code="OutboundType_GetById">
        <sql>
          SELECT IdOutboundType
          ,OutboudTypeCode
          ,OutboundTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM OutboundType
          WHERE IdOutboundType = @IdOutboundType
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundType</parameter>
        </parameters>
      </query>

      <!-- OutboundType section End-->

      <!-- STOCK section  -->

    <query code="Stock_GetByAnyParameter">
      <sql>
        SELECT
        S.StockId,
        S.IdWhs,
        S.IdOwn,
        S.IdLocCode,
        S.IdItem,
        I.ShortItemName,
        I.ItemCode,
        I.Weight,
        I.Description,
        I.Status,
        S.IdCtgItem,
        CI.CtgCode,
        S.ItemQty,
        S.TotalWeight,
        S.TotalVolumen,
        S.Status,
        S.FifoDate,
        S.ExpirationDate,
        S.FabricationDate,
        S.LotNumber,
        S.IdLpnCode,
        S.LpnTypeCode,
        S.IdLpnCodeContainer,
        S.LpnTypeCodeContainer,
        S.Price,
        S.IdReceipt,
        S.IdInboundOrder,
        S.InboundLineNumber,
        S.IdOutboundOrder,
        S.OutboundLineNumber,
        S.SealNumber,
        S.ReasonCode,
        S.HoldCode,
        L.IdWhs,
        L.LocCode,
        L.Status,
        L.LocTypeCode,
        L.RowLoc,
        L.ColumnLoc,
        L.LevelLoc,
        L.Aisle,
        L.Description,
        L.SharedItem,
        L.OnlyLPN,
        L.PickingFlow,
        L.PutawayFlow,
        L.CapacityLPN,
        L.CapacityUnit,
        L.Length,
        L.Width,
        L.Height,
        L.Volume,
        L.Weight,
        LP.IdLpnCode,
        LP.FifoDate,
        LP.IdLpnType,
        LP.Status,
        LP.IsClosed,
        LT.LpnTypeCode,
        LT.LpnTypeName,
        LT.Tare,
        LT.Volume,
        LT.Length,
        LT.Width,
        LT.Height,
        LT.NextAvailableNumber,
        LT.WeightCapacity,
        LT.VolumeCapacity
        FROM Stock S INNER JOIN
        Item I ON S.IdItem = I.IdItem INNER JOIN
        Location L ON L.IdLocCode = S.IdLocCode LEFT JOIN
        LPN LP ON LP.IdLpnCode = S.IdLpnCode LEFT JOIN
        LPNType LT ON LP.IdLpnType = LT.IdLpnType LEFT JOIN
        CategoryItem CI ON CI.IdCtgItem = S.IdCtgItem
        WHERE 1=1
        @SQLPart
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="IdStock" type="numericEqual">S.StockId</filter>
        <filter name="WhId" type="numericEqual">S.IdWhs</filter>
        <filter name="IdOwn" type="numericEqual">S.IdOwn</filter>
        <filter name="IdLocCode" type="textEqual">S.IdLocCode</filter>
        <filter name="IdLpnCode" type="textEqual">S.IdLpnCode</filter>
        <filter name="IdItem" type="numericEqual">S.IdItem</filter>
        <filter name="Lote" type="textEqual">S.LotNumber</filter>
        <filter name="IdCategory" type="numericEqual">S.IdCtgItem</filter>
        <filter name="ExpirationDate" type="textEqual">S.ExpirationDate</filter>
        <filter name="FabricationDate" type="textEqual">S.FabricationDate</filter>
        <filter name="FifoDate" type="textEqual">S.FifoDate</filter>
        <filter name="IdOutboundOrder" type="numericEqual">S.IdOutboundOrder</filter>
        <filter name="IdInboundOrder" type="numericEqual">S.IdInboundOrder</filter>
      </filters>
      <sub-querys>
        <sub-query code="OrderByStockIdDESC">
          <sql>
            ORDER BY StockId DESC
          </sql>
          <parameters>
          </parameters>
        </sub-query>
        <sub-query code="OrderByIdLpnCode">
          <sql>
            ORDER BY S.IdLpnCode
          </sql>
          <parameters>
          </parameters>
        </sub-query>
        <sub-query code="StockLpnChildByLpnParent">
          <sql>
            AND S.IdLpnCode IN (SELECT IdLpnCode FROM LPN WHERE LpnParent = @IdLpnParent)
            ORDER BY S.IdLpnCode
          </sql>
          <parameters>
            <parameter type="String">IdLpnParent</parameter>
          </parameters>
        </sub-query>
        <sub-query code="IdOutboundOrderIsNotNULL">
          <sql>
            AND S.IdOutboundOrder IS NOT NULL
          </sql>
          <parameters>
          </parameters>
        </sub-query>
        <sub-query code="IdInboundOrderIsNotNULL">
          <sql>
            AND S.IdInboundOrder IS NOT NULL
          </sql>
          <parameters>
          </parameters>
        </sub-query>
        <sub-query code="GreaterThanStockId">
          <sql>
            AND S.StockId > @stockId
          </sql>
          <parameters>
            <parameter type="Int">stockId</parameter>
          </parameters>
        </sub-query>
        <sub-query code="LessThanStockIdOrderByStockIdDESC">
          <sql>
            AND S.StockId &lt; @stockId
            ORDER BY S.StockId DESC
          </sql>
          <parameters>
            <parameter type="Int">stockId</parameter>
          </parameters>
        </sub-query>
        <sub-query code="NoTaskPending">
          <sql>
            AND S.IdLpnCode NOT IN(SELECT TD.IdLpnSourceProposal
            FROM TaskDetail TD
            WHERE TD.IsComplete = 0
            AND TD.IdLpnSourceProposal IS NOT NULL
            AND TD.Idwhs = S.Idwhs)
            AND L.IdWhs = S.Idwhs
            AND S.HoldCode IS NULL
          </sql>
          <parameters>
          </parameters>
        </sub-query>
        <sub-query code="ItemLessFifoInPUT">
          <sql>
            AND L.LocTypeCode = 'PUT'
            AND S.HoldCode IS NULL
            ORDER BY S.FifoDate ASC
          </sql>
          <parameters>
          </parameters>
        </sub-query>
        <sub-query code="ItemGreaterFifoInPUT">
          <sql>
            AND L.LocTypeCode = 'PUT'
            AND S.HoldCode IS NULL
            ORDER BY S.FifoDate DESC
          </sql>
          <parameters>
          </parameters>
        </sub-query>
        <sub-query code="ItemLessFefoInPUT">
          <sql>
            AND L.LocTypeCode = 'PUT'
            AND S.HoldCode IS NULL
            ORDER BY S.ExpirationDate ASC
          </sql>
          <parameters>
          </parameters>
        </sub-query>
        <sub-query code="LocAndItemGreaterLifo">
          <sql>
            AND S.HoldCode IS NULL
            ORDER BY S.FifoDate DESC
          </sql>
          <parameters>
          </parameters>
        </sub-query>
        <sub-query code="LocAndItemLessFifo">
          <sql>
            AND S.HoldCode IS NULL
            ORDER BY S.FifoDate ASC
          </sql>
          <parameters>
          </parameters>
        </sub-query>
        <sub-query code="LocAndItemLessFefo">
          <sql>
            AND S.HoldCode IS NULL
            ORDER BY S.ExpirationDate ASC
          </sql>
          <parameters>
          </parameters>
        </sub-query>
        <sub-query code="DiffTypeLocation">
          <sql>
            AND L.LocTypeCode != @locTypeCode
          </sql>
          <parameters>
            <parameter type="String">locTypeCode</parameter>
          </parameters>
        </sub-query>
        <sub-query code="TypeLocation">
          <sql>
            AND L.LocTypeCode = @locTypeCode
          </sql>
          <parameters>
            <parameter type="String">locTypeCode</parameter>
          </parameters>
        </sub-query>
        <sub-query code="ListTypeLocation">
          <sql>
            AND L.LocTypeCode @locTypeCodeList
          </sql>
          <parameters>
            <parameter type="StringIn">locTypeCodeList</parameter>
          </parameters>
        </sub-query>
        <sub-query code="LpnParent">
          <sql>
            AND LP.LpnParent = @lpnParent
          </sql>
          <parameters>
            <parameter type="String">lpnParent</parameter>
          </parameters>
        </sub-query>
        <sub-query code="HoldAndReasonNullOrderByIdLpnCode">
          <sql>
            AND S.HoldCode IS NULL AND S.ReasonCode IS NULL ORDER BY S.IdLpnCode
          </sql>
          <parameters>
          </parameters>
        </sub-query>
        <sub-query code="HoldAndReasonNull">
          <sql>
            AND S.HoldCode IS NULL AND S.ReasonCode IS NULL
          </sql>
          <parameters>
          </parameters>
        </sub-query>
        <sub-query code="IdCtgItemIsNull">
          <sql>
            AND S.IdCtgItem IS NULL
          </sql>
          <parameters>
          </parameters>
        </sub-query>
        <sub-query code="ReasonCodeIsNotNULL">
          <sql>
            AND S.ReasonCode IS NOT NULL
          </sql>
          <parameters>
          </parameters>
        </sub-query>
        <sub-query code="LocPICKAndPUTUseLPNStockAvailable">
          <sql>
            AND L.OnlyLPN = 1
            AND L.LocTypeCode IN('PICK','PUT')
            AND S.HoldCode IS NULL
            AND L.HoldCode IS NULL
          </sql>
          <parameters>
          </parameters>
        </sub-query>
        <sub-query code="LocPUTUseLPNStockAvailable">
          <sql>
            AND L.OnlyLPN = 1
            AND L.LocTypeCode IN('PUT')
            AND S.HoldCode IS NULL
            AND L.HoldCode IS NULL
          </sql>
          <parameters>
          </parameters>
        </sub-query>
        <sub-query code="TaskPendingforOrdersByStock">
          <sql>
            AND EXISTS(SELECT IdTask
            FROM Task T
            WHERE T.IdWhs = S.IdWhs
            AND T.IdOwn = S.IdOwn
            AND T.IdDocumentBound = S.IdOutboundOrder
            AND T.IsComplete = 0)
          </sql>
          <parameters>
          </parameters>
        </sub-query>
        <sub-query code="LPNNotPackaging">
          <sql>
            AND EXISTS (SELECT T.IdTask
            FROM Task T INNER JOIN
            TaskDetail TD ON T.IdTask = TD.IdTask
            WHERE T.IsComplete = 0
            AND T.IdDocumentBound = @idOutbound
            AND T.TaskTypeCode = 'EMPAQ'
            AND TD.IsComplete = 0
            AND TD.IdLpnSourceProposal = S.IdLpnCode)
            ORDER BY S.IdLpnCode
          </sql>
          <parameters>
            <parameter type="Int">idOutbound</parameter>
          </parameters>
        </sub-query>
        <sub-query code="TaskPendingforWavesByStock">
          <sql>
            AND EXISTS(SELECT IdTask
            FROM Task T
            WHERE T.IdWhs = S.IdWhs
            AND T.IdOwn = S.IdOwn
            AND T.TaskTypeCode = 'SORT'
            AND T.IdDocumentBound = S.IdOutboundOrder
            AND T.IsComplete = 0)
          </sql>
          <parameters>
          </parameters>
        </sub-query>
      </sub-querys>
    </query>
  
      <query code="Stock_GetStockReplenishment">
        <sql>
          SELECT ABS (IL.ReOrderQty - COALESCE(S.ItemQty,0) - COALESCE(TD.ProposalQty,0)) FieldName
          FROM (SELECT ItemLocation.IdItem, ItemLocation.IdLocCode, Location.IdWhs,
          ItemLocation.ReorderPoint, ItemLocation.ReorderQty , 'Location' AS LevelConfig
          FROM ItemLocation
          INNER JOIN Location
          ON ItemLocation.IdLocCode = Location.IdLocCode
          UNION
          SELECT Stock.IdItem, Stock.IdLocCode, Stock.IdWhs,
          Item.ReorderPoint, Item.ReorderQty, 'Item' AS LevelConfig
          FROM Stock
          INNER JOIN Item
          ON Item.IdItem = Stock.IdItem
          WHERE ISNULL(Item.ReOrderQty,0) > 0
          AND Stock.IdLocCode NOT IN (SELECT IdLocCode FROM ItemLocation WHERE IdItem = Stock.IdItem)) AS IL
          LEFT JOIN Stock S
          ON IL.IdItem = S.IdItem
          AND IL.IdLocCode = S.IdLocCode
          LEFT JOIN  TaskDetail TD
          ON TD.IdLocTargetProposal = IL.IdLocCode
          AND TD.IdItem = IL.IdItem
          AND TD.IsComplete = 0
          LEFT JOIN  Task T
          ON T.TaskTypeCode = 'REPL'
          AND T.IdTask = TD.IdTask
          AND T.IsComplete = 0
          WHERE IL.IdLocCode = @IdLocCode
          AND IL.IdItem = @IdItem
        </sql>
        <parameters>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="Int">IdItem</parameter>
        </parameters>
      </query>

      <query code="StockItemConsult_FindAll">
        <sql>
          SELECT
          whs.IdWhs
          ,whs.WhsCode
          ,whs.ShortWhsName
          ,whs.WhsName
          ,own.IdOwn
          ,own.OwnCode
          ,own.OwnName
          ,own.TradeName
          ,i.IdItem
          ,i.ItemCode
          ,i.LongItemName
          ,SUM(s.ItemQty) AS ItemQty
          FROM Stock s
          INNER JOIN item i on s.IdItem = i.IdItem
          INNER JOIN Owner own ON s.IdOwn = own.IdOwn
          INNER JOIN Warehouse whs ON s.IdWhs = whs.IdWhs
          INNER JOIN Location l ON s.idLocCode = l.idLocCode AND s.IdWhs = l.IdWhs
          @SQLPart
          GROUP BY whs.IdWhs, whs.WhsCode, whs.ShortWhsName, whs.WhsName,
          own.IdOwn, own.OwnCode, own.OwnName, own.TradeName, i.IdItem,
          i.ItemCode, i.LongItemName
          ORDER BY whs.WhsName, own.OwnName, i.LongItemName

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>

        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">whs.IdWhs</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Owner" type="numericEqual">own.IdOwn</filter>
          <filter name="TypeLocations" type="textIn">L.LocTypeCode</filter>
        </filters>
      </query>

      <query code="Serial_FindAll">
        <sql>
          SELECT S.IdSerial
          ,S.SerialNumber
          ,ST.IdWhs
          ,W.ShortWhsName
          ,W.WhsCode
          ,ST.IdOwn
          ,O.OwnCode
          ,O.OwnName
          ,O.TradeName
          ,ST.IdItem
          ,I.LongItemName
          ,I.ShortItemName
          ,I.ItemCode
          ,INO.InboundNumber
          ,S.IdInboundOrderLast
          ,S.IdReceiptLast
          ,OUT.OutboundNumber
          ,S.IdOutboundOrderLast
          ,S.IdDispatchLast
          ,ST.StockId
          ,ST.IdLpnCode
          ,ST.ItemQty
          ,S.IdTrackSerialType
          ,ST.IdLocCode
          ,ST.IdOutboundOrder
          ,ST.IdInboundOrder
          ,ST.IdReceipt
          FROM Stock ST
          LEFT JOIN Owner O ON ST.IdOwn = O.IdOwn
          LEFT JOIN Warehouse W ON ST.IdWhs = W.IdWhs
          LEFT JOIN Item I ON ST.IdItem = I.IdItem
          LEFT JOIN Serial S ON ST.StockId = S.IdStockLast 
          LEFT JOIN InboundOrder INO ON S.IdInboundOrderLast = INO.IdInboundOrder AND ST.IdOwn = INO.IdOwn AND ST.IdWhs = INO.IdWhs
          LEFT JOIN OutboundOrder OUT ON OUT.IdOutboundOrder = S.IdOutboundOrderLast AND OUT.IdOwn = ST.IdOwn AND ST.IdWhs = OUT.IdWhs

          @SQLPart

          ORDER BY w.ShortWhsName, o.OwnName, i.LongItemName;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>

        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>

        <filters>
          <filter name="Warehouse" type="numericIn">ST.IdWhs</filter>
          <filter name="Item" type="textLike">i.ItemCode</filter>
          <filter name="Owner" type="numericIn">ST.IdOwn</filter>
          <filter name="DocumentNbr" type="textLikeOr">INO.InboundNumber,OUT.OutboundNumber</filter>
          <filter name="Name" type="textLike">s.SerialNumber</filter>
          <filter name="Code" type="textLike">ST.IdLpnCode</filter>
        </filters>
      </query>


	<query code="Serial_FindAllAndSubQuery">
		<sql>
			SELECT S.IdSerial
			,S.SerialNumber
			,ST.IdWhs
			,W.ShortWhsName
			,W.WhsCode
			,ST.IdOwn
			,O.OwnCode
			,O.OwnName
			,O.TradeName
			,ST.IdItem
			,I.LongItemName
			,I.ShortItemName
			,I.ItemCode
			,INO.InboundNumber
			,S.IdInboundOrderLast
			,S.IdReceiptLast
			,OUT.OutboundNumber
			,S.IdOutboundOrderLast
			,S.IdDispatchLast
			,ST.StockId
			,ST.IdLpnCode
			,ST.ItemQty
			,S.IdTrackSerialType
			,ST.IdLocCode
			,ST.IdOutboundOrder
			,ST.IdInboundOrder
			,ST.IdReceipt
			FROM Stock ST
			LEFT JOIN Owner O ON ST.IdOwn = O.IdOwn
			LEFT JOIN Warehouse W ON ST.IdWhs = W.IdWhs
			LEFT JOIN Item I ON ST.IdItem = I.IdItem
			LEFT JOIN Serial S ON ST.StockId = S.IdStockLast
			LEFT JOIN InboundOrder INO ON S.IdInboundOrderLast = INO.IdInboundOrder AND ST.IdOwn = INO.IdOwn AND ST.IdWhs = INO.IdWhs
			LEFT JOIN OutboundOrder OUT ON OUT.IdOutboundOrder = S.IdOutboundOrderLast AND OUT.IdOwn = ST.IdOwn AND ST.IdWhs = OUT.IdWhs
			@SQLPart
		</sql>
		<parameters>
			<parameter type="String">queryName</parameter>
			<parameter type="SQLPart">@SQLPart</parameter>
		</parameters>
		<filters>
			<filter name="Warehouse" type="numericIn">ST.IdWhs</filter>
			<filter name="Item" type="textLike">i.ItemCode</filter>
			<filter name="Owner" type="numericIn">ST.IdOwn</filter>
			<filter name="DocumentNbr" type="textLikeOr">INO.InboundNumber,OUT.OutboundNumber</filter>
			<filter name="Name" type="textLike">s.SerialNumber</filter>
			<filter name="Code" type="textLike">ST.IdLpnCode</filter>
		</filters>
		<sub-querys>
			<sub-query code="LpnIsNull">
				<sql>
					AND ST.IdLpnCode Is NULL
				</sql>
				<parameters>
					<parameter type="String">CustomerCode</parameter>
				</parameters>
			</sub-query>
		</sub-querys>
	</query>


  <query code="Stock_FindAll">
        <sql>
          -- STOCK agrupado por WHS, OWN, ITEM y CATEGORY

          SELECT
          whs.IdWhs
          ,whs.WhsCode
          ,whs.ShortWhsName
          ,whs.WhsName
          ,s.FifoDate
          ,s.LotNumber AS Lot
          ,s.FabricationDate
          ,s.ExpirationDate
          ,s.IdLocCode
          ,s.IdLpnCode
          ,s.IdLpnCodeContainer
          ,s.LpnTypeCodeContainer
          --,(CASE WHEN INO.InboundNumber IS NOT NULL THEN INO.InboundNumber ELSE CASE WHEN OUT.OutboundNumber IS NOT NULL THEN OUT.OutboundNumber ELSE NULL END END) AS InboundNumber
          ,INO.InboundNumber
          ,OUT.OutboundNumber
          ,own.IdOwn
          ,own.OwnCode
          ,own.OwnName
          ,own.TradeName
          ,s.IdCtgItem
          ,ci.CtgCode
          ,ci.CtgName
          ,i.IdItem
          ,i.ItemCode
          ,i.LongItemName
          ,SUM(s.ItemQty) AS ItemQty
          ,SUM(s.TotalWeight) AS TotalWeight
          ,SUM(s.TotalVolumen) AS TotalVolumen
          ,RS.ReasonName HoldCode
          ,OType.OutboundTypeName
          ,(CASE
          WHEN UPPER(IU.UomName) = 'UNIDAD' THEN IU.UomName
          WHEN IU.UomName IS NULL THEN ''
           ELSE REPLACE(convert(varchar(30),SUM(ItemQty)/IU.ConversionFactor), '.000000', '') + ' ' + IU.UomName + 'X' + REPLACE(convert(varchar(30),IU.ConversionFactor), '.0000', '')
          END
          )  AS DefaultItemUom,
          COALESCE(S.SealNumber,LPN.SealNumber) AS SealNumber,
          S.GrpClass7,
          S.GrpClass8
          ,h.IdHng
          ,h.HngName
          FROM Stock s
          INNER JOIN item i on s.IdItem = i.IdItem
          INNER JOIN Owner own ON s.IdOwn = own.IdOwn
          INNER JOIN Warehouse whs ON s.IdWhs = whs.IdWhs
          INNER JOIN Location l ON s.idLocCode = l.idLocCode AND s.idWhs = l.idWhs
          INNER JOIN Hangar h on h.IdHng = l.IdHng AND l.IdWhs = h.IdWhs
          LEFT JOIN CategoryItem ci ON s.IdCtgItem = ci.IdCtgItem
          LEFT JOIN InboundOrder INO ON s.IdInboundOrder = INO.IdInboundOrder AND INO.IdWhs = s.IdWhs AND INO.IdOwn = s.IdOwn
          LEFT JOIN OutboundOrder OUT ON s.IdOutboundOrder = OUT.IdOutboundOrder AND OUT.IdWhs = s.IdWhs AND OUT.IdOwn = s.IdOwn
          LEFT JOIN OutboundType OType ON OUT.IdOutboundType = OType.IdOutboundType AND OType.Status = 1
          LEFT JOIN Reason RS ON s.HoldCode = RS.ReasonCode
          LEFT JOIN LPN ON s.IdLpnCode = LPN.IdLpnCode
          LEFT JOIN ItemUom IU ON IU.IdItem = i.IdItem AND IU.IdUomType = i.StackingSequence

          @SQLPart

          GROUP BY whs.IdWhs, whs.WhsCode, whs.ShortWhsName, INO.InboundNumber, OUT.OutboundNumber, OType.OutboundTypeName, s.FifoDate,
          whs.WhsName ,own.IdOwn, own.OwnCode, own.TradeName ,own.OwnName ,s.IdCtgItem, ci.CtgCode
          ,ci.CtgName ,i.IdItem ,i.ItemCode ,i.LongItemName, i.Status ,s.Status, RS.ReasonName,s.LotNumber ,s.FabricationDate,h.IdHng,h.HngName
          ,s.ExpirationDate, s.IdLpnCode, s.IdLpnCodeContainer,s.LpnTypeCodeContainer,COALESCE(S.SealNumber,LPN.SealNumber), S.GrpClass7, S.GrpClass8, s.IdLocCode, IU.UomName,IU.ConversionFactor
          ORDER BY whs.ShortWhsName, own.OwnName, s.IdLocCode, s.IdLpnCode ,INO.InboundNumber, OUT.OutboundNumber, i.LongItemName,s.LotNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>

        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>

        <filters>
          <filter name="Warehouse" type="numericIn">whs.IdWhs</filter>
          <filter name="DateRange" type="textBetween">s.FifoDate</filter>
          <filter name="Item" type="textLike">i.ItemCode</filter>
          <filter name="Owner" type="numericIn">own.IdOwn</filter>
          <filter name="DocumentNbr" type="textLikeOr">INO.InboundNumber,OUT.OutboundNumber</filter>
          <filter name="Location" type="textLike">s.idLocCode</filter>
          <filter name="LocationRange" type="textBetween">s.idLocCode</filter>
          <filter name="Hangar" type="numericIn">l.IdHng</filter>
          <filter name="LocationType" type="textIn">l.LocTypeCode</filter>
          <filter name="LocationRow" type="numericEqual">l.RowLoc</filter>
          <filter name="LocationColumn" type="numericEqual">l.ColumnLoc</filter>
          <filter name="LocationLevel" type="numericEqual">l.LevelLoc</filter>
          <filter name="LocationAisle" type="textEqual">l.Aisle</filter>
          <filter name="ExpirationDateRange" type="textBetween">s.ExpirationDate</filter>
          <filter name="FabricationDateRange" type="textBetween">s.FabricationDate</filter>
          <filter name="LotNumberRange" type="textBetween">s.LotNumber</filter>
          <filter name="GroupItem1" type="numericEqual">I.IdGrpItem1</filter>
          <filter name="GroupItem2" type="numericEqual">I.IdGrpItem2</filter>
          <filter name="GroupItem3" type="numericEqual">I.IdGrpItem3</filter>
          <filter name="GroupItem4" type="numericEqual">I.IdGrpItem4</filter>
          <filter name="DocumentType" type="numericIn">INO.IdInboundType</filter>
          <filter name="Vendor" type="numericIn">INO.IdVendor</filter>
          <filter name="OutboundType" type="numericIn">OUT.IdOutboundType</filter>
          <filter name="LpnCode" type="textLike">LPN.IdLpnCode</filter>
          <filter name="LpnParent" type="textLike">LPN.LpnParent</filter>
          <filter name="LpnSealNumber" type="textLike">LPN.SealNumber</filter>
          <filter name="LpnType" type="numericIn">LPN.IdLpnType</filter>
          <filter name="LpnIsParent" type="numericEqual">LPN.IsParent</filter>
          <filter name="LpnIsClosed" type="numericEqual">LPN.IsClosed</filter>          
          <filter name="LockedLocation" type="isNull">l.HoldCode</filter>
          <filter name="LockedStock" type="isNull">s.HoldCode</filter>
        </filters>
      </query>

      <query code="Stock_FindAllLocation">
        <sql>
          -- STOCK agrupado por WHS, OWN, ITEM, CATEGORY, ZONE, LOCTYPE, LOCATION y HOLDCODE
          SELECT
          whs.IdWhs
          ,whs.WhsCode
          ,whs.ShortWhsName
          ,whs.WhsName
          ,s.FifoDate
          ,s.ExpirationDate
          ,s.FabricationDate
          --,(CASE WHEN INO.InboundNumber IS NOT NULL THEN INO.InboundNumber ELSE CASE WHEN OUT.OutboundNumber IS NOT NULL THEN OUT.OutboundNumber ELSE NULL END END) AS InboundNumber
          ,INO.InboundNumber
          ,OUT.OutboundNumber
          ,own.IdOwn
          ,own.OwnCode
          ,own.TradeName
          ,own.OwnName
          ,own.TradeName
          ,s.IdCtgItem
          ,ci.CtgCode
          ,ci.CtgName
          ,i.IdItem
          ,i.ItemCode
          ,i.Description
          ,i.LongItemName
          ,SUM(s.ItemQty) AS ItemQty
          ,s.LotNumber AS Lot
          ,l.LocTypeCode
          ,l.idLocCode
          ,RS.ReasonName HoldCode
          ,s.IdLpnCode
          ,RL.ReasonName LocHoldName
          ,OType.OutboundTypeName
          ,h.IdHng
          ,h.HngName
          ,(CASE
          WHEN UPPER(IU.UomName) = 'UNIDAD' THEN IU.UomName
          WHEN IU.UomName IS NULL THEN ''
          ELSE REPLACE(convert(varchar(30),SUM(ItemQty)/IU.ConversionFactor), '.000000', '') + ' ' + IU.UomName + 'X' + REPLACE(convert(varchar(30),IU.ConversionFactor), '.0000', '')
          END
          )  AS DefaultItemUom
          ,s.TotalWeight
          FROM Stock s
          INNER JOIN item i on s.IdItem = i.IdItem
          INNER JOIN Owner own ON s.IdOwn = own.IdOwn
          INNER JOIN Warehouse whs ON s.IdWhs = whs.IdWhs
          INNER JOIN location l on l.IdLocCode = s.IdLocCode AND l.IdWhs = s.IdWhs
          INNER JOIN Hangar h on h.IdHng = l.IdHng AND l.IdWhs = h.IdWhs
          LEFT JOIN CategoryItem ci ON s.IdCtgItem = ci.IdCtgItem
          LEFT JOIN InboundOrder INO ON s.IdInboundOrder = INO.IdInboundOrder AND INO.IdWhs = s.IdWhs AND INO.IdOwn = s.IdOwn
          LEFT JOIN OutboundOrder OUT ON s.IdOutboundOrder = OUT.IdOutboundOrder AND OUT.IdWhs = s.IdWhs AND OUT.IdOwn = s.IdOwn
          LEFT JOIN OutboundType OType ON OUT.IdOutboundType = OType.IdOutboundType AND OType.Status = 1
          LEFT JOIN Reason RL ON l.HoldCode = RL.ReasonCode
          LEFT JOIN Reason RS ON s.HoldCode = RS.ReasonCode
          LEFT JOIN LPN ON s.IdLpnCode = LPN.IdLpnCode
          LEFT JOIN ItemUom IU ON IU.IdItem = i.IdItem AND IU.IdUomType = i.StackingSequence
          @SQLPart
          GROUP BY whs.IdWhs, whs.WhsCode, whs.ShortWhsName, 	s.FifoDate, s.ExpirationDate  ,s.FabricationDate
          ,INO.InboundNumber, OUT.OutboundNumber, OType.OutboundTypeName, whs.WhsName ,own.IdOwn, own.OwnCode, own.TradeName ,own.OwnName ,l.idLocCode ,l.Status ,l.LocTypeCode
          ,s.IdCtgItem, ci.CtgCode, ci.CtgName ,i.IdItem ,i.ItemCode, s.LotNumber ,i.Description, i.LongItemName, RS.ReasonName, s.IdLpnCode
          , RL.ReasonName ,IU.UomName, IU.ConversionFactor,h.IdHng,h.HngName,s.TotalWeight
          ORDER BY whs.ShortWhsName, own.OwnName, l.idLocCode, s.IdLpnCode, i.ItemCode, s.FifoDate;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">whs.IdWhs</filter>
          <filter name="DateRange" type="textBetween">s.FifoDate</filter>
          <filter name="Item" type="textLike">i.ItemCode</filter>
          <filter name="Owner" type="numericIn">own.IdOwn</filter>
          <filter name="DocumentNbr" type="textLikeOr">INO.InboundNumber,OUT.OutboundNumber</filter>
          <filter name="Location" type="textLike">s.idLocCode</filter>
          <filter name="Hangar" type="numericIn">l.IdHng</filter>
          <filter name="LocationType" type="textIn">l.LocTypeCode</filter>
          <filter name="LocationRange" type="textBetween">s.idLocCode</filter>
          <filter name="LocationRow" type="numericEqual">l.RowLoc</filter>
          <filter name="LocationColumn" type="numericEqual">l.ColumnLoc</filter>
          <filter name="LocationLevel" type="numericEqual">l.LevelLoc</filter>
          <filter name="LocationAisle" type="textEqual">l.Aisle</filter>
          <filter name="ExpirationDateRange" type="textBetween">s.ExpirationDate</filter>
          <filter name="FabricationDateRange" type="textBetween">s.FabricationDate</filter>
          <filter name="LotNumberRange" type="textBetween">s.LotNumber</filter>
          <filter name="GroupItem1" type="numericEqual">I.IdGrpItem1</filter>
          <filter name="GroupItem2" type="numericEqual">I.IdGrpItem2</filter>
          <filter name="GroupItem3" type="numericEqual">I.IdGrpItem3</filter>
          <filter name="GroupItem4" type="numericEqual">I.IdGrpItem4</filter>
          <filter name="DocumentType" type="numericIn">INO.IdInboundType</filter>
          <filter name="Vendor" type="numericIn">INO.IdVendor</filter>
          <filter name="Carrier" type="numericIn">r.IdCarrier</filter>
          <filter name="Driver" type="numericIn">D.IdDriver</filter>
          <filter name="OutboundType" type="numericIn">OUT.IdOutboundType</filter>
          <filter name="LpnCode" type="textLike">LPN.IdLpnCode</filter>
          <filter name="LpnParent" type="textLike">LPN.LpnParent</filter>
          <filter name="LpnSealNumber" type="textLike">LPN.SealNumber</filter>
          <filter name="LpnType" type="numericIn">LPN.IdLpnType</filter>
          <filter name="LpnIsParent" type="numericEqual">LPN.IsParent</filter>
          <filter name="LpnIsClosed" type="numericEqual">LPN.IsClosed</filter>
          <filter name="LockedStock" type="isNull">s.HoldCode</filter>    
          <filter name="LockedLocation" type="isNull">l.HoldCode</filter>
        </filters>
      </query>

      <query code="GetStockById">
        <sql>
          SELECT
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode
          ,S.IdInboundOrder
          ,S.InboundLineNumber
          ,S.IdOutboundOrder
          ,S.OutboundLineNumber
          ,I.IdItem
          ,I.ItemCode
          ,I.Weight
          ,I.Description
          ,I.Status
          ,L.IdWhs
          ,L.LocCode
          ,L.Status
          ,L.LocTypeCode
          ,LP.IdLpnCode
          ,LP.FifoDate
          ,LP.IdLpnType
          ,LP.Status
          FROM Stock S
          INNER JOIN Item I ON S.IdItem = I.IdItem
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          LEFT JOIN LPN LP ON S.IdLpnCode = LP.IdLpnCode
          LEFT JOIN LPNType LPT ON LP.IdLpnType = LPT.IdLpnType
          WHERE S.StockId = @stockId
        </sql>
          <parameters>
            <parameter type="Int">stockId</parameter>
          </parameters>          
      </query>


      <query code="GetStockByFilters">
        <sql>
          SELECT
          S.StockId
          ,S.IdWhs
          ,S.IdOwn
          ,S.IdLocCode
          ,S.IdItem
          ,S.IdCtgItem
          ,S.ItemQty
          ,S.TotalWeight
          ,S.TotalVolumen
          ,S.Status
          ,S.FifoDate
          ,S.ExpirationDate
          ,S.FabricationDate
          ,S.LotNumber
          ,S.IdLpnCode
          ,S.LpnTypeCode
          ,S.IdLpnCodeContainer
          ,S.LpnTypeCodeContainer
          ,S.Price
          ,S.IdReceipt
          ,S.IdInboundOrder
          ,S.InboundLineNumber
          ,S.IdOutboundOrder
          ,S.OutboundLineNumber
          ,S.SealNumber
          ,S.ReasonCode
          ,S.HoldCode
          ,RS.ReasonName
          ,S.IdInboundOrder
          ,S.InboundLineNumber
          ,S.IdOutboundOrder
          ,S.OutboundLineNumber
          ,I.IdItem
          ,I.ItemCode
          ,I.Weight
          ,I.Description
          ,I.Status
          ,I.LongItemName
          ,CI.CtgCode
          ,CI.CtgName
          ,L.IdWhs
          ,L.LocCode
          ,L.Status
          ,L.LocTypeCode
          ,LP.IdLpnCode
          ,LP.FifoDate
          ,LP.IdLpnType
          ,LP.Status
          FROM Stock S
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          INNER JOIN Item I ON S.IdItem = I.IdItem
          LEFT JOIN LPN LP ON S.IdLpnCode = LP.IdLpnCode
          LEFT JOIN LPNType LPT ON LP.IdLpnType = LPT.IdLpnType
          LEFT JOIN CategoryItem CI ON S.IdCtgItem = CI.IdCtgItem
          LEFT JOIN Reason RS ON S.HoldCode = RS.ReasonCode
          @SQLPart;
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>

        <filters>
          <filter name="Warehouse" type="numericEqual">s.IdWhs</filter>
          <filter name="Item" type="numericEqual">i.IdItem</filter>
          <filter name="Owner" type="numericEqual">s.IdOwn</filter>
          <filter name="Location" type="textEqual">s.IdLocCode</filter>
          <filter name="LpnSource" type="textEqual">s.IdLpnCode</filter>
          <filter name="DocumentNbr" type="numericIn">s.IdOutboundOrder</filter>
          <filter name="LocationType" type="textEqual">l.LocTypeCode</filter>
        </filters>
      </query>

  <query code="GetItemSumStockByWhsOwnLpns">
    <sql>
      SELECT S.IdWhs
      ,S.IdOwn
      ,S.IdItem
      ,SUM(S.ItemQty)ItemQty
      FROM Stock S
      WHERE 1 =1
      AND IdWhs = @IdWhs
      AND IdOwn = @IdOwn
      AND IdLpnCode IN (@SQLPart)
      GROUP BY S.IdWhs, S.IdOwn, S.IdItem
      ORDER BY S.IdWhs, S.IdOwn, S.IdItem
    </sql>
    <parameters>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>

  </query>
  
      <query code="GetStockWithHoldCodeByFilters">
        <sql>
          SELECT  StockId
          ,IdWhs
          ,WhsCode
          ,ShortWhsName
          ,WhsName
          ,IdOwn
          ,OwnCode
          ,OwnName
          ,TradeName
          ,IdLocCode
          ,IdItem
          ,ItemCode
          ,IdCtgItem
          ,ItemQty
          ,TotalWeight
          ,TotalVolumen
          ,Status
          ,FifoDate
          ,ExpirationDate
          ,FabricationDate
          ,LotNumber
          ,IdLpnCode
          ,LpnTypeCode
          ,IdLpnCodeContainer
          ,LpnTypeCodeContainer
          ,Price
          ,IdReceipt
          ,IdInboundOrder
          ,InboundLineNumber
          ,IdOutboundOrder
          ,OutboundLineNumber
          ,SealNumber
          ,ReasonCode
          ,HoldCode
          ,HoldName
          ,Weight
          ,Description
          ,StatusItem
          ,CtgCode
          ,CtgName
          ,LocCode
          ,StatusLocation
          ,LocTypeCode
          ,IdLpnType
          , StatusLP
          FROM
          (SELECT
          S.StockId
          ,S.IdWhs
          ,W.WhsCode
          ,W.ShortWhsName
          ,W.WhsName
          ,S.IdOwn
          ,O.OwnCode
          ,O.OwnName
          ,O.TradeName
          ,S.IdLocCode
          ,S.IdItem
          ,S.IdCtgItem
          ,S.ItemQty
          ,S.TotalWeight
          ,S.TotalVolumen
          ,S.Status
          ,S.FifoDate
          ,S.ExpirationDate
          ,S.FabricationDate
          ,S.LotNumber
          ,S.IdLpnCode
          ,S.LpnTypeCode
          ,S.IdLpnCodeContainer
          ,S.LpnTypeCodeContainer
          ,S.Price
          ,S.IdReceipt
          ,S.IdInboundOrder
          ,S.InboundLineNumber
          ,S.IdOutboundOrder
          ,S.OutboundLineNumber
          ,S.SealNumber
          ,S.ReasonCode
          ,ISNULL(S.HoldCode,'-1')AS HoldCode
          ,RS.ReasonName AS HoldName
          --,S.IdInboundOrder
          --,S.InboundLineNumber
          --,S.IdOutboundOrder
          --,S.OutboundLineNumber
          --,I.IdItem
          ,I.ItemCode
          ,I.Weight
          ,I.Description
          ,I.Status AS StatusItem
          ,CI.CtgCode
          ,CI.CtgName
          --,L.IdWhs
          ,L.LocCode
          ,L.Status AS StatusLocation
          ,L.LocTypeCode
          --,LP.IdLpnCode
          --,LP.FifoDate
          ,LP.IdLpnType
          ,LP.Status AS StatusLP
          FROM Stock S
          INNER JOIN Owner O ON S.IdOwn = O.IdOwn
          INNER JOIN Warehouse W ON S.IdWhs = W.IdWhs
          INNER JOIN LPN LP ON S.IdLpnCode = LP.IdLpnCode
          INNER JOIN Item I ON S.IdItem = I.IdItem
          INNER JOIN LPNType LPT ON LP.IdLpnType = LPT.IdLpnType
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          LEFT JOIN CategoryItem CI ON S.IdCtgItem = CI.IdCtgItem
          LEFT JOIN Reason RS ON S.HoldCode = RS.ReasonCode
          WHERE L.LocTypeCode IN ('PUT','STG'))VW
          WHERE 1 = 1

          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>          
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">VW.IdWhs</filter>
          <filter name="Item" type="textLike">VW.ItemCode</filter>
          <filter name="Owner" type="numericIn">VW.IdOwn</filter>
          <filter name="Location" type="textEqual">VW.IdLocCode</filter>
          <filter name="Code" type="textLike">VW.IdLpnCode</filter>
          <filter name="DocumentNbr" type="numericIn">VW.IdOutboundOrder</filter>
          <filter name="Name" type="textLike">VW.LotNumber</filter>
          <filter name="Reason" type="textIn">VW.HoldCode</filter>
        </filters>
      </query>
  
    <query code="Stock_CalculateQtySimulated">
      <sql>
        SELECT SUM(QtySim) AS ItemQty
	        FROM
        (
             SELECT				   
								   COALESCE(SUM(tds.RealQty), 0) AS QtySim
							FROM TaskDetailSimulation tds
							JOIN TaskSimulation ts
								ON ts.IdTask = tds.IdTask
							JOIN OutboundOrder oo
								ON oo.IdOutboundOrder = ts.IdDocumentBound
							 AND oo.IdOwn =  ts.IdOwn
							 AND oo.IdWhs = ts.IdWhs
							JOIN Customer c
							  ON c.CustomerCode = oo.CustomerCode
							 AND c.IdOwn = oo.IdOwn
						 WHERE tds.IdItem = @idItem
							 AND oo.IdOwn = @idOwn
							 AND oo.IdWhs = @idWhs
							 AND c.CustomerCode = @customerCode
					GROUP BY oo.IdOwn, 
								   oo.IdWhs, 
								   tds.IdItem, 
								   c.IdCustomer, 
								   c.CustomerCode
        
        UNION ALL
        
          SELECT 
                COALESCE(SUM(
		               CASE 
			                  WHEN SQ.QtyReserve = 0 
					                   THEN sq.QtySim 
			                  WHEN SQ.QtyReserve &gt; 0 AND SQ.QtySim &gt; SQ.QtyReserve
					                   THEN sq.QtySim - sq.QtyReserve
			                  WHEN SQ.QtyReserve &gt; 0 AND SQ.QtySim &lt;= SQ.QtyReserve
					                   THEN 0 
		               END
	               ), 0) AS QtySim
            FROM (			
							            SELECT				   
								               c.IdCustomer,
								               c.CustomerCode,
								               COALESCE(SUM(tds.RealQty), 0) AS QtySim,
								               (
										            SELECT COALESCE(SUM(rs.QtyReserve), 0) AS QtyReserve
										              FROM ReserveStock rs
										             WHERE rs.IdOwn = oo.IdOwn
										               AND rs.IdWhs = oo.IdWhs
										               AND rs.IdCustomer = c.IdCustomer
										               AND rs.IdItem = tds.IdItem
 								               ) AS QtyReserve
							              FROM TaskDetailSimulation tds
							              JOIN TaskSimulation ts
								              ON ts.IdTask = tds.IdTask
							              JOIN OutboundOrder oo
								              ON oo.IdOutboundOrder = ts.IdDocumentBound
							               AND oo.IdOwn =  ts.IdOwn
							               AND oo.IdWhs = ts.IdWhs
							              JOIN Customer c
								              ON c.CustomerCode = oo.CustomerCode
							               AND c.IdOwn = oo.IdOwn
							             WHERE tds.IdItem = @idItem
							               AND oo.IdOwn = @idOwn
							               AND oo.IdWhs = @idWhs   
							               AND c.CustomerCode &lt;&gt; @customerCode
						            GROUP BY oo.IdOwn, 
								                 oo.IdWhs, 
								                 tds.IdItem, 
								                 c.IdCustomer, 
								                 c.CustomerCode

                 ) SQ
        ) T
      </sql>
      <parameters>
        <parameter type="Int">idOwn</parameter>
        <parameter type="Int">idWhs</parameter>
        <parameter type="Int">idItem</parameter>
        <parameter type="String">customerCode</parameter>
      </parameters>
    </query>

    <query code="Stock_GetTotalStockAvailableByItem">
      <sql>
        SELECT  
              S.IdItem,
					    (SUM(S.ItemQty) 
									    - (SELECT COALESCE(SUM(OLP.ItemQty),0)
										       FROM v_Other_LocationPicking AS OLP
										      WHERE S.IdItem = OLP.IdItem 
											  and S.IdWhs = OLP.IdWhs)

									    - @qtySim

									    - (SELECT COALESCE(SUM(OQRC.QtyReserve),0) AS QtyReserve
										       FROM v_Other_QtyReserveCustomer AS OQRC 
										      WHERE S.IdItem = OQRC.IdItem
										        AND S.IdWhs = OQRC.IdWhs
										        AND S.IdOwn = OQRC.IdOwn
										        AND OQRC.CustomerCode &lt;&gt; @customerCode)
        ) AS ItemQty
        FROM Stock s
        JOIN Location l
        ON s.IdLocCode = l.IdLocCode
        JOIN Item I
        ON I.IdItem = S.IdItem
        WHERE S.IdOwn = @idOwn
        AND S.IdWhs = @idWhs
        @SQLPart
        AND (L.HoldCode IS NULL OR L.HoldCode = 'LBUSY')
        AND S.HoldCode IS NULL
        AND L.LockInventory = 0
        AND L.Status = 1
        AND S.IdItem = @idItem
        GROUP BY S.IdOwn,
        S.IdWhs,
        S.IdItem
      </sql>
      <parameters>
        <parameter type="Int">idOwn</parameter>
        <parameter type="Int">idWhs</parameter>
        <parameter type="Int">idItem</parameter>
        <parameter type="String">customerCode</parameter>
        <parameter type="Decimal">qtySim</parameter>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="TypeLocations" type="textIn">L.LocTypeCode</filter>
      </filters>
    </query>
  
      <query code="InsertStock">
        <sql>
          INSERT INTO Stock
          (StockId,
          IdWhs,
          IdOwn,
          IdLocCode,
          IdItem,
          IdCtgItem,
          ItemQty,
          TotalWeight,
          TotalVolumen,
          Status,
          FifoDate,
          ExpirationDate,
          FabricationDate,
          LotNumber,
          IdLpnCode,
          LpnTypeCode,
          IdLpnCodeContainer,
          LpnTypeCodeContainer,
          Price,
          IdReceipt,
          SealNumber,
          ReasonCode,
          HoldCode,
          IdInboundOrder,
          InboundLineNumber,
          IdOutboundOrder,
          OutboundLineNumber,
          DateCreated,
          UserCreated)

          VALUES
          (@StockId,
          @IdWhs,
          @IdOwn,
          @IdLocCode,
          @IdItem,
          @IdCtgItem,
          @ItemQty,
          @TotalWeight,
          @TotalVolumen,
          @Status,
          @FifoDate,
          @ExpirationDate,
          @FabricationDate,
          @LotNumber,
          @IdLpnCode,
          @LpnTypeCode,
          @IdLpnCodeContainer,
          @LpnTypeCodeContainer,
          @Price,
          @IdReceipt,
          @SealNumber,
          @ReasonCode,
          @HoldCode,
          @IdInboundOrder,
          @InboundLineNumber,
          @IdOutboundOrder,
          @OutboundLineNumber,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>
          <parameter type="Int">StockId</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdCtgItem</parameter>
          <parameter type="Decimal">ItemQty</parameter>
          <parameter type="Decimal">TotalWeight</parameter>
          <parameter type="Decimal">TotalVolumen</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="DateTime">FifoDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="DateTime">FabricationDate</parameter>
          <parameter type="String">LotNumber</parameter>
          <parameter type="String">IdLpnCode</parameter>
          <parameter type="String">LpnTypeCode</parameter>
          <parameter type="String">IdLpnCodeContainer</parameter>
          <parameter type="String">LpnTypeCodeContainer</parameter>
          <parameter type="Decimal">Price</parameter>
          <parameter type="Int">IdReceipt</parameter>
          <parameter type="String">SealNumber</parameter>
          <parameter type="String">ReasonCode</parameter>
          <parameter type="String">HoldCode</parameter>
          <parameter type="Int">IdInboundOrder</parameter>
          <parameter type="Int">InboundLineNumber</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="Int">OutboundLineNumber</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="UpdateStock">
        <sql>
          UPDATE Stock
          SET IdWhs = @IdWhs,
          IdOwn = @IdOwn,
          IdLocCode = @IdLocCode,
          IdItem = @IdItem,
          IdCtgItem = @IdCtgItem,
          ItemQty = @ItemQty,
          TotalWeight = @TotalWeight,
          TotalVolumen = @TotalVolumen,
          Status = @Status,
          FifoDate = @FifoDate,
          FabricationDate = @FabricationDate,
          ExpirationDate = @ExpirationDate,
          LotNumber = @LotNumber,
          IdLpnCode = @IdLpnCode,
          LpnTypeCode = @LpnTypeCode,
          IdLpnCodeContainer = @IdLpnCodeContainer,
          LpnTypeCodeContainer = @LpnTypeCodeContainer,
          Price = @Price,
          IdReceipt = @IdReceipt,
          IdInboundOrder = @IdInboundOrder,
          InboundLineNumber = @InboundLineNumber,
          IdOutboundOrder = @IdOutboundOrder,
          OutboundLineNumber = @OutboundLineNumber,
          SealNumber = @SealNumber,
          ReasonCode = @ReasonCode,
          HoldCode = @HoldCode,
          DateModified = @dateModified,
          UserModified = @userModified
          WHERE StockId = @StockId
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdCtgItem</parameter>
          <parameter type="Decimal">ItemQty</parameter>
          <parameter type="Decimal">TotalWeight</parameter>
          <parameter type="Decimal">TotalVolumen</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="DateTime">FifoDate</parameter>
          <parameter type="DateTime">FabricationDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="String">LotNumber</parameter>
          <parameter type="String">IdLpnCode</parameter>
          <parameter type="String">LpnTypeCode</parameter>
          <parameter type="String">IdLpnCodeContainer</parameter>
          <parameter type="String">LpnTypeCodeContainer</parameter>
          <parameter type="Decimal">Price</parameter>
          <parameter type="Int">IdReceipt</parameter>
          <parameter type="Int">IdInboundOrder</parameter>
          <parameter type="Int">InboundLineNumber</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="Int">OutboundLineNumber</parameter>
          <parameter type="String">SealNumber</parameter>
          <parameter type="String">ReasonCode</parameter>
          <parameter type="String">HoldCode</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="Int">StockId</parameter>
        </parameters>
      </query>

      <query code="DeleteStock">
        <sql>
          DELETE Stock
          WHERE StockId = @stockId
        </sql>
        <parameters>
          <parameter type="Int">stockId</parameter>
        </parameters>
      </query>
  
   <query code="GetInboundOrderByNumberAndWhsAndOwnerAndType">
    <sql>
      SELECT
      IO.IdInboundOrder,
      W.IdWhs,
      W.WhsName,
      O.IdOwn,
      O.OwnName,
      IT.IdInboundType,
      IT.InboundTypeCode,
      IO.InboundNumber,
      IO.IdInboundType,
      IO.OrderComment,
      IO.DateExpected,
      IO.EmissionDate,
      IO.ExpirationDate,
      IO.Status,
      IO.IdOutboundOrderSource,
      IO.IsAsn,
      IO.PercentLpnInspection,
      IO.PercentQA,
      IO.ShiftNumber,
      IO.SpecialField1,
      IO.SpecialField2,
      IO.SpecialField3,
      IO.SpecialField4,
      IO.DateCreated,
      IO.UserCreated,
      IO.DateModified,
      IO.UserModified,
      LT.IdTrackInboundType,
      LT.NameTrackInboundType,
      LT.DateTrack
      FROM InboundOrder IO
      INNER JOIN Owner O ON IO.IdOwn = O.IdOwn
      INNER JOIN Warehouse W ON IO.IdWhs = W.IdWhs
      INNER JOIN InboundType IT ON IT.IdInboundType = IO.IdInboundType
      INNER JOIN v_Inb_LatestTrack LT ON LT.IdInboundOrder = IO.IdInboundOrder
      WHERE IO.InboundNumber = @inboundNumber
      AND IO.IdWhs = @idWhs
      AND O.IdOwn = @idOwn
      AND IT.IdInboundType = @idInboundType
    </sql>
    <parameters>
      <parameter type="String">inboundNumber</parameter>
      <parameter type="Int">idWhs</parameter>
      <parameter type="Int">idOwn</parameter>
      <parameter type="Int">idInboundType</parameter>
    </parameters>
  </query>

      <query code="ExpirationConsult_FindAll">
        <!-- Query utilizada en:
                - Consulta de Vencimientos
                - Consulta de Permanencia -->
    <!--Se agrega lo siguiente en el inner de tabla Receipt "AND R.IdReceipt = S.IdReceipt" ya que se duplica
        dependiendo la cantidad de registros en receipt-->
        <sql>
          SELECT S.StockId
          ,S.IdWhs
          ,W.ShortWhsName
          ,W.WhsCode
          ,S.IdOwn
          ,O.OwnCode
          ,O.OwnName
          ,O.TradeName
          ,S.IdItem
          ,I.Description
          ,I.ItemCode
          ,S.IdCtgItem
          ,C.CtgName
          ,C.CtgCode
          ,S.ItemQty
          ,S.ExpirationDate
          ,S.FifoDate
          ,S.FabricationDate
          ,S.IdLocCode
          ,S.LotNumber
          ,S.IdLpnCode
          ,S.LpnTypeCode
          ,S.IdLpnCodeContainer
          ,S.LpnTypeCodeContainer
          ,S.Price
          ,S.IdReceipt
          ,S.IdInboundOrder
          ,(CASE WHEN S.IdInboundOrder IS NOT NULL THEN INO.InboundNumber ELSE CASE WHEN S.IdOutboundOrder IS NOT NULL THEN OUT.OutboundNumber ELSE NULL END END) AS InboundNumber
          ,I.IdGrpItem1
          ,I.IdGrpItem2
          ,I.IdGrpItem3
          ,I.IdGrpItem4
          ,I.LongItemName
          ,I.ShortItemName
          ,S.SealNumber
          ,S.ReasonCode
          ,RS.ReasonName HoldCode
          ,RL.ReasonName LocHoldName
		  ,IU.UomName
          FROM Stock S
          INNER JOIN Owner O ON S.IdOwn = O.IdOwn
          INNER JOIN Warehouse W ON S.IdWhs = W.IdWhs
          INNER JOIN Item I ON S.IdItem = I.IdItem
          INNER JOIN Location l ON S.idLocCode = l.idLocCode
          LEFT JOIN CategoryItem C ON S.IdCtgItem = C.IdCtgItem
		  LEFT JOIN ItemUom IU
		         ON IU.IdItem = I.IdItem
	            AND IU.IdUomType = I.StackingSequence
          LEFT JOIN InboundOrder INO ON S.IdInboundOrder = INO.IdInboundOrder AND S.IdOwn = INO.IdOwn AND S.IdWhs = INO.IdWhs
          LEFT JOIN OutboundOrder OUT ON OUT.IdOutboundOrder = S.IdOutboundOrder AND OUT.IdOwn = S.IdOwn AND OUT.IdWhs = S.IdWhs
          LEFT JOIN Reason RL ON L.HoldCode = RL.ReasonCode
          LEFT JOIN Reason RS ON S.HoldCode = RS.ReasonCode
          @SQLPart
          ORDER BY W.ShortWhsName,O.OwnName,S.IdLocCode,S.IdLpnCode,I.Description,S.LotNumber,S.ExpirationDate;
          
          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Owner" type="numericIn">O.IdOwn</filter>
          <filter name="DocumentNbr" type="textLikeOr">INO.InboundNumber,OUT.OutboundNumber</filter>
          <filter name="DateRange" type="textBetween">S.FifoDate</filter>

          <filter name="Hangar" type="numericIn">l.IdHng</filter>
          <filter name="LocationType" type="textIn">l.LocTypeCode</filter>

          <filter name="Location" type="textEqual">S.idLocCode</filter>
          <filter name="LocationRange" type="textBetween">S.idLocCode</filter>
          <filter name="LocationRow" type="numericEqual">l.RowLoc</filter>
          <filter name="LocationColumn" type="numericEqual">l.ColumnLoc</filter>
          <filter name="LocationLevel" type="numericEqual">l.LevelLoc</filter>
          <filter name="LocationAisle" type="textEqual">l.Aisle</filter>

          <filter name="GroupItem1" type="numericEqual">I.IdGrpItem1</filter>
          <filter name="GroupItem2" type="numericEqual">I.IdGrpItem2</filter>
          <filter name="GroupItem3" type="numericEqual">I.IdGrpItem3</filter>
          <filter name="GroupItem4" type="numericEqual">I.IdGrpItem4</filter>

          <filter name="ExpirationDateRange" type="textBetween">S.ExpirationDate</filter>
          <filter name="FabricationDateRange" type="textBetween">S.FabricationDate</filter>
          <filter name="LotNumberRange" type="textBetween">S.LotNumber</filter>
          
        </filters>
      </query>

      <query code="MaxAndMin_FindAll">
        <sql>
          Select I.IdItem
          ,LPIC.IdWhs
          ,W.ShortWhsName
          ,W.WhsCode
          ,I.ItemCode
          ,Own.OwnCode
          ,Own.TradeName
          ,Own.OwnName
          ,I.AltItemCode
          ,I.Description
          ,COALESCE(IL.ReorderPoint, I.ReorderPoint, 0) ReorderPoint
          ,COALESCE(IL.ReorderQty, I.ReorderQty, 0) ReorderQty
          ,IL.LevelConfig
          ,IL.IdLocCode
          ,(SELECT ISNULL(SUM(ItemQty),0) FROM Stock S1 INNER JOIN Location L1 On S1.IdLocCode = L1.IdLocCode AND S1.IdWhs = L1.IdWhs AND L1.LocTypeCode = 'PICK' AND S1.IdWhs = LPIC.IdWhs AND S1.IdItem = I.IdItem AND S1.IdLocCode = LPIC.IdLocCode) AS ItemQty
          ,COALESCE(IL.ReorderQty, I.ReorderQty, 0) - COALESCE((SELECT ISNULL(SUM(ItemQty),0) FROM Stock S1 INNER JOIN Location L1 On S1.IdLocCode = L1.IdLocCode AND S1.IdWhs = L1.IdWhs AND L1.LocTypeCode = 'PICK' AND S1.IdWhs = LPIC.IdWhs AND S1.IdItem = I.IdItem AND S1.IdLocCode = LPIC.IdLocCode),0) 'Replenishment'
          ,(SELECT ISNULL(SUM(ItemQty),0) FROM Stock S1 INNER JOIN Location L1 On S1.IdLocCode = L1.IdLocCode AND S1.IdWhs = L1.IdWhs AND L1.LocTypeCode = 'PUT' AND S1.IdWhs = LPIC.IdWhs AND S1.IdItem = I.IdItem) AS 'PutawayQty'
          ,I.IdGrpItem1
          ,I.IdGrpItem2
          ,I.IdGrpItem3
          ,I.IdGrpItem4
          ,I.LongItemName
          ,I.ShortItemName
          ,I.Status
          ,I.ShelfLife
          ,I.ExpirationDays
		  ,IU.UomName
          FROM Item I
		  LEFT JOIN ItemUom IU
		         ON IU.IdItem = I.IdItem
	            AND IU.IdUomType = I.StackingSequence
          INNER  JOIN Owner Own ON Own.IdOwn = I.IdOwn
          INNER  JOIN (SELECT ItemLocation.IdItem, ItemLocation.IdLocCode, Location.IdWhs,
          ItemLocation.ReorderPoint, ItemLocation.ReorderQty , 'Location' AS LevelConfig
          FROM ItemLocation
          INNER JOIN Location
          ON ItemLocation.IdLocCode = Location.IdLocCode
          UNION
          SELECT Stock.IdItem, Stock.IdLocCode, Stock.IdWhs,
          Item.ReorderPoint, Item.ReorderQty, 'Item' AS LevelConfig
          FROM Stock
          INNER JOIN Item
          ON Item.IdItem = Stock.IdItem
          WHERE ISNULL(Item.ReOrderQty,0) > 0
          AND Stock.IdLocCode NOT IN (SELECT IdLocCode FROM ItemLocation WHERE IdItem = Stock.IdItem)) AS IL
          ON IL.IdItem = I.IdItem
          INNER  JOIN Location LPIC
          ON IL.IdLocCode = LPIC.IdLocCode
          AND IL.IdWhs = LPIC.IdWhs
          AND LPIC.LocTypeCode = 'PICK'
          INNER  JOIN Warehouse W ON W.IdWhs = LPIC.IdWhs
          @SQLPart
          ORDER BY W.ShortWhsName, Own.OwnName, IL.IdLocCode, I.ItemCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView,
          VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>

        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Owner" type="numericIn">Own.IdOwn</filter>

          <filter name="Hangar" type="numericIn">LPIC.IdHng</filter>
          <filter name="LocationType" type="textIn">LPIC.LocTypeCode</filter>

          <filter name="Location" type="textEqual">LPIC.idLocCode</filter>
          <filter name="LocationRange" type="textBetween">LPIC.idLocCode</filter>
          <filter name="LocationRow" type="numericEqual">LPIC.RowLoc</filter>
          <filter name="LocationColumn" type="numericEqual">LPIC.ColumnLoc</filter>
          <filter name="LocationLevel" type="numericEqual">LPIC.LevelLoc</filter>
          <filter name="LocationAisle" type="textEqual">LPIC.Aisle</filter>

          <filter name="GroupItem1" type="numericEqual">I.IdGrpItem1</filter>
          <filter name="GroupItem2" type="numericEqual">I.IdGrpItem2</filter>
          <filter name="GroupItem3" type="numericEqual">I.IdGrpItem3</filter>
          <filter name="GroupItem4" type="numericEqual">I.IdGrpItem4</filter>

        </filters>
      </query>

      <query code="ReserveStock_FindAll">
        <sql>
           SELECT S.IdWhs
          ,S.IdOwn
          ,I.ItemCode
          ,S.IdItem
          ,I.LongItemName
          ,CASE 
			WHEN  ISNULL(SUM(S.ItemQty) - ISNULL(RS.QtyReserve,0) - (SELECT ISNULL(SUM(TD.ProposalQty), 0) 
                                                                  FROM Task T
                                                                  JOIN TaskType TT
                                                                    ON T.TaskTypeCode = TT.TaskTypeCode
                                                                  JOIN TaskDetail TD
                                                                    ON TD.IdTask = T.IdTask
                                                                   AND TD.IdWhs = T.IdWhs
                                                                 WHERE T.IdOwn = S.IdOwn
                                                                   AND T.IdWhs = S.IdWhs
                                                                   AND TD.IdItem = S.IdItem
                                                                   AND T.IsComplete = 0
                                                                   AND T.Status = 1
                                                                   AND TT.IdTaskType &lt; 2000 -- PICKING
          AND TD.IsComplete = 0
          AND TD.Status = 1),0) &lt; 0
		  THEN '0'
		   ELSE 
		     ISNULL(SUM(S.ItemQty) - ISNULL(RS.QtyReserve,0) - (SELECT ISNULL(SUM(TD.ProposalQty), 0) 
                                                                  FROM Task T
                                                                  JOIN TaskType TT
                                                                    ON T.TaskTypeCode = TT.TaskTypeCode
                                                                  JOIN TaskDetail TD
                                                                    ON TD.IdTask = T.IdTask
                                                                   AND TD.IdWhs = T.IdWhs
                                                                 WHERE T.IdOwn = S.IdOwn
                                                                   AND T.IdWhs = S.IdWhs
                                                                   AND TD.IdItem = S.IdItem
                                                                   AND T.IsComplete = 0
                                                                   --AND T.Status = 1
                                                                   AND TT.IdTaskType &lt; 2000 -- PICKING
          AND TD.IsComplete = 0
          AND TD.Status = 1),0)
		  END
		  AS QtyAvailable          
		  ,ISNULL(RS.QtyReserve,0) AS QtyReserve
          FROM Stock S
          INNER JOIN Item I ON I.IdItem = S.IdItem
          INNER JOIN Location L ON l.IdLocCode = S.IdLocCode
          LEFT JOIN (SELECT IdWhs, IdOwn, IdItem, SUM(ISNULL(QtyReserve,0))QtyReserve
          FROM ReserveStock
          GROUP BY IdWhs, IdOwn, IdItem)RS
          ON RS.IdWhs = S.IdWhs
          AND RS.IdOwn = S.IdOwn
          AND RS.IdItem = S.IdItem    
		  @SQLPart
          AND L.LocTypeCode IN ('PICK','PUT')
          AND S.HoldCode IS NULL
          AND L.HoldCode IS NULL
          GROUP BY S.IdWhs
          ,S.IdOwn
          ,I.ItemCode
          ,S.IdItem
          ,I.LongItemName
          ,RS.QtyReserve
          ORDER BY I.LongItemName, S.IdItem;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView,
          VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">S.IdWhs</filter>
          <filter name="Owner" type="numericIn">S.IdOwn</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="ItemEqual" type="textEqual">I.ItemCode</filter>
        </filters>
      </query>

      <query code="ReserveStock_FindByCustomer">
        <sql>
          SELECT RS.IdWhs
          ,RS.IdOwn
          ,RS.IdCustomer
          ,C.CustomerName
          ,I.ItemCode
          ,RS.IdItem
          ,I.LongItemName
          ,ISNULL(SUM(RS.QtyReserve),0) AS QtyReserve
          FROM ReserveStock RS
          INNER JOIN Customer C ON C.IdCustomer = RS.IdCustomer AND C.IdOwn = RS.IdOwn
          INNER JOIN Item I ON I.IdItem = RS.IdItem
          @SQLPart
          AND RS.IdCustomer = @idCustomer
          GROUP BY RS.IdWhs
          ,RS.IdOwn
          ,RS.IdCustomer
          ,C.CustomerName
          ,I.ItemCode
          ,RS.IdItem
          ,I.LongItemName
          ORDER BY I.LongItemName, RS.IdItem;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView,
          VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">idCustomer</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">RS.IdWhs</filter>
          <filter name="Owner" type="numericIn">RS.IdOwn</filter>
        </filters>
      </query>

      <query code="ReserveStock_FindReserve">
        <sql>
          SELECT C.CustomerName
          ,I.ItemCode
          ,RS.IdItem
          ,I.LongItemName
          ,RS.QtyReserve
          ,RS.IdOwn
          ,RS.IdWhs
          ,RS.IdItem
          ,RS.IdCustomer
          FROM ReserveStock RS
          INNER JOIN Item I ON I.IdItem = RS.IdItem
          INNER JOIN Customer C ON C.IdCustomer = RS.IdCustomer
          @SQLPart
          ORDER BY RS.IdItem
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">RS.IdWhs</filter>
          <filter name="Owner" type="numericIn">RS.IdOwn</filter>
          <filter name="Item" type="numericEqual">RS.IdItem</filter>
          <filter name="Customer" type="textEqual">C.CustomerCode</filter>
        </filters>
      </query>
      
      <query code="ReserveStock_GetByAnyParameter">
        <sql>
          SELECT C.CustomerName
          ,I.ItemCode
          ,RS.IdItem
          ,I.LongItemName
          ,RS.QtyReserve
          ,RS.IdOwn
          ,RS.IdWhs
          ,RS.IdItem
          ,RS.IdCustomer
          FROM ReserveStock RS
          INNER JOIN Item I ON I.IdItem = RS.IdItem
          INNER JOIN Customer C ON C.IdCustomer = RS.IdCustomer
          WHERE 1 = 1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdWhs" type="numericIn">RS.IdWhs</filter>
          <filter name="IdOwn" type="numericIn">RS.IdOwn</filter>
          <filter name="IdItem" type="numericEqual">RS.IdItem</filter>
          <filter name="IdCustomer" type="textEqual">C.CustomerCode</filter>
        </filters>
        <sub-querys>
          <sub-query code="DistinctCustomerCode">
            <sql>
              AND C.CustomerCode &lt;&gt;  @CustomerCode
            </sql>
            <parameters>
                <parameter type="String">CustomerCode</parameter>
            </parameters>
    	   </sub-query>
        </sub-querys>
      </query>

      <query code="Insert_ReserveStock">
        <sql>
          INSERT INTO ReserveStock
          (IdWhs
          ,IdOwn
          ,IdItem
          ,IdCustomer
          ,QtyReserve)

          VALUES
          (@IdWhs
          ,@IdOwn
          ,@IdItem
          ,@IdCustomer
          ,@QtyReserve)
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdCustomer</parameter>
          <parameter type="Decimal">QtyReserve</parameter>
        </parameters>
      </query>

      <query code="ReserveStock_Delete">
        <sql>
          DELETE
          FROM ReserveStock
          WHERE IdWhs = @IdWhs
          AND IdOwn = @IdOwn
          AND IdItem = @IdItem
          AND IdCustomer = @IdCustomer
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdCustomer</parameter>
        </parameters>
      </query>

      <query code="ReserveStock_Update">
        <sql>
          UPDATE ReserveStock SET
          QtyReserve = @QtyReserve
          WHERE IdWhs = @IdWhs
          AND IdOwn = @IdOwn
          AND IdItem = @IdItem
          AND IdCustomer = @IdCustomer
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdCustomer</parameter>
          <parameter type="Decimal">QtyReserve</parameter>
        </parameters>
      </query>


      <query code="GetStockByIdLPNCode">
        <sql>
          SELECT S.StockId
          ,S.IdItem
          ,I.Description
          ,I.ItemCode
          ,S.IdCtgItem
          ,C.CtgName
          ,C.CtgCode
          ,S.ItemQty
          ,S.ExpirationDate
          ,S.FifoDate
          ,S.FabricationDate
          ,S.IdLocCode
          ,S.LotNumber
          ,S.IdLpnCode
          ,S.LpnTypeCode
          ,S.Price
          ,S.IdReceipt
          ,S.IdInboundOrder
          ,INO.InboundNumber
          ,S.InboundLineNumber
          ,S.IdOutboundOrder
          ,S.OutboundLineNumber
          ,S.Status
          ,S.TotalVolumen
          ,S.TotalWeight
          ,I.IdGrpItem1
          ,G1.GrpItem1Name
          ,I.IdGrpItem2
          ,G2.GrpItem2Name
          ,I.IdGrpItem3
          ,G3.GrpItem3Name
          ,I.IdGrpItem4
          ,G4.GrpItem4Name
          ,I.LongItemName
          ,I.ShortItemName
          ,S.SealNumber
          ,S.ReasonCode
          ,S.HoldCode
          FROM Stock S
          INNER JOIN Owner O ON S.IdOwn = O.IdOwn
          INNER JOIN Warehouse W ON S.IdWhs = W.IdWhs
          INNER JOIN Item I ON S.IdItem = I.IdItem
          LEFT JOIN CategoryItem C ON S.IdCtgItem = C.IdCtgItem
          LEFT JOIN InboundOrder INO ON S.IdInboundOrder = INO.IdInboundOrder
          LEFT JOIN GroupItem1 G1 ON G1.IdGrpItem1 = I.IdGrpItem1
          AND I.IdOwn = G1.IdOwn
          LEFT JOIN GroupItem2 G2 ON G2.IdGrpItem2 = I.IdGrpItem2
          LEFT JOIN GroupItem3 G3 ON G3.IdGrpItem3 = I.IdGrpItem3
          LEFT JOIN GroupItem4 G4 ON G4.IdGrpItem4 = I.IdGrpItem4
          WHERE S.IdLpnCode = @IdLpn

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="String">IdLpn</parameter>
        </parameters>
      </query>

      <query code="GetStockByIdLocCode">
        <sql>
          SELECT S.StockId
          ,S.IdItem
          ,I.Description
          ,I.ItemCode
          ,S.IdCtgItem
          ,C.CtgName
          ,C.CtgCode
          ,S.ItemQty
          ,S.ExpirationDate
          ,S.FifoDate
          ,S.FabricationDate
          ,S.IdLocCode
          ,S.LotNumber
          ,S.IdLpnCode
          ,S.LpnTypeCode
          ,S.Price
          ,S.IdReceipt
          ,S.IdInboundOrder
          ,INO.InboundNumber
          ,S.InboundLineNumber
          ,S.IdOutboundOrder
          ,S.OutboundLineNumber
          ,S.Status
          ,S.TotalVolumen
          ,S.TotalWeight
          ,I.IdGrpItem1
          ,G1.GrpItem1Name
          ,I.IdGrpItem2
          ,G2.GrpItem2Name
          ,I.IdGrpItem3
          ,G3.GrpItem3Name
          ,I.IdGrpItem4
          ,G4.GrpItem4Name
          ,I.LongItemName
          ,I.ShortItemName
          ,S.SealNumber
          ,S.ReasonCode
          ,S.HoldCode
          FROM Stock S
          INNER JOIN Owner O ON S.IdOwn = O.IdOwn
          INNER JOIN Warehouse W ON S.IdWhs = W.IdWhs
          INNER JOIN Item I ON S.IdItem = I.IdItem
          LEFT JOIN CategoryItem C ON S.IdCtgItem = C.IdCtgItem
          LEFT JOIN InboundOrder INO ON S.IdInboundOrder = INO.IdInboundOrder
          LEFT JOIN GroupItem1 G1 ON G1.IdGrpItem1 = I.IdGrpItem1
          AND I.IdOwn = G1.IdOwn
          LEFT JOIN GroupItem2 G2 ON G2.IdGrpItem2 = I.IdGrpItem2
          LEFT JOIN GroupItem3 G3 ON G3.IdGrpItem3 = I.IdGrpItem3
          LEFT JOIN GroupItem4 G4 ON G4.IdGrpItem4 = I.IdGrpItem4
          WHERE S.IdLocCode = @IdLocCode

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="String">IdLocCode</parameter>
        </parameters>
      </query>

      <query code="GetStateStockByFilters">
      <sql>
       SELECT VS.IdWhs,
        W.WhsCode,
        W.ShortWhsName,
        VS.IdOwn,
        O.OwnCode,
        O.OwnName,
        VS.IdItem,
        I.ItemCode,
        I.ShortItemName,
        I.Description AS ItemDescription,
        I.LongItemName AS ItemLongName,
        VS.QtyStock - VS.QtyReserved as QtyStock,
        VS.QtyCicleCount,
        VS.QtyReserved,
        VS.QtyReceived,
        VS.QtyPendingReceive,
        VS.QtyStg,
        VS.QtyStgd,
        VS.QtyStgr,
        VS.QtyPendingPicking,
        VS.QtyTaskPicking,
        VS.QtyTaskSimulation,
        VS.QtyHolded,
		    VS.QtyDock,
		    VS.QtyTruck,
		    COALESCE((VS.QtyStock + VS.QtyStg + VS.QtyStgd + VS.QtyStgr + QtyHolded + VS.QtyDock + VS.QtyTruck),0) AS QtyTotal,
		IU.UomName
        FROM Item I 
		LEFT JOIN ItemUom IU
		       ON IU.IdItem = I.IdItem
	          AND IU.IdUomType = I.StackingSequence
		INNER JOIN v_Sto_StateGeneralByItem VS ON I.IdItem = VS.IdItem INNER JOIN
        Warehouse W ON VS.IdWhs = W.IdWhs INNER JOIN
        Owner O ON VS.IdOwn = O.IdOwn
        @SQLPart;

        SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
        FROM CfgEntityProperty qf
        JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
        WHERE QueryName = @queryName
        ORDER BY FieldOrder
      </sql>
      <parameters>
        <parameter type="String">queryName</parameter>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="Warehouse" type="numericIn">VS.IdWhs</filter>
        <filter name="Item" type="textLike">I.ItemCode</filter>
        <filter name="Owner" type="numericIn">VS.IdOwn</filter>
      </filters>
    </query>

      <query code="UpdateHoldStock">
        <sql>
          UPDATE Stock
          SET ReasonCode = @reasonCode,
          HoldCode = @holdCode,
          DateModified = @dateModified,
          UserModified = @userModified
          WHERE StockId = @stockId
        </sql>
        <parameters>
          <parameter type="String">reasonCode</parameter>
          <parameter type="String">holdCode</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="Int">stockId</parameter>
        </parameters>
      </query>

      <!--ProductivitySummary SECTION-->
      <query code="ProductivitySummary_ToReception">
        <sql>
          SELECT
          COUNT(IdInboundOrder)Documents
          ,ISNULL(SUM(QtyInboundDetail),0)Lines
          ,ISNULL(SUM(ItemQty),0)Qty
          FROM
          (SELECT IO.IdWhs
          ,IO.IdOwn
          ,IO.IdInboundOrder
          ,COUNT(ID.IdInboundDetail) QtyInboundDetail
          ,SUM(ID.ItemQty) ItemQty
          FROM InboundOrder IO
          INNER JOIN InboundDetail ID
          ON ID.IdInboundOrder = IO.IdInboundOrder
          LEFT JOIN v_Inb_LatestTrack LT
          ON LT.IdInboundOrder = IO.IdInboundOrder
          WHERE LT.IdTrackInboundType = 1
          @SQLPart
          GROUP BY IO.IdWhs,IO.IdOwn,IO.IdInboundOrder) A

        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IO.IdWhs</filter>
          <filter name="Owner" type="numericIn">IO.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_Receptioned">
        <sql>
          SELECT
          COUNT(IdInboundOrder)Documents
          ,ISNULL(SUM(QtyReceiptDetail),0)Lines
          ,ISNULL(SUM(ItemQtyReceiptDetail),0)Qty
          FROM
          (SELECT IO.IdWhs
          ,IO.IdOwn
          ,IO.IdInboundOrder
          ,COUNT(RD.IdReceiptDetail) QtyReceiptDetail
          ,SUM(RD.ItemQty) ItemQtyReceiptDetail
          FROM InboundOrder IO
          INNER JOIN Receipt R ON R.IdInboundOrder = IO.IdInboundOrder
          INNER JOIN ReceiptDetail RD ON RD.IdReceipt = R.IdReceipt
          INNER JOIN InboundDetail ID ON ID.IdInboundOrder = IO.IdInboundOrder
          AND ID.LineNumber = RD.LineNumber
          WHERE 1 = 1
          @SQLPart
          GROUP BY IO.IdWhs,IO.IdOwn,IO.IdInboundOrder) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IO.IdWhs</filter>
          <filter name="Owner" type="numericIn">IO.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_ToCollect">
        <sql>
          SELECT
          COUNT(IdDocumentBound)Documents,
          ISNULL(SUM(IdTaskDetail),0)Lines,
          ISNULL(SUM(PickQty),0)Qty
          FROM
          (SELECT T.IdOwn
                  ,T.IdWhs
                  ,COUNT(TD.IdTaskDetail) IdTaskDetail
                  ,TD.IdDocumentBound
                  ,SUM(TD.ProposalQty) PickQty
          FROM Task T
          LEFT JOIN TaskDetail TD
          ON TD.IdTask = T.IdTask
          WHERE T.TaskTypeCode IN('PIKOR','PIKBT','PIKWV','PIKPS','PIKIT','PIUNK','PIKVA')
          AND TD.IsComplete = 0
          AND T.IsComplete = 0
          AND T.IdTrackTaskType = 11
          @SQLPart
          GROUP BY TD.IdDocumentBound,T.IdOwn,T.IdWhs) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_Collecting">
        <sql>
          SELECT
          COUNT(IdDocumentBound)Documents
          ,ISNULL(SUM(IdTaskDetail),0)Lines
          ,ISNULL(SUM(PickQty),0)Qty
          ,ISNULL(SUM(UserAssigned),0)Users
          FROM
          (SELECT COUNT(TD.UserAssigned)UserAssigned
                  ,T.IdOwn
                  ,T.IdWhs
                  ,COUNT(TD.IdTaskDetail) IdTaskDetail
                  ,TD.IdDocumentBound
                  ,SUM(TD.RealQty) PickQty
            FROM Task T
            LEFT JOIN TaskDetail TD
            ON TD.IdTask = T.IdTask
            WHERE T.TaskTypeCode IN('PIKOR','PIKBT','PIKWV','PIKPS','PIKIT','PIUNK','PIKVA')
            AND T.IsComplete = 0
            AND T.IdTrackTaskType = 21
            @SQLPart
            GROUP BY TD.IdDocumentBound,T.IdOwn,T.IdWhs) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_Collected">
        <sql>
          SELECT
          COUNT(IdDocumentBound)Documents
          ,ISNULL(SUM(IdTaskDetail),0)Lines
          ,ISNULL(SUM(PickQty),0)Qty
          FROM
          (SELECT T.IdOwn
                  ,T.IdWhs
                  ,COUNT(TD.IdTaskDetail) IdTaskDetail
                  ,TD.IdDocumentBound
                  ,SUM(TD.RealQty) PickQty
            FROM Task T
            LEFT JOIN TaskDetail TD
            ON TD.IdTask = T.IdTask
            WHERE T.TaskTypeCode IN('PIKOR','PIKBT','PIKWV','PIKPS','PIKIT','PIUNK','PIKVA')
            AND TD.IsComplete = 1
            AND T.IsComplete = 1
            AND T.IdTrackTaskType = 101
            @SQLPart
            GROUP BY TD.IdDocumentBound,T.IdOwn,T.IdWhs) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_ToPack">
        <sql>
          SELECT
          COUNT(IdDocumentBound)Documents
          ,ISNULL(SUM(IdTaskDetail),0)Lines
          ,ISNULL(SUM(PackQty),0)Qty
          ,COUNT(IdLpnSourceProposal)Lpn
          FROM
          (SELECT TD.IdLpnSourceProposal
                  ,T.IdOwn
                  ,T.IdWhs
                  ,COUNT(TD.IdTaskDetail) IdTaskDetail
                  ,TD.IdDocumentBound
                  ,SUM(TD.ProposalQty) PackQty
            FROM Task T
            LEFT JOIN TaskDetail TD
            ON TD.IdTask = T.IdTask
            WHERE T.TaskTypeCode = 'PAKOR'
            AND TD.IsComplete = 0
            AND T.IsComplete = 0
            AND T.IdTrackTaskType = 11
            @SQLPart
            GROUP BY TD.IdDocumentBound,T.IdOwn,T.IdWhs,TD.IdLpnSourceProposal) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_Packing">
        <sql>
          SELECT
          COUNT(IdDocumentBound)Documents
          ,ISNULL(SUM(IdTaskDetail),0)Lines
          ,ISNULL(SUM(PackQty),0)Qty
          ,COUNT(IdLpnSourceProposal)Lpn
          ,ISNULL(SUM(UserAssigned),0)Users
          FROM
          (SELECT
          COUNT(TD.UserAssigned)UserAssigned
          ,TD.IdLpnSourceProposal
          ,T.IdOwn
          ,T.IdWhs
          ,COUNT(TD.IdTaskDetail)IdTaskDetail
          ,TD.IdDocumentBound
          ,SUM(TD.RealQty)PackQty
          FROM Task T
          LEFT JOIN TaskDetail TD
          ON TD.IdTask = T.IdTask
          WHERE T.TaskTypeCode = 'PAKOR'
          AND T.IsComplete = 0
          AND T.IdTrackTaskType = 21
          @SQLPart
          GROUP BY TD.IdDocumentBound,T.IdOwn,T.IdWhs,TD.IdLpnSourceProposal) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_Packed">
        <sql>
          SELECT
          COUNT(IdDocumentBound)Documents
          ,ISNULL(SUM(IdTaskDetail),0)Lines
          ,ISNULL(SUM(PackQty),0)Qty
          ,COUNT(IdLpnSourceProposal)Lpn
          FROM
          (SELECT TD.IdLpnSourceProposal
          ,T.IdOwn
          ,T.IdWhs
          ,COUNT(TD.IdTaskDetail)IdTaskDetail
          ,TD.IdDocumentBound
          ,SUM(TD.RealQty)PackQty
          FROM Task T
          LEFT JOIN TaskDetail TD
          ON TD.IdTask = T.IdTask
          WHERE T.TaskTypeCode = 'PAKOR'
          AND TD.IsComplete = 1
          AND T.IsComplete = 1
          AND T.IdTrackTaskType = 101
          @SQLPart
          GROUP BY TD.IdDocumentBound,T.IdOwn,T.IdWhs,TD.IdLpnSourceProposal) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_Dispatch">
        <sql>
          SELECT
          COUNT(IdDocumentBound)Documents
          ,ISNULL(SUM(IdTaskDetail),0)Lines
          ,ISNULL(SUM(PackQty),0)Qty
          ,COUNT(IdLpnSourceProposal)Lpn
          FROM
          (SELECT TD.IdLpnSourceProposal
          ,T.IdOwn
          ,T.IdWhs
          ,COUNT(TD.IdTaskDetail)IdTaskDetail
          ,TD.IdDocumentBound
          ,SUM(TD.RealQty)PackQty
          FROM Task T
          LEFT JOIN TaskDetail TD
          ON TD.IdTask = T.IdTask
          WHERE T.TaskTypeCode = 'RUTEO'
          AND TD.IsComplete = 1
          AND T.IsComplete = 1
          AND T.IdTrackTaskType = 101
          @SQLPart
          GROUP BY TD.IdDocumentBound,T.IdOwn,T.IdWhs,TD.IdLpnSourceProposal) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_Load">
        <sql>
          SELECT
          COUNT(IdDocumentBound)Documents
          ,ISNULL(SUM(IdTaskDetail),0)Lines
          ,ISNULL(SUM(PackQty),0)Qty
          ,COUNT(IdLpnSourceProposal)Lpn
          FROM
          (SELECT TD.IdLpnSourceProposal
          ,T.IdOwn
          ,T.IdWhs
          ,COUNT(TD.IdTaskDetail)IdTaskDetail
          ,TD.IdDocumentBound
          ,SUM(TD.RealQty)PackQty
          FROM Task T
          LEFT JOIN TaskDetail TD
          ON TD.IdTask = T.IdTask
          WHERE T.TaskTypeCode = 'LOAD'
          AND TD.IsComplete = 1
          AND T.IsComplete = 1
          AND T.IdTrackTaskType = 101
          @SQLPart
          GROUP BY TD.IdDocumentBound,T.IdOwn,T.IdWhs,TD.IdLpnSourceProposal) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_TaskPending_CycleCount">
        <sql>
          SELECT
          COUNT(TaskTypeCode)Documents
          FROM Task
          WHERE TaskTypeCode = 'CCNT'
          AND IsComplete = 0
          AND IdTrackTaskType = 11
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="Owner" type="numericIn">IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_TaskPending_Adjust">
        <sql>
          SELECT
          COUNT(TaskTypeCode)Documents
          FROM Task
          WHERE TaskTypeCode = 'AJU'
          AND IsComplete = 0
          AND IdTrackTaskType = 11
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="Owner" type="numericIn">IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_TaskPending_Replenish">
        <sql>
          SELECT
          COUNT(TaskTypeCode)Documents
          FROM Task
          WHERE TaskTypeCode = 'REPL'
          AND IsComplete = 0
          AND IdTrackTaskType = 11
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="Owner" type="numericIn">IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_TaskCompleted_CycleCount">
        <sql>
          SELECT
          COUNT(TaskTypeCode)Documents
          FROM Task
          WHERE TaskTypeCode = 'CCNT'
          AND IsComplete = 1
          AND IdTrackTaskType = 101
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="Owner" type="numericIn">IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_TaskCompleted_Adjust">
        <sql>
          SELECT
          COUNT(TaskTypeCode)Documents
          FROM Task
          WHERE TaskTypeCode = 'AJU'
          AND IsComplete = 1
          AND IdTrackTaskType = 101
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="Owner" type="numericIn">IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_TaskCompleted_Replenish">
        <sql>
          SELECT
          COUNT(TaskTypeCode)Documents
          FROM Task
          WHERE TaskTypeCode = 'REPL'
          AND IsComplete = 1
          AND IdTrackTaskType = 101
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="Owner" type="numericIn">IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_ReleaseOrder">
        <sql>
          SELECT
          COUNT(IdOutboundOrder)Documents
          ,ISNULL(SUM(WeightTotal),0)Weight
          ,ISNULL(SUM(VolumeTotal),0)Volume
          ,ISNULL(SUM(ItemQty),0)Qty
          FROM
          (SELECT OO.IdOwn
          ,D.IdWhs
          ,D.IdOutboundOrder
          ,SUM(L.WeightTotal)WeightTotal
          ,SUM(L.VolumeTotal)VolumeTotal
          ,SUM(DT.ItemQty)ItemQty
          FROM Dispatch D
          INNER JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = D.IdOutboundOrder
          INNER JOIN OutboundType OT
          ON OO.IdOutboundType = OT.IdOutboundType
          AND OT.Status = 1
          LEFT JOIN DispatchDetail DT
          ON D.IdDispatch = DT.IdDispatch
          INNER JOIN LPN L
          ON L.IdLpnCode = DT.IdLpnCode
          WHERE D.IdDispatchType = 6
          AND OT.OutboudTypeCode = 'SO'
          @SQLPart
          GROUP BY OO.IdOwn, D.IdWhs,D.IdOutboundOrder) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">D.IdWhs</filter>
          <filter name="Owner" type="numericIn">OO.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_Transfer">
        <sql>
          SELECT
          COUNT(IdOutboundOrder)Documents
          ,ISNULL(SUM(WeightTotal),0)Weight
          ,ISNULL(SUM(VolumeTotal),0)Volume
          ,ISNULL(SUM(ItemQty),0)Qty
          FROM
          (SELECT OO.IdOwn
          ,D.IdWhs
          ,D.IdOutboundOrder
          ,SUM(L.WeightTotal)WeightTotal
          ,SUM(L.VolumeTotal)VolumeTotal
          ,SUM(DT.ItemQty)ItemQty
          FROM Dispatch D
          INNER JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = D.IdOutboundOrder
          INNER JOIN OutboundType OT
          ON OO.IdOutboundType = OT.IdOutboundType
          AND OT.Status = 1
          LEFT JOIN DispatchDetail DT
          ON D.IdDispatch = DT.IdDispatch
          INNER JOIN LPN L
          ON L.IdLpnCode = DT.IdLpnCode
          WHERE D.IdDispatchType = 6
          AND OT.OutboudTypeCode = 'TR'
          @SQLPart
          GROUP BY OO.IdOwn, D.IdWhs,D.IdOutboundOrder) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">D.IdWhs</filter>
          <filter name="Owner" type="numericIn">OO.IdOwn</filter>
        </filters>
      </query>
      <!--End ProductivitySummary Section-->

      <!-- End STOCK section  -->

      <!-- INVENTORY section  -->

      <query code="Inventory_FindAll">
        <sql>
          SELECT DISTINCT
          CASE WHEN I.IdInventoryOrder =
          -- El mas reciente
          (SELECT TOP 1 I2.IdInventoryOrder
          FROM InventoryOrder I2
          WHERE I2.IdWhs = I.IdWhs
          ORDER BY CreateDate DESC)
          -- En estado pendiente
          AND I.IdTrackInventoryType = 1
          THEN 1 ELSE 0 END AS LatestPending,
          I.IdInventoryOrder,
          W.IdWhs,
          W.WhsCode,
          W.ShortWhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          I.InventoryNumber,
          I.CreateDate,
          I.StartDate,
          I.EndDate,
          I.IsFullWhs,
          I.IdTrackInventoryType,
          TI.NameTrackInventoryType,
          I.IdUserCreate,
          --U1.UserName AS UserCreate,
          CASE WHEN (SELECT count (cc.UserName) from CfgUserWms cc where cc.IdUserWms = I.IdUserCreate) > 0
          THEN (SELECT cc.UserName from CfgUserWms cc where cc.IdUserWms = I.IdUserCreate)
          ELSE (I.UserCreated)
          END AS UserCreate,
          I.IdUserApproval,
          CASE WHEN (SELECT count (cu.UserName) from CfgUserWms cu where cu.IdUserWms = I.IdUserApproval)  > 0
          THEN (SELECT cu.UserName from CfgUserWms cu where cu.IdUserWms = I.IdUserApproval)
          ELSE (I.UserModified)
          END AS UserApproval,
          -- U2.UserName AS UserApproval,
          I.CountQty,
          I.Status,
          I.Description,
          CASE
          WHEN (SELECT COUNT( IL.IdLocCode)
          FROM InventoryLocation IL
          INNER JOIN Location L ON L.IdLocCode = IL.IdLocCode
          WHERE IL.IdInventory = I.IdInventoryOrder) = 0 THEN 0
          ELSE
          (SELECT CAST ((SELECT CAST((SELECT COUNT( IL.IdLocCode)
          FROM InventoryLocation IL
          INNER JOIN Location L ON L.IdLocCode = IL.IdLocCode
          WHERE IL.WasCounted = 1
          AND IL.IdInventory = I.IdInventoryOrder) AS float) /
          (SELECT CAST(( SELECT COUNT( IL.IdLocCode)
          FROM InventoryLocation IL
          INNER JOIN Location L ON L.IdLocCode = IL.IdLocCode
          WHERE IL.IdInventory = I.IdInventoryOrder) AS float)) * 100) AS decimal(12)))
          END AS AmountProgress
          FROM InventoryOrder I
          LEFT JOIN (SELECT I.IdItem, I.ItemCode , ID.IdInventoryOrder
          FROM InventoryDetail ID INNER JOIN
          Item I ON ID.IdItem = I.IdItem) ID ON I.IdInventoryOrder = ID.IdInventoryOrder
          INNER JOIN Warehouse W ON I.IdWhs = W.IdWhs
          LEFT JOIN Owner Own ON I.IdOwn = Own.IdOwn
          INNER JOIN CfgUserWms U1 ON I.IdUserCreate = U1.IdUserWms
          INNER JOIN CfgUserWms U2 ON I.IdUserApproval = U2.IdUserWms
          INNER JOIN TrackInventoryType TI ON I.IdTrackInventoryType = TI.IdTrackInventoryType
          @SQLPart
          ORDER BY I.CreateDate;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">I.IdWhs</filter>
          <filter name="DateRange" type="textBetween">I.CreateDate</filter>
          <filter name="Owner" type="numericIn">own.IdOwn</filter>
          <filter name="Description" type="textLike">I.Description</filter>
          <filter name="Status" type="numericEqual">I.Status</filter>
          <filter name="Item" type="textLike">ID.ItemCode</filter>
          <filter name="Code" type="textLike">I.InventoryNumber</filter>
        </filters>
      </query>


      <query code="Inventory_GetById">
        <sql>
          SELECT IdInventoryOrder
          ,IdWhs
          ,IdOwn
          ,InventoryNumber
          ,CreateDate
          ,StartDate
          ,EndDate
          ,IsFullWhs
          ,IdTrackInventoryType
          ,IdUserCreate
          ,IdUserApproval
          ,CountQty
          ,Status
          ,Description
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM InventoryOrder
          WHERE IdInventoryOrder = @IdInventory
        </sql>
        <parameters>
          <parameter type="Int">IdInventory</parameter>
        </parameters>
      </query>

      <query code="GetInventoryByWhs">
        <sql>
          SELECT IdInventoryOrder
          ,IdWhs
          ,IdOwn
          ,InventoryNumber
          ,CreateDate
          ,StartDate
          ,EndDate
          ,IsFullWhs
          ,IdTrackInventoryType
          ,IdUserCreate
          ,IdUserApproval
          ,CountQty
          ,Status
          ,Description
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM InventoryOrder
          WHERE IdWhs = @idWhs
        </sql>
        <parameters>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="Inventory_GetNextNumber">
        <sql>
          SELECT (COALESCE(MAX(InventoryNumber), 0) + 1) AS InventoryNumber
          FROM InventoryOrder
          <!--WHERE IdWhs = @idWhs-->
        </sql>
        <parameters>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="Inventory_Insert">
        <sql>
          INSERT INTO InventoryOrder
          (IdInventoryOrder,
          IdWhs,
          IdOwn,
          InventoryNumber,
          CreateDate,
          StartDate,
          EndDate,
          IsFullWhs,
          IdTrackInventoryType,
          IdUserCreate,
          IdUserApproval,
          CountQty,
          Status,
          Description,
          DateCreated,
          UserCreated)

          VALUES
          (@idInventoryOrder,
          @idWhs,
          @idOwn,
          @inventoryNumber,
          @createDate,
          @startDate,
          @endDate,
          @isFullWhs,
          @idTrackInventoryType,
          @idUserCreate,
          @idUserApproval,
          @countQty,
          @status,
          @description,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idInventoryOrder</parameter>
          <parameter type="Int">idWhs</parameter>
          <parameter type="Int">idOwn</parameter>
          <parameter type="Int">inventoryNumber</parameter>
          <parameter type="DateTime">createDate</parameter>
          <parameter type="DateTime">startDate</parameter>
          <parameter type="DateTime">endDate</parameter>
          <parameter type="Boolean">isFullWhs</parameter>
          <parameter type="Int">idTrackInventoryType</parameter>
          <parameter type="Int">idUserCreate</parameter>
          <parameter type="Int">idUserApproval</parameter>
          <parameter type="Int">countQty</parameter>
          <parameter type="Boolean">status</parameter>
          <parameter type="String">description</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="Inventory_Delete">
        <sql>
          DELETE FROM InventoryOrder
          WHERE IdInventoryOrder = @idInventoryOrder
        </sql>
        <parameters>
          <parameter type="Int">idInventoryOrder</parameter>
        </parameters>
      </query>

      <query code="InventoryDetail_DeleteByIdInventory">
        <sql>
          DELETE FROM InventoryDetail
          WHERE IdInventoryOrder = @idInventory
        </sql>
        <parameters>
          <parameter type="Int">idInventory</parameter>
        </parameters>
      </query>

      <query code="Inventory_Update">
        <sql>
          UPDATE InventoryOrder
          SET
          IdWhs = @idWhs
          ,IdOwn = @idOwn
          ,StartDate = @startDate
          ,EndDate = @endDate
          ,IsFullWhs = @isFullWhs
          ,IdUserApproval = @idUserApproval
          ,CountQty = @countQty
          ,Status = @status
          ,Description = @description
          ,IdTrackInventoryType = @idTrackInventoryType
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdInventoryOrder = @IdInventoryOrder
        </sql>
        <parameters>
          <parameter type="Int">idInventoryOrder</parameter>
          <parameter type="Int">idWhs</parameter>
          <parameter type="Int">idOwn</parameter>
          <parameter type="DateTime">startDate</parameter>
          <parameter type="DateTime">endDate</parameter>
          <parameter type="Boolean">isFullWhs</parameter>
          <parameter type="Int">idUserApproval</parameter>
          <parameter type="Int">countQty</parameter>
          <parameter type="Boolean">status</parameter>
          <parameter type="String">description</parameter>
          <parameter type="Int">idTrackInventoryType</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="GetInventoryStockById">
        <sql>
          SELECT IdInventoryDetail
          ,IdInventoryOrder
          ,IdWhs
          ,IsEmptyLocation
          ,UserInventory
          ,RetryQty
          ,ActionCode
          ,ActionName
          ,InvIdLocCode
          ,InvIdLpnCode
          ,InvLPNTypeCode
          ,InvIdItem
          ,InvIdOwn
          ,InvIdCtgItem
          ,InvItemQty
          ,InvLotNumber
          ,InvFifoDate
          ,InvExpirationDate
          ,InvFabricationDate
          ,StkId
          ,StkIdLocCode
          ,StkIdLpnCode
          ,StkIdItem
          ,StkIdOwn
          ,StkIdCtgItem
          ,StkItemQty
          ,StkLotNumber
          ,StkFifoDate
          ,StkExpirationDate
          ,StkFabricationDate
          ,StkWeight
          ,StkVolume
          ,TotalWeight
          FROM v_Inv_ApplyInventoryProcess
          Where IdInventoryOrder = @IdInventoryOrder;
        </sql>
        <parameters>
          <parameter type="Int">IdInventoryOrder</parameter>
        </parameters>
      </query>

      <query code="GetInventoryDetailByIdIsFullWhs">
        <sql>
          SELECT IdInventoryDetail
          ,IdInventoryOrder
          ,IdLocCode
          ,LocTypeCode
          ,IsEmptyLocation
          ,IdItem
          ,ItemCode
          ,Price
          ,LongItemName
          ,InvQty
          ,StockQty
          ,Dif_Qty
          ,Dif_Amount
          ,LotNumber
          ,SealNumber
          ,FifoDate
          ,ExpirationDate
          ,FabricationDate
          ,IdCtgItem
          ,CtgName
          ,UserInventory
          ,RetryQty
          ,IdLpnCode
          ,IdWhs
          ,IdOwn
          ,OwnName
          ,RecountTask
          ,WasCounted
          FROM v_Inv_DiffInventDetailFull
          Where IdInventoryOrder = @IdInventoryOrder
          @SQLPart
          ORDER BY IdLocCode,IdLpnCode,IdItem,ItemCode,LotNumber,SealNumber,FifoDate,ExpirationDate,FabricationDate;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdInventoryOrder</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="Code" type="textLeft">IdLocCode</filter>
          <filter name="LocationType" type="textIn">LocTypeCode</filter>
          <filter name="Counted" type="numericEqual">IdInventoryDetail</filter>
          <filter name="Empty" type="numericEqual">IsEmptyLocation</filter>
          <filter name="DifQty" type="numericGreater">Dif_Qty</filter>
          <filter name="DifAmount" type="numericGreater">Dif_Amount</filter>
          <filter name="Item" type="textLike">ItemCode</filter>
        </filters>
      </query>

      <query code="GetInventoryDetailByIdNotFullWhs">
        <sql>
          SELECT IdInventoryDetail
          ,IdInventoryOrder
          ,IdLocCode
          ,LocTypeCode
          ,IsEmptyLocation
          ,IdItem
          ,ItemCode
          ,Price
          ,LongItemName
          ,InvQty
          ,StockQty
          ,Dif_Qty
          ,Dif_Amount
          ,LotNumber
          ,SealNumber
          ,FifoDate
          ,ExpirationDate
          ,FabricationDate
          ,IdCtgItem
          ,CtgName
          ,UserInventory
          ,RetryQty
          ,IdLpnCode
          ,IdWhs
          ,IdOwn
          ,OwnName
          ,RecountTask
          ,WasCounted
          ,TotalWeight
          FROM v_Inv_DiffInventDetailFull
          WHERE IdInventoryOrder = @IdInventoryOrder  
          @SQLPart
          ORDER BY IdLocCode,IdLpnCode,IdItem,ItemCode,LotNumber,SealNumber,FifoDate,ExpirationDate,FabricationDate;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdInventoryOrder</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>

        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="Code" type="textLeft">IdLocCode</filter>
          <filter name="LocationType" type="textIn">LocTypeCode</filter>
          <filter name="Counted" type="numericEqual">IdInventoryDetail</filter>
          <filter name="Empty" type="numericEqual">IsEmptyLocation</filter>
          <filter name="DifQty" type="numericGreater">Dif_Qty</filter>
          <filter name="DifAmount" type="numericGreater">Dif_Amount</filter>
          <filter name="Item" type="textLike">ItemCode</filter>
        </filters>
      </query>

      <query code="GetInventoryDetailByIdAndWhs">
        <sql>
          SELECT IdInventoryDetail
          ,IdInventoryOrder
          ,IdLocCode
          ,LocTypeCode
          ,IsEmptyLocation
          ,IdItem
          ,ItemCode
          ,Price
          ,LongItemName
          ,InvQty
          ,StockQty
          ,Dif_Qty
          ,Dif_Amount
          ,LotNumber
          ,SealNumber
          ,FifoDate
          ,ExpirationDate
          ,FabricationDate
          ,IdCtgItem
          ,CtgName
          ,UserInventory
          ,RetryQty
          ,IdLpnCode
          ,IdWhs
          ,IdOwn
          ,OwnName
          ,RecountTask
          ,WasCounted
          FROM v_Inv_DiffInventDetPartial
          WHERE IdInventoryOrder = @IdInventoryOrder
          AND IdWhs = @IdWhs
          ORDER BY IdLocCode,IdLpnCode,IdItem,ItemCode,LotNumber,SealNumber,FifoDate,ExpirationDate,FabricationDate;
        </sql>
        <parameters>
          <parameter type="Int">IdInventoryOrder</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>       
      </query>
  
      <query code="GetInventoryDetail_SpecialAll">
        <sql>
          SELECT IdInventoryDetail,
          IdInventoryOrder,
          InventoryNumber,
          IdWhs,
          WhsName,
          IdLocCode,
          IsEmptyLocation,
          IdItem,
          ItemCode,
          LongItemName,
          IdOwn,
          IdGrpItem1,
          IdGrpItem2,
          IdGrpItem3,
          IdGrpItem4,
          OwnName,
          LotNumber,
          SerialNumber,
          FifoDate,
          ExpirationDate,
          FabricationDate,
          StockQty,
          InvQty,
          IdCtgItem,
          CtgName,
          UserInventory,
          RetryQty,
          IdLpnCode,
          RowLoc,
          ColumnLoc,
          LevelLoc,
          Aisle,
          CreateDate
          FROM
          (SELECT ID.IdInventoryDetail,
          ID.IdInventoryOrder,
          INV.InventoryNumber,
          INV.IdWhs,
          W.WhsName,
          ID.IdLocCode,
          ID.IsEmptyLocation,
          ID.IdItem,
          ITEM.ItemCode,
          ITEM.Description,
          ITEM.LongItemName,
          ISNULL(ITEM.IdOwn, -1) AS IdOwn,
          ITEM.IdGrpItem1,
          ITEM.IdGrpItem2,
          ITEM.IdGrpItem3,
          ITEM.IdGrpItem4,
          O.OwnName,
          ID.LotNumber,
          ID.SerialNumber,
          ID.FifoDate,
          ID.ExpirationDate,
          ID.FabricationDate,
          ID.QtyActual AS StockQty,
          ID.ItemQty AS InvQty,
          ID.IdCtgItem,
          CI.CtgName,
          ID.UserInventory,
          ID.RetryQty,
          ID.IdLpnCode,
          LOC.RowLoc,
          LOC.ColumnLoc,
          LOC.LevelLoc,
          LOC.Aisle,
          INV.CreateDate
          FROM InventoryDetail ID
          INNER JOIN InventoryOrder INV
          ON INV.IdInventoryOrder = ID.IdInventoryOrder
          INNER JOIN Warehouse W
          ON W.IdWhs = INV.IdWhs
          LEFT JOIN Item ITEM
          ON ITEM.IdItem = ID.IdItem
          LEFT JOIN Owner O
          ON O.IdOwn = ITEM.IdOwn
          LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = ID.IdCtgItem
          INNER JOIN Location LOC
          ON LOC.IdLocCode = ID.IdLocCode)ID
          @SQLPart
          ORDER BY ID.WhsName,ID.InventoryNumber,ID.IdLocCode,ID.IdLpnCode,ID.ItemCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>

        <filters>
          <filter name="Warehouse" type="numericIn">ID.IdWhs</filter>
          <filter name="CodeNumeric" type="numericIn">ID.InventoryNumber</filter>
          <filter name="Owner" type="numericIn">ID.IdOwn</filter>
          <filter name="Location" type="textLeft">ID.IdLocCode</filter>
          <filter name="LocationRange" type="textBetween">ID.IdLocCode</filter>
          <filter name="LocationRow" type="numericIn">ID.RowLoc</filter>
          <filter name="LocationColumn" type="numericIn">ID.ColumnLoc</filter>
          <filter name="LocationLevel" type="numericIn">ID.LevelLoc</filter>
          <filter name="LocationAisle" type="textEqual">ID.Aisle</filter>
          <filter name="Item" type="textLike">ID.ItemCode</filter>
          <filter name="Description" type="textLike">ID.Description</filter>
          <filter name="FabricationDateRange" type="textBetween">ID.FabricationDate</filter>
          <filter name="ExpirationDateRange" type="textBetween">ID.ExpirationDate</filter>
          <filter name="GroupItem1" type="numericIn">ID.IdGrpItem1</filter>
          <filter name="GroupItem2" type="numericIn">ID.IdGrpItem2</filter>
          <filter name="GroupItem3" type="numericIn">ID.IdGrpItem3</filter>
          <filter name="GroupItem4" type="numericIn">ID.IdGrpItem4</filter>
          <filter name="DateRange" type="textBetween">ID.CreateDate</filter>
          <filter name="Driver" type="textLike">ID.UserInventory</filter>
          <filter name="LpnSource" type="textLike">ID.IdLpnCode</filter>
		  <filter name="LpnSource" type="textLike">ID.IdLpnCode</filter>
		  <filter name="DocumentNbr" type="textEqual">ID.LotNumber</filter>
        </filters>
      </query>

      <query code="InventoryLocation_GetByLevelColumnAndRow">
        <sql>
      SELECT IdInventory
      ,IdLocCode
      ,DateCreated
      ,UserCreated
      ,DateModified
      ,UserModified
      FROM InventoryLocation
      WHERE IdLocCode IN (
      SELECT IdLocCode
      FROM	Location
      WHERE	IdWhs = @IdWhs
      AND   IdInventory = @IdInventory
      AND		LevelLoc &gt;= @LevelLocFrom AND LevelLoc &lt;= @LevelLocTo
          AND		Rowloc &gt;= @RowlocFrom AND Rowloc &lt;= @RowlocTo
          AND		ColumnLoc &gt;= @ColumnLocFrom AND ColumnLoc &lt;= @ColumnLocTo)
        </sql>
        <parameters>
          <parameter type="Int">LevelLocFrom</parameter>
          <parameter type="Int">LevelLocTo</parameter>
          <parameter type="Int">RowlocFrom</parameter>
          <parameter type="Int">RowlocTo</parameter>
          <parameter type="Int">ColumnLocFrom</parameter>
          <parameter type="Int">ColumnLocTo</parameter>
          <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdInventory</parameter>
    </parameters>
      </query>

      <query code="GetInventoryLocationExistsInTask">
        <sql>
          SELECT IL.IdInventory
          ,IL.IdLocCode
          ,IL.DateCreated
          ,IL.UserCreated
          ,IL.DateModified
          ,IL.UserModified
          FROM InventoryOrder IO INNER JOIN
          InventoryLocation IL ON IO.IdInventoryOrder = IL.IdInventory
          WHERE EXISTS (SELECT 1
          FROM Task T
          WHERE T.IdWhs = IO.IdWhs
          AND T.IsComplete = 0
          AND T.IdLocStageTarget = IL.IdLocCode)
          AND IO.IdInventoryOrder = @IdInventory
        </sql>
        <parameters>
          <parameter type="Int">IdInventory</parameter>
        </parameters>
      </query>

      <query code="GetCountLocationForInventory">
        <sql>
          SELECT COUNT(IdInventory)AS COUNT
          FROM InventoryLocation
          WHERE IdInventory = @IdInventory
        </sql>
        <parameters>
          <parameter type="Int">IdInventory</parameter>
        </parameters>
      </query>

      <query code="GetCountPendingLocationInventory">
        <sql>
          SELECT SUM(PendLoc)AS COUNT FROM(
          SELECT COUNT(IdInventory)PendLoc
          FROM InventoryLocation
          WHERE IdInventory = @IdInventory
          AND WasCounted = 0
          UNION
          SELECT COUNT(IdTask)PendLoc
          FROM Task
          WHERE IdDocumentBound = @IdInventory
          AND TaskTypeCode = 'RECO'
          AND IsComplete = 0)PendingLocation
        </sql>
        <parameters>
          <parameter type="Int">IdInventory</parameter>
        </parameters>
      </query>

      <query code="GetInventoryDetailAccuracy">
        <sql>
          SELECT ID.IdInventoryDetail,
          O.OwnCode,
          O.OwnName,
          I.ItemCode,
          I.LongItemName,
          IO.IdInventoryOrder,
          IO.InventoryNumber,
          ID.IdLocCode,
          LT.LocTypeName,
          ISNULL(ID.QtyActual, 0) AS StockQty,
          ISNULL(ID.ItemQty, 0) AS InvQty,
          IO.IdOwn,
          IO.IdWhs,
          W.WhsCode,
          W.ShortWhsName AS WhsName
          FROM InventoryOrder IO
          INNER JOIN InventoryDetail ID
          ON IO.IdInventoryOrder = ID.IdInventoryOrder
          INNER JOIN Warehouse W
          ON IO.IdWhs = W.IdWhs
          INNER JOIN Owner O
          ON IO.IdOwn = O.IdOwn
          INNER JOIN Item I
          ON ID.IdItem = I.IdItem
          INNER JOIN Location L
          ON ID.IdLocCode = L.IdLocCode
          INNER JOIN LocationType LT
          ON L.LocTypeCode = LT.LocTypeCode
          @SQLPart
          ORDER BY IO.IdInventoryOrder, ID.IdLocCode, ID.IdItem;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>

        <filters>
          <filter name="Warehouse" type="numericIn">IO.IdWhs</filter>
          <filter name="CodeNumeric" type="numericIn">IO.IdInventoryOrder</filter>
          <filter name="Owner" type="numericIn">IO.IdOwn</filter>
          <filter name="Location" type="textLeft">ID.IdLocCode</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
        </filters>
      </query>

      <query code="GetInventoryStockKardexByIdWhs">
        <sql>
          SELECT A.IdWhs, A.IdOwn, A.IdItem
          ,SUM(A.InvQty) AS InvQty
          ,SUM(A.StkQty) AS StkQty
          ,(SUM(A.InvQty) - SUM(A.StkQty)) AS DiffQty
          FROM (
          SELECT
          IdWhs
          ,ActionCode
          ,ActionName
          ,CASE
          WHEN ActionName = 'DEL' THEN StkIdItem
          ELSE InvIdItem
          END AS IdItem,
          CASE
          WHEN ActionName = 'DEL' THEN StkIdOwn
          ELSE InvIdOwn
          END AS IdOwn
          ,ISNULL(SUM (InvItemQty),0) AS InvQty
          ,ISNULL(SUM (StkItemQty),0) AS StkQty
          FROM v_Inv_ApplyInventoryProcess
          WHERE IdInventoryOrder = @IdInventoryOrder
          AND ActionCode IN (1,4)
          AND IdWhs = @IdWhs
          GROUP BY IdWhs ,ActionCode ,ActionName
          ,CASE WHEN ActionName = 'DEL' then StkIdItem ELSE InvIdItem END
          ,CASE WHEN ActionName = 'DEL' then StkIdOwn  ELSE InvIdOwn  END
          UNION ALL
          SELECT
          V.IdWhs
          ,V.ActionCode
          ,V.ActionName
          ,V.InvIdItem AS IdItem
          ,V.InvIdOwn  AS IdOwn
          ,ISNULL(SUM (V.InvItemQty),0) AS InvQty
          ,(SELECT TOP 1 StkItemQty
          FROM v_Inv_ApplyInventoryProcess
          WHERE V.IdWhs = IdWhs
          AND V.InvIdOwn = InvIdOwn
          AND V.InvIdItem = InvIdItem
          AND V.InvIdLocCode = InvIdLocCode
          --AND ((V.InvExpirationDate = InvExpirationDate and InvExpirationDate is not null) or (InvExpirationDate is null))
          --AND ((V.InvLotNumber = InvLotNumber and InvLotNumber is not null) or (InvLotNumber is null))
          --AND ((V.InvFifoDate = InvFifoDate and InvFifoDate is not null) or (InvFifoDate is null))
          --AND ((V.InvFabricationDate = InvFabricationDate and InvFabricationDate is not null) or (InvFabricationDate is null))
          --AND ((V.InvIdCtgItem = InvIdCtgItem and InvIdCtgItem is not null) or (InvIdCtgItem is null))
          AND V.IdInventoryOrder = IdInventoryOrder) AS StkQty
          FROM v_Inv_ApplyInventoryProcess V
          WHERE V.IdInventoryOrder = @IdInventoryOrder
          AND V.ActionCode = 3
          AND V.IdWhs = @IdWhs
          GROUP BY V.IdWhs, V.ActionCode, V.ActionName, V.InvIdItem
          ,V.InvIdOwn ,V.InvIdLocCode, V.IdInventoryOrder
          --,V.InvLotNumber ,V.InvExpirationDate, V.InvFifoDate, V.InvFabricationDate, V.InvIdCtgItem
          )A
          GROUP BY A.IdWhs, A.IdOwn, A.IdItem;
        </sql>
        <parameters>
          <parameter type="Int">IdInventoryOrder</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="GetInventoryLocationByAnyParameter">
        <sql>
          SELECT
          IL.IdInventory,
          IL.IdLocCode,
          IL.DateCreated,
          IL.UserCreated,
          IL.DateModified,
          IL.UserModified,
          IL.WasCounted,
          L.RowLoc,
          L.ColumnLoc,
          L.LevelLoc,
          L.Aisle,
          L.Description,
          L.IdWhs
          FROM InventoryLocation IL
          INNER JOIN Location L
          ON L.IdLocCode = IL.IdLocCode
          WHERE 1 = 1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdInventory" type="numericEqual">IL.IdInventory</filter>
          <filter name="IdLocCode" type="textEqual">IL.IdLocCode</filter>
        </filters>
        <sub-querys>

        </sub-querys>
      </query>

      <query code="GetInventoryDetailByInventoryId">
        <sql>
            SELECT IdInventoryDetail
                  ,IdInventoryOrder
                  ,IdLocCode
                  ,IsEmptyLocation
                  ,IdItem
                  ,LotNumber
                  ,SerialNumber
                  ,FifoDate
                  ,ExpirationDate
                  ,FabricationDate
                  ,QtyActual
                  ,ItemQty
                  ,IdCtgItem
                  ,UserInventory
                  ,RetryQty
                  ,IdLpnCode
                  ,SpecialField1
                  ,SpecialField2
                  ,SpecialField3
                  ,SpecialField4
                  ,DateCreated
                  ,UserCreated
                  ,DateModified
                  ,UserModified
                  ,IdLpnType
              FROM InventoryDetail
             WHERE IdInventoryOrder = @idInventoryOrder
        </sql>
        <parameters>
          <parameter type="Int">idInventoryOrder</parameter>
        </parameters>
      </query>

      <query code="InsertInventoryDetail">
        <sql>
          INSERT INTO InventoryDetail
          (IdInventoryDetail,
          IdInventoryOrder,
          IdLocCode,
          IsEmptyLocation,
          IdItem,
          LotNumber,
          SerialNumber,
          FifoDate,
          ExpirationDate,
          FabricationDate,
          ItemQty,
          QtyActual,
          IdCtgItem,
          UserInventory,
          RetryQty,
          IdLpnCode,
          IdLpnType,
          DateCreated,
          UserCreated)
          VALUES(
          @IdInventoryDetail,
          @IdInventoryOrder,
          @IdLocCode,
          @IsEmptyLocation,
          @IdItem,
          @LotNumber,
          @SerialNumber,
          @FifoDate,
          @ExpirationDate,
          @FabricationDate,
          @ItemQty,
          @QtyActual,
          @IdCtgItem,
          @UserInventory,
          @RetryQty,
          @IdLpnCode,
          @IdLpnType,
          @DateCreated,
          @UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdInventoryDetail</parameter>
          <parameter type="Int">IdInventoryOrder</parameter>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="Boolean">IsEmptyLocation</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="String">LotNumber</parameter>
          <parameter type="String">SerialNumber</parameter>
          <parameter type="DateTime">FifoDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="DateTime">FabricationDate</parameter>
          <parameter type="Decimal">ItemQty</parameter>
          <parameter type="Decimal">QtyActual</parameter>
          <parameter type="Int">IdCtgItem</parameter>
          <parameter type="String">UserInventory</parameter>
          <parameter type="Int">RetryQty</parameter>
          <parameter type="String">IdLpnCode</parameter>
          <parameter type="Int">IdLpnType</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>
  
      <!-- END INVENTORY section  -->

      <!-- TASK SIMULATION section  -->
      <query code="TaskSimulation_GetByUserAndType">
        <sql>
          SELECT
          t.IdTask,
          t.IdUser,
          t.IdWhs,
          Whs.WhsCode,
          Whs.ShortWhsName,
          Whs.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.IdOutboundOrder,
          Out.OutboundNumber,
          Out.Priority,
          Out.FullShipment,
		  t.IsPtl
          FROM TaskSimulation t
          LEFT JOIN OutboundOrder Out ON t.IdDocumentBound = Out.IdOutboundOrder
          INNER JOIN Warehouse Whs ON t.IdWhs = Whs.IdWhs
          INNER JOIN Owner Own ON t.IdOwn = Own.IdOwn
          WHERE t.IdUser = @idUser
          AND t.TaskTypeCode = @taskTypeCode
          AND t.IdTrackTaskQueue IS NULL;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idUser</parameter>
          <parameter type="String">taskTypeCode</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="TaskSimulation_Delete">
        <sql>
          DELETE FROM TaskOutboundOrderSimulation
          WHERE IdTask IN
          (SELECT IdTask FROM TaskSimulation
          WHERE TaskTypeCode = @taskTypeCode
          AND IdUser = @idUser
          AND IdTrackTaskQueue IS NULL);

          DELETE FROM TaskDetailSimulation
          WHERE IdTask IN
          (SELECT IdTask FROM TaskSimulation
          WHERE TaskTypeCode = @taskTypeCode
          AND IdUser = @idUser
          AND IdTrackTaskQueue IS NULL);

          DELETE FROM TaskSimulation
          WHERE TaskTypeCode = @taskTypeCode
          AND IdUser = @idUser
          AND IdTrackTaskQueue IS NULL
        </sql>
        <parameters>
          <parameter type="String">taskTypeCode</parameter>
          <parameter type="Int">idUser</parameter>
        </parameters>
      </query>

      <query code="TaskSimulationQueue_Delete">
        <sql>
          DELETE FROM TaskOutboundOrderSimulation
          WHERE IdTask = @idTask;

          DELETE FROM TaskDetailSimulation
          WHERE IdTask = @idTask;

          DELETE FROM TaskSimulation
          WHERE IdTask = @idTask;
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
        </parameters>
      </query>

	<query code="TaskSimulation_Insert">
		<sql>
			INSERT INTO TaskSimulation
			(IdTask
			,IdWhs
			,IdOwn
			,IdUser
			,TaskTypeCode
			,IdDocumentBound
			,Priority
			,CreateDate
			,DateCreated
			,UserCreated
			,IdTrackTaskQueue
			,IsPtl)

			VALUES
			(@IdTask
			,@IdWhs
			,@IdOwn
			,@IdUser
			,@TaskTypeCode
			,@IdDocumentBound
			,@Priority
			,@CreateDate
			,@dateCreated
			,@userCreated
			,@IdTrackTaskQueue
			,@IsPtl)
		</sql>
		<parameters>
			<parameter type="Int">IdTask</parameter>
			<parameter type="Int">IdWhs</parameter>
			<parameter type="Int">IdOwn</parameter>
			<parameter type="Int">IdUser</parameter>
			<parameter type="String">TaskTypeCode</parameter>
			<parameter type="Int">IdDocumentBound</parameter>
			<parameter type="Int">Priority</parameter>
			<parameter type="DateTime">CreateDate</parameter>
			<parameter type="DateTime">dateCreated</parameter>
			<parameter type="String">userCreated</parameter>
			<parameter type="Int">IdTrackTaskQueue</parameter>
			<parameter type="Boolean">IsPtl</parameter>
		</parameters>
	</query>

      <query code="TaskSimulation_InsertOutboundOrderRelation">
        <sql>
          INSERT INTO TaskOutboundOrderSimulation
          (IdTask
          ,IdOutbound
          ,IdOutboundDetail)

          VALUES
          (@IdTask
          ,@IdOutbound
          ,@IdOutboundDetail)
        </sql>
        <parameters>
          <parameter type="Int">IdTask</parameter>
          <parameter type="Int">IdOutbound</parameter>
          <parameter type="Int">IdOutboundDetail</parameter>
        </parameters>
      </query>

      <query code="TaskDetailSimulation_Insert">
        <sql>
          INSERT INTO TaskDetailSimulation
          (IdTaskDetail
          ,IdTask
          ,IdDocumentBound
          ,IdDetailBound
          ,LineNumber
          ,IdItem
          ,IdCtgItem
          ,LotNumber
          ,FifoDate
          ,FabricationDate
          ,ExpirationDate
          ,ProposalQty
          ,RealQty
          ,TotalQty
          ,IdLocSourceProposal
          ,IdLpnSourceProposal
          ,DateCreated
          ,UserCreated)

          VALUES
          (@IdTaskDetail
          ,@IdTaskSimulation
          ,@IdDocumentBound
          ,@IdDetailBound
          ,@LineNumber
          ,@IdItem
          ,@IdCategoryItem
          ,@LotNumber
          ,@FifoDate
          ,@FabricationDate
          ,@ExpirationDate
          ,@ProposalQty
          ,@RealQty
          ,@TotalQty
          ,@IdLocSourceProposal
          ,@IdLpnSourceProposal
          ,@dateCreated
          ,@userCreated)

        </sql>
        <parameters>
          <parameter type="Int">IdTaskDetail</parameter>
          <parameter type="Int">IdTaskSimulation</parameter>
          <parameter type="Int">IdDocumentBound</parameter>
          <parameter type="Int">IdDetailBound</parameter>
          <parameter type="Int">LineNumber</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdCategoryItem</parameter>
          <parameter type="String">LotNumber</parameter>
          <parameter type="DateTime">FifoDate</parameter>
          <parameter type="DateTime">FabricationDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="Decimal">ProposalQty</parameter>
          <parameter type="Decimal">RealQty</parameter>
          <parameter type="Decimal">TotalQty</parameter>
          <parameter type="String">IdLocSourceProposal</parameter>
          <parameter type="String">IdLpnSourceProposal</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="TaskDetailSimulation_GetByTask">
        <sql>
			SELECT
			td.IdDetailBound,
			td.IdDocumentBound,
			oo.OutboundNumber,
			td.LineNumber,
			td.IdItem,
			i.ItemCode,
			i.Description,
			i.LongItemName LongName,
			td.IdCtgItem,
			ca.CtgName,
			td.LotNumber,
			td.FifoDate,
			td.FabricationDate,
			td.ExpirationDate,
			MAX(td.ProposalQty) AS ProposalQty,
			SUM(td.RealQty) AS RealQty,
			SUM(td.TotalQty) AS TotalQty,
			i.Weight AS ItemWeight,
			i.Volume AS ItemVolume
			FROM TaskDetailSimulation td
			INNER JOIN OutboundOrder oo ON td.IdDocumentBound = oo.IdOutboundOrder
			INNER JOIN Item i ON td.IdItem = i.IdItem
			LEFT OUTER JOIN categoryitem ca ON td.IdCtgItem = ca.IdCtgItem
			WHERE td.IdTask = @idTask
			GROUP BY
			td.IdDetailBound, td.IdDocumentBound, OO.OutboundNumber, td.LineNumber, td.IdItem, i.ItemCode, i.LongItemName,
			i.Description, td.IdCtgItem, ca.CtgName, td.LotNumber, td.FifoDate, td.FabricationDate, td.ExpirationDate, i.Weight, i.Volume;

			SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
			FROM CfgEntityProperty qf
			JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
			WHERE QueryName = @queryName
			ORDER BY FieldOrder
		</sql>

        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="TaskDetailSimulation_Customer_GetByTask">
        <sql>
          SELECT
          td.IdDetailBound,
          td.LineNumber,
          td.IdItem,
          i.ItemCode,
          i.Description,
          i.LongItemName LongName,
          od.IdCtgItem,
          ca.CtgName,
          od.LotNumber,
          od.FifoDate,
          od.FabricationDate,
          od.ExpirationDate,
          Max(td.ProposalQty) AS ProposalQty,
          (SELECT Sum(realQty) FROM TaskDetailSimulation WHERE IdTask = @idTask AND IdItem = td.IdItem AND ((IdCtgItem = od.IdCtgItem AND od.IdCtgItem IS NOT NULL)OR(od.IdCtgItem IS NULL)) AND ((LotNumber = od.LotNumber AND od.LotNumber IS NOT NULL)OR(od.LotNumber IS NULL)) AND ((FifoDate = od.FifoDate AND od.FifoDate IS NOT NULL)OR(od.FifoDate IS NULL)) AND ((FabricationDate = od.FabricationDate AND od.FabricationDate IS NOT NULL)OR(od.FabricationDate IS NULL)) AND ((ExpirationDate = od.ExpirationDate AND od.ExpirationDate IS NOT NULL)OR(od.ExpirationDate IS NULL))) AS RealQty,
          (SELECT SUM(CASE WHEN ISNULL(RealQty,0) = 0 THEN ProposalQty ELSE RealQty END) FROM TaskDetailSimulation WHERE IdTask = @idTask AND IdItem = td.IdItem AND ((IdCtgItem = od.IdCtgItem AND od.IdCtgItem IS NOT NULL)OR(od.IdCtgItem IS NULL)) AND ((LotNumber = od.LotNumber AND od.LotNumber IS NOT NULL)OR(od.LotNumber IS NULL)) AND ((FifoDate = od.FifoDate AND od.FifoDate IS NOT NULL)OR(od.FifoDate IS NULL)) AND ((FabricationDate = od.FabricationDate AND od.FabricationDate IS NOT NULL)OR(od.FabricationDate IS NULL)) AND ((ExpirationDate = od.ExpirationDate AND od.ExpirationDate IS NOT NULL)OR(od.ExpirationDate IS NULL))) AS TotalQty,
          i.Weight AS ItemWeight,
          i.Volume AS ItemVolume,
          (SELECT Sum(ProposalQty) * i.Price FROM TaskDetailSimulation WHERE IdTask = @idTask AND IdItem = td.IdItem AND ((IdCtgItem = od.IdCtgItem AND od.IdCtgItem IS NOT NULL)OR(od.IdCtgItem IS NULL)) AND ((LotNumber = od.LotNumber AND od.LotNumber IS NOT NULL)OR(od.LotNumber IS NULL)) AND ((FifoDate = od.FifoDate AND od.FifoDate IS NOT NULL)OR(od.FifoDate IS NULL)) AND ((FabricationDate = od.FabricationDate AND od.FabricationDate IS NOT NULL)OR(od.FabricationDate IS NULL)) AND ((ExpirationDate = od.ExpirationDate AND od.ExpirationDate IS NOT NULL)OR(od.ExpirationDate IS NULL))) AS Price,
          td.IdDocumentBound,
          oo.OutboundNumber,
          oo.CustomerName,
          i.Price AS ItemPrice
          FROM TaskDetailSimulation td
          INNER JOIN Item i ON td.IdItem = i.IdItem
          INNER JOIN OutboundOrder oo ON td.IdDocumentBound = oo.IdOutboundOrder
          LEFT OUTER JOIN OutboundDetail od ON td.IdDetailBound = od.IdOutboundDetail
          LEFT OUTER JOIN categoryitem ca ON od.IdCtgItem = ca.IdCtgItem
          WHERE td.IdTask = @idTask
          GROUP BY
          td.IdDocumentBound,td.IdDetailBound,oo.OutboundNumber,
          oo.CustomerName, td.LineNumber, td.IdItem, i.ItemCode, i.LongItemName,
          i.Description, od.IdCtgItem, ca.CtgName, od.LotNumber, od.FifoDate, od.FabricationDate, od.ExpirationDate, i.Weight, i.Volume, i.Price
          ORDER BY td.IdItem;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>

        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="TaskDetailSimulation_GetByTaskKit">
        <sql>
          SELECT
          td.IdDetailBound,
          td.LineNumber,
          i.IdItem,
          i.ItemCode,
          i.Description,
          td.LotNumber,
          td.FifoDate,
          td.FabricationDate,
          td.ExpirationDate,
          td.IdCtgItem,
          ca.CtgName,
          MAX(td.ProposalQty) AS ProposalQty,
          AVG(td.RealQty) AS RealQty,
          AVG(td.TotalQty) AS TotalQty
          FROM TaskDetailSimulation td
          INNER JOIN Kit ON td.IdItem = kit.IdItemBase
          INNER JOIN Item i ON kit.IdItemKit = i.IdItem
          LEFT JOIN categoryitem ca ON td.IdCtgItem = ca.IdCtgItem
          WHERE td.IdTask = @idTask
          GROUP BY
          td.IdDetailBound, td.LineNumber, i.IdItem, i.ItemCode, i.Description, td.LotNumber, td.FifoDate, td.FabricationDate, td.ExpirationDate, td.IdCtgItem, ca.CtgName;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>
  
      <query code="TaskDetailSimulation_DeleteByIdTask">
        <sql>
          DELETE FROM TaskDetailSimulation
          WHERE IdTask = @idTask;
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
        </parameters>
      </query>

      <query code="TaskSimulation_GetById">
        <sql>
            SELECT 
                   IdTask
                  ,IdUser
                  ,IdWhs
                  ,IdOwn
                  ,IsComplete
                  ,TaskTypeCode
                  ,Description
                  ,IdDocumentBound
                  ,Priority
                  ,CreateDate
                  ,CloseDate
                  ,ProposalStartDate
                  ,ProposalEndDate
                  ,RealStartDate
                  ,RealEndDate
                  ,Status
                  ,IdTrackTask
                  ,DateTrackTask
                  ,IdLocStageSource
                  ,IdLocStageTarget
                  ,WorkersRequired
                  ,WorkersAssigned
                  ,DateCreated
                  ,UserCreated
                  ,DateModified
                  ,UserModified
				  ,IsPtl
             FROM TaskSimulation 
            WHERE IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
        </parameters>
      </query>
  
      <query code="TaskDetailSimulation_GetDetailByTask">
        <sql>
          SELECT
          td.IdDetailBound,
          td.LineNumber,
          i.IdItem,
          i.ItemCode,
          i.Description,
          i.Weight AS ItemWeight,
          i.Volume AS ItemVolume,
          td.LotNumber,
          td.FifoDate,
          td.FabricationDate,
          td.ExpirationDate,
          td.IdCtgItem,
          ca.CtgName,
          td.ProposalQty,
          td.RealQty,
          td.TotalQty,
          oo.OutboundNumber,
          oo.CustomerName,
          oo.IdOutboundOrder as IdDocumentBound,
          i.LongItemName as LongName
          FROM TaskDetailSimulation td
          INNER JOIN Item i ON td.IdItem = i.IdItem
          INNER JOIN OutboundOrder oo
          ON td.IdDocumentBound = oo.IdOutboundOrder
          LEFT OUTER JOIN OutboundDetail od
          ON td.IdDetailBound = od.IdOutboundDetail
          LEFT OUTER JOIN categoryitem ca
          ON td.IdCtgItem = ca.IdCtgItem
          WHERE td.IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
        </parameters>
      </query>

    <query code="TaskSimulation_GetByAnyParameter">
      <sql>
        SELECT
        T.IdTask,
        T.TaskTypeCode,
        T.IdUser,
        U.FirstName,
        U.LastName,
        U.UserName,
        T.IdWhs,
        Whs.WhsCode,
        Whs.ShortWhsName,
        Whs.WhsName,
        Own.IdOwn,
        Own.OwnCode,
        Own.OwnName,
        Own.TradeName,
        Out.IdOutboundOrder,
        Out.OutboundNumber,
        Out.Priority,
        Out.FullShipment,
        Que.IdTrackTaskQueue,
        Que.NameTrackTaskQueue,
        T.PercCompletion,
        (SELECT CASE WHEN COUNT(IdOutboundOrder) = 0 THEN 0 ELSE 1 END AS IsTrue
          FROM v_Oub_InOtherSimulation
          WHERE IdTask != T.IdTask
          AND IdOutboundOrder = T.IdDocumentBound) AS InOtherSimulation,
		T.IsPtl  
        FROM TaskSimulation T
        INNER JOIN Warehouse Whs ON T.IdWhs = Whs.IdWhs
        INNER JOIN Owner Own ON T.IdOwn = Own.IdOwn
        INNER JOIN CfgUserWms U ON T.IdUser = U.IdUserWms
        LEFT JOIN OutboundOrder Out ON t.IdDocumentBound = Out.IdOutboundOrder
        INNER JOIN TrackTaskQueue Que ON t.IdTrackTaskQueue = Que.IdTrackTaskQueue
        WHERE 1 = 1
        @SQLPart
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="IdTaskSimulation" type="numericEqual">T.IdTask</filter>
        <filter name="IdUser" type="numericEqual">T.IdUser</filter>
        <filter name="IdWhs" type="numericEqual">T.IdWhs</filter>
        <filter name="IdOwn" type="numericEqual">T.IdOwn</filter>
        <filter name="IdTrackTaskQueue" type="numericEqual">T.IdTrackTaskQueue</filter>
        <filter name="UserCreated" type="textLike">U.UserName</filter>
        <filter name="OutboundNumber" type="textLike">Out.OutboundNumber</filter>
		<filter name="IdDocumentBound" type="numericEqual">T.IdDocumentBound</filter>
      </filters>
		<sub-querys>
			<sub-query code="ExistsOrderInOtherSimulation">
				<sql>
					AND EXISTS(SELECT 1
					FROM TaskSimulation TS1 INNER JOIN
					TaskDetailSimulation TDS1 on TS1.IdTask = TDS1.IdTask
					WHERE TS1.IdTrackTaskQueue NOT IN (3,4)
					AND TS1.IdTask = T.IdTask
					AND TS1.IdTask != @IdTask
						AND EXISTS (SELECT 1 FROM TaskDetailSimulation
						WHERE IdTask = @IdTask
						AND IdDocumentBound = TDS1.IdDocumentBound))
					</sql>
				<parameters>
					<parameter type="Int">IdTask</parameter>
				</parameters>
			</sub-query>
		</sub-querys>
    </query>

    <query code="TaskSimulation_GetTasksInQueue">
      <sql>
		  SELECT
		  T.IdTask,
		  T.TaskTypeCode,
		  T.IdUser,
		  U.FirstName,
		  U.LastName,
		  U.UserName,
		  T.IdWhs,
		  T.DateCreated,
		  Whs.WhsCode,
		  Whs.ShortWhsName,
		  Whs.WhsName,
		  Own.IdOwn,
		  Own.OwnCode,
		  Own.OwnName,
		  Own.TradeName,
		  Out.IdOutboundOrder,
		  (CASE WHEN T.TaskTypeCode='PIKBT' THEN CAST(T.IdDocumentBound AS varchar) 
		  ELSE CAST(Out.OutboundNumber AS varchar) END) AS OutboundNumber,
		  Out.Priority,
		  Out.FullShipment,
		  Out.ReferenceNumber,
		  Out.CustomerName,
		  B.BranchName,
		  Que.IdTrackTaskQueue,
		  Que.NameTrackTaskQueue,
		  T.PercCompletion,
		  (SELECT CASE WHEN COUNT(IdOutboundOrder) = 0 THEN 0 ELSE 1 END AS IsTrue
		  FROM v_Oub_InOtherSimulation
		  WHERE IdTask != T.IdTask
		  AND IdOutboundOrder = T.IdDocumentBound) AS InOtherSimulation,
		  T.IsPtl
		  FROM TaskSimulation T
		  INNER JOIN Warehouse Whs ON T.IdWhs = Whs.IdWhs
		  INNER JOIN Owner Own ON T.IdOwn = Own.IdOwn
		  INNER JOIN CfgUserWms U ON T.IdUser = U.IdUserWms
		  LEFT JOIN OutboundOrder Out ON t.IdDocumentBound = Out.IdOutboundOrder
		  LEFT JOIN Branch B ON B.IdBranch = Out.IdBranch
		  INNER JOIN TrackTaskQueue Que ON t.IdTrackTaskQueue = Que.IdTrackTaskQueue
		  WHERE 1 = 1
		  @SQLPart
		  ORDER BY T.DateCreated

		  SELECT q.IdCfgEntity,
		  FieldName,
		  Enabled,
		  VisibleGrid,
		  VisibleEditNew,
		  VisibleView,
		  VisibleReport,
		  Required,
		  DefaultValue,
		  FieldOrder,
		  FieldWidth
		  FROM CfgEntityProperty qf
		  JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
		  WHERE QueryName = @queryName
		  ORDER BY FieldOrder
	  </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
        <parameter type="String">queryName</parameter>
      </parameters>
      <filters>
        <filter name="Owner" type="numericIn">T.IdOwn</filter>
        <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
        <filter name="DocumentNbr" type="textLike">Out.OutboundNumber</filter>
		<filter name="TrackTaskType" type="numericIn">T.IdTrackTaskQueue</filter>
        <filter name="Code" type="textLike">U.UserName</filter>
		<filter name="PercentRange" type="textBetween">T.PercCompletion</filter>  
        <filter name="DateRange" type="dateGreater">T.DateCreated</filter>
		<filter name="TaskType" type="textIn">T.TaskTypeCode</filter>
      </filters>
    </query>

  <query code="UpdateTaskSimulation">
    <sql>
      UPDATE TaskSimulation SET
      IdUser = @IdUser
      IdWhs = @IdWhs
      IdOwn = @IdOwn
      TaskTypeCode = @TaskTypeCode
      IdDocumentBound = @IdDocumentBound
      IdTrackTaskQueue = @IdTrackTaskQueue
      PercCompletion = @PercCompletion
      DateModified = @DateModified
      UserModified = @UserModified
      WHERE IdTask = @IdTaskSimulation
    </sql>
    <parameters>
      <parameter type="Int">IdUser</parameter>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="String">TaskTypeCode</parameter>
      <parameter type="Int">IdDocumentBound</parameter>
      <parameter type="Int">IdTrackTaskQueue</parameter>
      <parameter type="Int">PercCompletion</parameter>
      <parameter type="DateTime">DateModified</parameter>
      <parameter type="String">UserModified</parameter>
      <parameter type="Int">IdTaskSimulation</parameter>
    </parameters>
  </query>

    <query code="TaskSimulation_UpdateTrackTaskQueue">
      <sql>
        UPDATE TaskSimulation SET
        IdTrackTaskQueue = @IdTrackTaskQueue,
        DateModified = @DateModified,
        UserModified = @UserModified
        WHERE IdTask = @IdTaskSimulation
      </sql>
      <parameters>
        <parameter type="Int">IdTrackTaskQueue</parameter>
        <parameter type="DateTime">DateModified</parameter>
        <parameter type="String">UserModified</parameter>
        <parameter type="Int">IdTaskSimulation</parameter>
      </parameters>
    </query>

	<query code="TaskSimulation_UpdateDocument">
		<sql>
			UPDATE TaskSimulation SET
			IdDocumentBound = @IdDocumentBound,
			DateModified = @DateModified,
			UserModified = @UserModified
			WHERE IdTask = @IdTaskSimulation
		</sql>
		<parameters>
			<parameter type="Int">IdDocumentBound</parameter>
			<parameter type="DateTime">DateModified</parameter>
			<parameter type="String">UserModified</parameter>
			<parameter type="Int">IdTaskSimulation</parameter>
		</parameters>
	</query>

      <!-- End TASK SIMULATION section  -->

      <!-- TASK section  -->
      <query code="InsertTask">
        <sql>
          INSERT INTO Task
          (IdTask,
          IdWhs,
          IdOwn,
          IsComplete,
          TaskTypeCode,
          Description,
          IdDocumentBound,
          Priority,
          CreateDate,
          CloseDate,
          ProposalStartDate,
          ProposalEndDate,
          RealStartDate,
          RealEndDate,
          Status,
          IdTrackTaskType,
          DateTrackTask,
          IdLocStageSource,
          IdLocStageTarget,
          WorkersRequired,
          WorkersAssigned,
          AllowCrossDock,
          DateCreated,
          UserCreated)

          VALUES
          (@IdTask
          ,@IdWhs
          ,@IdOwn
          ,@IsComplete
          ,@TaskTypeCode
          ,@Description
          ,@IdDocumentBound
          ,@Priority
          ,@CreateDate
          ,@CloseDate
          ,@ProposalStartDate
          ,@ProposalEndDate
          ,@RealStartDate
          ,@RealEndDate
          ,@Status
          ,@IdTrackTaskType
          ,@DateTrackTask
          ,@IdLocStageSource
          ,@IdLocStageTarget
          ,@WorkersRequired
          ,@WorkersAssigned
          ,@AllowCrossDock
          ,@dateCreated
          ,@userCreated)

        </sql>
        <parameters>
          <parameter type="Int">IdTask</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Boolean">IsComplete</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="String">TaskTypeCode</parameter>
          <parameter type="Int">IdDocumentBound</parameter>
          <parameter type="Int">Priority</parameter>
          <parameter type="DateTime">CreateDate</parameter>
          <parameter type="DateTime">CloseDate</parameter>
          <parameter type="DateTime">ProposalStartDate</parameter>
          <parameter type="DateTime">ProposalEndDate</parameter>
          <parameter type="DateTime">RealStartDate</parameter>
          <parameter type="DateTime">RealEndDate</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="Int">IdTrackTaskType</parameter>
          <parameter type="DateTime">DateTrackTask</parameter>
          <parameter type="String">IdLocStageSource</parameter>
          <parameter type="String">IdLocStageTarget</parameter>
          <parameter type="Int">WorkersRequired</parameter>
          <parameter type="Int">WorkersAssigned</parameter>
          <parameter type="Boolean">AllowCrossDock</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="InsertTaskDetail">
        <sql>
          INSERT INTO TaskDetail
          (IdTaskDetail,
          IdWhs,
          IdTask,
          IsComplete,
          IdDocumentBound,
          IdDetailBound,
          LineNumber,
          IdItem,
          IdCtgItem,
          LotNumber,
          FifoDate,
          FabricationDate,
          ExpirationDate,
          Priority,
          IdLocSourceProposal,
          IdLocForkLiftProposal,
          IdLocTargetProposal,
          IdLocSourceUsed,
          IdLocForkLiftUsed,
          IdLocTargetUsed,
          IdLpnSourceProposal,
          IdLpnTargetProposal,
          IdLpnTargetUsed,
          IdLpnSourceUsed,
          Status,
          ProposalQty,
          RealQty,
          IdPlanedProcess,
          WaveCode,
          LabelCode,
          LoadCode,
          LoadSeq,
          UserAssigned,
          SerialNumber,
          StartDate,
          EndDate,
          MadeCrossDock,
          DateCreated,
          UserCreated,
          StateInterface)
          VALUES
          (@IdTaskDetail
          ,@IdWhs
          ,@IdTask
          ,@IsComplete
          ,@IdDocumentBound
          ,@IdDetailBound
          ,@LineNumber
          ,@IdItem
          ,@IdCtgItem
          ,@LotNumber
          ,@FifoDate
          ,@FabricationDate
          ,@ExpirationDate
          ,@Priority
          ,@IdLocSourceProposal
          ,@IdLocForkLiftProposal
          ,@IdLocTargetProposal
          ,@IdLocSourceUsed
          ,@IdLocForkLiftUsed
          ,@IdLocTargetUsed
          ,@IdLpnSourceProposal
          ,@IdLpnTargetProposal
          ,@IdLpnTargetUsed
          ,@IdLpnSourceUsed
          ,@Status
          ,@ProposalQty
          ,@RealQty
          ,@IdPlanedProcess
          ,@WaveCode
          ,@LabelCode
          ,@LoadCode
          ,@LoadSeq
          ,@UserAssigned
          ,@SerialNumber
          ,@StartDate
          ,@EndDate
          ,@MadeCrossDock
          ,@dateCreated
          ,@userCreated
          ,@StateInterface)
        </sql>
        <parameters>
          <parameter type="Int">IdTaskDetail</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdTask</parameter>
          <parameter type="Boolean">IsComplete</parameter>
          <parameter type="Int">IdDocumentBound</parameter>
          <parameter type="Int">IdDetailBound</parameter>
          <parameter type="Int">LineNumber</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdCtgItem</parameter>
          <parameter type="String">LotNumber</parameter>
          <parameter type="DateTime">FifoDate</parameter>
          <parameter type="DateTime">FabricationDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="Int">Priority</parameter>
          <parameter type="String">IdLocSourceProposal</parameter>
          <parameter type="String">IdLocForkLiftProposal</parameter>
          <parameter type="String">IdLocTargetProposal</parameter>
          <parameter type="String">IdLocSourceUsed</parameter>
          <parameter type="String">IdLocForkLiftUsed</parameter>
          <parameter type="String">IdLocTargetUsed</parameter>
          <parameter type="String">IdLpnSourceProposal</parameter>
          <parameter type="String">IdLpnTargetProposal</parameter>
          <parameter type="String">IdLpnTargetUsed</parameter>
          <parameter type="String">IdLpnSourceUsed</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="Decimal">ProposalQty</parameter>
          <parameter type="Decimal">RealQty</parameter>
          <parameter type="Int">IdPlanedProcess</parameter>
          <parameter type="String">WaveCode</parameter>
          <parameter type="String">LabelCode</parameter>
          <parameter type="String">LoadCode</parameter>
          <parameter type="Int">LoadSeq</parameter>
          <parameter type="String">UserAssigned</parameter>
          <parameter type="String">SerialNumber</parameter>
          <parameter type="DateTime">StartDate</parameter>
          <parameter type="DateTime">EndDate</parameter>
          <parameter type="Boolean">MadeCrossDock</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
          <parameter type="String">StateInterface</parameter>
        </parameters>
      </query>

      <query code="Task_Delete">
        <sql>
          DELETE FROM Task
          WHERE IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
        </parameters>
      </query>

  <query code="UpdateTask">
    <sql>
      UPDATE Task
      SET IdWhs=@IdWhs,
      IdOwn=@IdOwn,
      IsComplete=@IsComplete,
      TaskTypeCode=@TaskTypeCode,
      Description=@Description,
      IdDocumentBound=@IdDocumentBound,
      Priority=@Priority,
      CreateDate=@CreateDate,
      CloseDate=@CloseDate,
      ProposalStartDate=@ProposalStartDate,
      ProposalEndDate=@ProposalEndDate,
      RealStartDate=@RealStartDate,
      RealEndDate=@RealEndDate,
      Status=@Status,
      IdTrackTaskType=@IdTrackTaskType,
      DateTrackTask=@DateTrackTask,
      WorkersRequired=@WorkersRequired,
      WorkersAssigned=@WorkersAssigned,
      IdLocStageSource=@IdLocStageSource,
      IdLocStageTarget=@IdLocStageTarget,
      DateModified=@DateModified,
      UserModified=@UserModified
      WHERE IdTask = @IdTask
    </sql>
    <parameters>
      <parameter type="Int">IdTask</parameter>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="Boolean">IsComplete</parameter>
      <parameter type="String">TaskTypeCode</parameter>
      <parameter type="String">Description</parameter>
      <parameter type="Int">IdDocumentBound</parameter>
      <parameter type="Int">Priority</parameter>
      <parameter type="DateTime">CreateDate</parameter>
      <parameter type="DateTime">CloseDate</parameter>
      <parameter type="DateTime">ProposalStartDate</parameter>
      <parameter type="DateTime">ProposalEndDate</parameter>
      <parameter type="DateTime">RealStartDate</parameter>
      <parameter type="DateTime">RealEndDate</parameter>
      <parameter type="Boolean">Status</parameter>
      <parameter type="Int">IdTrackTaskType</parameter>
      <parameter type="DateTime">DateTrackTask</parameter>
      <parameter type="Int">WorkersRequired</parameter>
      <parameter type="Int">WorkersAssigned</parameter>
      <parameter type="String">IdLocStageSource</parameter>
      <parameter type="String">IdLocStageTarget</parameter>
      <parameter type="DateTime">DateModified</parameter>
      <parameter type="String">UserModified</parameter>
    </parameters>
  </query>

  <query code="UpdateTaskDetail">
    <sql>
      UPDATE TaskDetail
      SET IdWhs=@IdWhs,
      IdTask=@IdTask,
      IsComplete=@IsComplete,
      IdDocumentBound=@IdDocumentBound,
      IdDetailBound=@IdDetailBound,
      LineNumber=@LineNumber,
      IdItem=@IdItem,
      IdCtgItem=@IdCtgItem,
      LotNumber=@LotNumber,
      FifoDate=@FifoDate,
      FabricationDate=@FabricationDate,
      ExpirationDate=@ExpirationDate,
      Priority=@Priority,
      IdLocSourceProposal=@IdLocSourceProposal,
      IdLocForkLiftProposal=@IdLocForkLiftProposal,
      IdLocTargetProposal=@IdLocTargetProposal,
      IdLocSourceUsed=@IdLocSourceUsed,
      IdLocForkLiftUsed=@IdLocForkLiftUsed,
      IdLocTargetUsed=@IdLocTargetUsed,
      IdLpnSourceProposal=@IdLpnSourceProposal,
      IdLpnTargetProposal=@IdLpnTargetProposal,
      IdLpnTargetUsed=@IdLpnTargetUsed,
      IdLpnSourceUsed=@IdLpnSourceUsed,
      Status=@Status,
      ProposalQty = @ProposalQty,
      RealQty = @RealQty,
      IdPlanedProcess = @IdPlanedProcess,
      WaveCode = @WaveCode,
      LabelCode = @LabelCode,
      LoadCode = @LoadCode,
      LoadSeq = @LoadSeq,
      UserAssigned = @UserAssigned,
      SerialNumber = @SerialNumber,
      StartDate = @StartDate,
      EndDate = @EndDate,
      MadeCrossDock = @MadeCrossDock,
      DateModified = @DateModified,
      UserModified = @UserModified
      WHERE IdTaskDetail = @IdTaskDetail
    </sql>
    <parameters>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdTask</parameter>
      <parameter type="Boolean">IsComplete</parameter>
      <parameter type="Int">IdDocumentBound</parameter>
      <parameter type="Int">IdDetailBound</parameter>
      <parameter type="Int">LineNumber</parameter>
      <parameter type="Int">IdItem</parameter>
      <parameter type="Int">IdCtgItem</parameter>
      <parameter type="String">LotNumber</parameter>
      <parameter type="DateTime">FifoDate</parameter>
      <parameter type="DateTime">FabricationDate</parameter>
      <parameter type="DateTime">ExpirationDate</parameter>
      <parameter type="Int">Priority</parameter>
      <parameter type="String">IdLocSourceProposal</parameter>
      <parameter type="String">IdLocForkLiftProposal</parameter>
      <parameter type="String">IdLocTargetProposal</parameter>
      <parameter type="String">IdLocSourceUsed</parameter>
      <parameter type="String">IdLocForkLiftUsed</parameter>
      <parameter type="String">IdLocTargetUsed</parameter>
      <parameter type="String">IdLpnSourceProposal</parameter>
      <parameter type="String">IdLpnTargetProposal</parameter>
      <parameter type="String">IdLpnTargetUsed</parameter>
      <parameter type="String">IdLpnSourceUsed</parameter>
      <parameter type="Boolean">Status</parameter>
      <parameter type="Decimal">ProposalQty</parameter>
      <parameter type="Decimal">RealQty</parameter>
      <parameter type="Int">IdPlanedProcess</parameter>
      <parameter type="String">WaveCode</parameter>
      <parameter type="String">LabelCode</parameter>
      <parameter type="String">LoadCode</parameter>
      <parameter type="Int">LoadSeq</parameter>
      <parameter type="String">UserAssigned</parameter>
      <parameter type="String">SerialNumber</parameter>
      <parameter type="DateTime">StartDate</parameter>
      <parameter type="DateTime">EndDate</parameter>
      <parameter type="Boolean">MadeCrossDock</parameter>
      <parameter type="DateTime">DateModified</parameter>
      <parameter type="String">UserModified</parameter>
      <parameter type="Int">IdTaskDetail</parameter>
    </parameters>
  </query>
  
      <query code="TaskDetail_Delete">
        <sql>
          DELETE FROM TaskDetail
          WHERE IdTaskDetail = @idTaskDetail
        </sql>
        <parameters>
          <parameter type="Int">idTaskDetail</parameter>
        </parameters>
      </query>

      <query code="TaskDetail_UpdateStateInterface">
        <sql>
          UPDATE TaskDetail
          SET StateInterface = @StateInterface
          WHERE IdTaskDetail = @IdTaskDetail
        </sql>
        <parameters>
          <parameter type="String">StateInterface</parameter>
          <parameter type="Int">IdTaskDetail</parameter>
        </parameters>
      </query>

      <query code="GetTaskByAnyParameter">
        <sql>
          SELECT
          T.IdTask,
          T.IdWhs,
          T.IdOwn,
          T.IsComplete,
          T.TaskTypeCode,
          T.Description,
          T.IdDocumentBound,
          T.Priority,
          T.CreateDate,
          T.CloseDate,
          T.ProposalStartDate,
          T.ProposalEndDate,
          T.RealStartDate,
          T.RealEndDate,
          T.Status,
          T.IdTrackTaskType,
          T.DateTrackTask,
          T.IdLocStageSource,
          T.IdLocStageTarget,
          T.WorkersRequired,
          T.WorkersAssigned,
          T.AllowCrossDock,
          T.DateCreated,
          T.UserCreated,
          T.DateModified,
          T.UserModified
          FROM Task T
          WHERE 1=1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdTask" type="numericEqual">T.IdTask</filter>
          <filter name="IdWhs" type="numericEqual">T.IdWhs</filter>
          <filter name="IdOwn" type="numericEqual">T.IdOwn</filter>
          <filter name="IsComplete" type="numericEqual">T.IsComplete</filter>
          <filter name="TaskTypeCode" type="textEqual">T.TaskTypeCode</filter>
          <filter name="IdDocumentBound" type="textEqual">T.IdDocumentBound</filter>
          <filter name="Priority" type="numericEqual">T.Priority</filter>
          <filter name="IdTrackTaskType" type="numericEqual">T.IdTrackTaskType</filter>
          <filter name="IdLocStageSource" type="textEqual">T.IdLocStageSource</filter>
          <filter name="IdLocStageTarget" type="textEqual">T.IdLocStageTarget</filter>
          <filter name="WorkersRequired" type="numericEqual">T.WorkersRequired</filter>
          <filter name="WorkersAssigned" type="numericEqual">T.WorkersAssigned</filter>
        </filters>
        <sub-querys>
          <sub-query code="ExistsTaskOutboundOrderByIdOutboundOrder">
            <sql>
              AND T.IdTask IN (SELECT IdTask FROM TaskOutboundOrder WHERE IdOutboundOrder = @IdOutboundOrder)
            </sql>
            <parameters>
              <parameter type="Int">IdOutboundOrder</parameter>
            </parameters>
          </sub-query>
          <sub-query code="ExistsTaskDetailByIdOutboundOrder">
            <sql>
              AND T.IdTask IN (SELECT IdTask FROM TaskDetail WHERE IdWhs = T.IdWhs AND IdDocumentBound = @IdOutboundOrder)
            </sql>
            <parameters>
              <parameter type="Int">IdOutboundOrder</parameter>
            </parameters>
          </sub-query>
          <sub-query code="ListTypeCode">
            <sql>
              AND T.TaskTypeCode @taskTypeCodeList
            </sql>
            <parameters>
              <parameter type="StringIn">taskTypeCodeList</parameter>
            </parameters>
          </sub-query>
          <sub-query code="CompleteAndListTypeAndWithDetail">
            <sql>
              AND T.TaskTypeCode @taskTypeCodeList
              AND T.IsComplete = 1
              AND EXISTS (SELECT TD.IdTaskDetail
              FROM TaskDetail TD
              WHERE TD.IdWhs = T.IdWhs
              AND TD.IdTask = T.IdTask
              AND TD.IdDocumentBound = T.IdDocumentBound)
            </sql>
            <parameters>
              <parameter type="StringIn">taskTypeCodeList</parameter>
            </parameters>
          </sub-query>
          <sub-query code="AvailableOrderByPriorityDESC">
            <sql>
              AND T.IsComplete = 0
              AND T.Status = 1
              AND T.IdTrackTaskType BETWEEN 10 AND 100
              AND (T.WorkersRequired - T.WorkersAssigned) > 0
              ORDER BY T.Priority DESC
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="AvailableListTypeUserZoneOrderByPriorityDESC">
            <sql>
              AND T.IsComplete = 0
              AND T.Status = 1
              AND T.IdTrackTaskType BETWEEN 10 AND 100
              AND (T.WorkersRequired - T.WorkersAssigned) > 0
              AND T.TaskTypeCode @taskTypeCodeList
              AND EXISTS(SELECT IDUserWms
              FROM UserWorkZone UWZ INNER JOIN
              WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
              WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone INNER JOIN
              TaskDetail TD ON TD.IdLocSourceProposal = WZL.IdLocCode
              WHERE UWZ.IdUserWms = @idUser
              AND TD.IdTask = T.IdTask
              AND TD.IsComplete = 0
              AND TD.Status = 1
              AND TD.UserAssigned IS NULL)
              AND EXISTS(SELECT WZF.IdLocCode
              FROM WorkZoneForkLift WZF INNER JOIN
              WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
              WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone INNER JOIN
              TaskDetail TD ON TD.IdLocSourceProposal = WZL.IdLocCode
              WHERE WZF.IdLocCode = @idForkLift
              AND TD.IdTask = T.IdTask
              AND TD.IsComplete = 0
              AND TD.Status = 1
              AND TD.UserAssigned IS NULL)
              ORDER BY T.Priority DESC
            </sql>
            <parameters>
              <parameter type="StringIn">taskTypeCodeList</parameter>
              <parameter type="Int">idUser</parameter>
              <parameter type="String">idForkLift</parameter>
            </parameters>
          </sub-query>
          <sub-query code="NotComplete">
            <sql>
              AND T.IsComplete = 0
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="NotCompleteAndWithDetailAndLocSourceProposal">
            <sql>
              AND T.IsComplete = 0
              AND EXISTS (SELECT TD.IdTaskDetail
              FROM TaskDetail TD INNER JOIN
              Location L ON L.IdLocCode = TD.IdLocSourceProposal
              WHERE TD.IdTask = T.IdTask
              AND TD.IdLocSourceProposal = @IdLocSourceProposal)
            </sql>
            <parameters>
              <parameter type="String">IdLocSourceProposal</parameter>
            </parameters>
          </sub-query>
          <sub-query code="NotCompleteAndWithDetailAndLocSourceProposalIsNotNULL">
            <sql>
              AND T.IsComplete = 0
              AND T.TaskTypeCode @taskTypeCodeList
              AND EXISTS(SELECT TD.IdTask
              FROM TaskDetail TD
              WHERE TD.IdTask = T.IdTask
              AND TD.IdWhs = T.IdWhs
              AND TD.IsComplete = 0
              AND TD.IdDocumentBound = T.IdDocumentBound
              AND TD.IdLocSourceProposal IS NOT NULL)
            </sql>
            <parameters>
              <parameter type="StringIn">taskTypeCodeList</parameter>
            </parameters>
          </sub-query>
          <sub-query code="NotCompleteAndWithDetailAndLpnTargetUsedOrderByIdTaskDESC">
            <sql>
              AND T.IsComplete = 0
              AND EXISTS (SELECT TD.IdTaskDetail
              FROM TaskDetail TD
              WHERE TD.IdTask = T.IdTask
              AND TD.IdLpnTargetUsed = @idLpnTargetUsed)
              ORDER BY T.IdTask DESC
            </sql>
            <parameters>
              <parameter type="String">idLpnTargetUsed</parameter>
            </parameters>
          </sub-query>
          <sub-query code="NotCompleteAndWithDetailAndLpnSourceProposal">
            <sql>
              AND T.IsComplete = 0
              AND EXISTS (SELECT IdTaskDetail
              FROM TaskDetail TD
              WHERE TD.IdTask = T.IdTask
              AND TD.IdWhs = T.IdWhs
              AND TD.IdDocumentBound = T.IdDocumentBound
              AND TD.IdLpnSourceProposal = @idLpnSourceProposal)
            </sql>
            <parameters>
              <parameter type="String">idLpnSourceProposal</parameter>
            </parameters>
          </sub-query>
          <sub-query code="NotCompleteAndWithDetailNotCompleteAndLpnSourceProposal">
            <sql>
              AND T.IsComplete = 0
              AND EXISTS (SELECT IdTaskDetail
              FROM TaskDetail TD
              WHERE TD.IdTask = T.IdTask
              AND TD.IdWhs = T.IdWhs
              AND TD.IsComplete = 0
              AND TD.IdLpnSourceProposal = @idLpnSourceProposal)
            </sql>
            <parameters>
              <parameter type="String">idLpnSourceProposal</parameter>
            </parameters>
          </sub-query>
          <sub-query code="ListTypeWithDetailAndLpnTargetUsedOrderByIdTaskDESC">
            <sql>
              AND T.TaskTypeCode @taskTypeCodeList
              AND EXISTS (SELECT IdTaskDetail
              FROM TaskDetail TD
              WHERE TD.IdTask = T.IdTask
              AND TD.IdLpnTargetUsed = @idLpnTargetUsed)
              ORDER BY IdTask DESC
            </sql>
            <parameters>
              <parameter type="StringIn">taskTypeCodeList</parameter>
              <parameter type="String">idLpnTargetUsed</parameter>
            </parameters>
          </sub-query>
          <sub-query code="AvailableOrTaskDetailAssigned">
            <sql>
              AND T.IdTrackTaskType BETWEEN 10 AND 100
              AND ((T.WorkersRequired - T.WorkersAssigned) > 0 OR
              EXISTS (SELECT IdTaskDetail
              FROM TaskDetail TD
              WHERE TD.IdTask = T.IdTask
              AND TD.UserAssigned = @userAsigned)
              )
            </sql>
            <parameters>
              <parameter type="String">userAsigned</parameter>
            </parameters>
          </sub-query>
          <sub-query code="AvailableWithDetailNotAssinedOrderByPriorityDESC">
            <sql>
              AND T.IsComplete = 0
              AND T.Status = 1
              AND T.IdTrackTaskType BETWEEN 11 AND 100
              AND (T.WorkersRequired - T.WorkersAssigned) > 0
              AND EXISTS(SELECT IdTaskDetail
              FROM TaskDetail TD
              WHERE TD.IdTask = T.IdTask
              AND TD.IsComplete = 0
              AND TD.UserAssigned IS NULL)
              ORDER BY T.Priority DESC
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="AvailableUserZoneOrderTypeLocationListOrderByPriorityDESC">
            <sql>
              AND T.IsComplete = 0
              AND T.Status = 1
              AND T.IdTrackTaskType BETWEEN 10 AND 100
              AND (T.WorkersRequired - T.WorkersAssigned) > 0
              AND EXISTS(SELECT IDUserWms
              FROM UserWorkZone UWZ INNER JOIN
              WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
              WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone INNER JOIN
              Stock S ON S.IdWhs = T.IdWhs AND S.IdOwn = T.IdOwn AND S.IdLocCode = WZL.IdLocCode INNER JOIN
              TaskDetail TD ON TD.IdLpnSourceProposal = S.IdLpnCode INNER JOIN
              Location L ON L.IdWhs = S.IdWhs AND L.IdLocCode = S.IdLocCode AND L.LocTypeCode @typeLocationList
              WHERE UWZ.IdUserWms = @idUser
              AND TD.IdTask = T.IdTask
              AND TD.IsComplete = 0
              AND TD.Status = 1
              AND TD.UserAssigned IS NULL)
              AND EXISTS(SELECT WZF.IdLocCode
              FROM WorkZoneForkLift WZF INNER JOIN
              WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
              WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone INNER JOIN
              Stock S ON S.IdWhs = T.IdWhs AND S.IdOwn = T.IdOwn AND S.IdLocCode = WZL.IdLocCode INNER JOIN
              TaskDetail TD ON TD.IdLpnSourceProposal = S.IdLpnCode INNER JOIN
              Location L ON L.IdWhs = S.IdWhs AND L.IdLocCode = S.IdLocCode AND L.LocTypeCode @typeLocationList
              WHERE WZF.IdLocCode = @idForkLift
              AND TD.IdTask = T.IdTask
              AND TD.IsComplete = 0
              AND TD.Status = 1
              AND TD.UserAssigned IS NULL)
              ORDER BY T.Priority DESC
            </sql>
            <parameters>
              <parameter type="Int">idUser</parameter>
              <parameter type="String">idForkLift</parameter>
              <parameter type="StringIn">typeLocationList</parameter>
            </parameters>
          </sub-query>
          <sub-query code="WithheldOrderByPriorityDESC">
            <sql>
              AND T.IsComplete = 0
              AND T.Status = 1
              AND T.IdTrackTaskType = 1
              AND (T.WorkersRequired - T.WorkersAssigned) > 0
              ORDER BY T.Priority DESC
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="NotCompleteStartedTDAssignedPermissionOrderByPriorityDESC">
            <sql>
              AND T.IsComplete = 0
              AND T.Status = 1
              AND T.IdTrackTaskType BETWEEN 21 AND 100
              AND EXISTS(SELECT TD.IdTaskDetail
              FROM TaskDetail TD
              WHERE TD.IdTask = T.IdTask
              AND TD.IsComplete = 0
              AND TD.UserAssigned = @loginOperator)
              AND EXISTS(SELECT TT.TaskTypeCode
              FROM CfgUserWms CUW INNER JOIN
              CfgUserWmsRole CUWR ON CUW.IdUserWms = CUWR.IdUserWms INNER JOIN
              CfgRole CR ON CUWR.IdRole = CR.IdRole INNER JOIN
              CfgRoleTaskType CRTT ON CR.IdRole = CRTT.IdRole INNER JOIN
              TaskType TT ON CRTT.IdTaskType = TT.IdTaskType AND TT.Status = 1
              WHERE CUW.UserName = @loginOperator
              AND TT.TaskTypeCode = T.TaskTypeCode)
              ORDER BY T.Priority DESC
            </sql>
            <parameters>
              <parameter type="String">loginOperator</parameter>
            </parameters>
          </sub-query>
          <sub-query code="AvailableTaskDetailAssignedPermissionOrderByPriorityDESC">
            <sql>
              AND T.IsComplete = 0
              AND T.Status = 1
              AND T.IdTrackTaskType BETWEEN 11 AND 20
              AND (T.WorkersRequired - WorkersAssigned) > 0
              AND EXISTS(SELECT TD.IdTaskDetail
              FROM TaskDetail TD
              WHERE TD.IdTask = T.IdTask
              AND TD.IsComplete = 0
              AND TD.UserAssigned = @loginOperator)
              AND EXISTS(SELECT TT.TaskTypeCode
              FROM CfgUserWms CUW INNER JOIN
              CfgUserWmsRole CUWR ON CUW.IdUserWms = CUWR.IdUserWms INNER JOIN
              CfgRole CR ON CUWR.IdRole = CR.IdRole INNER JOIN
              CfgRoleTaskType CRTT ON CR.IdRole = CRTT.IdRole INNER JOIN
              TaskType TT ON CRTT.IdTaskType = TT.IdTaskType AND TT.Status = 1
              WHERE CUW.UserName = @loginOperator
              AND TT.TaskTypeCode = T.TaskTypeCode)
              ORDER BY T.Priority DESC
            </sql>
            <parameters>
              <parameter type="String">loginOperator</parameter>
            </parameters>
          </sub-query>
          <sub-query code="NotCompleteExistsTaskDetailUserAssignedOrderByPriorityDESC">
            <sql>
              AND T.IsComplete = 0
              AND T.Status = 1
              AND EXISTS (SELECT TD.IdTaskDetail
              FROM TaskDetail TD
              WHERE TD.UserAssigned = @loginOperator
              AND TD.IsComplete = 0
              AND TD.Status = 1
              AND TD.IdTask = T.IdTask)
              ORDER BY T.Priority DESC
            </sql>
            <parameters>
              <parameter type="String">loginOperator</parameter>
            </parameters>
          </sub-query>
          <sub-query code="AvailableListTypeCodeTaskDetailAssignedOrderByPriorityDESC">
            <sql>
              AND T.IsComplete = 0
              AND T.Status = 1
              AND T.IdTrackTaskType BETWEEN 11 AND 20
              AND (T.WorkersRequired - T.WorkersAssigned) > 0
              AND T.TaskTypeCode @taskTypeCodeList
              AND EXISTS(SELECT TD.IdTaskDetail
              FROM TaskDetail TD
              WHERE TD.IdTask = T.IdTask
              AND TD.IsComplete = 0
              AND TD.Status = 1
              AND TD.UserAssigned = @loginOperator)
              ORDER BY T.Priority DESC
            </sql>
            <parameters>
              <parameter type="StringIn">taskTypeCodeList</parameter>
              <parameter type="String">loginOperator</parameter>
            </parameters>
          </sub-query>
          <sub-query code="StartedListTypeCodeTaskDetailAssignedOrderByPriorityDESC">
            <sql>
              AND T.IsComplete = 0
              AND T.Status = 1
              AND T.IdTrackTaskType BETWEEN 21 AND 100
              AND T.TaskTypeCode @taskTypeCodeList
              AND EXISTS(SELECT TD.IdTaskDetail
              FROM TaskDetail TD
              WHERE TD.IdTask = T.IdTask
              AND TD.IsComplete = 0
              AND TD.Status = 1
              AND TD.UserAssigned = @loginOperator)
              ORDER BY T.Priority DESC
            </sql>
            <parameters>
              <parameter type="StringIn">taskTypeCodeList</parameter>
              <parameter type="String">loginOperator</parameter>
            </parameters>
          </sub-query>
          <sub-query code="StartedListTypeCodeTaskDetailNotAssignedOrderByPriorityDESC">
            <sql>
              AND T.IsComplete = 0
              AND T.Status = 1
              AND T.IdTrackTaskType BETWEEN 21 AND 100
              AND (T.WorkersRequired - T.WorkersAssigned) > 0
              AND T.TaskTypeCode @taskTypeCodeList
              AND EXISTS(SELECT TD.IdTaskDetail
              FROM TaskDetail TD
              WHERE TD.IdTask = T.IdTask
              AND TD.IsComplete = 0
              AND TD.Status = 1
              AND TD.UserAssigned IS NULL)
              ORDER BY T.Priority DESC
            </sql>
            <parameters>
              <parameter type="StringIn">taskTypeCodeList</parameter>
            </parameters>
          </sub-query>
          <sub-query code="ExistsTaskDetailAndExistsOutboundOrderAllowBackOrder">
            <sql>
              AND EXISTS (SELECT TD.IdTaskDetail
              FROM TaskDetail TD
              WHERE TD.IdTask = T.IdTask
              AND TD.IdWhs = T.IdWhs
              AND TD.IdDocumentBound = @IdOutboundOrder
              AND EXISTS(SELECT IdOutboundOrder
              FROM OutboundOrder OO
              WHERE OO.IdWhs = T.IdWhs
              AND OO.IdOwn = T.IdOwn
              AND OO.IdOutboundOrder = TD.IdDocumentBound
              AND OO.AllowBackOrder = 1
              AND (COALESCE(ExpirationDate, @ExpirationDate)+1) >= @ExpirationDate))
            </sql>
            <parameters>
              <parameter type="Int">IdOutboundOrder</parameter>
              <parameter type="DateTime">ExpirationDate</parameter>
            </parameters>
          </sub-query>
          <sub-query code="ExistsOutboundOrderAllowBackOrder">
            <sql>
              AND EXISTS (SELECT TD.IdTaskDetail
              FROM OutboundOrder OO
              WHERE OO.IdWhs = T.IdWhs
              AND OO.IdOwn = T.IdOwn
              AND OO.IdOutboundOrder = T.IdDocumentBound
              AND OO.AllowBackOrder = 1
              AND (COALESCE(OO.ExpirationDate,GETDATE())+1) >= @ExpirationDate)
            </sql>
            <parameters>
              <parameter type="DateTime">ExpirationDate</parameter>
            </parameters>
          </sub-query>
          <sub-query code="StartedListTypeCodeOrderByPriorityDESC">
            <sql>
              AND T.IsComplete = 0
              AND T.Status = 1
              AND T.IdTrackTaskType BETWEEN 21 AND 100
              AND (T.WorkersRequired - T.WorkersAssigned) > 0
              AND T.TaskTypeCode @taskTypeCodeList
              ORDER BY T.Priority DESC
            </sql>
            <parameters>
              <parameter type="StringIn">taskTypeCodeList</parameter>
            </parameters>
          </sub-query>
          <sub-query code="AvailableListTypeCodeOrderByPriorityDESC">
            <sql>
              AND T.IsComplete = 0
              AND T.Status = 1
              AND T.IdTrackTaskType BETWEEN 11 AND 20
              AND (T.WorkersRequired - T.WorkersAssigned) > 0
              AND T.TaskTypeCode @taskTypeCodeList
              ORDER BY T.Priority DESC
            </sql>
            <parameters>
              <parameter type="StringIn">taskTypeCodeList</parameter>
            </parameters>
          </sub-query>
          <sub-query code="NotCompletListTypeCodeTrackCode">
            <sql>
              AND T.IsComplete = 0
              AND T.Status = 1
              AND T.IdTrackTaskType BETWEEN 11 AND 20             
              AND T.TaskTypeCode @taskTypeCodeList
              ORDER BY T.Priority DESC
            </sql>
            <parameters>
              <parameter type="StringIn">taskTypeCodeList</parameter>
            </parameters>
          </sub-query>
          <sub-query code="NotCompleteAndWithDetailNotCompleteAndLpnSourceProposalAndItem">
            <sql>
              AND T.IsComplete = 0
              AND EXISTS (SELECT IdTaskDetail
              FROM TaskDetail TD
              WHERE TD.IdTask = T.IdTask
              AND TD.IdWhs = T.IdWhs
              AND TD.IsComplete = 0
              AND TD.IdLpnSourceProposal = @idLpnSourceProposal
              AND TD.IdItem = @idItem)
            </sql>
            <parameters>
              <parameter type="String">idLpnSourceProposal</parameter>
              <parameter type="Int">idItem</parameter>
            </parameters>
          </sub-query>
        </sub-querys>
      </query>

      <query code="Task_InsertOutboundOrderRelation">
        <sql>
          INSERT INTO TaskOutboundOrder
          (IdTask
          ,IdOutboundOrder
          ,IdOutboundDetail)

          VALUES
          (@IdTask
          ,@IdOutboundOrder
          ,@IdOutboundDetail)
        </sql>
        <parameters>
          <parameter type="Int">IdTask</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="Int">IdOutboundDetail</parameter>
        </parameters>
      </query>

      <query code="GetTaskDetailByAnyParameter">
        <sql>
          SELECT
          TD.IdTaskDetail,
          TD.IdWhs,
          TD.IdTask,
          TD.IsComplete,
          TD.IdDocumentBound,
          TD.IdDetailBound,
          TD.LineNumber,
          TD.IdItem,
          TD.IdCtgItem,
          TD.LotNumber,
          TD.FifoDate,
          TD.FabricationDate,
          TD.ExpirationDate,
          TD.Priority,
          TD.IdLocSourceProposal,
          TD.IdLocForkLiftProposal,
          TD.IdLocTargetProposal,
          TD.IdLocSourceUsed,
          TD.IdLocForkLiftUsed,
          TD.IdLocTargetUsed,
          TD.IdLpnSourceProposal,
          TD.IdLpnTargetProposal,
          TD.IdLpnSourceUsed,
          TD.IdLpnTargetUsed,
          TD.Status,
          TD.ProposalQty,
          TD.RealQty,
          TD.IdPlanedProcess,
          TD.WaveCode,
          TD.LabelCode,
          TD.LoadCode,
          TD.LoadSeq,
          TD.UserAssigned,
          TD.SerialNumber,
          TD.StartDate,
          TD.EndDate,
          TD.MadeCrossDock,
          TD.DateCreated,
          TD.UserCreated,
          TD.DateModified,
          TD.UserModified,
          I.ItemCode,
          I.ShortItemName,
          I.ReOrderPoint,
          I.ReOrderQty,
          T.IdOwn,
          L.PickingFlow,
          T.IdTrackTaskType,
          T.IdDocumentBound as TaskIdDocumentBound
          FROM TaskDetail TD INNER JOIN
          Task T ON TD.IdTask = T.IdTask LEFT JOIN
          Item I ON TD.IdItem = I.IdItem LEFT JOIN
          Location L ON L.IdLocCode = TD.IdLocSourceProposal
          AND L.IdWhs = TD.IdWhs
          WHERE 1=1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdTaskDetail" type="numericEqual">TD.IdTaskDetail</filter>
          <filter name="IdWhs" type="numericEqual">TD.IdWhs</filter>
          <filter name="IdTask" type="numericEqual">TD.IdTask</filter>
          <filter name="TaskType" type="textEqual">T.TaskTypeCode</filter>
          <filter name="IsComplete" type="numericEqual">TD.IsComplete</filter>
          <filter name="IdDocumentBound" type="textEqual">TD.IdDocumentBound</filter>
          <filter name="IdDetailBound" type="textEqual">TD.IdDetailBound</filter>
          <filter name="LineNumber" type="numericEqual">TD.LineNumber</filter>
          <filter name="IdItem" type="numericEqual">TD.IdItem</filter>
          <filter name="IdCtgItem" type="numericEqual">TD.IdCtgItem</filter>
          <filter name="LotNumber" type="textEqual">TD.LotNumber</filter>
          <filter name="FifoDate" type="textEqual">TD.FifoDate</filter>
          <filter name="FabricationDate" type="textEqual">TD.FabricationDate</filter>
          <filter name="ExpirationDate" type="textEqual">TD.ExpirationDate</filter>
          <filter name="Priority" type="numericEqual">TD.Priority</filter>
          <filter name="IdLocSourceProposal" type="textEqual">TD.IdLocSourceProposal</filter>
          <filter name="IdLocForkLiftProposal" type="textEqual">TD.IdLocForkLiftProposal</filter>
          <filter name="IdLocTargetProposal" type="textEqual">TD.IdLocTargetProposal</filter>
          <filter name="IdLocSourceUsed" type="textEqual">TD.IdLocSourceUsed</filter>
          <filter name="IdLocForkLiftUsed" type="textEqual">TD.IdLocForkLiftUsed</filter>
          <filter name="IdLocTargetUsed" type="textEqual">TD.IdLocTargetUsed</filter>
          <filter name="IdLpnSourceProposal" type="textEqual">TD.IdLpnSourceProposal</filter>
          <filter name="IdLpnTargetProposal" type="textEqual">TD.IdLpnTargetProposal</filter>
          <filter name="IdLpnTargetUsed" type="textEqual">TD.IdLpnTargetUsed</filter>
          <filter name="IdLpnSourceUsed" type="textEqual">TD.IdLpnSourceUsed</filter>
          <filter name="UserAssigned" type="textEqual">TD.UserAssigned</filter>
        </filters>
        <sub-querys>
          <sub-query code="NotComplete">
            <sql>
              AND TD.IsComplete = 0
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="AvailablePQtyGreaterThanRQtyOrderByIdDocumentBound">
            <sql>
              AND TD.IsComplete = 0
              AND TD.ProposalQty > RealQty
              AND (TD.UserAssigned IS NULL OR TD.UserAssigned = @loginOperator)
              ORDER BY TD.IdDocumentBound
            </sql>
            <parameters>
              <parameter type="String">loginOperator</parameter>
            </parameters>
          </sub-query>
          <sub-query code="CompleteOrderByLoadSeqDESC">
            <sql>
              AND TD.IsComplete = 1
              ORDER BY TD.LoadSeq DESC
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="NotCompleteAndLoadSeq">
            <sql>
              AND TD.IsComplete = 0
              AND TD.LoadSeq = @loadSeq
            </sql>
            <parameters>
              <parameter type="Int">loadSeq</parameter>
            </parameters>
          </sub-query>
          <sub-query code="NotCompleteAndLoadSeqStatusNotExistsTaskDetail">
            <sql>
              AND TD.IsComplete = 0
              AND TD.Status = 0
              AND TD.LoadSeq = @loadSeq
              AND NOT EXISTS (SELECT TD2.IdTaskDetail
              FROM TaskDetail TD2
              WHERE TD2.IdTask = TD.IdTask
              AND TD2.LoadSeq = TD.LoadSeq - 1
              AND TD2.IdDocumentBound = TD.IdDocumentBound)
            </sql>
            <parameters>
              <parameter type="Int">loadSeq</parameter>
            </parameters>
          </sub-query>
          <sub-query code="AllowMadeCrossDock">
            <sql>
              AND TD.MadeCrossDock = 1
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="NotCompleteTaskNotCompleteAndOwnAndListTypeCode">
            <sql>
              AND TD.IsComplete = 0
              AND T.IsComplete = 0
              AND T.IdOwn = @IdOwn
              AND T.TaskTypeCode @taskTypeCodeList
            </sql>
            <parameters>
              <parameter type="Int">IdOwn</parameter>
              <parameter type="StringIn">taskTypeCodeList</parameter>
            </parameters>
          </sub-query>
          <sub-query code="NotCompleteTaskNotCompleteAndOwnAndListTypeCodeREPL">
            <sql>
              AND TD.IsComplete = 0
              AND T.IsComplete = 0
              AND T.IdOwn = @IdOwn
              AND T.TaskTypeCode @taskTypeCodeList
              AND T.IdTrackTaskType IN (11,21)
            </sql>
            <parameters>
              <parameter type="Int">IdOwn</parameter>
              <parameter type="StringIn">taskTypeCodeList</parameter>
            </parameters>
          </sub-query>
          <sub-query code="NotCompleteTaskNotCompleteAndListTypeCode">
            <sql>
              AND TD.IsComplete = 0
              AND T.IsComplete = 0
              AND T.TaskTypeCode @taskTypeCodeList
            </sql>
            <parameters>
              <parameter type="StringIn">taskTypeCodeList</parameter>
            </parameters>
          </sub-query>
          <sub-query code="TaskOwnAndListTypeCode">
            <sql>
              AND T.IdOwn = @IdOwn
              AND T.TaskTypeCode @taskTypeCodeList
            </sql>
            <parameters>
              <parameter type="Int">IdOwn</parameter>
              <parameter type="StringIn">taskTypeCodeList</parameter>
            </parameters>
          </sub-query>
          <sub-query code="CompleteLoadSeqLessThanLpnTargetUsedIsNotNULLOrderByLoadSeqDESC">
            <sql>
              AND TD.IsComplete = 1
              AND TD.LoadSeq &lt; @loadSeq
              AND TD.IdLpnTargetUsed IS NOT NULL
              ORDER BY TD.LoadSeq DESC
            </sql>
            <parameters>
              <parameter type="Int">loadSeq</parameter>
            </parameters>
          </sub-query>
          <sub-query code="NotCompleteLocAndLpnSourcePropIsNULLOrderByPriorityDateCreated">
            <sql>
              AND TD.IsComplete = 0
              AND TD.IdLocSourceProposal IS NULL
              AND TD.IdLpnSourceProposal IS NULL
              ORDER BY TD.Priority, TD.DateCreated
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="NotCompleteLocAndLpnSourcePropIsNULLExistsTaskOrderByPriorityDateCreated">
            <sql>
              AND TD.IsComplete = 0
              AND TD.IdLocSourceProposal IS NULL
              AND TD.IdLpnSourceProposal IS NULL
              AND T.IsComplete = 0
              AND T.IdOwn = @IdOwn
              AND T.TaskTypeCode = @taskTypeCode
              AND EXISTS(SELECT OO.IdOutboundOrder
              FROM OutboundOrder OO
              WHERE OO.IdWhs = TD.IdWhs
              AND OO.IdOutboundOrder = TD.IdDocumentBound
              AND OO.AllowBackOrder = 1
              AND (COALESCE(ExpirationDate, @ExpirationDate)+1) >= @ExpirationDate)
              ORDER BY TD.Priority, TD.DateCreated
            </sql>
            <parameters>
              <parameter type="Int">IdOwn</parameter>
              <parameter type="String">taskTypeCode</parameter>
              <parameter type="DateTime">ExpirationDate</parameter>
            </parameters>
          </sub-query>
          <sub-query code="OrderByDocumentBoundLoadSeq">
            <sql>
              ORDER BY TD.IdDocumentBound,TD.LoadSeq
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="NotCompleteAndTaskTypeCodeAllPick">
            <sql>
              AND TD.IsComplete = 0
              AND T.TaskTypeCode IN ('REPL','PIKSE','PIKVA','PIUNK','PIKIT','PIKPS','PIKWV','PIKBT','PIKOR','PKLPN')
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="NotCompleteNotStatusAndAllPicking">
            <sql>
              AND TD.IsComplete = 0
              AND TD.Status = 0
              AND T.TaskTypeCode IN ('PIKSE','PIKVA','PIUNK','PIKIT','PIKPS','PIKWV','PIKBT','PIKOR','PKLPN')
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="NotCompleteStatusNotAssignedAndAllPicking">
            <sql>
              AND TD.IsComplete = 0
              AND TD.Status = 1
              AND TD.UserAssigned IS NULL
              AND T.IsComplete = 0
              AND T.TaskTypeCode IN ('PIKSE','PIKVA','PIUNK','PIKIT','PIKPS','PIKWV','PIKBT','PIKOR','PKLPN')
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="OrderByRealQtyDESC">
            <sql>
              ORDER BY TD.RealQty DESC
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="DifferentQty">
            <sql>
              AND TD.ProposalQty &lt;&gt; COALESCE(TD.RealQty,0)
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="ReplenishmentOnForklift">
            <sql>
              AND T.TaskTypeCode = 'REPL'
              AND T.IsComplete = 0
              AND T.IdTrackTaskType = 21
              AND TD.IsComplete = 1
              AND EXISTS (SELECT StockId
              FROM Stock S
              WHERE S.IdWhs = TD.IdWhs
              AND S.IdItem = TD.IdItem
              AND S.IdLocCode = @idForklift)
            </sql>
            <parameters>
              <parameter type="String">idForklift</parameter>
            </parameters>
          </sub-query>
          <sub-query code="ExistsTaskReplenishmentOnDemandInPause">
            <sql>
              AND TD.IsComplete = 0
              AND T.IsComplete = 0              
              AND T.IdTrackTaskType = 4
              AND T.TaskTypeCode = 'REPL'
              AND T.IdOwn = @IdOwn
            </sql>
            <parameters>
              <parameter type="Int">IdOwn</parameter>
            </parameters>
          </sub-query>
        </sub-querys>
      </query>

      <query code="GetTaskDetailWithItemUomByIdTaskAndIdWhs">
        <sql>
          SELECT
          TD.IdTaskDetail
          ,TD.IdWhs
          ,TD.IdTask
          ,TD.IsComplete
          ,TD.IdDocumentBound
          ,TD.IdDetailBound
          ,TD.LineNumber
          ,TD.IdItem
          ,TD.IdCtgItem
          ,TD.LotNumber
          ,TD.FifoDate
          ,TD.FabricationDate
          ,TD.ExpirationDate
          ,TD.Priority
          ,TD.IdLocSourceProposal
          ,TD.IdLocForkLiftProposal
          ,TD.IdLocTargetProposal
          ,TD.IdLocSourceUsed
          ,TD.IdLocForkLiftUsed
          ,TD.IdLocTargetUsed
          ,TD.IdLpnSourceProposal
          ,TD.IdLpnTargetProposal
          ,TD.IdLpnSourceUsed
          ,TD.IdLpnTargetUsed
          ,TD.Status
          ,TD.ProposalQty
          ,TD.RealQty
          ,TD.IdPlanedProcess
          ,TD.WaveCode
          ,TD.LabelCode
          ,TD.LoadCode
          ,TD.LoadSeq
          ,TD.UserAssigned
          ,TD.SerialNumber
          ,TD.StartDate
          ,TD.EndDate
          ,TD.MadeCrossDock
          ,TD.DateCreated
          ,TD.UserCreated
          ,TD.DateModified
          ,TD.UserModified
          ,I.ItemCode
          ,I.ShortItemName
          ,I.ReOrderPoint
          ,I.ReOrderQty
          ,CASE
          WHEN IU.Weight IS NULL THEN I.Weight
          ELSE IU.Weight
          END AS Weight
          ,CASE
          WHEN IU.Volume IS NULL THEN I.Volume
          ELSE IU.Volume
          END AS Volume
          ,CASE
          WHEN IU.Length IS NULL THEN I.Length
          ELSE IU.Length
          END AS Length
          ,CASE
          WHEN IU.Width IS NULL THEN I.Width
          ELSE IU.Width
          END AS Width
          ,CASE
          WHEN IU.Height IS NULL THEN I.Height
          ELSE IU.Height
          END AS Height
          FROM Task T INNER JOIN
          TaskDetail TD ON T.IdTask = TD.IdTask AND T.IdWhs = TD.IdWhs INNER JOIN
          Item I ON I.IdItem = TD.IdItem AND I.IdOwn = T.IdOwn LEFT JOIN
          (SELECT IU.Weight, IU.Volume, IU.Length, IU.Width, IU.Height, UT.IdOwn, UT.UomName, IU.IdItem
          FROM ItemUom IU INNER JOIN
          UomType UT ON IU.IdUomType = UT.IdUomType
          AND UPPER(UT.UomName) = 'UNIDAD')IU ON I.IdItem = IU.IdItem AND I.IdOwn = IU.IdOwn
          WHERE TD.IdTask = @IdTask
          AND TD.IdWhs = @IdWhs
          ORDER BY Volume DESC
        </sql>
        <parameters>
          <parameter type="Int">IdTask</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
        <filters>
        </filters>
      </query>
  
      <query code="UpdateTaskDetailStatusByTaskDocumentBoundLoadSeq">
        <sql>
          UPDATE TaskDetail
          SET Status= 1
          WHERE IdTask = @IdTask
          AND IdDocumentBound = @idDocumentBound
          AND LoadSeq = @loadSeq
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="Int">idDocumentBound</parameter>
          <parameter type="Int">loadSeq</parameter>
        </parameters>
      </query>

      <query code="UpdateLabelCodePrecubingById">
        <sql>
          UPDATE TaskDetail
          SET LabelCode = @LabelCode,
          DateModified = @DateModified,
          UserModified = @UserModified
          WHERE IdTaskDetail = @IdTaskDetail
        </sql>
        <parameters>          
          <parameter type="String">LabelCode</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
          <parameter type="Int">IdTaskDetail</parameter>
        </parameters>
      </query>

      <query code="UpdateTaskTrack">
        <sql>
          UPDATE Task
          SET IdTrackTaskType=@idTrackTaskType
          WHERE IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTrackTaskType</parameter>
          <parameter type="Int">idTask</parameter>
        </parameters>
      </query>
      
      <!--Utilizado en las siguientes consultas:
         - Tareas de Reposicin - TaskType: 'REPL'
         - Tareas de Ajuste - TaskType: 'AJU'
         - Tareas de Conteo C�clico - TaskType: 'CCNT'-->
      <query code="TaskConsult_FindAll">
        <sql>
          SELECT
          t.IdTask,
          whs.WhsCode,
          whs.ShortWhsName,
          own.OwnCode,
          own.TradeName,
          own.OwnName,
          t.TaskTypeCode,
          TT.TaskTypeName AS TaskDescription,
          t.Priority,
          t.CreateDate,
          t.ProposalStartDate,
          t.RealStartDate,
          t.Status,
          t.WorkersRequired,
          t.WorkersAssigned,
          td.IdTaskDetail,
          td.IsComplete,
          ci.CtgName,
          i.ItemCode,
          i.Description AS ItemDescription,
          i.LongItemName,
          td.IdLocSourceProposal,
          td.IdLocTargetProposal,
          td.IdLpnSourceProposal,
          td.ProposalQty,
          td.RealQty,
          td.UserAssigned,
          t.IdTrackTaskType,
          TTT.NameTrackTaskType
          FROM Task t
          INNER JOIN TaskDetail td ON t.IdTask = td.IdTask
          INNER JOIN Warehouse whs ON t.IdWhs = whs.Idwhs
          INNER JOIN Owner own ON t.IdOwn = own.IdOwn
          INNER JOIN Item i ON td.IdItem = i.IdItem
          INNER JOIN TrackTaskType TTT ON t.IdTrackTaskType = TTT.IdTrackTaskType
          LEFT JOIN TaskType TT ON TT.TaskTypeCode = t.TaskTypeCode AND TT.Status = 1
          LEFT OUTER JOIN CategoryItem AS ci ON td.IdCtgItem = ci.IdCtgItem
          WHERE t.TaskTypeCode = @taskType
          @SQLPart
          ORDER BY whs.ShortWhsName,own.OwnName,t.TaskTypeCode,t.CreateDate DESC;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="String">taskType</parameter>
          <parameter type="String">idPage</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">t.IdWhs</filter>
          <filter name="DateRange" type="textBetween">t.CreateDate</filter>
          <filter name="Item" type="textLike">i.ItemCode</filter>
          <filter name="Owner" type="numericIn">own.IdOwn</filter>
          <filter name="TrackTaskType" type="numericIn">t.IdTrackTaskType</filter>
          <filter name="Status" type="numericIn">t.IsComplete</filter>
        </filters>
      </query>
  
  <query code="TaskConsult_GetByAnyParameter">
        <sql>
          SELECT
          t.IdTask,
          whs.WhsCode,
          whs.ShortWhsName,
          own.OwnCode,
          own.TradeName,
          own.OwnName,
          t.TaskTypeCode,
          TT.TaskTypeName AS TaskDescription,
          t.Priority,
          t.CreateDate,
          t.ProposalStartDate,
          t.RealStartDate,
          t.Status,
          t.WorkersRequired,
          t.WorkersAssigned,
          td.IdTaskDetail,
          td.IsComplete,
          ci.CtgName,
          i.ItemCode,
          i.Description AS ItemDescription,
          i.LongItemName,
          td.IdLocSourceProposal,
          td.IdLpnSourceProposal,
          td.ProposalQty,
          td.RealQty,
          td.UserAssigned,
          t.IdTrackTaskType,
          TTT.NameTrackTaskType
          FROM Task t
          INNER JOIN TaskDetail td ON t.IdTask = td.IdTask
          INNER JOIN Warehouse whs ON t.IdWhs = whs.Idwhs
          INNER JOIN Owner own ON t.IdOwn = own.IdOwn
          INNER JOIN Item i ON td.IdItem = i.IdItem
          INNER JOIN TrackTaskType TTT ON t.IdTrackTaskType = TTT.IdTrackTaskType
          LEFT JOIN TaskType TT ON TT.TaskTypeCode = t.TaskTypeCode AND TT.Status = 1
          LEFT OUTER JOIN CategoryItem AS ci ON td.IdCtgItem = ci.IdCtgItem
          WHERE 1 = 1
          @SQLPart
          ORDER BY whs.ShortWhsName,own.OwnName,t.TaskTypeCode,t.CreateDate DESC;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="String">idPage</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">t.IdWhs</filter>
          <filter name="DateRange" type="textBetween">t.CreateDate</filter>
          <filter name="Item" type="textLike">i.ItemCode</filter>
          <filter name="Owner" type="numericIn">own.IdOwn</filter>
          <filter name="TrackTaskType" type="numericIn">t.IdTrackTaskType</filter>
          <filter name="Status" type="numericIn">t.IsComplete</filter>
          <filter name="TaskType" type="textIn">t.TaskTypeCode</filter>        
        </filters>
      </query>

      <query code="TaskPackage_FindAll">
        <sql>
          SELECT
          T.IdTask,
          T.IdWhs,
          W.WhsName,
          T.IdOwn,
          O.OwnName,
          T.IsComplete,
          T.TaskTypeCode,
          T.Description TaskDescription,
          TT.TaskTypeName ,
          T.IdDocumentBound,
          OO.OutboundNumber,
          OO.ReferenceNumber,
          T.Priority,
          T.CreateDate,
          T.CloseDate,
          T.ProposalStartDate,
          T.ProposalEndDate,
          T.RealStartDate,
          T.RealEndDate,
          T.Status,
          T.IdTrackTaskType,
          TTT.NameTrackTasktype,
          T.DateTrackTask,
          T.IdLocStageSource,
          T.IdLocStageTarget,
          T.WorkersRequired,
          T.WorkersAssigned,
          T.AllowCrossDock
          FROM Task T
          INNER JOIN Warehouse W
          ON W.IdWhs = T.IdWhs
          INNER JOIN TaskType TT
          ON TT.TaskTypeCode = T.TaskTypeCode
          AND TT.Status = 1
          INNER JOIN TrackTaskType TTT
          ON TTT.IdTrackTaskType = T.IdTrackTaskType
          LEFT JOIN Owner O
          ON O.IdOwn = T.IdOwn
          LEFT JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = T.IdDocumentBound
          @SQLPart
          ORDER BY T.IdTask;


          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
          <filter name="TaskType" type="textIn">T.TaskTypeCode</filter>
          <filter name="DateRange" type="textBetween">T.CreateDate</filter>
          <filter name="IsComplete" type="numericIn">T.IsComplete</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="ReferenceNbr" type="textLike">OO.ReferenceNumber</filter>
          <filter name="OutboundType" type="numericEqual">OO.IdOutboundType</filter>
        </filters>
      </query>

      <query code="TaskPackageDetail_FindAll">
        <sql>
          SELECT
          T.IdTask,
          T.IdWhs,
          W.WhsName,
          T.IdOwn,
          O.OwnName,
          T.IdTrackTaskType,
          TTT.NameTrackTasktype,
          TD.IdTaskDetail,
          TD.IsComplete IsCompleteDetail,
          TD.StartDate,
          TD.EndDate,
          TD.IdDocumentBound IdDocumentBoundDetail,
          OO.OutboundNumber,
          TD.IdDetailBound,
          TD.LineNumber,
          TD.IdItem,
          I.ItemCode,
          I.LongItemName,
          TD.ProposalQty,
          TD.RealQty,
          TD.IdCtgItem,
          CI.CtgName,
          TD.Priority PriorityDetail,
          TD.MadeCrossDock,
          TD.IdLocSourceProposal,
          TD.IdLocForkLiftProposal,
          TD.IdLocTargetProposal,
          TD.IdLocSourceUsed,
          TD.IdLocForkLiftUsed,
          TD.IdLocTargetUsed,
          TD.IdLpnSourceProposal,
          TD.IdLpnTargetProposal,
          TD.IdLpnTargetUsed,
          TD.IdLpnSourceUsed,
          TD.Status StatusDetail,
          TD.IdPlanedProcess,
          TD.WaveCode,
          TD.LabelCode,
          TD.LoadCode,
          TD.LoadSeq,
          TD.UserAssigned,
          TD.SerialNumber
          FROM TaskDetail TD
          INNER JOIN Task T
          ON T.IdTask = TD.IdTask
          INNER JOIN TrackTaskType TTT
          ON TTT.IdTrackTaskType = T.IdTrackTaskType
          INNER JOIN Warehouse W
          ON W.IdWhs = TD.IdWhs
          LEFT JOIN Owner O
          ON O.IdOwn = T.IdOwn
          LEFT JOIN Item I
          ON I.IdItem = TD.IdItem
          LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = TD.IdCtgItem
          LEFT JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = TD.IdDocumentBound
          @SQLPart
          ORDER BY T.IdTask;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
          <filter name="TaskType" type="textIn">T.TaskTypeCode</filter>
          <filter name="DateRange" type="textBetween">T.CreateDate</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Description" type="textLike">I.LongItemName</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="Driver" type="textLike">TD.UserAssigned</filter>
          <filter name="LocationSource" type="textLike">TD.IdLocSourceProposal</filter>
          <filter name="LocationTarget" type="textLike">TD.IdLocTargetProposal</filter>
          <filter name="LpnSource" type="textLike">TD.IdLpnSourceProposal</filter>
          <filter name="LpnTarget" type="textLike">TD.IdLpnTargetProposal</filter>
          <filter name="IsComplete" type="numericIn">TD.IsComplete</filter>
          <filter name="PriorityTask" type="numericEqual">TD.Priority</filter>
        </filters>
      </query>

      <query code="TaskPicking_FindAll">
        <sql>
          SELECT
          T.IdTask,
          T.IdWhs,
          W.WhsName,
          W.ShortWhsName,
          T.IdOwn,
          O.OwnName,
          T.IdTrackTaskType,
          TTT.NameTrackTasktype,
          T.CreateDate,
          T.TaskTypeCode,
          TT.TaskTypeName,
          T.Description TaskDescription,
          TT.TaskTypeName ,
          T.IdDocumentBound,
          OO.OutboundNumber,
          OO.ReferenceNumber,
          OT.OutboundTypeName,
          T.Priority,
          T.IdLocStageSource,
          T.IdLocStageTarget,
          T.WorkersRequired,
          T.AllowCrossDock,
          T.UserCreated,
          T.UserModified,
          T.DateModified,
          T.DateCreated,
          T.IsComplete,
          T.RealStartDate,
          T.RealEndDate,
          T.DateTrackTask,
          T.Status,
          TD.IdTaskDetail,
          TD.IsComplete IsCompleteDetail,
          TD.IdDocumentBound IdDocumentBoundDetail,
          (
          CASE
          WHEN T.TaskTypeCode IN ('PUT', 'RCPA') THEN
          (SELECT InboundNumber
          FROM InboundOrder IO
          WHERE IO.IdInboundOrder = TD.IdDocumentBound)
          ELSE
          (SELECT OutboundNumber
          FROM OutboundOrder OO
          WHERE OO.IdOutboundOrder = TD.IdDocumentBound)
          END
          ) AS OutboundNumber,
          TD.IdItem,
          I.ItemCode,
          I.LongItemName,
          TD.ProposalQty,
          TD.IdCtgItem,
          CI.CtgName,
          TD.UserAssigned,
          TD.IdLocSourceProposal,
          TD.IdLocTargetProposal,
          TD.IdLocForkLiftProposal,
          TD.IdLpnSourceProposal,
          TD.Priority PriorityDetail,
          TD.Status StatusDetail,
          TD.StartDate,
          TD.MadeCrossDock,
          TD.DateCreated DateCreatedDetail,
          TD.UserCreated UserCreatedDetail,
          TD.DateModified DateModifiedDetail,
          TD.UserModified UserModifiedDetail,
          IU.UomName,
          H.HngName AS LoadCode,
          TD.RealQty
          FROM TaskDetail TD
          INNER JOIN Task T
          ON T.IdTask = TD.IdTask --AND TD.IsComplete = 0
          INNER JOIN TaskType TT
          ON TT.TaskTypeCode = T.TaskTypeCode
          AND TT.Status = 1
          INNER JOIN TrackTaskType TTT
          ON TTT.IdTrackTaskType = T.IdTrackTaskType
          INNER JOIN Warehouse W
          ON W.IdWhs = TD.IdWhs
          LEFT JOIN Location L
          ON L.IdLocCode = TD.IdLocSourceProposal
          LEFT JOIN Hangar H
          ON H.IdHng = L.IdHng
          LEFT JOIN Owner O
          ON O.IdOwn = T.IdOwn
          LEFT JOIN Item I
          ON I.IdItem = TD.IdItem
          LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = TD.IdCtgItem
          LEFT JOIN ItemUom IU
          ON IU.IdItem = I.IdItem
          AND IU.IdUomType = I.StackingSequence
          LEFT JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = TD.IdDocumentBound
          LEFT JOIN OutboundType OT
          ON OT.IdOutboundType = OO.IdOutboundType
          @SQLPart
          ORDER BY T.IdTask;


          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
          <filter name="TaskType" type="textIn">T.TaskTypeCode</filter>
          <filter name="DateRange" type="textBetween">T.CreateDate</filter>
          <filter name="IsComplete" type="numericIn">T.IsComplete</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="ReferenceNbr" type="textLike">OO.ReferenceNumber</filter>
          <filter name="OutboundType" type="numericEqual">OO.IdOutboundType</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Description" type="textLike">I.LongItemName</filter>
          <filter name="Driver" type="textLike">TD.UserAssigned</filter>
          <filter name="LocationSource" type="textLike">TD.IdLocSourceProposal</filter>
          <filter name="LocationTarget" type="textLike">TD.IdLocTargetProposal</filter>
          <filter name="LpnSource" type="textLike">TD.IdLpnSourceProposal</filter>
          <filter name="LpnTarget" type="textLike">TD.IdLpnTargetProposal</filter>
          <filter name="PriorityTask" type="numericEqual">TD.Priority</filter>
        </filters>
      </query>

      <query code="TaskPickingDetail_FindAll">
        <sql>
          SELECT
          T.IdTask,
          T.IdWhs,
          W.WhsName,
          W.ShortWhsName,
          T.IdOwn,
          O.OwnName,
          T.IdTrackTaskType,
          TTT.NameTrackTasktype,
          T.CreateDate,
          T.TaskTypeCode,
          TT.TaskTypeName,
          T.Description TaskDescription,
          T.Priority,
          T.IdLocStageSource,
          T.IdLocStageTarget,
          T.WorkersRequired,
          T.AllowCrossDock,
          T.UserCreated,
          T.UserModified,
          T.DateModified,
          T.DateCreated,
          T.IsComplete,
          T.RealStartDate,
          T.DateTrackTask,
          T.Status,
          TD.IdTaskDetail,
          TD.IsComplete IsCompleteDetail,
          TD.StartDate,
          TD.EndDate,
          TD.IdDocumentBound IdDocumentBoundDetail,
          (
          CASE
          WHEN T.TaskTypeCode IN ('PUT', 'RCPA') THEN
          (SELECT InboundNumber
          FROM InboundOrder IO
          WHERE IO.IdInboundOrder = TD.IdDocumentBound)
          ELSE
          (SELECT OutboundNumber
          FROM OutboundOrder OO
          WHERE OO.IdOutboundOrder = TD.IdDocumentBound)
          END
          ) AS OutboundNumber,
          TD.IdItem,
          I.ItemCode,
          I.LongItemName,
          TD.ProposalQty,
          TD.RealQty,
          TD.IdCtgItem,
          CI.CtgName,
          TD.UserAssigned,
          TD.IdLocSourceProposal,
          TD.IdLocForkLiftProposal,
          TD.IdLocTargetProposal,
          TD.IdLocSourceUsed,
          TD.IdLocForkLiftProposal,
          TD.IdLocTargetUsed,
          TD.IdLpnSourceProposal,
          TD.Priority PriorityDetail,
          TD.IdLpnTargetUsed,
          TD.IdLpnSourceUsed,
          TD.Status StatusDetail,
          TD.StartDate,
          TD.MadeCrossDock,
          TD.DateCreated DateCreatedDetail,
          TD.UserCreated UserCreatedDetail,
          TD.DateModified DateModifiedDetail,
          TD.UserModified UserModifiedDetail,
          IU.UomName,
          H.HngName AS LoadCode
          FROM TaskDetail TD
          INNER JOIN Task T
          ON T.IdTask = TD.IdTask --AND TD.IsComplete = 0
          INNER JOIN TaskType TT
          ON TT.TaskTypeCode = T.TaskTypeCode
          AND TT.Status = 1
          INNER JOIN TrackTaskType TTT
          ON TTT.IdTrackTaskType = T.IdTrackTaskType
          INNER JOIN Warehouse W
          ON W.IdWhs = TD.IdWhs
          LEFT JOIN Location L
          ON L.IdLocCode = TD.IdLocSourceProposal
          LEFT JOIN Hangar H
          ON H.IdHng = L.IdHng
          LEFT JOIN Owner O
          ON O.IdOwn = T.IdOwn
          LEFT JOIN Item I
          ON I.IdItem = TD.IdItem
          LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = TD.IdCtgItem
          LEFT JOIN ItemUom IU
          ON IU.IdItem = I.IdItem
          AND IU.IdUomType = I.StackingSequence
          LEFT JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = TD.IdDocumentBound
          @SQLPart
          ORDER BY T.IdTask;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
          <filter name="TaskType" type="textIn">T.TaskTypeCode</filter>
          <filter name="DateRange" type="textBetween">T.CreateDate</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Description" type="textLike">I.LongItemName</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="Driver" type="textLike">TD.UserAssigned</filter>
          <filter name="LocationSource" type="textLike">TD.IdLocSourceProposal</filter>
          <filter name="LocationTarget" type="textLike">TD.IdLocTargetProposal</filter>
          <filter name="LpnSource" type="textLike">TD.IdLpnSourceProposal</filter>
          <filter name="LpnTarget" type="textLike">TD.IdLpnTargetProposal</filter>
          <filter name="IsComplete" type="numericIn">TD.IsComplete</filter>
          <filter name="PriorityTask" type="numericEqual">TD.Priority</filter>
        </filters>
      </query>

      <!--Filtro Task Type -->
      <query code="UpdateTaskType">
        <sql>
          UPDATE TaskType
          SET TaskTypeCode=@TaskTypeCode,
          TaskTypeName=@TaskTypeName,
          TaskTypePriority=@TaskTypePriority,
          DateModified=@DateModified,
          UserModified=@UserModified
          WHERE IdTaskType = @IdTaskType
        </sql>
        <parameters>
          <parameter type="Int">IdTaskType</parameter>
          <parameter type="String">TaskTypeCode</parameter>
          <parameter type="String">TaskTypeName</parameter>
          <parameter type="Int">TaskTypePriority</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query code="UpdateTaskTypePriority">
        <sql>
          UPDATE TaskType
          SET TaskTypePriority=@TaskTypePriority,
          DateModified=@DateModified,
          UserModified=@UserModified
          WHERE IdTaskType = @IdTaskType
        </sql>
        <parameters>
          <parameter type="Int">IdTaskType</parameter>
          <parameter type="Int">TaskTypePriority</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>
  
      <query code="TaskType_FindAll">
        <sql>
          SELECT IdTaskType
          ,TaskTypeCode
          ,TaskTypeName
          ,TaskTypePriority
          FROM TaskType
          WHERE Status = 1
          @SQLPart
          ORDER BY IdTaskType;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="TaskType" type="textIn">TaskTypeCode</filter>
          <filter name="Name" type="textLike">TaskTypeName</filter>
        </filters>

      </query>

      <query code="TaskType_GetByCode">
        <sql>
          SELECT IdTaskType
          ,TaskTypeCode
          ,TaskTypeName
          ,TaskTypePriority
          FROM TaskType
          WHERE TaskTypeCode = @TaskTypeCode
          ORDER BY IdTaskType
        </sql>
        <parameters>
          <parameter type="String">TaskTypeCode</parameter>
        </parameters>


      </query>

      <query code="GetTaskPickingByOrder">
        <sql>
          SELECT T1.IdTask,
          T1.IdWhs,
          T1.IdOwn,
          T1.IsComplete,
          T1.TaskTypeCode,
          T1.Description,
          T1.IdDocumentBound,
          T1.Priority,
          T1.CreateDate,
          T1.CloseDate,
          T1.ProposalStartDate,
          T1.ProposalEndDate,
          T1.RealStartDate,
          T1.RealEndDate,
          T1.Status,
          T1.IdTrackTaskType,
          T1.DateTrackTask,
          T1.IdLocStageSource,
          T1.IdLocStageTarget,
          T1.WorkersRequired,
          T1.WorkersAssigned
          FROM task T1
          INNER JOIN tasktype T2 on T1.TaskTypeCode = T2.TaskTypeCode AND T2.Status = 1
          WHERE T1.IsComplete = 0
          AND T2.TaskTypeCode = @TaskTypeCode
          AND (SELECT (T3.WorkersRequired - T3.WorkersAssigned)
          FROM task T3
          WHERE T3.IdTask = T1.IdTask) > 0
          AND T1.IdDocumentBound = @IdDocumentBound
          AND T1.IdOwn = @IdOwn
          ORDER BY Priority DESC
        </sql>
        <parameters>
          <parameter type="Int">IdDocumentBound</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">TaskTypeCode</parameter>
        </parameters>
      </query>

      <query code="GetTaskById">
        <sql>
          SELECT
          T0.IdTask,
          T0.IdWhs,
          T0.IdOwn,
          T0.IsComplete,
          T0.TaskTypeCode,
          T0.Description,
          T0.IdDocumentBound,
          T0.Priority,
          T0.CreateDate,
          T0.CloseDate,
          T0.ProposalStartDate,
          T0.ProposalEndDate,
          T0.RealStartDate,
          T0.RealEndDate,
          T0.Status,
          T0.IdTrackTaskType,
          T0.DateTrackTask,
          T0.WorkersRequired,
          T0.WorkersAssigned,
          T0.IdLocStageSource,
          T0.IdLocStageTarget
          FROM task T0
          WHERE T0.IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
        </parameters>
      </query>

      <!-- Prioridad de tareas  -->
      <query code="TaskPriority_FindAll">
        <sql>
            SELECT
          T.IdTask,
          T.IdWhs,
          W.WhsName,
          W.ShortWhsName,
          T.IdOwn,
          O.OwnName,
          T.IdTrackTaskType,
          TTT.NameTrackTasktype,
          T.CreateDate,
          T.TaskTypeCode,
          TT.TaskTypeName,
          T.Description TaskDescription,
          T.Priority,
          T.IdLocStageSource,
          T.IdLocStageTarget,
          T.WorkersRequired,
          T.AllowCrossDock,
          T.UserCreated,
          T.UserModified,
          T.DateModified,
          T.DateCreated,
          T.IsComplete,
          T.RealStartDate,
          T.DateTrackTask,
          T.Status,
          TD.IdTaskDetail,
          TD.IsComplete IsCompleteDetail,
          TD.IdDocumentBound IdDocumentBoundDetail,
          OO.OutboundNumber,
          TD.IdItem,
          I.ItemCode,
          I.LongItemName,
          TD.ProposalQty,
          TD.IdCtgItem,
          CI.CtgName,
          TD.UserAssigned,
          TD.IdLocSourceProposal,
          TD.IdLocTargetProposal,
          TD.IdLocForkLiftProposal,
          TD.IdLpnSourceProposal,
          TD.Priority PriorityDetail,
          TD.Status StatusDetail,
          TD.StartDate,
          TD.MadeCrossDock,
          TD.DateCreated DateCreatedDetail,
          TD.UserCreated UserCreatedDetail,
          TD.DateModified DateModifiedDetail,
          TD.UserModified UserModifiedDetail,
		  IU.UomName,
		  H.HngName AS LoadCode
          FROM TaskDetail TD
          INNER JOIN Task T
          ON T.IdTask = TD.IdTask
          INNER JOIN TaskType TT
          ON TT.TaskTypeCode = T.TaskTypeCode
          AND TT.Status = 1
          INNER JOIN TrackTaskType TTT
          ON TTT.IdTrackTaskType = T.IdTrackTaskType
          INNER JOIN Warehouse W
          ON W.IdWhs = TD.IdWhs
		  INNER JOIN Location L
		  ON L.IdLocCode = TD.IdLocSourceProposal
		  INNER JOIN Hangar H
		  ON H.IdHng = L.IdHng
          LEFT JOIN Owner O
          ON O.IdOwn = T.IdOwn
          LEFT JOIN Item I
          ON I.IdItem = TD.IdItem
          LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = TD.IdCtgItem
		  LEFT JOIN ItemUom IU
		         ON IU.IdItem = I.IdItem
	            AND IU.IdUomType = I.StackingSequence
          LEFT JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = TD.IdDocumentBound
          WHERE T.IdTrackTaskType &lt; 30
          AND TD.IsComplete = 0
          @SQLPart
          ORDER BY W.ShortWhsName,O.OwnName,T.IdTask;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
          <filter name="TaskType" type="textIn">T.TaskTypeCode</filter>
          <filter name="DateRange" type="dateGreater">T.CreateDate</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Description" type="textLike">I.LongItemName</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="Driver" type="textLike">TD.UserAssigned</filter>
          <filter name="LocationSource" type="textLike">TD.IdLocSourceProposal</filter>
          <filter name="LocationTarget" type="textLike">TD.IdLocTargetProposal</filter>
          <filter name="PriorityTask" type="textEqual">T.Priority</filter>
        </filters>
      </query>

      <query code="Task_UpdatePriority">
        <sql>
          UPDATE Task SET
          Priority = @Priority
          ,DateModified = @fechaActual
          ,UserModified = @usuario
          WHERE
          IdTask = @idTask

          UPDATE TaskDetail SET
          Priority = @Priority
          ,DateModified = @fechaActual
          ,UserModified = @usuario
          WHERE
          IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="Int">Priority</parameter>
          <parameter type="DateTime">fechaActual</parameter>
          <parameter type="String">usuario</parameter>
        </parameters>
      </query>

      <query code="Task_UpdateComplete">
        <sql>
          UPDATE Task SET
          WorkersAssigned = 0
          ,IsComplete = @IsComplete
          ,IdTrackTaskType = @IdTrackTaskType
          ,RealStartDate = @RealStartDate
          ,CloseDate = @CloseDate
          ,RealEndDate = @RealEndDate
          ,Status = @Status
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE
          IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="Boolean">IsComplete</parameter>
          <parameter type="Int">IdTrackTaskType</parameter>
          <parameter type="DateTime">RealStartDate</parameter>
          <parameter type="DateTime">CloseDate</parameter>
          <parameter type="DateTime">RealEndDate</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <!-- Mantenedor de tareas  -->
      <query code="TaskMgr_FindAll">
        <sql>
          SELECT DISTINCT *
          FROM (
          SELECT
          T.IdTask,
          T.IdWhs,
          W.WhsName,
          W.ShortWhsName,
          T.IdOwn,
          O.OwnName,
          T.IdTrackTaskType,
          TTT.NameTrackTasktype,
          T.CreateDate,
          T.TaskTypeCode,
          TT.TaskTypeName,
          T.Description AS TaskDescription,
          T.Priority,
          T.IdLocStageSource,
          T.IdLocStageTarget,
          T.WorkersRequired,
          T.AllowCrossDock,
          T.UserCreated,
          T.UserModified,
          T.DateModified,
          T.DateCreated,
          T.IsComplete,
          T.RealStartDate,
          T.DateTrackTask,
          T.Status,
          TD.IdTaskDetail,
          TD.IsComplete AS IsCompleteDetail,
          TD.IdDocumentBound AS IdDocumentBoundDetail,
          (
          CASE
          WHEN T.TaskTypeCode IN ('PUT', 'RCPA') THEN
          (SELECT InboundNumber FROM InboundOrder IO WHERE IO.IdInboundOrder = TD.IdDocumentBound)
          WHEN T.TaskTypeCode = ('SORT') THEN
          (SELECT OutboundNumber 	FROM OutboundOrder OO 	WHERE OO.IdOutboundOrder = T.IdDocumentBound)
          ELSE
          (SELECT OutboundNumber 	FROM OutboundOrder OO 	WHERE OO.IdOutboundOrder = TD.IdDocumentBound)
          END
          ) AS OutboundNumber,
          (
          CASE
          WHEN T.TaskTypeCode IN ('PUT', 'RCPA') THEN
          NULL
          WHEN T.TaskTypeCode = ('SORT') THEN
          (SELECT ReferenceNumber 	FROM OutboundOrder OO 	WHERE OO.IdOutboundOrder = T.IdDocumentBound)
          ELSE
          (SELECT ReferenceNumber 	FROM OutboundOrder OO 	WHERE OO.IdOutboundOrder = TD.IdDocumentBound)
          END
          ) AS ReferenceNumber,
          (
          CASE
          WHEN T.TaskTypeCode IN ('PUT', 'RCPA') THEN
          (SELECT IdInboundType AS IdOutboundType FROM InboundOrder IO WHERE IO.IdInboundOrder = TD.IdDocumentBound)
          WHEN T.TaskTypeCode = ('SORT') THEN
          (SELECT IdOutboundType 	FROM OutboundOrder OO 	WHERE OO.IdOutboundOrder = T.IdDocumentBound)
          ELSE
          (SELECT IdOutboundType 	FROM OutboundOrder OO 	WHERE OO.IdOutboundOrder = TD.IdDocumentBound)
          END
          ) AS IdOutboundType,
          TD.IdItem,
          I.ItemCode,
          I.LongItemName,
          I.Description,
          TD.ProposalQty,
          TD.IdCtgItem,
          CI.CtgName,
          TD.UserAssigned,
          TD.IdLocSourceProposal,
          TD.IdLocTargetProposal,
          TD.IdLocForkLiftProposal,
          TD.IdLpnSourceProposal,
          TD.Priority AS PriorityDetail,
          TD.Status AS StatusDetail,
          TD.StartDate,
          TD.MadeCrossDock,
          TD.DateCreated AS DateCreatedDetail,
          TD.UserCreated AS UserCreatedDetail,
          TD.DateModified AS DateModifiedDetail,
          TD.UserModified AS UserModifiedDetail,
          IU.UomName,
          H.HngName AS LoadCode
          FROM TaskDetail TD
          INNER JOIN Task T
          ON T.IdTask = TD.IdTask
          INNER JOIN TaskType TT
          ON TT.TaskTypeCode = T.TaskTypeCode
          AND TT.Status = 1
          INNER JOIN TrackTaskType TTT
          ON TTT.IdTrackTaskType = T.IdTrackTaskType
          INNER JOIN Warehouse W
          ON W.IdWhs = TD.IdWhs
          LEFT JOIN Location L
          ON L.IdLocCode = TD.IdLocSourceProposal
          LEFT JOIN Hangar H
          ON H.IdHng = L.IdHng
          LEFT JOIN Owner O
          ON O.IdOwn = T.IdOwn
          LEFT JOIN Item I
          ON I.IdItem = TD.IdItem
          LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = TD.IdCtgItem
          LEFT JOIN ItemUom IU
          ON IU.IdItem = I.IdItem
          AND IU.IdUomType = I.StackingSequence
          ) TS

          @SQLPart
          ORDER BY TS.ShortWhsName, TS.OwnName, TS.IdTask;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">TS.IdWhs</filter>
          <filter name="Owner" type="numericIn">TS.IdOwn</filter>
          <filter name="TaskType" type="textIn">TS.TaskTypeCode</filter>
          <filter name="DateRange" type="dateGreater">TS.CreateDate</filter>
          <filter name="Item" type="textLike">TS.ItemCode</filter>
          <filter name="Description" type="textLike">TS.LongItemName</filter>
          <filter name="DocumentNbr" type="textEqual">TS.OutboundNumber</filter>
          <filter name="ReferenceNbr" type="textEqual">TS.ReferenceNumber</filter>
          <filter name="Driver" type="textLike">TS.UserAssigned</filter>
          <filter name="LocationSource" type="textLike">TS.IdLocSourceProposal</filter>
          <filter name="LocationTarget" type="textLike">TS.IdLocTargetProposal</filter>
          <filter name="PriorityTask" type="textEqual">TS.Priority</filter>
          <filter name="TrackTaskType" type="numericIn">TS.IdTrackTaskType</filter>
          <filter name="LpnSource" type="textLike">TS.IdLpnSourceProposal</filter>
          <filter name="OutboundType" type="numericEqual">TS.IdOutboundType</filter>
          <filter name="Name" type="textLike">TS.Description</filter>
          <filter name="Completed" type="numericIn">TS.IsComplete</filter>
		      <filter name="Completed" type="numericIn">TS.IsCompleteDetail</filter>
          <filter name="CodeNumeric" type="numericIn">TS.IdTask</filter>
        </filters>
      </query>
  
    <query code="TaskMgr_GetById">
        <sql>
          SELECT
          T.IdTask,
          T.IdWhs,
          W.WhsName,
          W.ShortWhsName,
          T.IdOwn,
          O.OwnName,
          T.IdTrackTaskType,
          TTT.NameTrackTasktype,
          T.CreateDate,
          T.TaskTypeCode,
          TT.TaskTypeName,
          T.Description TaskDescription,
          T.Priority,
          T.IdLocStageSource,
          T.IdLocStageTarget,
          T.WorkersRequired,
          T.AllowCrossDock,
          T.UserCreated,
          T.UserModified,
          T.DateModified,
          T.DateCreated,
          T.IsComplete,
          T.RealStartDate,
          T.DateTrackTask,
          T.Status,
          TD.IdTaskDetail,
          TD.IsComplete IsCompleteDetail,
          TD.IdDocumentBound IdDocumentBoundDetail,
          OO.OutboundNumber,
          TD.IdItem,
          I.ItemCode,
          I.LongItemName,
          TD.ProposalQty,
          TD.IdCtgItem,
          CI.CtgName,
          TD.UserAssigned,
          TD.IdLocSourceProposal,
          TD.IdLocTargetProposal,
          TD.IdLocForkLiftProposal,
          TD.IdLpnSourceProposal,
          TD.Priority PriorityDetail,
          TD.Status StatusDetail,
          TD.StartDate,
          TD.MadeCrossDock,
          TD.DateCreated DateCreatedDetail,
          TD.UserCreated UserCreatedDetail,
          TD.DateModified DateModifiedDetail,
          TD.UserModified UserModifiedDetail
          FROM TaskDetail TD
          INNER JOIN Task T
          ON T.IdTask = TD.IdTask
          INNER JOIN TaskType TT
          ON TT.TaskTypeCode = T.TaskTypeCode
          AND TT.Status = 1
          INNER JOIN TrackTaskType TTT
          ON TTT.IdTrackTaskType = T.IdTrackTaskType
          INNER JOIN Warehouse W
          ON W.IdWhs = TD.IdWhs
          LEFT JOIN Owner O
          ON O.IdOwn = T.IdOwn
          LEFT JOIN Item I
          ON I.IdItem = TD.IdItem
          LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = TD.IdCtgItem
          LEFT JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = TD.IdDocumentBound
          WHERE T.IdTask = @id
          ORDER BY W.ShortWhsName,O.OwnName,T.IdTask;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">id</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="TaskMgr_Update">
        <sql>
          UPDATE Task SET
          IsComplete = @isComplete
          ,Description = @description
          ,Priority = @priority
          ,Status = @status
          ,IdTrackTaskType = @idTrackTaskType
          ,IdLocStageSource = @idLocStageSource
          ,IdLocStageTarget = @idLocStageTarget
          ,WorkersRequired = @workersRequired
          ,AllowCrossDock = @allowCrossDock
          ,DateModified = @fechaActual
          ,UserModified = @usuario
          WHERE
          IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="Boolean">isComplete</parameter>
          <parameter type="String">description</parameter>
          <parameter type="Int">priority</parameter>
          <parameter type="Boolean">status</parameter>
          <parameter type="Int">idTrackTaskType</parameter>
          <parameter type="String">idLocStageSource</parameter>
          <parameter type="String">idLocStageTarget</parameter>
          <parameter type="Int">workersRequired</parameter>
          <parameter type="Boolean">allowCrossDock</parameter>
          <parameter type="DateTime">fechaActual</parameter>
          <parameter type="String">usuario</parameter>
        </parameters>
      </query>

      <query code="TaskMgr_UpdateIsComplete">
        <sql>
          UPDATE TaskDetail SET
          IsComplete = @isComplete
          ,DateModified = @fechaActual
          ,UserModified = @usuario
          WHERE
          IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="Boolean">isComplete</parameter>
          <parameter type="DateTime">fechaActual</parameter>
          <parameter type="String">usuario</parameter>
        </parameters>
      </query>

      <query code="TaskMgr_UpdatePriority">
        <sql>
          UPDATE TaskDetail SET
          Priority = @priority
          ,DateModified = @fechaActual
          ,UserModified = @usuario
          WHERE
          IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="Int">priority</parameter>
          <parameter type="DateTime">fechaActual</parameter>
          <parameter type="String">usuario</parameter>
        </parameters>
      </query>

      <query code="TaskMgr_UpdateStatus">
        <sql>
          UPDATE TaskDetail SET
          Status = @status
          ,DateModified = @fechaActual
          ,UserModified = @usuario
          WHERE
          IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="Boolean">status</parameter>
          <parameter type="DateTime">fechaActual</parameter>
          <parameter type="String">usuario</parameter>
        </parameters>
      </query>

      <query code="TaskMgr_UpdateIdTrackTaskType">
        <sql>
          UPDATE Task SET
          CloseDate = @fechaActual
          WHERE
          IdTask = @idTask

          UPDATE TaskDetail SET
          IsComplete = 1
          ,DateModified = @fechaActual
          ,UserModified = @usuario
          WHERE
          IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="DateTime">fechaActual</parameter>
          <parameter type="String">usuario</parameter>
        </parameters>
      </query>

      <query code="TaskDetailMgr_Update">
        <sql>
          UPDATE TaskDetail SET
          IsComplete = @isComplete
          ,Priority = @priority
          ,IdLocForkLiftProposal = @idLocForkLiftProposal
          ,Status = @status
          ,UserAssigned = @userAssigned
          ,DateModified = @fechaActual
          ,UserModified = @usuario
          WHERE
          IdTaskDetail = @idTaskDetail
        </sql>
        <parameters>
          <parameter type="Int">idTaskDetail</parameter>
          <parameter type="Boolean">isComplete</parameter>
          <parameter type="Int">priority</parameter>
          <parameter type="String">idLocForkLiftProposal</parameter>
          <parameter type="Boolean">status</parameter>
          <parameter type="String">userAssigned</parameter>
          <parameter type="DateTime">fechaActual</parameter>
          <parameter type="String">usuario</parameter>
        </parameters>
      </query>

      <query code="TaskDetailMgrWhenIsGoingToOpen_Update">
        <sql>
          UPDATE TaskDetail SET
          IsComplete = @isComplete
          ,Priority = @priority
          ,Status = @status
          ,UserAssigned = @userAssigned         
          ,IdLocSourceUsed = @IdLocSourceUsed
          ,IdLocForkLiftUsed = @IdLocForkLiftUsed
          ,IdLocTargetUsed = @IdLocTargetUsed
          ,IdLpnTargetUsed = @IdLpnTargetUsed
          ,IdLpnSourceUsed = @IdLpnSourceUsed
          ,StartDate = @StartDate
          ,EndDate = @EndDate         
          ,DateModified = @fechaActual
          ,UserModified = @usuario
          WHERE
          IdTaskDetail = @idTaskDetail
        </sql>
        <parameters>
          <parameter type="Int">idTaskDetail</parameter>
          <parameter type="Boolean">isComplete</parameter>
          <parameter type="Int">priority</parameter>
          <parameter type="Boolean">status</parameter>
          <parameter type="String">userAssigned</parameter>         
          <parameter type="String">IdLocSourceUsed</parameter>
          <parameter type="String">IdLocForkLiftUsed</parameter>
          <parameter type="String">IdLocTargetUsed</parameter>
          <parameter type="String">IdLpnTargetUsed</parameter>
          <parameter type="String">IdLpnSourceUsed</parameter>
          <parameter type="DateTime">StartDate</parameter>
          <parameter type="DateTime">EndDate</parameter>       
          <parameter type="DateTime">fechaActual</parameter>
          <parameter type="String">usuario</parameter>
        </parameters>
      </query>

      <query code="TaskMgr_FindAllTasksToActivate">
        <sql>
          SELECT 
		           T.IdTask,
		           TD.IdTaskDetail,
		           W.IdWhs,
		           W.WhsName,
		           O.IdOwn,
		           O.OwnName,
		           I.IdItem,
               I.ItemCode,
		           I.Description AS ItemDescription,
		           L.LocCode,
		           L.RowLoc,
		           L.ColumnLoc,
		           L.LevelLoc,
		           TT.NameTrackTaskType,
               TD.ProposalQty,
		           (SELECT ISNULL(SUM(ItemQty),0) 
		              FROM Stock S1 
	                JOIN Location L1 
		                ON S1.IdLocCode = L1.IdLocCode 
				           AND S1.IdWhs = L1.IdWhs 
				           AND L1.LocTypeCode = 'PUT' 
				           AND S1.IdWhs = T.IdWhs 
				           AND S1.IdItem = I.IdItem) AS 'PutawayQty'
	          FROM Task T
	          JOIN TaskDetail TD
	            ON T.IdTask = TD.IdTask
	           AND T.IdWhs = TD.IdWhs
	          JOIN TrackTaskType TT
	            ON TT.IdTrackTaskType = T.IdTrackTaskType
	          JOIN Item I
	            ON I.IdItem = TD.IdItem
	          JOIN Location L
	            ON L.IdWhs = T.IdWhs
	           AND L.IdLocCode = TD.IdLocSourceProposal
            JOIN Warehouse W
              ON T.IdWhs = W.IdWhs
            JOIN Owner O
	            ON O.IdOwn = T.IdOwn
           WHERE T.TaskTypeCode = 'REPL'
	           AND T.IdTrackTaskType = 4
			   AND T.IsComplete = 0
                 @SQLPart
                 
            SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
              FROM CfgEntityProperty qf
              JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
             WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
          <filter name="Code" type="textLike">I.ItemCode</filter>
          <filter name="Name" type="textLike">I.Description</filter>
          <filter name="LocationRowRange" type="numericBetween">L.RowLoc</filter>
          <filter name="LocationColumnRange" type="numericBetween">L.ColumnLoc</filter>
          <filter name="LocationLevelRange" type="numericBetween">L.LevelLoc</filter>
        </filters>
      </query>
  
      <query code="TaskMgr_ActivateTask">
        <sql>
          UPDATE Task SET
          IdTrackTaskType = @idTrackTaskType
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE
          IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="Int">idTrackTaskType</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>
  
      <query code="GetTaskDetailtForPTLByIdTask">
        <sql>          
          SELECT
          TD.IdTaskDetail, --> IdTaskDetail
          TD.IdWhs,
          TD.IdTask, --> IdTask
          TD.IsComplete,
          T.IdDocumentBound, --> NroOLA
          TD.IdDocumentBound AS IdDocumentBoundDetail, --> IdDocumentBound
          TD.IdDetailBound, --> IdDetailBound
          TD.LineNumber, --> LineNumber
          TD.IdItem, --> IdItem
          TD.IdCtgItem,
          TD.LotNumber,
          TD.FifoDate,
          TD.FabricationDate,
          TD.ExpirationDate,
          TD.Priority,
          TD.IdLocSourceProposal, --> IdLocSourceProposal
          TD.IdLocForkLiftProposal, 
          TD.IdLocTargetProposal, --> IdLocTargetProposal
          TD.IdLocSourceUsed,
          TD.IdLocForkLiftUsed,
          TD.IdLocTargetUsed,
          TD.IdLpnSourceProposal,
          TD.IdLpnTargetProposal,
          TD.IdLpnSourceUsed,
          TD.IdLpnTargetUsed,
          TD.Status,
          TD.ProposalQty, --> ProposalQty
          TD.RealQty,
          TD.IdPlanedProcess,
          TD.WaveCode,
          TD.LabelCode,
          TD.LoadCode,
          TD.LoadSeq,
          TD.UserAssigned,
          TD.SerialNumber,
          TD.StartDate,
          TD.EndDate,
          TD.MadeCrossDock,
          TD.DateCreated,
          TD.UserCreated,
          TD.DateModified,
          TD.UserModified,
          I.ItemCode, --> ItemCode
          I.Description AS ItemDescription, --> Description
          I.ShortItemName,
          I.ReOrderPoint,
          I.ReOrderQty,
          IU.BarCode, --> BarCode       
          IU.UomName, --> UomName
          T.IdOwn,
          L.PickingFlow,
          T.IdTrackTaskType,
          T.IdDocumentBound as TaskIdDocumentBound,
          OO.CustomerCode, --> CustomerCode
          OO.CustomerName, --> CustomerName
          OO.OutboundNumber, --> OutBoundNumber
          OO.ReferenceNumber, --> ReferenceNumber
          OO.DeliveryAddress1, --> DeliveryAdderss1
          OO.CityNameDelv AS CityNameDelivery, --> CityName
          NULL AS SpecialField1ItemUom, --> BigTicket
          NULL AS SpecialField1Outbound, --> PrefixCodBarraBulto
          NULL AS SpecialField2Outbound, --> PrefixCodBarraBigticket
          NULL AS SpecialField3Outbound, --> CustomField1
          NULL AS SpecialField4Outbound --> CustomField2
          FROM TaskDetail TD INNER JOIN
          Task T ON TD.IdTask = T.IdTask LEFT JOIN
          Item I ON TD.IdItem = I.IdItem LEFT JOIN
          Location L ON L.IdLocCode = TD.IdLocSourceProposal
          AND L.IdWhs = TD.IdWhs LEFT JOIN
          ItemUom IU ON I.IdItem = IU.IdItem
          AND IU.UomName = 'UNIDAD' INNER JOIN
          (SELECT
          OO.IdOutboundOrder
          ,OO.OutboundNumber
          ,OO.ReferenceNumber
          ,CU.IdCustomer
          ,CU.CustomerCode
          ,CU.IdOwn
          ,CU.CustomerName
          ,OO.DeliveryAddress1
          ,CI.CityName CityNameDelv
          ,ST.StateName StateNameDelv
          ,CO.CountryName CountryNameDelv
          ,CU.Email         
          FROM OutboundOrder OO
          INNER JOIN Customer CU ON OO.CustomerCode = CU.CustomerCode AND OO.IdOwn = CU.IdOwn
          LEFT JOIN Country CO ON CO.IdCountry = OO.IdCountryDelivery
          LEFT JOIN State ST ON ST.IdState = OO.IdStateDelivery
          LEFT JOIN City CI ON CI.IdCity = OO.IdCityDelivery
          LEFT JOIN Owner Own ON Own.IdOwn = CU.IdOwn) OO ON OO.IdOutboundOrder = TD.IdDocumentBound
          WHERE T.IdTask = @idTask;     
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
        </parameters>
      </query>

      <!--Track Task Type -->
      <query code="TrackTaskType_FindAll">
        <sql>
          SELECT IdTrackTaskType
          ,NameTrackTaskType
          ,DateCreated DateCreatedTrackTaskType
          ,UserCreated UserCreatedTrackTaskType
          ,DateModified DateModifiedTrackTaskType
          ,UserModified UserModifiedTrackTaskType
          FROM TrackTaskType
          ORDER BY IdTrackTaskType
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>
  
  
      <!--Start Movement Task Mgr-->
      <query code="MovementTaskMgr_FindAll">
        <sql>
          SELECT
          T.IdTask,
          T.IdWhs,
          W.WhsName,
          W.ShortWhsName,
          T.IdOwn,
          O.OwnName,
          T.IdTrackTaskType,
          TTT.NameTrackTasktype,
          T.CreateDate,
          T.TaskTypeCode,
          TT.TaskTypeName,
          T.Description TaskDescription,
          T.Priority,
          T.IdLocStageSource,
          T.IdLocStageTarget,
          T.WorkersRequired,
          T.AllowCrossDock,
          T.UserCreated,
          T.UserModified,
          T.DateModified,
          T.DateCreated,
          T.IsComplete,
          T.RealStartDate,
          T.DateTrackTask,
          T.Status,
          TD.IdTaskDetail,
          TD.IsComplete IsCompleteDetail,
          TD.IdDocumentBound IdDocumentBoundDetail,
          OO.OutboundNumber,
          TD.IdLpnSourceProposal,
          TD.IdLpnTargetProposal,
          TD.IdItem,
          I.ItemCode,
          I.LongItemName,
          TD.ProposalQty,
          TD.IdCtgItem,
          CI.CtgName,
          TD.UserAssigned,
          TD.IdLocSourceProposal,
          TD.IdLocTargetProposal,
          TD.IdLocForkLiftProposal,
          TD.Priority PriorityDetail,
          TD.Status StatusDetail,
          TD.StartDate,
          TD.MadeCrossDock,
          TD.DateCreated DateCreatedDetail,
          TD.UserCreated UserCreatedDetail,
          TD.DateModified DateModifiedDetail,
          TD.UserModified UserModifiedDetail
          FROM TaskDetail TD
          INNER JOIN Task T
          ON T.IdTask = TD.IdTask
          INNER JOIN TaskType TT
          ON TT.TaskTypeCode = T.TaskTypeCode
          AND TT.Status = 1
          INNER JOIN TrackTaskType TTT
          ON TTT.IdTrackTaskType = T.IdTrackTaskType
          INNER JOIN Warehouse W
          ON W.IdWhs = TD.IdWhs
          LEFT JOIN Owner O
          ON O.IdOwn = T.IdOwn
          LEFT JOIN Item I
          ON I.IdItem = TD.IdItem
          LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = TD.IdCtgItem
          LEFT JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = TD.IdDocumentBound
          WHERE T.IsComplete = 0
          @SQLPart
          ORDER BY W.ShortWhsName,O.OwnName,T.IdTask;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
          <filter name="TaskType" type="textIn">T.TaskTypeCode</filter>
          <filter name="DateRange" type="textBetween">T.CreateDate</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Description" type="textLike">I.LongItemName</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="Driver" type="textLike">TD.UserAssigned</filter>
          <filter name="LocationSource" type="textLike">TD.IdLocSourceProposal</filter>
          <filter name="LocationTarget" type="textLike">TD.IdLocTargetProposal</filter>
          <filter name="PriorityTask" type="textEqual">T.Priority</filter>
          <filter name="TrackTaskType" type="numericIn">T.IdTrackTaskType</filter>
        </filters>
      </query>

    
      <!--End Movement Task Mgr-->
  
  

      <!--Building Replacement Task-->
      <query code="BuildingReplacementTaskConsult">
        <sql>
          SELECT LPIC.IdWhs
          , W.WhsName
          , I.IdOwn
          , O.OwnName
          , I.IdItem
          , I.ItemCode
          , I.LongItemName
          , LPIC.IdLocCode
          , TPEND.IdLocSourceProposal
          , LPIC.RowLoc
          , LPIC.ColumnLoc
          , LPIC.LevelLoc
          , IL.ReOrderPoint
          , IL.ReOrderQty
          , COALESCE(TPEND.RepoPending,0) AS RepoPending
          , (SELECT ISNULL(SUM(ItemQty),0) FROM Stock S1 INNER JOIN Location L1 On S1.IdLocCode = L1.IdLocCode AND S1.IdWhs = L1.IdWhs AND L1.LocTypeCode = 'PICK' AND S1.IdWhs = LPIC.IdWhs AND S1.IdItem = I.IdItem AND S1.IdLocCode = LPIC.IdLocCode) AS ItemQty
          , COALESCE(IL.ReorderQty, I.ReorderQty, 0) - COALESCE((SELECT ISNULL(SUM(ItemQty),0) FROM Stock S1 INNER JOIN Location L1 On S1.IdLocCode = L1.IdLocCode AND S1.IdWhs = L1.IdWhs AND L1.LocTypeCode = 'PICK' AND S1.IdWhs = LPIC.IdWhs AND S1.IdItem = I.IdItem AND S1.IdLocCode = LPIC.IdLocCode),0) 'Replenishment'
          ,(SELECT ISNULL(SUM(ItemQty),0) FROM Stock S1 INNER JOIN Location L1 On S1.IdLocCode = L1.IdLocCode AND S1.IdWhs = L1.IdWhs AND L1.LocTypeCode = 'PUT' AND S1.IdWhs = LPIC.IdWhs AND S1.IdItem = I.IdItem) AS 'PutawayQty'
          FROM Item I
          INNER JOIN Owner O ON O.IdOwn = I.IdOwn
          INNER  JOIN (SELECT ItemLocation.IdItem, ItemLocation.IdLocCode, Location.IdWhs,
          ItemLocation.ReorderPoint, ItemLocation.ReorderQty , 'Location' AS LevelConfig
          FROM ItemLocation
          INNER JOIN Location
          ON ItemLocation.IdLocCode = Location.IdLocCode
          UNION
          SELECT Stock.IdItem, Stock.IdLocCode, Stock.IdWhs,
          Item.ReorderPoint, Item.ReorderQty, 'Item' AS LevelConfig
          FROM Stock
          INNER JOIN Item
          ON Item.IdItem = Stock.IdItem
          WHERE ISNULL(Item.ReOrderQty,0) > 0
          AND Stock.IdLocCode NOT IN (SELECT IdLocCode FROM ItemLocation WHERE IdItem = Stock.IdItem)) AS IL
          ON IL.IdItem = I.IdItem
          INNER  JOIN Location LPIC
          ON IL.IdLocCode = LPIC.IdLocCode
          AND IL.IdWhs = LPIC.IdWhs
          AND LPIC.LocTypeCode = 'PICK'
          INNER  JOIN Warehouse W ON W.IdWhs = LPIC.IdWhs
          LEFT  JOIN(SELECT TD.IdLocTargetProposal, TD.IdLocSourceProposal, TD.IdItem, TD.IdWhs,
          COUNT(*) AS RepoPending
          FROM TaskDetail TD
          INNER JOIN TASK T ON TD.IdTask = T.IdTask
          WHERE T.IsComplete = 0
          AND TD.IsComplete = 0
          AND T.TaskTypeCode =  'REPL'
          GROUP BY TD.IdLocTargetProposal, TD.IdLocSourceProposal, TD.IdItem, TD.IdWhs) AS TPEND
          ON I.IdItem = TPEND.IdItem
          AND W.IdWhs = TPEND.IdWhs
          AND LPIC.IdLocCode = TPEND.IdLocTargetProposal
          @SQLPart
          ORDER BY O.OwnName, I.LongItemName, LPIC.IdLocCode


          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder;
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericEqual">W.IdWhs</filter>
          <filter name="Owner" type="numericIn">O.IdOwn</filter>
          <filter name="Code" type="textLike">I.ItemCode</filter>
          <filter name="Name" type="textLike">I.LongItemName</filter>
          <filter name="LocationRowRange" type="numericBetween">LPIC.RowLoc</filter>
          <filter name="LocationColumnRange" type="numericBetween">LPIC.ColumnLoc</filter>
          <filter name="LocationLevelRange" type="numericBetween">LPIC.LevelLoc</filter>
        </filters>
      </query>

      <!--End Building Replacement Task-->



      <!-- End TASK section  -->

      <!-- RULES section  -->

    <!--Find Custom Rule -->
      <query code="CustomRule_FindAll">
        <sql>
          SELECT CR.IdCustomRule,
          CR.Status,
          CR.Name,
          CR.DefaultRule,
          CR.DateCreated,
          CR.UserCreated,
          CR.DateModified,
          CR.UserModified,
          WP.IdWmsProcessCode,
          WP.Name AS NameProcess,
          WP.WhereIn,
          W.IdWhs,
          W.WhsCode,
          W.ShortWhsName
          FROM CustomRule CR INNER JOiN
          WmsProcess WP ON CR.IdWmsProcessCode = WP.IdWmsProcessCode
          INNER JOIN Warehouse W ON CR.IdWhs = W.IdWhs
          @SQLPart
          ORDER BY W.ShortWhsName,WP.Name, CR.Name

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Name" type= "textLike">CR.Name</filter>
          <filter name="WmsProcessType" type= "textIn">WP.IdWmsProcessCode</filter>
          <filter name="Warehouse" type="numericIn">CR.IdWhs</filter>
        </filters>
      </query>

      <query code="CustomRule_GetByIdWhs">
        <sql>
          SELECT CR.IdCustomRule,
          CR.Status,
          CR.Name,
          CR.DefaultRule,
          CR.DateCreated,
          CR.UserCreated,
          CR.DateModified,
          CR.UserModified,
          WP.IdWmsProcessCode,
          WP.Name AS NameProcess,
          WP.WhereIn
          FROM CustomRule CR INNER JOiN
          WmsProcess WP ON CR.IdWmsProcessCode = WP.IdWmsProcessCode
          WHERE CR.IdWhs = @IdWhs
          ORDER BY CR.Name, WP.Name
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
        <filters>          
        </filters>
      </query>

      <query code="CustomRule_GetByItem">
        <sql>
          SELECT DISTINCT CR.IdCustomRule, CR.Name
          FROM CustomRule CR
          JOIN CustomRuleItem CRI ON CR.IdCustomRule = CRI.IdCustomRule
          WHERE CRI.IdItem = @IdItem
          AND CR.IdWhs = @IdWhs
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>
      

      <query code="CustomRule_GetByNotInItem">
        <sql>
          SELECT DISTINCT IdCustomRule, Name
          FROM CustomRule
          WHERE IdCustomRule NOT IN
          (SELECT IdCustomRule FROM CustomRuleItem
          WHERE IdItem = @IdItem)
          AND IdWhs = @IdWhs
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

    <query code="CustomRule_GetByIdOwn">
      <sql>
        SELECT  CR.IdCustomRule,
        CR.Status,
        CR.IdWmsProcessCode,
        WP.Name AS NameProcess,
        CR.Name,
        CR.DefaultRule,
        CR.DateCreated,
        CR.UserCreated,
        CR.DateModified,
        CR.UserModified,
        CR.IdWhs,
        ISNULL(T.Valid, 0) AS AsigRuleItem
        FROM CustomRule CR INNER JOIN
        WmsProcess WP ON CR.IdWmsProcessCode = WP.IdWmsProcessCode LEFT JOIN
        (SELECT I.IdOwn,
        CRI.IdCustomRule,
        1 AS Valid
        FROM CustomRuleItem CRI INNER JOIN
        Item I ON CRI.IdItem = I.IdItem
        GROUP BY I.IdOwn, CRI.IdCustomRule) T ON CR.IdCustomRule = T.IdCustomRule
        AND  T.IdOwn = @IdOwn
        WHERE CR.IdWhs = @IdWhs
      </sql>
      <parameters>
        <parameter type="Int">IdWhs</parameter>
        <parameter type="Int">IdOwn</parameter>
      </parameters>
      <filters>
      </filters>
    </query>

    <query code="CustomRule_GetByIdGrpItem1">
      <sql>
        SELECT  CR.IdCustomRule,
        CR.Status,
        CR.IdWmsProcessCode,
        WP.Name AS NameProcess,
        CR.Name,
        CR.DefaultRule,
        CR.DateCreated,
        CR.UserCreated,
        CR.DateModified,
        CR.UserModified,
        CR.IdWhs,
        ISNULL(T.Valid, 0) AS AsigRuleItem
        FROM CustomRule CR INNER JOIN
        WmsProcess WP ON CR.IdWmsProcessCode = WP.IdWmsProcessCode LEFT JOIN
        (SELECT I.IdGrpItem1,
        CRI.IdCustomRule,
        1 AS Valid
        FROM CustomRuleItem CRI INNER JOIN
        Item I ON CRI.IdItem = I.IdItem
        GROUP BY I.IdGrpItem1, CRI.IdCustomRule) T ON CR.IdCustomRule = T.IdCustomRule
        AND  T.IdGrpItem1 = @IdGrpItem1
        WHERE CR.IdWhs = @IdWhs
      </sql>
      <parameters>
        <parameter type="Int">IdWhs</parameter>
        <parameter type="Int">IdGrpItem1</parameter>
      </parameters>
      <filters>
      </filters>
    </query>

    <query code="CustomRule_GetByIdGrpItem2">
      <sql>
        SELECT  CR.IdCustomRule,
        CR.Status,
        CR.IdWmsProcessCode,
        WP.Name AS NameProcess,
        CR.Name,
        CR.DefaultRule,
        CR.DateCreated,
        CR.UserCreated,
        CR.DateModified,
        CR.UserModified,
        CR.IdWhs,
        ISNULL(T.Valid, 0) AS AsigRuleItem
        FROM CustomRule CR INNER JOIN
        WmsProcess WP ON CR.IdWmsProcessCode = WP.IdWmsProcessCode LEFT JOIN
        (SELECT I.IdGrpItem1,
        I.IdGrpItem2,
        CRI.IdCustomRule,
        1 AS Valid
        FROM CustomRuleItem CRI INNER JOIN
        Item I ON CRI.IdItem = I.IdItem
        GROUP BY I.IdGrpItem1, I.IdGrpItem2, CRI.IdCustomRule) T ON CR.IdCustomRule = T.IdCustomRule
        AND  T.IdGrpItem1 = @IdGrpItem1
        AND T.IdGrpItem2 = @IdGrpItem2
        WHERE CR.IdWhs = @IdWhs
      </sql>
      <parameters>
        <parameter type="Int">IdWhs</parameter>
        <parameter type="Int">IdGrpItem1</parameter>
        <parameter type="Int">IdGrpItem2</parameter>
      </parameters>
      <filters>
      </filters>
    </query>

    <query code="CustomRule_GetByIdGrpItem3">
      <sql>
        SELECT  CR.IdCustomRule,
        CR.Status,
        CR.IdWmsProcessCode,
        WP.Name AS NameProcess,
        CR.Name,
        CR.DefaultRule,
        CR.DateCreated,
        CR.UserCreated,
        CR.DateModified,
        CR.UserModified,
        CR.IdWhs,
        ISNULL(T.Valid, 0) AS AsigRuleItem
        FROM CustomRule CR INNER JOIN
        WmsProcess WP ON CR.IdWmsProcessCode = WP.IdWmsProcessCode LEFT JOIN
        (SELECT I.IdGrpItem1,
        I.IdGrpItem2,
        I.IdGrpItem3,
        CRI.IdCustomRule,
        1 AS Valid
        FROM CustomRuleItem CRI INNER JOIN
        Item I ON CRI.IdItem = I.IdItem
        GROUP BY I.IdGrpItem1, I.IdGrpItem2, I.IdGrpItem3, CRI.IdCustomRule) T ON CR.IdCustomRule = T.IdCustomRule
        AND  T.IdGrpItem1 = @IdGrpItem1
        AND T.IdGrpItem2 = @IdGrpItem2
        AND T.IdGrpItem3 = @IdGrpItem3
        WHERE CR.IdWhs = @IdWhs
      </sql>
      <parameters>
        <parameter type="Int">IdWhs</parameter>
        <parameter type="Int">IdGrpItem1</parameter>
        <parameter type="Int">IdGrpItem2</parameter>
        <parameter type="Int">IdGrpItem3</parameter>
      </parameters>
      <filters>
      </filters>
    </query>

      <query code="CustomRule_GetByIdGrpItem4">
        <sql>
          SELECT  CR.IdCustomRule,
          CR.Status,
          CR.IdWmsProcessCode,
          WP.Name AS NameProcess,
          CR.Name,
          CR.DefaultRule,
          CR.DateCreated,
          CR.UserCreated,
          CR.DateModified,
          CR.UserModified,
          CR.IdWhs,
          ISNULL(T.Valid, 0) AS AsigRuleItem
          FROM CustomRule CR INNER JOIN
          WmsProcess WP ON CR.IdWmsProcessCode = WP.IdWmsProcessCode LEFT JOIN
          (SELECT I.IdGrpItem1,
          I.IdGrpItem2,
          I.IdGrpItem3,
          I.IdGrpItem4,
          CRI.IdCustomRule,
          1 AS Valid
          FROM CustomRuleItem CRI INNER JOIN
          Item I ON CRI.IdItem = I.IdItem
          GROUP BY I.IdGrpItem1, I.IdGrpItem2, I.IdGrpItem3, I.IdGrpItem4, CRI.IdCustomRule) T ON CR.IdCustomRule = T.IdCustomRule
          AND  T.IdGrpItem1 = @IdGrpItem1
          AND T.IdGrpItem2 = @IdGrpItem2
          AND T.IdGrpItem3 = @IdGrpItem3
          AND T.IdGrpItem4 = @IdGrpItem4
          WHERE CR.IdWhs = @IdWhs
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
          <parameter type="Int">IdGrpItem3</parameter>
          <parameter type="Int">IdGrpItem4</parameter>
        </parameters>
        <filters>
        </filters>
      </query>

    <!--Find Custom Rule -->
    <query code="GroupRuleByIdCustomRule">
      <sql>
        SELECT GR.IdCustomRule,
        GR.IdRule,
        R.RuleCode,
        R.NameSpace,
        R.Status,
        R.Name,
        WP.Name AS NameProcess,
        GR.SequenceExecution
        FROM GroupRule GR INNER JOIN
        [Rule] R ON GR.IdRule = R.IdRule LEFT JOIN
        WmsProcess WP ON R.IdWmsProcessCode = WP.IdWmsProcessCode
        WHERE GR.IdCustomRule = @IdCustomRule
        ORDER BY GR.IdCustomRule, GR.SequenceExecution
      </sql>
      <parameters>
        <parameter type="Int">IdCustomRule</parameter>
      </parameters>
    </query>



    

    <query code="GetRulesByItemAndWmsProcess">
        <sql>
          SELECT R.IdRule,R.RuleCode,R.Status,R.[Name],R.NameSpace
          FROM [Rule] R
          INNER JOIN GroupRule GR ON GR.IdRule = R.IdRule
          INNER JOIN CustomRule CR ON CR.IdCustomRule = GR.IdCustomRule
          INNER JOIN CustomRuleItem CRI ON CRI.IdCustomRule = CR.IdCustomRule
          WHERE CRI.IdItem = @IdItem
          AND CR.IdWmsProcessCode = @IdWmsProcessCode
          ORDER BY GR.SequenceExecution ASC
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
          <parameter type="String">IdWmsProcessCode</parameter>
        </parameters>
      </query>

      <query code="GetRulesByIdWhsAndItemAndWmsProcess">
        <sql>
          SELECT
          R.IdRule,
          R.RuleCode,
          R.Status,
          R.[Name],
          R.NameSpace
          FROM CustomRule CR INNER JOIN
          CustomRuleItem CRI ON CRI.IdCustomRule = CR.IdCustomRule INNER JOIN
          GroupRule GR ON CR.IdCustomRule = GR.IdCustomRule INNER JOIN
          [Rule] R ON GR.IdRule = R.IdRule
          WHERE CR.Idwhs = @IdWhs
          AND CR.IdWmsProcessCode = @IdWmsProcessCode
          AND CRI.IdItem = @IdItem
          ORDER BY GR.SequenceExecution ASC
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="String">IdWmsProcessCode</parameter>
        </parameters>
      </query>

      <query code="GetItemParams">
        <sql>
          SELECT  IP.IdParameter,
          IP.ParameterCode + '#' + CAST(IP.IdWhs AS VARCHAR(3))+ '#' + CAST(IP.IdItem AS VARCHAR(10))AS ParameterKey,
          IP.ParameterValue,
          IP.IdModule,
          IP.Scope,
          IP.[Type]
          FROM v_Cfg_WmsItemParamInStock IP
          ORDER BY ParameterKey
        </sql>
        <parameters>
        </parameters>
      </query>
      <query code="GetLPNParams">
        <sql>
          SELECT IdParameter,
          ParameterCode + '#' + CAST(IdWhs AS VARCHAR(3))+ '#' + CAST(IdOwn AS VARCHAR(10))AS ParameterKey ,
          ParameterValue,
          IdModule,
          Scope,
          [Type]
          FROM v_Cfg_WmsLpnParamByOwnWhs
        </sql>
        <parameters>
        </parameters>
      </query>
      <query code="GetLocParams">
        <sql>
          SELECT IdParameter,
          ParameterCode + '#' + CAST(IdWhs AS VARCHAR(3))AS ParameterKey ,
          ParameterValue,
          IdModule,
          Scope,
          [Type]
          FROM v_Cfg_WmsLocParamByWhs
        </sql>
        <parameters>
        </parameters>
      </query>
      <query code="GetAllRulesCode">
        <sql>
          SELECT R.RuleCode, R.NameSpace
          FROM [Rule] R
          WHERE R.Status = 1
        </sql>
        <parameters>
        </parameters>
      </query>

    <query code="GetRulesCode_Name_WmsProcessCode">
      <sql>
        SELECT R.IdRule,
        R.RuleCode,
        R.NameSpace,
        R.Name,
        R.Status,
        WP.Name AS NameProcess
        FROM [Rule] R JOIN WmsProcess WP ON
        R.IdWmsProcessCode = WP.IdWmsProcessCode
        WHERE R.Status = 1
        @SQLPart
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="Name" type= "textLike">R.Name</filter>
        <filter name="Code" type= "textLike">R.RuleCode</filter>
        <filter name="WmsProcessType" type= "textIn">R.IdWmsProcessCode</filter>
      </filters>
    </query>
    
  
      <!-- MAP 2D section  -->

      <query code="Location_GetByHangarMap">
        <sql>
          SELECT
          L.IdLocCode
          , L.LocCode
          , L.Status
          , L.LocTypeCode
          , L.LevelLoc
          , L.Aisle
          , L.PositionX
          , L.PositionY
          , I.ItemCode
          , I.LongItemName
          , CI.CtgName
          , SUM(S.ItemQty) AS ItemQty
          , S.LotNumber
          , S.IdLpnCode
          , R.ReasonName AS HoldCode
          , S.FifoDate
          , S.FabricationDate
          , S.ExpirationDate

          FROM Location L
          LEFT JOIN Stock S on S.IdLocCode = L.IdLocCode
          LEFT JOIN Item I on S.IdItem = I.IdItem
          LEFT JOIN CategoryItem CI ON S.IdCtgItem = CI.IdCtgItem
          LEFT JOIN Reason R ON S.HoldCode = R.ReasonCode
          WHERE L.IdHng = @idHangar
          AND L.PositionX > 0 AND L.PositionY > 0
          GROUP BY L.IdLocCode, L.LocCode, L.Status, L.LocTypeCode, L.LevelLoc, L.Aisle, L.PositionX, L.PositionY, I.ItemCode, I.LongItemName, CI.CtgName, S.LotNumber, S.IdLpnCode
          , S.HoldCode, S.FifoDate, S.FabricationDate, S.ExpirationDate, R.ReasonName
          ORDER BY L.PositionX, L.PositionY, L.LevelLoc, L.Aisle, S.IdLpnCode, L.LocCode
        </sql>
        <parameters>
          <parameter type="Int">idHangar</parameter>
        </parameters>
      </query>

      <query code="Location_GetColumnByHangar">
        <sql>
          SELECT
          L.RowLoc
          , L.ColumnLoc
          , MAX(L.Length) Length
          , MAX(L.Width) Width
          , L.PositionX
          , L.PositionY
          ,L.Aisle
          , SUM(AUX.WithStock) WithStock
          , COUNT(L.ColumnLoc) Count
          FROM dbo.Location L
          INNER JOIN  (
          SELECT DISTINCT L.IdLocCode
          ,CASE WHEN S.IdLocCode IS NOT NULL THEN 1 ELSE 0 END WithStock,
          L.IdHng
          FROM dbo.Location L
          LEFT JOIN Stock S on S.IdLocCode = L.IdLocCode
          WHERE L.IdHng = @idHangar)AUX ON  AUX.IdLocCode = L.IdLocCode  AND AUX.IdHng = L.IdHng
          WHERE L.PositionX > 0 AND L.PositionY > 0
          GROUP BY L.RowLoc, L.ColumnLoc, L.PositionX, L.PositionY, L.Aisle
          ORDER BY L.PositionX, L.PositionY
        </sql>
        <parameters>
          <parameter type="Int">idHangar</parameter>
        </parameters>
      </query>

      <query code="MapLayout_FindAll">
        <sql>
          SELECT
          ML.IdMapLayout,
          ML.BackColor,
          ML.Margin,
          ML.HangarBackColor,
          ML.HangarBorderColor,
          ML.HangarBorder,
          ML.ColumnBackColorActive,
          ML.ColumnBackColorItem,
          ML.ColumnBorderColor,
          ML.ColumnBorderColorActive,
          ML.ColumnBorder,
          ML.ColumnDetailBackColor,
          ML.ColumnDetailBorderColor,
          ML.ColumnDetailBorder,
          ML.ColumnDetailPadding,
          ML.ColumnDetailMinHeight,
          ML.ColumnDetailMaxHeight,
          ML.ColumnDetailMinWidth,
          ML.ColumnDetailMaxWidth,
          ML.LocationDetailBorder,
          ML.LocationDetailBorderColor,
          ML.LocationDetailMaxHeight,
          ML.LocationDetailMinHeight,
          ML.LocationDetailPadding,
          ML.HighUsedLocation,
          ML.NormalHighUsedLocation,
          ML.NormalUsedLocation,
          ML.NormalLowUsedLocation,
          ML.LowUsedLocation
          FROM MapLayout ML
        </sql>
        <parameters></parameters>
      </query>

      <query code="MapColor_FindAll">
        <sql>
          SELECT
          MC.idMapColor,
          MC.idMapLayout,
          MC.MapLevel,
          MC.StockColor,
          MC.LevelColor
          FROM MapColor MC
        </sql>
        <parameters></parameters>
      </query>

      <query code="MapColor_FindAll">
        <sql>
          SELECT
          MC.idMapColor,
          MC.idMapLayout,
          MC.MapLevel,
          MC.StockColor,
          MC.LevelColor
          FROM MapColor MC
        </sql>
        <parameters></parameters>
      </query>

      <query code="MapLayout_Update">
        <sql>
          UPDATE MapLayout SET
          BackColor = @backColor,
          Margin = @margin,
          HangarBackColor = @hangarBackColor,
          HangarBorderColor = @hangarBorderColor,
          HangarBorder = @hangarBorder,
          ColumnBorderColor = @columnBorderColor,
          ColumnBorder = @columnBorder,
          ColumnBackColorActive = @columnBackColorActive,
          ColumnBorderColorActive = @columnBorderColorActive,
          ColumnBackColorItem = @columnBackColorItem,
          ColumnDetailBackColor = @columnDetailBackColor,
          ColumnDetailBorder = @columnDetailBorder,
          ColumnDetailBorderColor = @columnDetailBorderColor,
          ColumnDetailPadding = @columnDetailPadding,
          ColumnDetailMaxHeight = @columnDetailMaxHeight,
          ColumnDetailMinHeight = @columnDetailMinHeight,
          ColumnDetailMaxWidth = @columnDetailMaxWidth,
          ColumnDetailMinWidth = @columnDetailMinWidth,
          LocationDetailBorder = @locationDetailBorder,
          LocationDetailBorderColor = @locationDetailBorderColor,
          LocationDetailPadding = @locationDetailPadding,
          LocationDetailMaxHeight = @locationDetailMaxHeight,
          LocationDetailMinHeight = @locationDetailMinHeight,
          HighUsedLocation = @highUsedLocation,
          NormalHighUsedLocation = @normalHighUsedLocation,
          NormalUsedLocation = @normalUsedLocation,
          NormalLowUsedLocation = @normalLowUsedLocation,
          LowUsedLocation = @lowUsedLocation,
          DateModified = @dateModified,
          UserModified = @userModified
        </sql>
        <parameters>
          <parameter type="String">backColor</parameter>
          <parameter type="Int">margin</parameter>
          <parameter type="String">hangarBackColor</parameter>
          <parameter type="String">hangarBorderColor</parameter>
          <parameter type="Int">hangarBorder</parameter>
          <parameter type="String">columnBorderColor</parameter>
          <parameter type="Int">columnBorder</parameter>
          <parameter type="String">columnBackColorActive</parameter>
          <parameter type="String">columnBorderColorActive</parameter>
          <parameter type="String">columnBackColorItem</parameter>
          <parameter type="String">columnDetailBackColor</parameter>
          <parameter type="Int">columnDetailBorder</parameter>
          <parameter type="String">columnDetailBorderColor</parameter>
          <parameter type="Int">columnDetailPadding</parameter>
          <parameter type="Int">columnDetailMaxHeight</parameter>
          <parameter type="Int">columnDetailMinHeight</parameter>
          <parameter type="Int">columnDetailMaxWidth</parameter>
          <parameter type="Int">columnDetailMinWidth</parameter>
          <parameter type="Int">locationDetailBorder</parameter>
          <parameter type="String">locationDetailBorderColor</parameter>
          <parameter type="Int">locationDetailPadding</parameter>
          <parameter type="Int">locationDetailMaxHeight</parameter>
          <parameter type="Int">locationDetailMinHeight</parameter>

          <parameter type="String">highUsedLocation</parameter>
          <parameter type="String">normalHighUsedLocation</parameter>
          <parameter type="String">normalUsedLocation</parameter>
          <parameter type="String">normalLowUsedLocation</parameter>
          <parameter type="String">lowUsedLocation</parameter>
          
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="MapColor_Update">
        <sql>
          UPDATE MapColor SET
          StockColor = @stockColor,
          LevelColor = @levelColor,

          DateModified = @dateModified,
          UserModified = @userModified

          WHERE MapLevel = @level
        </sql>
        <parameters>
          <parameter type="Int">level</parameter>
          <parameter type="String">stockColor</parameter>
          <parameter type="String">levelColor</parameter>

          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <!-- End MAP 2D section  -->

      <!-- LOCATION section  -->
      <query code="Location_FindAll">
        <sql>
          SELECT IdLocCode
          , W.IdWhs
          , W.WhsCode
          , W.ShortWhsName
          , L.LocCode
          , L.IdHng
          , H.HngCode
          , H.HngName
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.Aisle
          , L.Status
          , T.IdLocType
          , T.LocTypeCode
          , T.LocTypeName
          , L.Description
          , L.SharedItem
          , L.OnlyLPN
          , O.IdOwn
          , O.OwnCode
          , O.OwnName
          , O.TradeName
          , L.DedicatedOwner
          , L.PickingFlow
          , L.PutawayFlow
          , L.CapacityLPN
          , L.CapacityUnit
          , L.Length
          , L.Width
          , L.Height
          , L.Volume
          , L.Weight
          , L.PositionX
          , L.PositionY
          , L.PositionZ
          , L.HoldCode
          , R.ReasonCode
          , R.ReasonName
          , L.LockInventory
          , P.PtlTypeCode
          , P.PtlTypeName
          , L.ReasonCodeLoc
          FROM Location L
          INNER JOIN Warehouse W ON L.IdWhs = W.IdWhs
          INNER JOIN LocationType T ON L.LocTypeCode = T.LocTypeCode
          INNER JOIN Hangar H ON L.IdHng = H.IdHng
          LEFT JOIN Owner O ON L.IdOwn = O.IdOwn
          LEFT JOIN Reason R ON L.HoldCode = R.ReasonCode
          LEFT JOIN PtlType P ON L.PtlTypeCode = P.PtlTypeCode
          @SQLPart
          ORDER BY W.ShortWhsName, H.HngName, IdLocCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLeft">IdLocCode</filter>
          <filter name="Name" type="textLeft">L.LocCode</filter>
          <filter name="Status" type="numericEqual">L.Status</filter>
          <filter name="Owner" type="numericIn" includeNulls="true">O.IdOwn</filter>
          <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
          <filter name="LocationType" type="textIn">T.LocTypeCode</filter>
          <filter name="Hangar" type="numericIn">L.IdHng</filter>
          <filter name="LockedLocationFilter" type="isNull">L.HoldCode</filter>
        </filters>
      </query>

      <query code="Location_Insert">
        <sql>
          INSERT INTO Location
          (IdLocCode
          , IdWhs
          , LocCode
          , IdHng
          , RowLoc
          , ColumnLoc
          , LevelLoc
          , Aisle
          , Status
          , LocTypeCode
          , Description
          , SharedItem
          , OnlyLPN
          , IdOwn
          , DedicatedOwner
          , PickingFlow
          , PutawayFlow
          , CapacityLPN
          , CapacityUnit
          , Length
          , Width
          , Height
          , Volume
          , Weight
          , PositionX
          , PositionY
          , PositionZ
          , HoldCode
          , LockInventory
          , DateCreated
          , UserCreated
          , PtlTypeCode
          , ReasonCodeLoc)

          VALUES
          (@IdLocCode
          , @IdWhs
          , @LocCode
          , @IdHng
          , @RowLoc
          , @ColumnLoc
          , @LevelLoc
          , @Aisle
          , @Status
          , @LocTypeCode
          , @Description
          , @SharedItem
          , @OnlyLPN
          , @IdOwn
          , @DedicatedOwner
          , @PickingFlow
          , @PutawayFlow
          , @CapacityLPN
          , @CapacityUnit
          , @Length
          , @Width
          , @Height
          , @Volume
          , @Weight
          , @PositionX
          , @PositionY
          , @PositionZ
          , @HoldCode
          , @LockInventory
          , @dateCreated
          , @userCreated
          , @PtlTypeCode
          , @ReasonCodeLoc)
        </sql>
        <parameters>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">LocCode</parameter>
          <parameter type="Int">IdHng</parameter>
          <parameter type="Int">RowLoc</parameter>
          <parameter type="Int">ColumnLoc</parameter>
          <parameter type="Int">LevelLoc</parameter>
          <parameter type="String">Aisle</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">LocTypeCode</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="Boolean">SharedItem</parameter>
          <parameter type="Boolean">OnlyLPN</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Boolean">DedicatedOwner</parameter>
          <parameter type="Int">PickingFlow</parameter>
          <parameter type="Int">PutawayFlow</parameter>
          <parameter type="Int">CapacityLPN</parameter>
          <parameter type="Decimal">CapacityUnit</parameter>
          <parameter type="Decimal">Length</parameter>
          <parameter type="Decimal">Width</parameter>
          <parameter type="Decimal">Height</parameter>
          <parameter type="Decimal">Volume</parameter>
          <parameter type="Decimal">Weight</parameter>
          <parameter type="Int">PositionX</parameter>
          <parameter type="Int">PositionY</parameter>
          <parameter type="Int">PositionZ</parameter>
          <parameter type="String">HoldCode</parameter>
          <parameter type="Boolean">LockInventory</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
          <parameter type="String">PtlTypeCode</parameter>
          <parameter type="String">ReasonCodeLoc</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
          <filter name="Owner" type="numericIn">O.IdOwn</filter>
        </filters>
      </query>

      <query code="Location_Update">
        <sql>
          UPDATE Location
          SET IdWhs = @IdWhs
          , LocCode = @LocCode
          , IdHng = @IdHng
          , RowLoc = @RowLoc
          , ColumnLoc = @ColumnLoc
          , LevelLoc = @LevelLoc
          , Aisle = @Aisle
          , Status = @Status
          , LocTypeCode = @LocTypeCode
          , Description = @Description
          , SharedItem = @SharedItem
          , OnlyLPN = @OnlyLPN
          , IdOwn = @IdOwn
          , DedicatedOwner = @DedicatedOwner
          , PickingFlow = @PickingFlow
          , PutawayFlow = @PutawayFlow
          , CapacityLPN = @CapacityLPN
          , CapacityUnit = @CapacityUnit
          , Length = @Length
          , Width = @Width
          , Height = @Height
          , Volume = @Volume
          , Weight = @Weight
          , PositionX = @PositionX
          , PositionY = @PositionY
          , PositionZ = @PositionZ
          , HoldCode = @HoldCode
          , LockInventory = @LockInventory
          , DateModified = @dateModified
          , UserModified = @userModified
          , PtlTypeCode = @PtlTypeCode
          , ReasonCodeLoc = @ReasonCodeLoc
          WHERE IdLocCode = @IdLocCode
        </sql>
        <parameters>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">LocCode</parameter>
          <parameter type="Int">IdHng</parameter>
          <parameter type="Int">RowLoc</parameter>
          <parameter type="Int">ColumnLoc</parameter>
          <parameter type="Int">LevelLoc</parameter>
          <parameter type="String">Aisle</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">LocTypeCode</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="Boolean">SharedItem</parameter>
          <parameter type="Boolean">OnlyLPN</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Boolean">DedicatedOwner</parameter>
          <parameter type="Int">PickingFlow</parameter>
          <parameter type="Int">PutawayFlow</parameter>
          <parameter type="Int">CapacityLPN</parameter>
          <parameter type="Decimal">CapacityUnit</parameter>
          <parameter type="Decimal">Length</parameter>
          <parameter type="Decimal">Width</parameter>
          <parameter type="Decimal">Height</parameter>
          <parameter type="Decimal">Volume</parameter>
          <parameter type="Decimal">Weight</parameter>
          <parameter type="Int">PositionX</parameter>
          <parameter type="Int">PositionY</parameter>
          <parameter type="Int">PositionZ</parameter>
          <parameter type="String">HoldCode</parameter>
          <parameter type="Boolean">LockInventory</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="String">PtlTypeCode</parameter>
          <parameter type="String">ReasonCodeLoc</parameter>
        </parameters>
      </query>

  <query code="Location_UpdateLockInventoryByIdInventory">
    <sql>
      UPDATE Location
      SET LockInventory = @LockInventory
      WHERE IdLocCode IN (SELECT IdLocCode FROM InventoryLocation
                        WHERE IdInventory = @IdInventory)
    </sql>
    <parameters>
      <parameter type="Int">IdInventory</parameter>
      <parameter type="Int">LockInventory</parameter>
    </parameters>
  </query>

  <query code="Location_Delete">
        <sql>
          DELETE FROM WorkZoneLocation WHERE IdLocCode = @IdLocCode;

          DELETE FROM WorkZoneForkLift WHERE IdLocCode = @IdLocCode;

          DELETE FROM LocationPrinter WHERE IdLocCode = @IdLocCode;

          DELETE FROM Location WHERE IdLocCode = @IdLocCode
        </sql>
        <parameters>
          <parameter type="String">IdLocCode</parameter>
        </parameters>
      </query>

      <query code="Location_InsertWorkZones">
        <sql>
          INSERT INTO WorkZoneLocation
          (IdWorkZone
          ,IdLocCode
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdWorkZone
          ,@IdLocCode
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="InventoryLocation_Insert">
        <sql>
          INSERT INTO InventoryLocation
          (IdInventory
          , IdLocCode
          , DateCreated
          , UserCreated
          , WasCounted)

          VALUES
          (@IdInventory
          , @IdLocCode
          , @DateCreated
          , @UserCreated
          , 0)
        </sql>
        <parameters>
          <parameter type="Int">IdInventory</parameter>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

  <query code="InventoryLocation_InsertInventoryFull">
    <sql>
      INSERT INTO InventoryLocation
      (IdInventory
      , IdLocCode
      , DateCreated
      , UserCreated
      , WasCounted)

      SELECT
      @IdInventory
      ,L.IdLocCode
      ,@DateCreated
      ,@UserCreated
      ,0
      FROM	Location L
      WHERE	L.IdWhs = @IdWhs
      AND L.LocTypeCode IN ('PICK', 'PUT')
      AND L.IdLocCode NOT IN(SELECT IdLocCode
      FROM InventoryLocation
      WHERE IdInventory = @IdInventory)
    </sql>
    <parameters>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdInventory</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
    </parameters>
  </query>

      <query code="InventoryLocation_Delete">
        <sql>
          DELETE InventoryLocation
          WHERE IdInventory = @IdInventory
          AND IdLocCode = @IdLocCode
        </sql>
        <parameters>
          <parameter type="Int">IdInventory</parameter>
          <parameter type="String">IdLocCode</parameter>
        </parameters>
      </query>

      <query code="InventoryLocation_DeleteByIdInventory">
        <sql>
          DELETE InventoryLocation
          WHERE IdInventory = @IdInventory
        </sql>
        <parameters>
          <parameter type="Int">IdInventory</parameter>
        </parameters>
      </query>

      <query code="GetStock_ByLocation">
        <sql>
          SELECT StockId
          FROM STOCK
          WHERE IdLocCode = @IdLocCode
        </sql>
        <parameters>
          <parameter type="String">IdLocCode</parameter>
        </parameters>
      </query>

      <query code="Location_GetByType">
        <sql>
          SELECT IdLocCode,LocCode,Status,LocTypeCode,RowLoc,ColumnLoc,
          LevelLoc,Aisle,Description,SharedItem,OnlyLPN,PickingFlow,PutawayFlow,IdWhs,LockInventory
          FROM dbo.Location l
          WHERE l.LocTypeCode = @locationType
          AND l.IdWhs = @idWhs
          AND l.Status = 1
        </sql>
        <parameters>
          <parameter type="String">locationType</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="Location_GetByHangar">
        <sql>
          SELECT
          L.IdLocCode
          , L.LocCode
          , L.Status
          , L.LocTypeCode
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.Aisle
          , L.Description
          , L.SharedItem
          , L.OnlyLPN
          , L.PickingFlow
          , L.PutawayFlow
          , L.IdWhs
          , L.Length
          , L.Width
          , L.Height
          , L.Volume
          , L.Weight
          , L.PositionX
          , L.PositionY
          , L.PositionZ
          , L.LockInventory
          FROM dbo.Location L
          WHERE L.IdHng = @idHangar
        </sql>
        <parameters>
          <parameter type="Int">idHangar</parameter>
        </parameters>
      </query>

      <query code="Location_GetByHangarTop1">
        <sql>
          SELECT TOP 1
          L.IdLocCode
          , L.LocCode
          , L.Status
          , L.LocTypeCode
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.Aisle
          , L.Description
          , L.SharedItem
          , L.OnlyLPN
          , L.PickingFlow
          , L.PutawayFlow
          , L.IdWhs
          , L.Length
          , L.Width
          , L.Height
          , L.Volume
          , L.Weight
          , L.PositionX
          , L.PositionY
          , L.PositionZ
          , L.LockInventory
          FROM dbo.Location L
          WHERE L.IdHng = @idHangar
        </sql>
        <parameters>
          <parameter type="Int">idHangar</parameter>
        </parameters>
      </query>

      <query code="Location_GetByTypeAndWorkZone">
        <sql>
          SELECT l.IdLocCode,l.LocCode,l.Status,l.LocTypeCode,l.RowLoc,l.ColumnLoc,
          l.LevelLoc,l.Aisle,l.Description,l.SharedItem,l.OnlyLPN,l.PickingFlow,l.PutawayFlow,l.IdWhs,l.LockInventory
          FROM dbo.Location l
          INNER JOIN WorkZoneLocation wz ON l.IdLocCode = wz.IdLocCode
          WHERE l.LocTypeCode = @locationType
          AND l.IdWhs = @idWhs
          AND wz.IdWorkZone = @idWorkZone
          AND l.Status = 1
        </sql>
        <parameters>
          <parameter type="String">locationType</parameter>
          <parameter type="Int">idWhs</parameter>
          <parameter type="Int">idWorkZone</parameter>
        </parameters>
      </query>

      <query code="Location_GetForCicleCount">
        <sql>
          SELECT L.IdLocCode
          , L.LocTypeCode
          , L.LocCode
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          --, S.StockId
          , S.IdOwn
          , S.IdLpnCode
          , O.OwnName
          , S.IdItem
          , S.IdWhs
          , Sum(S.ItemQty) AS ItemQty
          , Count(I.ItemCode) AS NroItems
          , I.ItemCode
          , I.LongItemName
          , S.IdCtgItem
          , CI.CtgName
          --, S.ItemQty
          , TPS.CountTaskSource
          , TPT.CountTaskTarget

          FROM Location L
          LEFT JOIN Stock S ON S.IdLocCode = L.IdLocCode
          LEFT JOIN [Owner] O ON O.IdOwn = S.IdOwn
          LEFT JOIN Item I ON I.IdItem = S.IdItem
          LEFT JOIN CategoryItem CI ON CI.IdCtgItem = S.IdCtgItem
          LEFT JOIN (SELECT IdLocSourceProposal, IdItem, Count(*) AS CountTaskSource
          FROM TaskDetail
          WHERE Status = 1 AND IsComplete = 0
          GROUP BY IdLocSourceProposal, IdItem) AS TPS
          ON TPS.IdLocSourceProposal = L.IdLocCode
          AND TPS.IdItem = I.IdItem
          LEFT JOIN (SELECT IdLocTargetProposal, IdItem, Count(*) AS CountTaskTarget
          FROM TaskDetail
          WHERE Status = 1
          AND IsComplete = 0
          GROUP BY IdLocTargetProposal, IdItem) AS TPT
          ON TPT.IdLocTargetProposal = L.IdLocCode
          AND TPT.IdItem = I.IdItem
          @SQLPart
          --AND S.IdOwn IS NOT NULL
          AND L.LocTypeCode IN ('PICK','PUT')
          GROUP BY  L.IdLocCode, L.LocTypeCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc
          , S.IdOwn, S.IdLpnCode, O.OwnName, S.IdItem, S.IdWhs, I.ItemCode, I.LongItemName, S.IdCtgItem
          , CI.CtgName, TPS.CountTaskSource, TPT.CountTaskTarget
          ORDER BY L.IdLocCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericEqual">L.IdWhs</filter>
          <filter name="Code" type="textLike">I.ItemCode</filter>
          <filter name="Name" type="textLike">I.LongItemName</filter>
          <filter name="LocationRowRange" type="numericBetween">L.RowLoc</filter>
          <filter name="LocationColumnRange" type="numericBetween">L.ColumnLoc</filter>
          <filter name="LocationLevelRange" type="numericBetween">L.LevelLoc</filter>
          <filter name="LocationRange" type="textBetween">L.IdLocCode</filter>
          <filter name="LocationAisle" type="textEqual">L.Aisle</filter>
          <filter name="Location" type="textEqual">L.idLocCode</filter>
          <filter name="Owner" type="numericIn">S.IdOwn</filter>
          <filter name="GroupItem1" type="numericEqual">I.IdGrpItem1</filter>
          <filter name="GroupItem2" type="numericEqual">I.IdGrpItem2</filter>
          <filter name="GroupItem3" type="numericEqual">I.IdGrpItem3</filter>
          <filter name="GroupItem4" type="numericEqual">I.IdGrpItem4</filter>
        </filters>
      </query>

      <query code="GetLocationByIdCode">
        <sql>
          SELECT
          IdLocCode
          ,LocCode
          ,Status
          ,LocTypeCode
          ,RowLoc
          ,ColumnLoc
          ,LevelLoc
          ,Aisle
          ,Description
          ,SharedItem
          ,OnlyLPN
          ,PickingFlow
          ,PutawayFlow
          ,IdWhs
          ,IdOwn
          ,HoldCode
          ,LockInventory
          FROM dbo.Location l
          WHERE l.IdLocCode = @IdLocCode
          AND l.IdWhs = @idWhs
        </sql>
        <parameters>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="GetLocationByIdLocCode">
        <sql>
          SELECT
          IdLocCode
          ,LocCode
          ,Status
          ,LocTypeCode
          ,RowLoc
          ,ColumnLoc
          ,LevelLoc
          ,Aisle
          ,Description
          ,SharedItem
          ,OnlyLPN
          ,PickingFlow
          ,PutawayFlow
          ,IdWhs
          ,IdOwn
          ,HoldCode
          ,LockInventory
          FROM dbo.Location l
          WHERE l.IdLocCode = @IdLocCode
        </sql>
        <parameters>
          <parameter type="String">IdLocCode</parameter>
        </parameters>
      </query>
  
      <query code="GetLocationByLocCodeAndTypeCodeAndWhs">
        <sql>
          SELECT
          IdLocCode
          ,LocCode
          ,Status
          ,LocTypeCode
          ,RowLoc
          ,ColumnLoc
          ,LevelLoc
          ,Aisle
          ,Description
          ,SharedItem
          ,OnlyLPN
          ,PickingFlow
          ,PutawayFlow
          ,IdWhs
          ,IdOwn
          ,HoldCode
          ,LockInventory
          FROM dbo.Location l
          WHERE l.LocCode = @LocCode
          AND l.IdWhs = @IdWhs
          AND l.LocTypeCode = @LocTypeCode
        </sql>
        <parameters>
          <parameter type="String">LocCode</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">LocTypeCode</parameter>
        </parameters>
      </query>

      <query code="GetLocationByCodeAndTypePick">
        <sql>
          SELECT
          IdLocCode
          ,LocCode
          ,Status
          ,LocTypeCode
          ,RowLoc
          ,ColumnLoc
          ,LevelLoc
          ,Aisle
          ,Description
          ,SharedItem
          ,OnlyLPN
          ,PickingFlow
          ,PutawayFlow
          ,IdWhs
          ,IdOwn
          ,LockInventory
          FROM dbo.Location l
          WHERE l.LocCode = @locCode
          AND l.IdWhs = @idWhs
          AND LocTypeCode = 'PICK'
        </sql>
        <parameters>
          <parameter type="String">locCode</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="GetLocationByCode">
        <sql>
          SELECT IdLocCode,LocCode,Status,LocTypeCode,RowLoc,ColumnLoc,
          LevelLoc,Aisle,Description,SharedItem,OnlyLPN,PickingFlow,PutawayFlow,IdWhs,LockInventory
          FROM dbo.Location l
          WHERE l.LocCode = @locationCode
          AND l.IdWhs = @idWhs
        </sql>
        <parameters>
          <parameter type="String">locationCode</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="Location_GetByNotInWorkZoneSimulation">
        <sql>
          SELECT l.IdLocCode, l.LocCode, l.Status, l.LocTypeCode, l.RowLoc, l.ColumnLoc, l.LevelLoc, l.Aisle, l.Description, l.SharedItem, l.OnlyLPN, l.PickingFlow, l.PutawayFlow, l.IdWhs
          FROM TaskDetailSimulation td
          INNER JOIN TaskSimulation t ON td.IdTask = t.IdTask
          INNER JOIN Location l ON td.idLocSourceProposal = l.IdLocCode
          WHERE t.TaskTypeCode = @taskTypeCode
          AND t.IdUser = @idUser
          AND td.idLocSourceProposal NOT IN
          (SELECT IdLocCode FROM WorkZoneLocation)
        </sql>
        <parameters>
          <parameter type="String">taskTypeCode</parameter>
          <parameter type="Int">idUser</parameter>
        </parameters>
      </query>

      <query code="Location_GetByNotInTypeWorkZoneSimulation">
        <sql>
          SELECT l.IdLocCode, l.LocCode, l.Status, l.LocTypeCode, l.RowLoc, l.ColumnLoc, l.LevelLoc, l.Aisle, l.Description, l.SharedItem, l.OnlyLPN, l.PickingFlow, l.PutawayFlow, l.IdWhs
          FROM TaskDetailSimulation td
          INNER JOIN TaskSimulation t ON td.IdTask = t.IdTask
          INNER JOIN Location l ON td.idLocSourceProposal = l.IdLocCode
          WHERE t.TaskTypeCode = @taskTypeCode
          AND t.IdUser = @idUser
          AND td.idLocSourceProposal NOT IN
          (SELECT IdLocCode FROM WorkZoneLocation WZL 
          INNER JOIN WorkZone WZ 
          ON WZ.IdWorkZone = WZL.IdWorkZone
          WHERE WZ.TypeZone = @typeZone)
        </sql>
        <parameters>
          <parameter type="String">taskTypeCode</parameter>
          <parameter type="Int">idUser</parameter>
          <parameter type="Int">typeZone</parameter>
        </parameters>
      </query>

  <query code="GetRelationLocationWorkZoneByCode">
        <sql>
          SELECT IdWorkZone
          , IdLocCode
          , DateCreated
          , UserCreated
          , DateModified
          , UserModified
          FROM WORKZONELOCATION
          WHERE IdLocCode = @IdLocCode
        </sql>
        <parameters>
          <parameter type="String">IdLocCode</parameter>
        </parameters>
      </query>

      <query code="FindAllRowLocation">
        <sql>
          SELECT DISTINCT RowLoc
          FROM LOCATION
          WHERE IdWhs = @IdWhs
          ORDER BY RowLoc ASC
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="GetLocationByWhsAndInventory">
        <sql>
          SELECT L.IdLocCode
          ,L.IdWhs
          ,L.LocCode
          ,L.IdHng
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.LocTypeCode
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.IdOwn
          ,L.DedicatedOwner
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,L.LockInventory
          FROM Location L
          INNER JOIN InventoryDetail I ON L.IdLocCOde = I.IdLocCode
          INNER JOIN InventoryOrder O ON I.IdInventoryOrder = O.IdInventoryOrder

          WHERE O.IdWhs = @IdWhs
          AND O.InventoryNumber = @InventoryNumber
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">InventoryNumber</parameter>
        </parameters>
      </query>

      <query code="GetLocationByWhs">
        <sql>
          SELECT
          L.IdLocCode
          , L.LocCode
          , COALESCE(I.IdInventory, 0) IdInventory
          , L.Status
          , L.LocTypeCode
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.Aisle
          , L.Description
          , L.SharedItem
          , L.OnlyLPN
          , L.PickingFlow
          , L.PutawayFlow
          , L.IdWhs
          , L.Length
          , L.Width
          , L.Height
          , L.Volume
          , L.Weight
          , L.PositionX
          , L.PositionY
          , L.PositionZ
          , L.LockInventory
          FROM Location L LEFT JOIN InventoryLocation I ON L.IdLocCode = I.IdLocCode
          WHERE L.IdWhs = @IdWhs
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="GetLocationByWhsAndRow">
        <sql>
          SELECT
          L.IdLocCode
          , L.LocCode
          , L.Status
          , L.LocTypeCode
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.Aisle
          , L.Description
          , L.SharedItem
          , L.OnlyLPN
          , L.PickingFlow
          , L.PutawayFlow
          , L.IdWhs
          , L.Length
          , L.Width
          , L.Height
          , L.Volume
          , L.Weight
          , L.PositionX
          , L.PositionY
          , L.PositionZ
          , L.LockInventory
          FROM dbo.Location L
          WHERE L.IdWhs = @IdWhs
          AND RowLoc = @RowLoc
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">RowLoc</parameter>
        </parameters>
      </query>

      <query code="Location_GetByWorkZone">
        <sql>
          SELECT
          L.IdLocCode
          , W.IdWhs
          , W.WhsCode
          , W.ShortWhsName
          , L.LocCode
          , L.IdHng
          , H.HngCode
          , H.HngName
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.Aisle
          , L.Status
          , T.IdLocType
          , T.LocTypeCode
          , T.LocTypeName
          , L.Description
          , L.SharedItem
          , L.OnlyLPN
          , O.IdOwn
          , O.OwnCode
          , O.OwnName
          , O.TradeName
          , L.DedicatedOwner
          , L.PickingFlow
          , L.PutawayFlow
          , L.CapacityLPN
          , L.CapacityUnit
          , L.Length
          , L.Width
          , L.Height
          , L.Volume
          , L.Weight
          , L.PositionX
          , L.PositionY
          , L.PositionZ
          , L.LockInventory
          FROM Location L
          INNER JOIN Warehouse W ON L.IdWhs = W.IdWhs
          INNER JOIN LocationType T ON L.LocTypeCode = T.LocTypeCode
          INNER JOIN Hangar H ON L.IdHng = H.IdHng
          LEFT JOIN Owner O ON L.IdOwn = O.IdOwn
          INNER JOIN WorkZoneLocation WL ON WL.IdLocCode = L.IdLocCode
          WHERE WL.IdWorkZone = @idWorkZone
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idWorkZone</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLeft">L.IdLocCode</filter>
          <filter name="LocationType" type="textIn">T.LocTypeCode</filter>
          <filter name="Hangar" type="numericIn">L.IdHng</filter>
          <filter name="LocationRow" type="numericEqual">L.RowLoc</filter>
          <filter name="LocationColumn" type="numericEqual">L.ColumnLoc</filter>
          <filter name="LocationLevel" type="numericEqual">L.LevelLoc</filter>
          <filter name="LocationAisle" type="textEqual">L.Aisle</filter>
          <filter name="Warehouse" type="numericEqual">W.IdWhs</filter>
        </filters>
      </query>

      <!--query utilizada en el mantenedor de workzones-->
      <query code="Location_GetByHngLevelColRow">
        <sql>
          SELECT
          L.IdLocCode
          , W.IdWhs
          , W.WhsCode
          , W.ShortWhsName
          , L.LocCode
          , L.IdHng
          , H.HngCode
          , H.HngName
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.Aisle
          , L.Status
          , T.IdLocType
          , T.LocTypeCode
          , T.LocTypeName
          , L.Description
          , L.SharedItem
          , L.OnlyLPN
          , O.IdOwn
          , O.OwnCode
          , O.OwnName
          , O.TradeName
          , L.DedicatedOwner
          , L.PickingFlow
          , L.PutawayFlow
          , L.CapacityLPN
          , L.CapacityUnit
          , L.Length
          , L.Width
          , L.Height
          , L.Volume
          , L.Weight
          , L.PositionX
          , L.PositionY
          , L.PositionZ
          , L.LockInventory
          FROM Location L

          INNER JOIN WorkZoneLocation WL ON L.IdLocCode = WL.IdLocCode
          INNER JOIN Warehouse W ON L.IdWhs = W.IdWhs
          INNER JOIN LocationType T ON L.LocTypeCode = T.LocTypeCode
          INNER JOIN Hangar H ON L.IdHng = H.IdHng
          LEFT JOIN Owner O ON L.IdOwn = O.IdOwn

          WHERE LevelLoc &gt;= @LevelLocFrom AND LevelLoc &lt;= @LevelLocTo
          AND Rowloc &gt;= @RowlocFrom AND Rowloc &lt;= @RowlocTo
          AND ColumnLoc &gt;= @ColumnLocFrom AND ColumnLoc &lt;= @ColumnLocTo
          AND WL.IdWorkZone = @IdWorkZone
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
          <parameter type="Int">LevelLocFrom</parameter>
          <parameter type="Int">LevelLocTo</parameter>
          <parameter type="Int">RowlocFrom</parameter>
          <parameter type="Int">RowlocTo</parameter>
          <parameter type="Int">ColumnLocFrom</parameter>
          <parameter type="Int">ColumnLocTo</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLeft">WL.IdLocCode</filter>
          <filter name="LocationType" type="textIn">T.LocTypeCode</filter>
          <filter name="Hangar" type="numericIn">L.IdHng</filter>
          <filter name="Warehouse" type="numericEqual">W.IdWhs</filter>
          <filter name="Aisle" type="textEqual">L.Aisle</filter>
        </filters>
      </query>

      <query code="Location_GetByHngLevelColRowNotInWorkZone">
        <sql>
          SELECT
          L.IdLocCode
          , W.IdWhs
          , W.WhsCode
          , W.ShortWhsName
          , L.LocCode
          , L.IdHng
          , H.HngCode
          , H.HngName
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.Aisle
          , L.Status
          , T.IdLocType
          , T.LocTypeCode
          , T.LocTypeName
          , L.Description
          , L.SharedItem
          , L.OnlyLPN
          , O.IdOwn
          , O.OwnCode
          , O.OwnName
          , O.TradeName
          , L.DedicatedOwner
          , L.PickingFlow
          , L.PutawayFlow
          , L.CapacityLPN
          , L.CapacityUnit
          , L.Length
          , L.Width
          , L.Height
          , L.Volume
          , L.Weight
          , L.PositionX
          , L.PositionY
          , L.PositionZ
          , L.LockInventory
          FROM Location L
          INNER JOIN Warehouse W ON L.IdWhs = W.IdWhs
          INNER JOIN LocationType T ON L.LocTypeCode = T.LocTypeCode
          INNER JOIN Hangar H ON L.IdHng = H.IdHng
          LEFT JOIN Owner O ON L.IdOwn = O.IdOwn
          WHERE L.IdLocCode NOT IN
          (SELECT IdLocCode FROM WorkZoneLocation WHERE IdWorkZone = @IdWorkZone)
          AND LevelLoc &gt;= @LevelLocFrom AND LevelLoc &lt;= @LevelLocTo
          AND Rowloc &gt;= @RowlocFrom AND Rowloc &lt;= @RowlocTo
          AND ColumnLoc &gt;= @ColumnLocFrom AND ColumnLoc &lt;= @ColumnLocTo
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
          <parameter type="Int">LevelLocFrom</parameter>
          <parameter type="Int">LevelLocTo</parameter>
          <parameter type="Int">RowlocFrom</parameter>
          <parameter type="Int">RowlocTo</parameter>
          <parameter type="Int">ColumnLocFrom</parameter>
          <parameter type="Int">ColumnLocTo</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLeft">L.IdLocCode</filter>
          <filter name="LocationType" type="textIn">T.LocTypeCode</filter>
          <filter name="Hangar" type="numericIn">L.IdHng</filter>
          <filter name="Warehouse" type="numericEqual">W.IdWhs</filter>
          <filter name="Aisle" type="textEqual">L.Aisle</filter>
        </filters>
      </query>

      <query code="Location_GetByNotInWorkZone">
        <sql>
          SELECT
          L.IdLocCode
          , W.IdWhs
          , W.WhsCode
          , W.ShortWhsName
          , L.LocCode
          , L.IdHng
          , H.HngCode
          , H.HngName
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.Aisle
          , L.Status
          , T.IdLocType
          , T.LocTypeCode
          , T.LocTypeName
          , L.Description
          , L.SharedItem
          , L.OnlyLPN
          , O.IdOwn
          , O.OwnCode
          , O.OwnName
          , O.TradeName
          , L.DedicatedOwner
          , L.PickingFlow
          , L.PutawayFlow
          , L.CapacityLPN
          , L.CapacityUnit
          , L.Length
          , L.Width
          , L.Height
          , L.Volume
          , L.Weight
          , L.PositionX
          , L.PositionY
          , L.PositionZ
          , L.LockInventory
          FROM Location L
          INNER JOIN Warehouse W ON L.IdWhs = W.IdWhs
          INNER JOIN LocationType T ON L.LocTypeCode = T.LocTypeCode
          INNER JOIN Hangar H ON L.IdHng = H.IdHng
          LEFT JOIN Owner O ON L.IdOwn = O.IdOwn
          WHERE L.IdLocCode NOT IN
          (SELECT IdLocCode FROM WorkZoneLocation WHERE IdWorkZone = @idWorkZone)
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idWorkZone</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLeft">L.IdLocCode</filter>
          <filter name="LocationType" type="textIn">T.LocTypeCode</filter>
          <filter name="Hangar" type="numericIn">L.IdHng</filter>
          <filter name="LocationRow" type="numericEqual">L.RowLoc</filter>
          <filter name="LocationColumn" type="numericEqual">L.ColumnLoc</filter>
          <filter name="LocationLevel" type="numericEqual">L.LevelLoc</filter>
          <filter name="LocationAisle" type="textEqual">L.Aisle</filter>
          <filter name="Warehouse" type="numericEqual">W.IdWhs</filter>
        </filters>
      </query>

      <query code="Location_GetCountByWorkZone">
        <sql>
          SELECT Count(IdLocCode) AS Count FROM WorkZoneLocation
          WHERE IdWorkZone = @idWorkZone
        </sql>
        <parameters>
          <parameter type="Int">idWorkZone</parameter>
        </parameters>
      </query>

      <query code="Location_GetCountByNotInWorkZone">
        <sql>
          SELECT Count(L.IdLocCode) AS Count FROM Location L
          WHERE L.IdLocCode NOT IN
          (SELECT IdLocCode FROM WorkZoneLocation WHERE IdWorkZone = @idWorkZone)
          AND L.IdWhs = @idWhs
        </sql>
        <parameters>
          <parameter type="Int">idWorkZone</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="Location_GetAllLevel">
        <sql>
      Select Levelloc
      FROM Location L INNER JOIN
      LocationType LT ON L.LocTypeCode = LT.LocTypeCode AND
      LT.LocTypeCode NOT IN ('STG','FKL','TRUCK')
      group by Levelloc
      Order By Levelloc asc
    </sql>
      </query>

      <query code="Location_GetAllRow">
        <sql>
      SELECT Rowloc
      FROM Location L INNER JOIN
      LocationType LT ON L.LocTypeCode = LT.LocTypeCode AND
      LT.LocTypeCode NOT IN ('STG','FKL','TRUCK')
      group  by Rowloc
      Order By Rowloc asc
    </sql>
      </query>

      <query code="Location_GetAllColumn">
        <sql>
      SELECT ColumnLoc
      FROM Location L INNER JOIN
      LocationType LT ON L.LocTypeCode = LT.LocTypeCode AND
      LT.LocTypeCode NOT IN ('STG','FKL','TRUCK')
      group  by ColumnLoc
      Order By ColumnLoc asc
    </sql>
      </query>

    <query code="Location_GetAllLevelWithWhere">
      <sql>
        Select Levelloc
        FROM Location
        @SQLPart
        group by Levelloc
        Order By Levelloc asc
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="Warehouse" type="numericEqual">IdWhs</filter>
        <filter name="Hangar" type="numericIn">IdHng</filter>
        <filter name="LocationType" type="textNotIn">LocTypeCode</filter>
      </filters>
    </query>

    <query code="Location_GetAllRowWithWhere">
      <sql>
        SELECT Rowloc
        FROM Location
        @SQLPart
        group  by Rowloc
        Order By Rowloc asc
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="Warehouse" type="numericEqual">IdWhs</filter>
        <filter name="Hangar" type="numericIn">IdHng</filter>
        <filter name="LocationType" type="textNotIn">LocTypeCode</filter>
      </filters>
    </query>

    <query code="Location_GetAllColumnWithWhere">
      <sql>
        SELECT ColumnLoc
        FROM Location
        @SQLPart
        group  by ColumnLoc
        Order By ColumnLoc asc
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="Warehouse" type="numericEqual">IdWhs</filter>
        <filter name="Hangar" type="numericIn">IdHng</filter>
        <filter name="LocationType" type="textNotIn">LocTypeCode</filter>
      </filters>
    </query>
  
      <query code="Location_GetAllLevelFilter">
      <sql>
        Select Levelloc
        FROM Location
        @SQLPart
        group by Levelloc
        Order By Levelloc asc
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="Warehouse" type="numericEqual">IdWhs</filter>
        <filter name="Hangar" type="numericIn">IdHng</filter>
        <filter name="LocationType" type="textIn">LocTypeCode</filter>
      </filters>
    </query>

    <query code="Location_GetAllRowFilter">
      <sql>
        SELECT Rowloc
        FROM Location
        @SQLPart
        group  by Rowloc
        Order By Rowloc asc
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="Warehouse" type="numericEqual">IdWhs</filter>
        <filter name="Hangar" type="numericIn">IdHng</filter>
        <filter name="LocationType" type="textIn">LocTypeCode</filter>
      </filters>
    </query>

    <query code="Location_GetAllColumnFilter">
      <sql>
        SELECT ColumnLoc
        FROM Location
        @SQLPart
        group  by ColumnLoc
        Order By ColumnLoc asc
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="Warehouse" type="numericEqual">IdWhs</filter>
        <filter name="Hangar" type="numericIn">IdHng</filter>
        <filter name="LocationType" type="textIn">LocTypeCode</filter>
      </filters>
    </query>

      <query code="Location_GetLevelByWhsHngAndLocType">
        <sql>
          Select Levelloc
          FROM Location
          WHERE	IdHng = @IdHng
          AND LocTypeCode = @LocTypeCode
          group by Levelloc
          Order By Levelloc asc
        </sql>
        <parameters>
          <parameter type="Int">IdHng</parameter>
          <parameter type="String">LocTypeCode</parameter>
        </parameters>
      </query>

      <query code="Location_GetRowByWhsHngAndLocType">
        <sql>
          SELECT Rowloc
          FROM Location
          WHERE	IdHng = @IdHng
          AND LocTypeCode = @LocTypeCode
          group  by Rowloc
          Order By Rowloc asc
        </sql>
        <parameters>
          <parameter type="Int">IdHng</parameter>
          <parameter type="String">LocTypeCode</parameter>
        </parameters>
      </query>

      <query code="Location_GetColumnByWhsHngAndLocType">
        <sql>
          SELECT ColumnLoc
          FROM Location
          WHERE	IdHng = @IdHng
          AND LocTypeCode = @LocTypeCode
          group  by ColumnLoc
          Order By ColumnLoc asc
        </sql>
        <parameters>
          <parameter type="Int">IdHng</parameter>
          <parameter type="String">LocTypeCode</parameter>
        </parameters>
      </query>

      <query code="Location_GetByLevelColumnAndRow">
        <sql>
          SELECT
          L.IdLocCode
          ,L.IdWhs
          ,L.LocCode
          ,L.IdHng
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.LocTypeCode
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.IdOwn
          ,L.LockInventory
          FROM	Location L
          WHERE	IdWhs = @IdWhs
          @SQLPart
          AND	(LevelLoc &gt;= @LevelLocFrom AND LevelLoc &lt;= @LevelLocTo)
          AND	(Rowloc &gt;= @RowlocFrom AND Rowloc &lt;= @RowlocTo)
          AND	(ColumnLoc &gt;= @ColumnLocFrom AND ColumnLoc &lt;= @ColumnLocTo)
          AND L.IdLocCode NOT IN(SELECT IdLocCode
          FROM InventoryLocation
          WHERE IdInventory = @IdInventory)
        </sql>
        <parameters>
          <parameter type="Int">LevelLocFrom</parameter>
          <parameter type="Int">LevelLocTo</parameter>
          <parameter type="Int">RowlocFrom</parameter>
          <parameter type="Int">RowlocTo</parameter>
          <parameter type="Int">ColumnLocFrom</parameter>
          <parameter type="Int">ColumnLocTo</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdInventory</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
      <filters>
        <filter name="Hangar" type="numericIn">IdHng</filter>
        <filter name="LocationType" type="textNotIn">LocTypeCode</filter>
      </filters>
      </query>
  
      <query code="LocationByFilter_NotExistInInventoryLocation">
        <sql>
          SELECT
          L.IdLocCode
          ,L.IdWhs
          ,L.LocCode
          ,L.IdHng
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.LocTypeCode
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.IdOwn
          ,L.LockInventory
          ,L.LocTypeCode
          FROM	Location L
          WHERE	IdWhs = @IdWhs
          AND NOT EXISTS (SELECT IdLocCode
              FROM InventoryLocation
              WHERE IdLocCode = L.IdLocCode
              AND IdInventory = @IdInventory)
          @SQLPart;
                   
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdInventory</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
      <filters>
        <filter name="Code" type="textLike">L.IdLocCode</filter>
        <filter name="Hangar" type="numericIn">L.IdHng</filter>
        <filter name="LocationType" type="textIn">L.LocTypeCode</filter>
        <filter name="LocationRowRange" type="numericBetween"> L.RowLoc </filter>   
        <filter name="LocationColumnRange" type="numericBetween"> L.ColumnLoc </filter>      
        <filter name="LocationLevelRange" type="numericBetween"> L.LevelLoc </filter>
        <filter name="LocationRange" type="textBetween">L.LocCode</filter>
      </filters>
      </query>

      <query code="Location_GetByLevelColumnRowNotInInventory">
        <sql>
          SELECT
          L.IdLocCode
          ,L.IdWhs
          ,L.LocCode
          ,L.IdHng
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.LocTypeCode
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.IdOwn
          ,L.LockInventory
          FROM	Location L
          WHERE	IdWhs = @IdWhs
          AND NOT EXISTS (SELECT IL.IdLocCode FROM InventoryLocation IL
                      INNER JOIN InventoryOrder IO
                      ON IO.IdInventoryOrder = IL.IdInventory
                      WHERE IL.IdLocCode = L.IdLocCode
                      AND IO.IdWhs = L.IdWhs
                      AND IO.IdTrackInventoryType NOT IN (101,111))
          @SQLPart
          AND	(LevelLoc &gt;= @LevelLocFrom AND LevelLoc &lt;= @LevelLocTo)
          AND	(Rowloc &gt;= @RowlocFrom AND Rowloc &lt;= @RowlocTo)
          AND	(ColumnLoc &gt;= @ColumnLocFrom AND ColumnLoc &lt;= @ColumnLocTo)
          AND L.IdLocCode NOT IN(SELECT IdLocCode
          FROM InventoryLocation
          WHERE IdInventory = @IdInventory)
        </sql>
        <parameters>
          <parameter type="Int">LevelLocFrom</parameter>
          <parameter type="Int">LevelLocTo</parameter>
          <parameter type="Int">RowlocFrom</parameter>
          <parameter type="Int">RowlocTo</parameter>
          <parameter type="Int">ColumnLocFrom</parameter>
          <parameter type="Int">ColumnLocTo</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdInventory</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Hangar" type="numericIn">IdHng</filter>
          <filter name="LocationType" type="textNotIn">LocTypeCode</filter>
        </filters>
      </query>

      <query code="LocationInventory_GetByIdInventoryAndWhs">
        <sql>
          SELECT
          L.IdLocCode
          ,L.IdWhs
          ,L.LocCode
          ,L.IdHng
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.LocTypeCode
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.IdOwn
          ,L.LockInventory
          FROM	Location L
          WHERE	IdWhs = @IdWhs
          AND L.IdLocCode IN(SELECT IdLocCode
          FROM InventoryLocation
          WHERE IdInventory = @IdInventory)
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdInventory</parameter>
        </parameters>
      </query>

      <query code="GetEmptyLocations">
        <sql>
          SELECT WhsCode
          ,WhsName
          ,IdWhs
          ,IdOwn
          ,IdLocCode
          ,LocCode
          ,LocTypeCode
          ,LocTypeName
          ,AverageStock
          ,CapacityUnit
          FROM	v_Sto_EmptyLocations
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="Code" type="textLike">IdLocCode</filter>
          <filter name="LocationType" type="textLike">LocTypeCode</filter>
        </filters>
      </query>

      <query code="GetLocationOccupationByHangar">
        <sql>
          SELECT WhsCode
          ,WhsName
          ,ShortWhsName
          ,IdWhs
          ,IdHng
          ,HngCode
          ,HngName
          ,IdOwn
          ,IdLocCode
          ,LocCode
          ,LocTypeCode
          ,LocTypeName
          ,WeightOccupationPercent
          ,VolumeOccupationPercent
          ,StockOccupationPercent
          ,CapacityUnit
          ,Stock
          ,AverageStock
          FROM	v_Sto_LocationOccupationByHangar
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView,
          VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = 'GetLocationOccupationByHangar'
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="Hangar" type="numericIn">IdHng</filter>
          <filter name="Code" type="textLike">IdLocCode</filter>
          <filter name="LocationType" type="textLike">LocTypeCode</filter>
        </filters>
      </query>

      <query code="GetLocationOccupation">
        <sql>
          SELECT WhsCode
          ,WhsName
          ,ShortWhsName
          ,IdWhs
          ,IdOwn
          ,OwnCode
          ,OwnName TradeName
          ,IdLocCode
          ,LocCode
          ,LocTypeCode
          ,LocTypeName
          ,WeightOccupationPercent
          ,VolumeOccupationPercent
          ,StockOccupationPercent
          ,CapacityUnit
          ,Stock
          ,AverageStock
          FROM	v_Sto_LocationOccupation
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView,
          VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = 'GetLocationOccupation'
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="Owner" type="numericIn">IdOwn</filter>
          <filter name="Code" type="textLike">IdLocCode</filter>
          <filter name="LocationType" type="textLike">LocTypeCode</filter>
        </filters>
      </query>
  
      <query code="GetLocationByAnyParameter">
      <sql>
        SELECT
        L.IdLocCode,
        L.IdWhs,
        L.LocCode,
        L.IdHng,
        L.RowLoc,
        L.ColumnLoc,
        L.LevelLoc,
        L.Aisle,
        L.Status,
        L.LocTypeCode,
        L.Description,
        L.SharedItem,
        L.OnlyLPN,
        L.IdOwn,
        L.DedicatedOwner,
        L.PickingFlow,
        L.PutawayFlow,
        L.CapacityLPN,
        L.CapacityUnit,
        L.Length,
        L.Width,
        L.Height,
        L.Volume,
        L.Weight,
        LT.IdLocType,
        LT.LocTypeCode,
        LT.LocTypeName,
        LT.Status,
        R.IdReason,
        R.ReasonCode,
        R.ReasonName,
        R.TypeInOut,
        R.CanBlock,
        R.CanCount,
        R.Status,
        L.LockInventory,
        P.PtlTypeCode,
        P.PtlTypeName
        FROM Location L INNER JOIN
             LocationType LT ON L.LocTypeCode = LT.LocTypeCode LEFT JOIN
             Reason R ON L.HoldCode = R.ReasonCode LEFT JOIN
             PtlType P ON L.PtlTypeCode = P.PtlTypeCode
        WHERE 1 = 1
        @SQLPart
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="IdLocCode" type="textEqual">L.IdLocCode</filter>
        <filter name="IdWhs" type="numericEqual">L.IdWhs</filter>
        <filter name="LocCode" type="textEqual">L.LocCode</filter>
        <filter name="IdHng" type="numericEqual">L.IdHng</filter>
        <filter name="RowLoc" type="numericEqual">L.RowLoc</filter>
        <filter name="ColumnLoc" type="numericEqual">L.ColumnLoc</filter>
        <filter name="LevelLoc" type="numericEqual">L.LevelLoc</filter>
        <filter name="Aisle" type="textEqual">L.Aisle</filter>
        <filter name="LocTypeCode" type="textEqual">L.LocTypeCode</filter>
        <filter name="HoldCode" type="textEqual">L.HoldCode</filter>
        <filter name="PtlTypeCode" type="textEqual">P.PtlTypeCode</filter>
      </filters>
      <sub-querys>
        <sub-query code="TruckUnloadByOutbound">
          <sql>
            AND L.LocTypeCode = 'TRUCK'
            AND EXISTS (SELECT DD.IdDispatchDetail
                        FROM DispatchDetail DD INNER JOIN
                             Dispatch D ON D.IdDispatch = DD.IdDispatch
                        WHERE L.IdLocCode = DD.IdLocationStage
                          AND D.IdOutboundOrder = @idOutboundOrder)
          </sql>
          <parameters>
            <parameter type="Int">idOutboundOrder</parameter>
          </parameters>
        </sub-query>
        <sub-query code="LocationInInventoryLoc">
          <sql>
            AND EXISTS (SELECT IL.IdInventory
                        FROM InventoryLocation IL
                        WHERE IL.IdLocCode = L.IdLocCode
                          AND IL.IdInventory = @idInventory)
          </sql>
          <parameters>
            <parameter type="Int">idInventory</parameter>
          </parameters>
        </sub-query>
        <sub-query code="LocationInUserWorkZone">
          <sql>
            AND EXISTS(SELECT IDUserWms
                      FROM UserWorkZone UWZ INNER JOIN
                      WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                      WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                      WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
          </sql>
          <parameters>
            <parameter type="Int">idUser</parameter>
          </parameters>
        </sub-query>
        
      <sub-query code="ExistsLocationStageInWorkZone">
          <sql>
            AND L.LocTypeCode = 'STG'
            AND L.Status = 1
            AND EXISTS (SELECT 1
            FROM WorkZone WZ INNER JOIN
            WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone AND WZ.TypeZone = 1
            WHERE EXISTS (SELECT 1
            FROM WorkZoneLocation
            WHERE IdLocCode = @idLocCode
            AND IdWorkZone = WZL.IdWorkZone)
            AND WZL.IdLocCode = L.IdLocCode
            AND WZ.IdWhs = L.IdWhs)
          </sql>
          <parameters>
            <parameter type="String">idLocCode</parameter>
          </parameters>
        </sub-query>
      
      </sub-querys>
    </query>
      
      <!-- End LOCATION section  -->

      <!-- ITEM-LOCATION section  -->

      <query code="ItemLocation_MaxAnMinByLocation">
        <sql>
          SELECT L.IdWhs
          , W.WhsName
          , I.IdOwn
          , O.OwnName
          , I.IdItem
          , I.ItemCode
          , I.LongItemName
          , L.IdLocCode
          , L.LocCode
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.IdLocCode
          , IL.ReOrderPoint
          , IL.ReOrderQty
          FROM ItemLocation IL
          INNER JOIN Item I ON I.IdItem = IL.IdItem
          INNER JOIN Location L ON L.IdLocCode = IL.IdLocCode
          INNER JOIN Owner O ON O.IdOwn = I.IdOwn
          INNER JOIN Warehouse W ON W.IdWhs = L.IdWhs
          @SQLPart
          ORDER BY W.ShortWhsName, O.OwnName, I.ItemCode, L.IdLocCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder;
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
          <filter name="Owner" type="numericIn">O.IdOwn</filter>
          <filter name="Item" type="textEqual">I.ItemCode</filter>
          <filter name="Name" type="textLike">I.LongItemName</filter>
          <filter name="LocationRowRange" type="numericBetween">L.RowLoc</filter>
          <filter name="LocationColumnRange" type="numericBetween">L.ColumnLoc</filter>
          <filter name="LocationLevelRange" type="numericBetween">L.LevelLoc</filter>
        </filters>
      </query>

      <query code="ItemLocation_GetByWhsAndOwnAndItemAndOnlyLPN">
        <sql>
          SELECT L.IdWhs
          , W.WhsName
          , I.IdOwn
          , O.OwnName
          , I.IdItem
          , I.ItemCode
          , I.LongItemName
          , L.IdLocCode
          , L.LocCode
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.IdLocCode
          , IL.ReOrderPoint
          , IL.ReOrderQty
          FROM ItemLocation IL
          INNER JOIN Item I ON I.IdItem = IL.IdItem
          INNER JOIN Location L ON L.IdLocCode = IL.IdLocCode
          INNER JOIN Owner O ON O.IdOwn = I.IdOwn
          INNER JOIN Warehouse W ON W.IdWhs = L.IdWhs
          WHERE W.IdWhs = @IdWhs
          AND O.IdOwn = @IdOwn
          AND I.IdItem = @IdItem
          AND L.OnlyLPN = @OnlyLPN
          ORDER BY W.ShortWhsName, O.OwnName, I.ItemCode, L.IdLocCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder;
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Boolean">OnlyLPN</parameter>
        </parameters>
        <filters>
        </filters>
      </query>

      <query code="ItemLocation_GetByItemAndLoc">
        <sql>
          SELECT
          IdItem
          ,IdLocCode
          ,ReOrderPoint
          ,ReOrderQty
          FROM ItemLocation
          Where IdItem = @IdItem
          AND IdLocCode = @LocCode
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
          <parameter type="String">LocCode</parameter>
        </parameters>
      </query>

      <query code="ItemLocation_GetByItem">
        <sql>
          SELECT
          IdItem
          ,IdLocCode
          ,ReOrderPoint
          ,ReOrderQty
          FROM ItemLocation
          WHERE IdItem = @IdItem
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
        </parameters>
      </query>

      <query code="Item_GetByItemCodeAndOwn">
        <sql>
          SELECT IdItem,ItemCode
          FROM ITEM
          WHERE ItemCode = @ItemCode
          AND IdOwn = @IdOwn
          AND [Status]= 1
        </sql>
        <parameters>
          <parameter type="String">ItemCode</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="ItemLocation_Insert">
        <sql>
          INSERT INTO ItemLocation
          (IdItem
          ,IdLocCode
          ,ReOrderPoint
          ,ReOrderQty
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdItem
          ,@IdLocCode
          ,@ReOrderPoint
          ,@ReOrderQty
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="Decimal">ReOrderPoint</parameter>
          <parameter type="Decimal">ReOrderQty</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>


      <query code="ItemLocation_Update">
        <sql>
          UPDATE ItemLocation
          SET ReOrderPoint = @ReOrderPoint
          ,ReOrderQty = @ReOrderQty
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdItem = @IdItem
          AND IdLocCode = @IdLocCode
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="Decimal">ReOrderPoint</parameter>
          <parameter type="Decimal">ReOrderQty</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query  code="ItemLocation_Delete">
        <sql>
          DELETE ItemLocation
          WHERE IdItem = @IdItem
          AND IdLocCode = @IdLocCode
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
          <parameter type="String">IdLocCode</parameter>
        </parameters>
      </query>
      <!-- End ITEM-LOCATION section  -->



      <!-- LOCATION TYPE section begin-->
      <query code="LocationType_GetByWhs">
        <sql>
          SELECT DISTINCT LT.LocTypeCode, LT.LocTypeName
          FROM LocationType LT INNER JOIN Location L ON LT.LocTypeCode = L.LocTypeCode
          WHERE (L.IdWhs = @IdWhs OR @IdWhs = -2)
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="LocationType_FindAll">
        <sql>
          SELECT IdLocType
          ,LocTypeCode
          ,LocTypeName
          ,Status
          ,DateCreated
          ,UserCreated
          FROM LocationType
        </sql>
      </query>
      <!-- End LOCATION_TYPE section  -->


      <!-- Begin Carrier section  -->
      <query code="Carrier_FindAll">
        <sql>
          SELECT Ca.IdCarrier
          ,Ca.CarrierCode
          ,Ca.CarrierName
          ,Ca.Status
          ,Ca.ContactName
          ,Ca.OrganizationName
          ,Ca.Address1
          ,Ca.Address2
          ,Ca.IdCity
          ,Ci.CityName
          ,Ca.IdState
          ,St.StateName
          ,Ca.IdCountry
          ,Co.CountryName
          ,Ca.Phone
          ,Ca.Fax
          ,Ca.Email
          ,Ca.SpecialField1
          ,Ca.SpecialField2
          ,Ca.SpecialField3
          ,Ca.SpecialField4
          ,Ca.DateCreated
          ,Ca.UserCreated
          ,Ca.DateModified
          ,Ca.UserModified
          FROM Carrier Ca
          LEFT JOIN  Country Co ON Ca.IdCountry = Co.IdCountry
          LEFT JOIN State St ON Ca.IdState = St.IdState
          LEFT JOIN City Ci ON Ca.IdCity = Ci.IdCity
          @SQLPart
          ORDER BY Ca.CarrierName,Ca.CarrierCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">Ca.CarrierCode</filter>
          <filter name="Name" type="textLike">Ca.CarrierName</filter>
          <filter name="Status" type="numericEqual">Ca.Status</filter>
        </filters>
      </query>

      <query code="GetCarrierByCode">
        <sql>
          SELECT IdCarrier
          ,CarrierCode
          ,CarrierName
          ,Status
          ,ContactName
          ,OrganizationName
          ,Address1
          ,Address2
          ,IdCity
          ,IdState
          ,IdCountry
          ,Phone
          ,Fax
          ,Email
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM Carrier
          WHERE CarrierCode = @CarrierCode
        </sql>
        <parameters>
          <parameter type="String">CarrierCode</parameter>
        </parameters>
      </query>

      <query code="GetCarrierByName">
        <sql>
          SELECT IdCarrier
          ,CarrierCode
          ,CarrierName
          ,Status
          ,ContactName
          ,OrganizationName
          ,Address1
          ,Address2
          ,IdCity
          ,IdState
          ,IdCountry
          ,Phone
          ,Fax
          ,Email
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM Carrier
          WHERE CarrierCode LIKE @CarrierName
        </sql>
        <parameters>
          <parameter type="String">CarrierName</parameter>
        </parameters>
      </query>

      <query code="Carrier_Insert">
        <sql>
          INSERT INTO Carrier
          (IdCarrier
          ,CarrierCode
          ,CarrierName
          ,Status
          ,ContactName
          ,OrganizationName
          ,Address1
          ,Address2
          ,IdCity
          ,IdState
          ,IdCountry
          ,Phone
          ,Fax
          ,Email
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4
          ,DateCreated
          ,UserCreated)

          VALUES
          (@IdCarrier
          ,@CarrierCode
          ,@CarrierName
          ,@Status
          ,@ContactName
          ,@OrganizationName
          ,@Address1
          ,@Address2
          ,@IdCity
          ,@IdState
          ,@IdCountry
          ,@Phone
          ,@Fax
          ,@Email
          ,@SpecialField1
          ,@SpecialField2
          ,@SpecialField3
          ,@SpecialField4
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdCarrier</parameter>
          <parameter type="String">CarrierCode</parameter>
          <parameter type="String">CarrierName</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">ContactName</parameter>
          <parameter type="String">OrganizationName</parameter>
          <parameter type="String">Address1</parameter>
          <parameter type="String">Address2</parameter>
          <parameter type="Int">IdCity</parameter>
          <parameter type="Int">IdState</parameter>
          <parameter type="Int">IdCountry</parameter>
          <parameter type="String">Phone</parameter>
          <parameter type="String">Fax</parameter>
          <parameter type="String">Email</parameter>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="String">SpecialField3</parameter>
          <parameter type="String">SpecialField4</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="Carrier_Update">
        <sql>
          UPDATE Carrier
          SET CarrierCode = @CarrierCode
          ,CarrierName = @CarrierName
          ,Status = @Status
          ,ContactName = @ContactName
          ,OrganizationName = @OrganizationName
          ,Address1 = @Address1
          ,Address2 = @Address2
          ,IdCity = @IdCity
          ,IdState = @IdState
          ,IdCountry = @IdCountry
          ,Phone = @Phone
          ,Fax = @Fax
          ,Email = @Email
          ,SpecialField1 = @SpecialField1
          ,SpecialField2 = @SpecialField2
          ,SpecialField3 = @SpecialField3
          ,SpecialField4 = @SpecialField4
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdCarrier = @IdCarrier
        </sql>
        <parameters>
          <parameter type="Int">IdCarrier</parameter>
          <parameter type="String">CarrierCode</parameter>
          <parameter type="String">CarrierName</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">ContactName</parameter>
          <parameter type="String">OrganizationName</parameter>
          <parameter type="String">Address1</parameter>
          <parameter type="String">Address2</parameter>
          <parameter type="Int">IdCity</parameter>
          <parameter type="Int">IdState</parameter>
          <parameter type="Int">IdCountry</parameter>
          <parameter type="String">Phone</parameter>
          <parameter type="String">Fax</parameter>
          <parameter type="String">Email</parameter>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="String">SpecialField3</parameter>
          <parameter type="String">SpecialField4</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query  code="Carrier_Delete">
        <sql>
          DELETE Carrier
          WHERE IdCarrier = @IdCarrier
        </sql>
        <parameters>
          <parameter type="Int">IdCarrier</parameter>
        </parameters>
      </query>


      <!-- End Carrier section  -->

      <!-- Customer section Start -->
      <query code="Customer_FindAll">
        <sql>
          SELECT
          CU.IdCustomer
          ,CU.CustomerCode
          ,CU.IdOwn
          ,Own.OwnCode
          ,Own.OwnName
          ,Own.TradeName
          ,CU.CustomerName
          ,CU.Address1Fact
          ,CU.Address2Fact
          ,CU.IdCityFact
          ,CI.CityName CityNameFact
          ,CU.IdStateFact
          ,ST.StateName StateNameFact
          ,CU.IdCountryFact
          ,CO.CountryName CountryNameFact
          ,CU.PhoneFact
          ,CU.FaxFact
          ,CU.Address1Delv
          ,CU.Address2Delv
          ,CU.IdCityDelv
          ,CI1.CityName CityNameDelv
          ,CU.IdStateDelv
          ,ST1.StateName StateNameDelv
          ,CU.IdCountryDelv
          ,CO1.CountryName CountryNameDelv
          ,CU.PhoneDelv
          ,CU.FaxDelv
          ,CU.Email
          ,CU.Priority
          ,CU.TimeExpected
          ,CU.ExpirationDays
          ,CU.SpecialField1
          ,CU.SpecialField2
          ,CU.SpecialField3
          ,CU.SpecialField4
          ,CU.DateCreated
          ,CU.UserCreated
          ,CU.DateModified
          ,CU.UserModified
          ,B2B.IdCustomerB2B          
          ,B2B.ASNFile
          ,B2B.TemplateASNFile
          ,B2B.LabelLPN
          ,B2B.LabelCodeLPN
          ,B2B.LabelPrice
          ,B2B.LabelCodePrice
          ,CU.PrefixLabel
          FROM Customer CU
          LEFT JOIN Country CO ON CO.IdCountry = CU.IdCountryFact
          LEFT JOIN State ST ON ST.IdState = CU.IdStateFact
          LEFT JOIN City CI ON CI.IdCity = CU.IdCityFact
          LEFT JOIN Country CO1 ON CO1.IdCountry = CU.IdCountryDelv
          LEFT JOIN State ST1 ON ST1.IdState = CU.IdStateDelv
          LEFT JOIN City CI1 ON CI1.IdCity = CU.IdCityDelv
          LEFT JOIN Owner Own ON Own.IdOwn = CU.IdOwn
          LEFT JOIN CustomerB2B B2B ON CU.IdCustomer = B2B.IdCustomer
          @SQLPart
          ORDER BY Own.OwnName, CU.CustomerName, CU.CustomerCode;


          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">CU.CustomerCode</filter>
          <filter name="Name" type="textLike">CU.CustomerName</filter>
          <filter name="Owner" type="numericIn">CU.IdOwn</filter>
          <filter name="CodeNumeric" type="textLike">CU.Address2Fact</filter>
        </filters>
      </query>

      <query code="Customer_FindAllCustomerByWarehouseCorrelativeB2B">
        <sql>
          SELECT
          CU.IdCustomer
          ,CU.CustomerCode
          ,CU.IdOwn
          ,Own.OwnCode
          ,Own.OwnName
          ,Own.TradeName
          ,CU.CustomerName
          ,CU.Address1Fact
          ,CU.Address2Fact
          ,CU.IdCityFact
          ,CI.CityName CityNameFact
          ,CU.IdStateFact
          ,ST.StateName StateNameFact
          ,CU.IdCountryFact
          ,CO.CountryName CountryNameFact
          ,CU.PhoneFact
          ,CU.FaxFact
          ,CU.Address1Delv
          ,CU.Address2Delv
          ,CU.IdCityDelv
          ,CI1.CityName CityNameDelv
          ,CU.IdStateDelv
          ,ST1.StateName StateNameDelv
          ,CU.IdCountryDelv
          ,CO1.CountryName CountryNameDelv
          ,CU.PhoneDelv
          ,CU.FaxDelv
          ,CU.Email
          ,CU.Priority
          ,CU.TimeExpected
          ,CU.ExpirationDays
          ,CU.SpecialField1
          ,CU.SpecialField2
          ,CU.SpecialField3
          ,CU.SpecialField4
          ,CU.DateCreated
          ,CU.UserCreated
          ,CU.DateModified
          ,CU.UserModified
          ,CU.PrefixLabel
          ,B2B.IdCustomerB2B
          FROM Customer CU
          LEFT JOIN Country CO ON CO.IdCountry = CU.IdCountryFact
          LEFT JOIN State ST ON ST.IdState = CU.IdStateFact
          LEFT JOIN City CI ON CI.IdCity = CU.IdCityFact
          LEFT JOIN Country CO1 ON CO1.IdCountry = CU.IdCountryDelv
          LEFT JOIN State ST1 ON ST1.IdState = CU.IdStateDelv
          LEFT JOIN City CI1 ON CI1.IdCity = CU.IdCityDelv
          LEFT JOIN Owner Own ON Own.IdOwn = CU.IdOwn
          LEFT JOIN CustomerB2B B2B ON CU.IdCustomer = B2B.IdCustomer
          @SQLPart
          ORDER BY Own.OwnName, CU.CustomerName, CU.CustomerCode;


          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>     
          <parameter type="Int">idWhs</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">CU.CustomerCode</filter>
          <filter name="Name" type="textLike">CU.CustomerName</filter>
          <filter name="Owner" type="numericIn">CU.IdOwn</filter>
          <filter name="CodeNumeric" type="textLike">CU.Address2Fact</filter>
        </filters>
      </query>

  <query code="Customer_FindAllCustomerByWarehouse">
    <sql>
      SELECT DISTINCT
      CU.IdCustomer
      ,CU.CustomerCode
      ,CU.IdOwn
      ,Own.OwnCode
      ,Own.OwnName
      ,Own.TradeName
      ,CU.CustomerName
      ,CU.Address1Fact
      ,CU.Address2Fact
      ,CU.IdCityFact
      ,CI.CityName CityNameFact
      ,CU.IdStateFact
      ,ST.StateName StateNameFact
      ,CU.IdCountryFact
      ,CO.CountryName CountryNameFact
      ,CU.PhoneFact
      ,CU.FaxFact
      ,CU.Address1Delv
      ,CU.Address2Delv
      ,CU.IdCityDelv
      ,CI1.CityName CityNameDelv
      ,CU.IdStateDelv
      ,ST1.StateName StateNameDelv
      ,CU.IdCountryDelv
      ,CO1.CountryName CountryNameDelv
      ,CU.PhoneDelv
      ,CU.FaxDelv
      ,CU.Email
      ,CU.Priority
      ,CU.TimeExpected
      ,CU.ExpirationDays
      ,CU.SpecialField1
      ,CU.SpecialField2
      ,CU.SpecialField3
      ,CU.SpecialField4
      ,CU.DateCreated
      ,CU.UserCreated
      ,CU.DateModified
      ,CU.UserModified
      ,CU.PrefixLabel
      ,B2B.IdCustomerB2B
      FROM Customer CU
      LEFT JOIN Country CO ON CO.IdCountry = CU.IdCountryFact
      LEFT JOIN State ST ON ST.IdState = CU.IdStateFact
      LEFT JOIN City CI ON CI.IdCity = CU.IdCityFact
      LEFT JOIN Country CO1 ON CO1.IdCountry = CU.IdCountryDelv
      LEFT JOIN State ST1 ON ST1.IdState = CU.IdStateDelv
      LEFT JOIN City CI1 ON CI1.IdCity = CU.IdCityDelv
      LEFT JOIN Owner Own ON Own.IdOwn = CU.IdOwn
      LEFT JOIN CustomerB2B B2B ON CU.IdCustomer = B2B.IdCustomer
      @SQLPart
      ORDER BY Own.OwnName, CU.CustomerName, CU.CustomerCode;


      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="Int">idWhs</parameter>
    </parameters>
    <filters>
      <filter name="Code" type="textLike">CU.CustomerCode</filter>
      <filter name="Name" type="textLike">CU.CustomerName</filter>
      <filter name="Owner" type="numericIn">CU.IdOwn</filter>
      <filter name="CodeNumeric" type="textLike">CU.Address2Fact</filter>
    </filters>
  </query>

      <query code="Customer_Insert">
        <sql>
          INSERT INTO Customer
          (IdCustomer
          ,CustomerCode
          ,IdOwn
          ,CustomerName
          ,Address1Fact
          ,Address2Fact
          ,IdCityFact
          ,IdStateFact
          ,IdCountryFact
          ,PhoneFact
          ,FaxFact
          ,Address1Delv
          ,Address2Delv
          ,IdCityDelv
          ,IdStateDelv
          ,IdCountryDelv
          ,PhoneDelv
          ,FaxDelv
          ,Email
          ,Priority
          ,TimeExpected
          ,ExpirationDays
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdCustomer
          ,@CustomerCode
          ,@IdOwn
          ,@CustomerName
          ,@Address1Fact
          ,@Address2Fact
          ,@CityIdFact
          ,@StateIdFact
          ,@CountryIdFact
          ,@PhoneFact
          ,@FaxFact
          ,@Address1Delv
          ,@Address2Delv
          ,@CityIdDelv
          ,@StateIdDelv
          ,@CountryIdDelv
          ,@PhoneDelv
          ,@FaxDelv
          ,@Email
          ,@Priority
          ,@TimeExpected
          ,@ExpirationDays
          ,@SpecialField1
          ,@SpecialField2
          ,@SpecialField3
          ,@SpecialField4
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdCustomer</parameter>
          <parameter type="String">CustomerCode</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">CustomerName</parameter>
          <parameter type="String">Address1Fact</parameter>
          <parameter type="String">Address2Fact</parameter>
          <parameter type="Int">CityIdFact</parameter>
          <parameter type="Int">StateIdFact</parameter>
          <parameter type="Int">CountryIdFact</parameter>
          <parameter type="String">PhoneFact</parameter>
          <parameter type="String">FaxFact</parameter>
          <parameter type="String">Address1Delv</parameter>
          <parameter type="String">Address2Delv</parameter>
          <parameter type="Int">CityIdDelv</parameter>
          <parameter type="Int">StateIdDelv</parameter>
          <parameter type="Int">CountryIdDelv</parameter>
          <parameter type="String">PhoneDelv</parameter>
          <parameter type="String">FaxDelv</parameter>
          <parameter type="String">Email</parameter>
          <parameter type="Int">Priority</parameter>
          <parameter type="Int">TimeExpected</parameter>
          <parameter type="Int">ExpirationDays</parameter>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="String">SpecialField3</parameter>
          <parameter type="String">SpecialField4</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>          
        </parameters>
      </query>
      
    

      <query code="Customer_Update">
        <sql>
          UPDATE Customer
          SET IdOwn = @IdOwn
          ,CustomerCode = @CustomerCode
          ,CustomerName = @CustomerName
          ,Address1Fact = @Address1Fact
          ,Address2Fact = @Address2Fact
          ,IdCityFact = @CityIdFact
          ,IdStateFact = @StateIdFact
          ,IdCountryFact = @CountryIdFact
          ,PhoneFact = @PhoneFact
          ,FaxFact = @FaxFact
          ,Address1Delv = @Address1Delv
          ,Address2Delv = @Address2Delv
          ,IdCityDelv = @CityIdDelv
          ,IdStateDelv = @StateIdDelv
          ,IdCountryDelv = @CountryIdDelv
          ,PhoneDelv = @PhoneDelv
          ,FaxDelv = @FaxDelv
          ,Email = @Email
          ,Priority = @Priority
          ,TimeExpected = @TimeExpected
          ,ExpirationDays = @ExpirationDays
          ,PrefixLabel = @PrefixLabel
          ,SpecialField1 = @SpecialField1
          ,SpecialField2 = @SpecialField2
          ,SpecialField3 = @SpecialField3
          ,SpecialField4 = @SpecialField4
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdCustomer = @IdCustomer
        </sql>
        <parameters>
          <parameter type="Int">IdCustomer</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">CustomerCode</parameter>
          <parameter type="String">CustomerName</parameter>
          <parameter type="String">Address1Fact</parameter>
          <parameter type="String">Address2Fact</parameter>
          <parameter type="Int">CityIdFact</parameter>
          <parameter type="Int">StateIdFact</parameter>
          <parameter type="Int">CountryIdFact</parameter>
          <parameter type="String">PhoneFact</parameter>
          <parameter type="String">FaxFact</parameter>
          <parameter type="String">Address1Delv</parameter>
          <parameter type="String">Address2Delv</parameter>
          <parameter type="Int">CityIdDelv</parameter>
          <parameter type="Int">StateIdDelv</parameter>
          <parameter type="Int">CountryIdDelv</parameter>
          <parameter type="String">PhoneDelv</parameter>
          <parameter type="String">FaxDelv</parameter>
          <parameter type="String">Email</parameter>
          <parameter type="Int">Priority</parameter>
          <parameter type="Int">TimeExpected</parameter>
          <parameter type="Int">ExpirationDays</parameter>
          <parameter type="String">PrefixLabel</parameter>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="String">SpecialField3</parameter>
          <parameter type="String">SpecialField4</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>          
        </parameters>
      </query>

      <query code="Customer_Delete">
        <sql>
          DELETE FROM CustomerB2B WHERE IdCustomer = @IdCustomer;

          DELETE FROM Customer WHERE IdCustomer = @IdCustomer;
        </sql>
        <parameters>
          <parameter type="Int">IdCustomer</parameter>
        </parameters>
      </query>

      <query code="GetCustomerByCode">
        <sql>
          SELECT IdCustomer
          FROM Customer
          WHERE CustomerCode = @Code;
        </sql>
        <parameters>
          <parameter type="String">Code</parameter>
        </parameters>
      </query>

      <query code="GetCustomerById">
        <sql>
          SELECT IdCustomer
          ,IdOwn
          ,CustomerCode
          ,CustomerName
          ,Address1Fact
          ,Address2Fact
          ,IdCityFact
          ,IdStateFact
          ,IdCountryFact
          ,PhoneFact
          ,FaxFact
          ,Address1Delv
          ,Address2Delv
          ,IdCityDelv
          ,IdStateDelv
          ,IdCountryDelv
          ,PhoneDelv
          ,FaxDelv
          ,Email
          ,Priority
          ,TimeExpected
          ,ExpirationDays
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          ,PrefixLabel
          FROM Customer
          WHERE IdCustomer = @Id;
        </sql>
        <parameters>
          <parameter type="Int">Id</parameter>
        </parameters>
      </query>

      <query code="GetAllCustomerByOwner">
        <sql>
          SELECT IdCustomer
          ,IdOwn
          ,CustomerCode
          ,CustomerName
          ,Address1Fact
          ,Address2Fact
          ,IdCityFact
          ,IdStateFact
          ,IdCountryFact
          ,PhoneFact
          ,FaxFact
          ,Address1Delv
          ,Address2Delv
          ,IdCityDelv
          ,IdStateDelv
          ,IdCountryDelv
          ,PhoneDelv
          ,FaxDelv
          ,Email
          ,Priority
          ,TimeExpected
          ,ExpirationDays
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          ,PrefixLabel
          FROM Customer
          WHERE IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="FindCustomerByOwnerLikeCode">
        <sql>
          SELECT C.IdCustomer
          ,O.OwnCode
          ,C.IdOwn
          ,C.CustomerCode
          ,C.CustomerName
          ,C.Address1Fact
          ,C.Address2Fact
          ,C.IdCityFact
          ,C.IdStateFact
          ,C.IdCountryFact
          ,C.PhoneFact
          ,C.FaxFact
          ,C.Address1Delv
          ,C.Address2Delv
          ,C.IdCityDelv
          ,C.IdStateDelv
          ,C.IdCountryDelv
          ,C.PhoneDelv
          ,C.FaxDelv
          ,C.Email
          ,C.Priority
          ,C.TimeExpected
          ,C.ExpirationDays
          ,C.SpecialField1
          ,C.SpecialField2
          ,C.SpecialField3
          ,C.SpecialField4
          ,C.DateCreated
          ,C.UserCreated
          ,C.DateModified
          ,C.UserModified
          ,C.PrefixLabel
          FROM Customer C
          INNER JOIN Owner O ON O.IdOwn = C.IdOwn
          WHERE OwnCode LIKE @codeOwn
        </sql>
        <parameters>
          <parameter type="String">codeOwn</parameter>
        </parameters>
      </query>

      <query code="FindCustomerByOwnerLikeName">
        <sql>
          SELECT C.IdCustomer
          ,O.OwnCode
          ,O.OwnName
          ,C.IdOwn
          ,C.CustomerCode
          ,C.CustomerName
          ,C.Address1Fact
          ,C.Address2Fact
          ,C.IdCityFact
          ,C.IdStateFact
          ,C.IdCountryFact
          ,C.PhoneFact
          ,C.FaxFact
          ,C.Address1Delv
          ,C.Address2Delv
          ,C.IdCityDelv
          ,C.IdStateDelv
          ,C.IdCountryDelv
          ,C.PhoneDelv
          ,C.FaxDelv
          ,C.Email
          ,C.Priority
          ,C.TimeExpected
          ,C.ExpirationDays
          ,C.SpecialField1
          ,C.SpecialField2
          ,C.SpecialField3
          ,C.SpecialField4
          ,C.DateCreated
          ,C.UserCreated
          ,C.DateModified
          ,C.UserModified
          ,C.PrefixLabel
          FROM Customer C
          INNER JOIN Owner O ON O.IdOwn = C.IdOwn
          WHERE OwnName LIKE @nameOwn
        </sql>
        <parameters>
          <parameter type="String">nameOwn</parameter>
        </parameters>
      </query>

      <query code="GetCustomerByOwnerLikeCodeAndName">
        <sql>
          SELECT C.IdCustomer
          ,O.OwnCode
          ,O.OwnName
          ,C.IdOwn
          ,C.CustomerCode
          ,C.CustomerName
          ,C.Address1Fact
          ,C.Address2Fact
          ,C.IdCityFact
          ,C.IdStateFact
          ,C.IdCountryFact
          ,C.PhoneFact
          ,C.FaxFact
          ,C.Address1Delv
          ,C.Address2Delv
          ,C.IdCityDelv
          ,C.IdStateDelv
          ,C.IdCountryDelv
          ,C.PhoneDelv
          ,C.FaxDelv
          ,C.Email
          ,C.Priority
          ,C.TimeExpected
          ,C.ExpirationDays
          ,C.PrefixLabel
          FROM Customer C
          INNER JOIN Owner O ON O.IdOwn = C.IdOwn
          WHERE C.CustomerCode LIKE @code
          AND C.CustomerName LIKE @name
          AND O.IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>


      <query code="Customer_GetByCodeAndOwner">
        <sql>
          SELECT
          CU.IdCustomer
          ,CU.CustomerCode
          ,CU.IdOwn
          ,Own.OwnCode
          ,Own.OwnName
          ,Own.TradeName
          ,CU.CustomerName
          ,CU.Address1Fact
          ,CU.Address2Fact
          ,CU.IdCityFact
          ,CI.CityName CityNameFact
          ,CU.IdStateFact
          ,ST.StateName StateNameFact
          ,CU.IdCountryFact
          ,CO.CountryName CountryNameFact
          ,CU.PhoneFact
          ,CU.FaxFact
          ,CU.Address1Delv
          ,CU.Address2Delv
          ,CU.IdCityDelv
          ,CI1.CityName CityNameDelv
          ,CU.IdStateDelv
          ,ST1.StateName StateNameDelv
          ,CU.IdCountryDelv
          ,CO1.CountryName CountryNameDelv
          ,CU.PhoneDelv
          ,CU.FaxDelv
          ,CU.Email
          ,CU.Priority
          ,CU.TimeExpected
          ,CU.ExpirationDays
          ,CU.SpecialField1
          ,CU.SpecialField2
          ,CU.SpecialField3
          ,CU.SpecialField4
          ,CU.DateCreated
          ,CU.UserCreated
          ,CU.DateModified
          ,CU.UserModified
          ,B2B.IdCustomerB2B
          ,B2B.ASNFile
          ,B2B.TemplateASNFile
          ,B2B.LabelLPN
          ,B2B.LabelCodeLPN
          ,B2B.LabelPrice
          ,B2B.LabelCodePrice
          ,CU.PrefixLabel
          FROM Customer CU
          LEFT JOIN Country CO ON CO.IdCountry = CU.IdCountryFact
          LEFT JOIN State ST ON ST.IdState = CU.IdStateFact
          LEFT JOIN City CI ON CI.IdCity = CU.IdCityFact
          LEFT JOIN Country CO1 ON CO1.IdCountry = CU.IdCountryDelv
          LEFT JOIN State ST1 ON ST1.IdState = CU.IdStateDelv
          LEFT JOIN City CI1 ON CI1.IdCity = CU.IdCityDelv
          LEFT JOIN Owner Own ON Own.IdOwn = CU.IdOwn
          LEFT JOIN CustomerB2B B2B ON CU.IdCustomer = B2B.IdCustomer
          WHERE CU.CustomerCode = @code
          AND CU.IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="Customer_GetByAnyParameter">
        <sql>
          SELECT
          C.IdCustomer,
          C.IdOwn,
          O.OwnCode,
          O.OwnName,
          O.TradeName,
          C.CustomerCode,
          C.CustomerName,
          C.Address1Fact,
          C.Address2Fact,
          C.IdCityFact,
          C.IdStateFact,
          C.IdCountryFact,
          C.PhoneFact,
          C.FaxFact,
          C.Address1Delv,
          C.Address2Delv,
          C.IdCityDelv,
          C.IdStateDelv,
          C.IdCountryDelv,
          C.PhoneDelv,
          C.FaxDelv,
          C.Email,
          C.Priority,
          C.TimeExpected,
          C.ExpirationDays,
          C.SpecialField1,
          C.SpecialField2,
          C.SpecialField3,
          C.SpecialField4,
          C.DateCreated,
          C.UserCreated,
          C.DateModified,
          C.UserModified,
          B2B.IdCustomerB2B,
          B2B.ASNFile,
          B2B.TemplateASNFile,
          B2B.LabelLPN,
          B2B.LabelCodeLPN,
          B2B.LabelPrice,
          B2B.LabelCodePrice,
          B2B.LabelLPNPackingList,
          B2B.LabelCodeLPNPackingList,
          B2B.MaxLinesPackingList,
          CC.Correlative,
          CC.NumberLength,
          C.PrefixLabel
          FROM Customer C INNER JOIN
          Owner O ON O.IdOwn = C.IdOwn LEFT JOIN
          CustomerB2B B2B ON C.IdCustomer = B2B.IdCustomer LEFT JOIN
          CorrelativeCustomerB2B CC ON C.IdCustomer = CC.IdCustomer
          WHERE 1=1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdCustomer" type="numericEqual">C.IdCustomer</filter>
          <filter name="IdOwn" type="numericEqual">C.IdOwn</filter>
          <filter name="CustomerCode" type="textEqual">C.CustomerCode</filter>
          <filter name="CustomerName" type="textEqual">C.CustomerName</filter>
          <filter name="Address1Fact" type="textEqual">C.Address1Fact</filter>
          <filter name="Address2Fact" type="textEqual">C.Address2Fact</filter>
          <filter name="IdCountryFact" type="numericEqual">C.IdCountryFact</filter>
          <filter name="IdStateFact" type="numericEqual">C.IdStateFact</filter>
          <filter name="IdCityFact" type="numericEqual">C.IdCityFact</filter>
          <filter name="PhoneFact" type="textEqual">C.PhoneFact</filter>
          <filter name="FaxFact" type="textEqual">C.FaxFact</filter>
          <filter name="Address1Delv" type="textEqual">C.Address1Delv</filter>
          <filter name="Address2Delv" type="textEqual">C.Address2Delv</filter>
          <filter name="IdCountryDelv" type="numericEqual">C.IdCountryDelv</filter>
          <filter name="IdStateDelv" type="numericEqual">C.IdStateDelv</filter>
          <filter name="IdCityDelv" type="numericEqual">C.IdCityDelv</filter>
          <filter name="PhoneDelv" type="textEqual">C.PhoneDelv</filter>
          <filter name="FaxDelv" type="textEqual">C.FaxDelv</filter>
          <filter name="Email" type="textEqual">C.Email</filter>
          <filter name="SpecialField1" type="textEqual">C.SpecialField1</filter>
          <filter name="SpecialField2" type="textEqual">C.SpecialField2</filter>
          <filter name="SpecialField3" type="textEqual">C.SpecialField3</filter>
          <filter name="SpecialField4" type="textEqual">C.SpecialField4</filter>
          <filter name="DateCreated" type="textEqual">C.DateCreated</filter>
          <filter name="UserCreated" type="textEqual">C.UserCreated</filter>
          <filter name="DateModified" type="textEqual">C.DateModified</filter>
          <filter name="UserModified" type="textEqual">C.UserModified</filter>
        </filters>
        <sub-querys>
          <sub-query code="OrderByIdCustomer">
            <sql>
              ORDER BY C.IdCustomer
            </sql>
            <parameters>
            </parameters>
          </sub-query>
          <sub-query code="LabelCodeLPNPackingListNotNull">
            <sql>
              AND B2B.LabelCodeLPNPackingList IS NOT NULL
            </sql>
            <parameters>
            </parameters>
          </sub-query>
        </sub-querys>
      </query>
  
      <query code="CorrelativeCustomerB2B_GetByAnyParameter">
        <sql>
          SELECT CC.IdWhs,
          CC.IdOwn,
          CC.IdCustomer,
          CC.IdBranch,
          CC.LabelCode,
          CC.Correlative,
          C.PrefixLabel AS PrefixLabelCustomer,
          B.PrefixLabel AS PrefixLabelBranch,
          CC.NumberLength
          FROM CorrelativeCustomerB2B CC INNER JOIN
          Warehouse W ON CC.IdWhs = W.IdWhs INNER JOIN
          Owner O ON CC.IdOwn = O.IdOwn INNER JOIN
          Customer C ON CC.IdCustomer = C.IdCustomer AND CC.IdOwn = C.IdOwn LEFT JOIN
          Branch B ON CC.IdBranch = B.IdBranch AND CC.IdOwn = B.IdOwn
          WHERE 1=1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdWhs" type="numericEqual">CC.IdWhs</filter>
          <filter name="IdOwn" type="numericEqual">CC.IdOwn</filter>
          <filter name="IdCustomer" type="numericEqual">CC.IdCustomer</filter>
          <filter name="IdBranch" type="numericEqual">CC.IdBranch</filter>
          <filter name="LabelCode" type="textEqual">CC.LabelCode</filter>
        </filters>
        <sub-querys>
           <sub-query code="BranchIsNull">
             <sql>
               AND CC.IdBranch IS NULL
             </sql>
             <parameters>
             </parameters>
           </sub-query>
        </sub-querys>
      </query>
  
      <query code="CorrelativeCustomerB2B_UpdateCorrelative">
        <sql>
          UPDATE CorrelativeCustomerB2B
          SET Correlative = @Correlative
          WHERE IdWhs = @IdWhs
          AND IdOwn = @IdOwn
          AND IdCustomer = @IdCustomer
          AND IdBranch = @IdBranch
        </sql>
        <parameters>
          <parameter type="Float">Correlative</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdCustomer</parameter>
          <parameter type="Int">IdBranch</parameter>
        </parameters>
      </query>

      <query code="CorrelativeCustomerB2B_UpdateCorrelativeBranchIsNull">
        <sql>
          UPDATE CorrelativeCustomerB2B
          SET Correlative = @Correlative
          WHERE IdWhs = @IdWhs
          AND IdOwn = @IdOwn
          AND IdCustomer = @IdCustomer
          AND IdBranch IS NULL
        </sql>
        <parameters>
          <parameter type="Float">Correlative</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdCustomer</parameter>
        </parameters>
      </query>

      <query code="Customer_UpdateCorrelative">
        <sql>
          UPDATE CorrelativeCustomerB2B
             SET Correlative = @Correlative,
                 NumberLength = @NumberLength,
		         LabelCode = @LabelCode,
		         LabelCodePrice = @LabelCodePrice
           WHERE IdWhs = @IdWhs
             AND IdOwn = @IdOwn
             AND IdCustomer = @IdCustomer
             AND IdBranch = @IdBranch
        </sql>
        <parameters>
          <parameter type="Float">Correlative</parameter>
          <parameter type="Int">NumberLength</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdCustomer</parameter>
          <parameter type="Int">IdBranch</parameter>
		  <parameter type="String">LabelCode</parameter>
	      <parameter type="String">LabelCodePrice</parameter>
        </parameters>
      </query>
  
      <query code="Customer_UpdateCorrelativeWithNoBranch">
        <sql>
          UPDATE CorrelativeCustomerB2B
          SET Correlative = @Correlative,
          NumberLength = @NumberLength
          WHERE IdWhs = @IdWhs
          AND IdOwn = @IdOwn
          AND IdCustomer = @IdCustomer
          AND IdBranch IS NULL
        </sql>
        <parameters>
          <parameter type="Float">Correlative</parameter>
          <parameter type="Int">NumberLength</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdCustomer</parameter>
        </parameters>
      </query>
      
      <query code="Customer_InsertCorrelative">
        <sql>
          INSERT INTO CorrelativeCustomerB2B
          ( IdWhs,
          IdOwn,
          IdCustomer,
          IdBranch,
          LabelCode,
          Correlative,
          NumberLength,
		  LabelCodePrice,
          DateCreated,
          UserCreated)
          VALUES
          ( @IdWhs,
          @IdOwn,
          @IdCustomer,
          @IdBranch,
          @LabelCode,
          @Correlative,
          @NumberLength,
		  @LabelCodePrice,
          @DateCreated,
          @UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdCustomer</parameter>
		  <parameter type="Int">IdBranch</parameter>
		  <parameter type="String">LabelCode</parameter>
		  <parameter type="Float">Correlative</parameter>
          <parameter type="Int">NumberLength</parameter>
		  <parameter type="String">LabelCodePrice</parameter>
		  <parameter type="DateTime">DateCreated</parameter>
		  <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="Customer_GetCorrelative">
        <sql>
          SELECT
          IdWhs,
          IdOwn,
          IdCustomer,
          IdBranch,
          LabelCode,
          Correlative,
          NumberLength
          FROM CorrelativeCustomerB2B
          WHERE IdWhs = @IdWhs AND
          IdOwn = @IdOwn AND
          IdCustomer = @IdCustomer
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdCustomer</parameter>
        </parameters>
      </query>

      <query code="CorrelativeCustomerB2B_Delete">
        <sql>
          DELETE FROM CorrelativeCustomerB2B WHERE IdCustomer = @idCustomer;
        </sql>
        <parameters>
          <parameter type="Int">idCustomer</parameter>
        </parameters>
      </query>
      <!-- End Customer section  -->
      
      <!--CustomerB2B section-->
      <query code="CustomerB2B_Insert">
        <sql>
          INSERT INTO CustomerB2B
          (IdCustomerB2B
          ,IdCustomer
          ,ASNFile
          ,TemplateASNFile
          ,LabelLPN
          ,LabelCodeLPN
          ,LabelPrice
          ,LabelCodePrice
          ,UomTypeLpn
          ,UomTypeLpnCode
          ,LabelLPNPackingList
          ,LabelCodeLPNPackingList
          ,MaxLinesPackingList)
          VALUES
          (@IdCustomerB2B
          ,@IdCustomer
          ,@ASNFile
          ,@TemplateASNFile
          ,@LabelLPN
          ,@LabelCodeLPN
          ,@LabelPrice
          ,@LabelCodePrice
          ,@UomTypeLpn
          ,@UomTypeLpnCode
          ,@LabelLPNPackingList
          ,@LabelCodeLPNPackingList
          ,@MaxLinesPackingList)
        </sql>
        <parameters>
          <parameter type="Int">IdCustomerB2B</parameter>
          <parameter type="Int">IdCustomer</parameter>
          <parameter type="Boolean">ASNFile</parameter>
          <parameter type="String">TemplateASNFile</parameter>
          <parameter type="Boolean">LabelLPN</parameter>
          <parameter type="String">LabelCodeLPN</parameter>
          <parameter type="Boolean">LabelPrice</parameter>
          <parameter type="String">LabelCodePrice</parameter>
          <parameter type="Boolean">UomTypeLpn</parameter>
          <parameter type="String">UomTypeLpnCode</parameter>
          <parameter type="Boolean">LabelLPNPackingList</parameter>
          <parameter type="String">LabelCodeLPNPackingList</parameter>
          <parameter type="Int">MaxLinesPackingList</parameter>
        </parameters>
      </query>
  
      <query code="CustomerB2B_Update">
        <sql>
          UPDATE CustomerB2B
          SET IdCustomer = @IdCustomer
		      ,ASNFile = @ASNFile
		      ,TemplateASNFile = @TemplateASNFile
		      ,LabelLPN = @LabelLPN
		      ,LabelCodeLPN = @LabelCodeLPN
		      ,LabelPrice = @LabelPrice
		      ,LabelCodePrice = @LabelCodePrice
          ,UomTypeLpn = @UomTypeLpn
          ,UomTypeLpnCode = @UomTypeLpnCode
          ,LabelLPNPackingList = @LabelLPNPackingList
          ,LabelCodeLPNPackingList = @LabelCodeLPNPackingList
          ,MaxLinesPackingList = @MaxLinesPackingList
          WHERE IdCustomerB2B = @IdCustomerB2B
        </sql>
        <parameters>
          <parameter type="Int">IdCustomer</parameter>
		      <parameter type="Boolean">ASNFile</parameter>
		      <parameter type="String">TemplateASNFile</parameter>
		      <parameter type="Boolean">LabelLPN</parameter>
		      <parameter type="String">LabelCodeLPN</parameter>
		      <parameter type="Boolean">LabelPrice</parameter>
		      <parameter type="String">LabelCodePrice</parameter>
          <parameter type="Boolean">UomTypeLpn</parameter>
		      <parameter type="String">UomTypeLpnCode</parameter>
          <parameter type="Boolean">LabelLPNPackingList</parameter>
          <parameter type="String">LabelCodeLPNPackingList</parameter>
          <parameter type="Int">MaxLinesPackingList</parameter>
          <parameter type="Int">IdCustomerB2B</parameter>
        </parameters>
      </query>

      <query code="CustomerB2B_Delete">
        <sql>
          DELETE FROM CustomerB2B WHERE IdCustomerB2B = @IdCustomer;
        </sql>
        <parameters>
          <parameter type="Int">IdCustomer</parameter>
        </parameters>
      </query>

      <query code="CustomerB2B_GetByAnyParameter">
        <sql>
          SELECT
          IdCustomerB2B,
          IdCustomer,
          ASNFile,
          TemplateASNFile,
          LabelLPN,
          LabelCodeLPN,
          LabelPrice,
          LabelCodePrice,
          UomTypeLpn,
          UomTypeLpnCode,
          LabelLPNPackingList,
          LabelCodeLPNPackingList,
          MaxLinesPackingList
          FROM CustomerB2B
          WHERE 1=1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdCustomerB2B" type="numericEqual">IdCustomerB2B</filter>
          <filter name="IdCustomer" type="numericEqual">IdCustomer</filter>
          <filter name="LabelCodeLPN" type="textEqual">LabelCodeLPN</filter>
          <filter name="LabelCodePrice" type="textEqual">LabelCodePrice</filter>
        </filters>
      </query>
  
      <query code="CustomerB2BFacade_GetByIdCustomer">
        <sql>
          SELECT
          CB2B.IdCustomerB2B,
          CB2B.IdCustomer,
          CB2B.ASNFile,
          CB2B.TemplateASNFile,
          CB2B.LabelLPN,
          CB2B.LabelCodeLPN,
          CB2B.LabelPrice,
          CB2B.LabelCodePrice,
          C.PrefixLabel,
          CB2B.UomTypeLpn,
          CB2B.UomTypeLpnCode,
          CB2B.LabelLPNPackingList,
          CB2B.LabelCodeLPNPackingList,
          CB2B.MaxLinesPackingList
          FROM CustomerB2B CB2B
          INNER JOIN Customer C
          ON CB2B.IdCustomer = C.IdCustomer
          WHERE CB2B.IdCustomer = @IdCustomer
        </sql>
        <parameters>
          <parameter type="Int">IdCustomer</parameter>
        </parameters>
      </query>

      <query code="CustomerB2BFacade_GetByIdCustomerByWarehouse">
        <sql>
          SELECT
          CB2B.IdCustomerB2B,
          CB2B.IdCustomer,
          CB2B.ASNFile,
          CB2B.TemplateASNFile,
          CB2B.LabelLPN,
          CB2B.LabelCodeLPN,
          CB2B.LabelPrice,
          CB2B.LabelCodePrice,
          C.PrefixLabel,
          CB2B.UomTypeLpn,
          CB2B.UomTypeLpnCode,
          CB2B.LabelLPNPackingList,
          CB2B.LabelCodeLPNPackingList,
          CB2B.MaxLinesPackingList
          FROM CustomerB2B CB2B
          INNER JOIN Customer C
          ON CB2B.IdCustomer = C.IdCustomer
          WHERE CB2B.IdCustomer = @IdCustomer
          --AND EXISTS (SELECT * FROM CorrelativeCustomerB2B WHERE IdWhs = @idWhs AND IdCustomer = CB2B.IdCustomer AND LabelCode = CB2B.LabelCodeLPN)
        </sql>
        <parameters>
          <parameter type="Int">IdCustomer</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>
      <!--End CustomerB2B section-->  
  
      <!--Driver section-->
      <query code="Driver_FindAll">
        <sql>
          SELECT IdDriver
          ,DriverCode
          ,Status
          ,DriverName
          ,Phone
          ,MovilePhone
          ,Fax
          ,Email
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM Driver
          @SQLPart
          ORDER BY DriverName, DriverCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">DriverCode</filter>
          <filter name="Name" type="textLike">DriverName</filter>
          <filter name="ExactName" type="textEqual">DriverName</filter>
          <filter name="Status" type="numericEqual">Status</filter>
        </filters>
      </query>

      <query code="Driver_Insert">
        <sql>
          INSERT INTO Driver
          (IdDriver
          ,DriverCode
          ,Status
          ,DriverName
          ,Phone
          ,MovilePhone
          ,Fax
          ,Email
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdDriver
          ,@DriverCode
          ,@Status
          ,@DriverName
          ,@Phone
          ,@MovilePhone
          ,@Fax
          ,@Email
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdDriver</parameter>
          <parameter type="String">DriverCode</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">DriverName</parameter>
          <parameter type="String">Phone</parameter>
          <parameter type="String">MovilePhone</parameter>
          <parameter type="String">Fax</parameter>
          <parameter type="String">Email</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="Driver_Update">
        <sql>
          UPDATE Driver
          SET IdDriver = @IdDriver
          ,DriverCode = @DriverCode
          ,Status = @Status
          ,DriverName = @DriverName
          ,Phone = @Phone
          ,MovilePhone = @MovilePhone
          ,Fax = @Fax
          ,Email = @Email
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdDriver = @IdDriver
        </sql>
        <parameters>
          <parameter type="Int">IdDriver</parameter>
          <parameter type="String">DriverCode</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">DriverName</parameter>
          <parameter type="String">Phone</parameter>
          <parameter type="String">MovilePhone</parameter>
          <parameter type="String">Fax</parameter>
          <parameter type="String">Email</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="Driver_Delete">
        <sql>
          DELETE
          FROM Driver
          WHERE IdDriver = @idDriver
        </sql>
        <parameters>
          <parameter type="Int">idDriver</parameter>
        </parameters>
      </query>

      <query code="GetDriverByCode">
        <sql>
          SELECT IdDriver
          FROM Driver
          WHERE DriverCode = @DriverCode;
        </sql>
        <parameters>
          <parameter type="String">Code</parameter>
        </parameters>
      </query>


      <query code="GetDriverById">
        <sql>
          SELECT IdDriver, DriverCode
          FROM Driver
          WHERE IdDriver = @IdDriver
        </sql>
        <parameters>
          <parameter type="Int">IdDriver</parameter>
        </parameters>
      </query>

      <query code="GetDriverByName">
        <sql>
          SELECT IdDriver, DriverCode, DriverName
          FROM Driver
          WHERE DriverName LIKE @DriverName;
        </sql>
        <parameters>
          <parameter type="String">DriverName</parameter>
        </parameters>
      </query>
      <!--End Driver section-->


      <!--Start LPN section-->
      <query code="Lpn_FindAll">
        <sql>
          SELECT LPN.IdLpnCode
          ,LPN.IdOwn
          ,Own.OwnCode
          ,Own.OwnName TradeName
          ,LPN.IdLpnType
          ,Typ.LpnTypeCode
          ,Typ.LpnTypeName
          ,LPN.Status
          ,LPN.FifoDate
          ,LPN.WeightEmpty
          ,LPN.WeightTotal
          ,LPN.IsClosed
          ,LPN.SealNumber
          ,LPN.IsParent
          ,LPN.LpnParent
          ,LPN.DateCreated
          ,LPN.UserCreated
          ,LPN.DateModified
          ,LPN.UserModified
          ,LPN.LpnParent
          FROM LPN
          INNER JOIN Owner Own ON LPN.IdOwn = Own.IdOwn
          INNER JOIN LpnType Typ ON LPN.IdLpnType = Typ.IdLpnType AND LPN.IdOwn = Typ.IdOwn
          @SQLPart
          ORDER BY Own.OwnName,LPN.IdLpnCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">LPN.IdLpnCode</filter>
          <filter name="Owner" type="numericIn">LPN.IdOwn</filter>
          <filter name="LpnType" type="numericIn">LPN.IdLpnType</filter>
        </filters>
      </query>

      <query code="InsertLpn">
        <sql>
          INSERT INTO LPN
          (IdLpnCode
          ,IdOwn
          ,IdLpnType
          ,Status
          ,FifoDate
          ,IsParent
          ,LpnParent
          ,WeightEmpty
          ,WeightTotal
          ,VolumeEmpty
          ,VolumeTotal
          ,IsClosed
          ,SealNumber
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdLpnCode
          ,@IdOwn
          ,@IdLpnType
          ,@Status
          ,@FifoDate
          ,@IsParent
          ,@LpnParent
          ,@WeightEmpty
          ,@WeightTotal
          ,@VolumeEmpty
          ,@VolumeTotal
          ,@IsClosed
          ,@SealNumber
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="String">IdLpnCode</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdLpnType</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="DateTime">FifoDate</parameter>
          <parameter type="Boolean">IsParent</parameter>
          <parameter type="String">LpnParent</parameter>
          <parameter type="Decimal">WeightEmpty</parameter>
          <parameter type="Decimal">WeightTotal</parameter>
          <parameter type="Decimal">VolumeEmpty</parameter>
          <parameter type="Decimal">VolumeTotal</parameter>
          <parameter type="Int">IsClosed</parameter>
          <parameter type="String">SealNumber</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="UpdateLPN">
        <sql>
          UPDATE LPN
          SET IdOwn = @IdOwn
          ,IdLpnType = @IdLpnType
          ,Status = @Status
          ,FifoDate = @FifoDate
          ,IsParent = @IsParent
          ,LpnParent = @LpnParent
          ,WeightEmpty = @WeightEmpty
          ,WeightTotal = @WeightTotal
          ,VolumeEmpty = @VolumeEmpty
          ,VolumeTotal = @VolumeTotal
          ,IsClosed = @IsClosed
          ,SealNumber = @SealNumber
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdLpnCode = @IdLpnCode
        </sql>
        <parameters>
          <parameter type="String">IdLpnCode</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdLpnType</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="DateTime">FifoDate</parameter>
          <parameter type="Boolean">IsParent</parameter>
          <parameter type="String">LpnParent</parameter>
          <parameter type="Decimal">WeightEmpty</parameter>
          <parameter type="Decimal">WeightTotal</parameter>
          <parameter type="Decimal">VolumeEmpty</parameter>
          <parameter type="Decimal">VolumeTotal</parameter>
          <parameter type="Int">IsClosed</parameter>
          <parameter type="String">SealNumber</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query code="Lpn_Delete">
        <sql>
          DELETE LPN
          WHERE IdLpnCode = @IdLpnCode
        </sql>
        <parameters>
          <parameter type="String">IdLpnCode</parameter>
        </parameters>
      </query>

      <query code="GetLpn_ByIdCode">
        <sql>
          SELECT LPN.IdLpnCode
          ,LPN.IdOwn
          ,Own.OwnCode
          ,Own.TradeName
          ,LPN.IdLpnType
          ,Typ.LpnTypeCode
          ,Typ.LpnTypeName
          ,LPN.Status
          ,LPN.FifoDate
          ,LPN.WeightEmpty
          ,LPN.WeightTotal
          ,LPN.VolumeEmpty
          ,LPN.VolumeTotal
          ,LPN.IsClosed
          ,LPN.SealNumber
          ,LPN.IsParent
          ,LPN.LpnParent
          ,LPN.DateCreated
          ,LPN.UserCreated
          ,LPN.DateModified
          ,LPN.UserModified
          FROM LPN
          INNER JOIN Owner Own ON LPN.IdOwn = Own.IdOwn
          INNER JOIN LpnType Typ ON LPN.IdLpnType = Typ.IdLpnType
          WHERE IdLpnCode = @IdLpnCode;
        </sql>
        <parameters>
          <parameter type="String">IdLpnCode</parameter>
        </parameters>
      </query>

      <query code="GetLpnTypeById">
        <sql>
          SELECT LT.IdLpnType
          ,LT.LpnTypeCode
          ,LT.IdOwn
          ,Own.OwnCode
          ,Own.TradeName
          ,LT.LpnTypeName
          ,LT.Tare
          ,LT.Volume
          ,LT.Length
          ,LT.Width
          ,LT.Height
          ,LT.NextAvailableNumber
          ,LT.WeightCapacity
          ,LT.VolumeCapacity
          ,LT.Status
          ,LT.SpecialField1
          ,LT.SpecialField2
          ,LT.SpecialField3
          ,LT.SpecialField4
          ,LT.DateCreated
          ,LT.UserCreated
          ,LT.DateModified
          ,LT.UserModified
          ,LT.PTLLabel
          FROM LPNType LT
          INNER JOIN Owner Own ON LT.IdOwn = Own.IdOwn
          WHERE IdLpnType = @idLpnType
        </sql>
        <parameters>
          <parameter type="Int">idLpnType</parameter>
        </parameters>
      </query>

  <query code="LPN_GetByAnyParameter">
    <sql>
      SELECT
      L.IdLpnCode,
      L.IdOwn,
      L.IdLpnType,
      L.Status,
      L.FifoDate,
      L.IsParent,
      L.LpnParent,
      L.IsClosed,
      L.SealNumber,
      LT.LpnTypeCode,
      LT.LpnTypeName,
      LT.Tare,
      LT.Volume,
      LT.Length,
      LT.Width,
      LT.Height,
      LT.NextAvailableNumber,
      LT.WeightCapacity,
      LT.VolumeCapacity,
      LT.Status,
      O.OwnCode,
      O.TradeName
      FROM LPN L
      INNER JOIN Owner O ON L.IdOwn = O.IdOwn
      INNER JOIN LPNType LT on L.IdLpnType = LT.IdLpnType
      WHERE 1=1
      @SQLPart
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="IdLpnCode" type="textEqual">L.IdLpnCode</filter>
      <filter name="IdOwn" type="numericEqual">L.IdOwn</filter>
      <filter name="IdLpnType" type="numericEqual">L.IdLpnType</filter>
      <filter name="LpnParent" type="textEqual">L.LpnParent</filter>
      <filter name="SealNumber" type="textEqual">L.SealNumber</filter>
    </filters>
    <sub-querys>
      <sub-query code="ByLocation">
        <sql>
          AND EXISTS(SELECT S.StockId
          FROM Stock S
          WHERE S.IdLpnCode = L.IdLpnCode
          AND S.IdLocCode = @idLocCode)
        </sql>
        <parameters>
          <parameter type="String">idLocCode</parameter>
        </parameters>
      </sub-query>
      <sub-query code="IsParent">
        <sql>
          AND L.IsParent = 1
        </sql>
        <parameters>
        </parameters>
      </sub-query>
      <sub-query code="ExistsStock">
        <sql>
          AND EXISTS (SELECT S.StockId
          FROM Stock S
          WHERE S.IdWhs = @idWhs
          AND S.IdLpnCode = L.IdLpnCode)
        </sql>
        <parameters>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </sub-query>
      <sub-query code="ExistsStockLpnParent">
        <sql>
          AND EXISTS (SELECT S.StockId
          FROM Stock S
          WHERE S.IdWhs = @idWhs
          AND S.IdLpnCodeContainer = L.IdLpnCode)
        </sql>
        <parameters>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </sub-query>
      <sub-query code="ExistsStockLpnParentByOutboundOrder">
        <sql>
          AND EXISTS (SELECT S.StockId
          FROM Stock S
          WHERE S.IdWhs = @idWhs
          AND S.IdoutboundOrder = @idOutboundOrder
          AND S.IdLpnCodeContainer = L.IdLpnCode)
        </sql>
        <parameters>
          <parameter type="Int">idWhs</parameter>
          <parameter type="Int">idOutboundOrder</parameter>
        </parameters>
      </sub-query>
      <sub-query code="ExistsStockAndLocStatusAndListTypeLocation">
        <sql>
          AND EXISTS (SELECT S.StockId
          FROM Stock S INNER JOIN
          Location Loc ON S.IdWhs = Loc.IdWhs
          AND S.IdLocCode = Loc.IdLocCode
          WHERE S.IdWhs = @idWhs
          AND S.IdLpnCode = L.IdLpnCode
          AND Loc.Status = 1
          AND Loc.LocTypeCode @locTypeCodeList)
        </sql>
        <parameters>
          <parameter type="Int">idWhs</parameter>
          <parameter type="StringIn">locTypeCodeList</parameter>
        </parameters>
      </sub-query>
      <sub-query code="LpnAndLpnParentByLocation">
        <sql>
          AND (LpnParent IS NULL
          AND EXISTS (SELECT IdLpnCode
          FROM Stock S
          WHERE S.IdLocCode = @idLocCode
          AND S.IdLpnCode = L.IdLpnCode)) OR
          (IsParent = 1
          AND EXISTS (SELECT IdLpnCode
          FROM LPN LP
          WHERE L.IdLpnCode = LP.LpnParent
          AND EXISTS(SELECT IdLpnCode
          FROM Stock
          WHERE IdLocCode = @idLocCode2
          AND LP.IdLpnCode = Stock.IdLpnCode)))
        </sql>
        <parameters>
          <parameter type="String">idLocCode</parameter>
          <parameter type="String">idLocCode2</parameter>
        </parameters>
      </sub-query>
      <sub-query code="LpnAndLpnParentByLocationAndOutboundOrder">
        <sql>
          AND (LpnParent IS NULL
          AND EXISTS (SELECT IdLpnCode
          FROM Stock S
          WHERE S.IdLocCode = @idLocCode
          AND IdOutboundOrder = @idOutboundOrder
          AND S.IdLpnCode = L.IdLpnCode)) OR
          (IsParent = 1
          AND EXISTS (SELECT IdLpnCode
          FROM LPN LP
          WHERE L.IdLpnCode = LP.LpnParent
          AND EXISTS(SELECT IdLpnCode
          FROM Stock
          WHERE IdLocCode = @idLocCode
          AND IdOutboundOrder = @idOutboundOrder
          AND LP.IdLpnCode = Stock.IdLpnCode)))
        </sql>
        <parameters>
          <parameter type="String">idLocCode</parameter>
          <parameter type="String">idOutboundOrder</parameter>
        </parameters>
      </sub-query>
      <sub-query code="ExistsStockAndLocStatusAndIdLocCode">
        <sql>
          AND EXISTS (SELECT S.StockId
          FROM Stock S INNER JOIN
          Location Loc ON S.IdWhs = Loc.IdWhs
          AND S.IdLocCode = Loc.IdLocCode
          WHERE S.IdWhs = @idWhs
          AND S.IdLocCode = @idLocCode
          AND S.IdLpnCode = L.IdLpnCode
          AND Loc.Status = 1)
        </sql>
        <parameters>
          <parameter type="Int">idWhs</parameter>
          <parameter type="String">idLocCode</parameter>
        </parameters>
      </sub-query>
      <sub-query code="ByReceipt">
        <sql>
          AND EXISTS (SELECT RD.IdLpnCode
          FROM ReceiptDetail RD
          WHERE RD.IdReceipt = @idReceipt
          AND RD.IdLpnCode = L.IdLpnCode)
        </sql>
        <parameters>
          <parameter type="Int">idReceipt</parameter>
        </parameters>
      </sub-query>
      <sub-query code="NotClose">
        <sql>
          AND L.IsClosed = 0
        </sql>
        <parameters>
        </parameters>
      </sub-query>
      <sub-query code="ByLocationAndLpnCode">
        <sql>
          AND (L.IdLpnCode = @lpnCode OR L.SealNumber = @lpnCode)
          AND EXISTS(SELECT S.StockId
          FROM Stock S
          WHERE S.IdLpnCode = L.IdLpnCode
          AND S.IdLocCode = @idLocCode)
        </sql>
        <parameters>
          <parameter type="String">lpnCode</parameter>
          <parameter type="String">idLocCode</parameter>
        </parameters>
      </sub-query>
      <sub-query code="ByLocationByOrderRuteo">
        <sql>
          AND EXISTS(SELECT S.StockId
          FROM Stock S
          WHERE S.IdLpnCode = L.IdLpnCode
          AND S.IdLocCode = @idLocCode)
          AND EXISTS (SELECT T1.IdTask
          FROM task T1
          WHERE T1.TaskTypeCode = 'RUTEO')
        </sql>
        <parameters>
          <parameter type="String">idLocCode</parameter>
        </parameters>
      </sub-query>
      <sub-query code="ListLpnInLpnCode">
        <sql>
          AND L.IdLpnCode @lpnCodelist
        </sql>
        <parameters>
          <parameter type="StringIn">lpnCodelist</parameter>
        </parameters>
      </sub-query>
    </sub-querys>
  </query>
      <!--End LPN section-->

      <!--End Driver section-->


      <!--Start LPN_TYPE section-->
      <query code="LpnType_FindAll">
        <sql>
          SELECT LT.IdLpnType
          ,LT.LpnTypeCode
          ,LT.IdOwn
          ,Own.OwnCode
          ,Own.OwnName TradeName
          ,LT.LpnTypeName
          ,LT.Tare
          ,LT.Volume
          ,LT.Length
          ,LT.Width
          ,LT.Height
          ,LT.NextAvailableNumber
          ,LT.WeightCapacity
          ,LT.VolumeCapacity
          ,LT.Status
          ,LT.SpecialField1
          ,LT.SpecialField2
          ,LT.SpecialField3
          ,LT.SpecialField4
          ,LT.DateCreated
          ,LT.UserCreated
          ,LT.DateModified
          ,LT.UserModified
          ,LT.PTLLabel
          FROM LPNType LT
          INNER JOIN Owner Own ON LT.IdOwn = Own.IdOwn
          @SQLPart
          ORDER BY Own.OwnName,LT.LpnTypeName;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">LT.LpnTypeCode</filter>
          <filter name="Name" type="textLike">LT.LpnTypeName</filter>
          <filter name="Owner" type="numericIn">LT.IdOwn</filter>
          <filter name ="Status" type="numericEqual">LT.Status</filter>
        </filters>
      </query>

      <query code="GetLpnTypeByCode">
        <sql>
          SELECT LT.IdLpnType
          ,LT.LpnTypeCode
          ,LT.IdOwn
          ,Own.OwnCode
          ,Own.TradeName
          ,LT.LpnTypeName
          ,LT.Tare
          ,LT.Volume
          ,LT.Length
          ,LT.Width
          ,LT.Height
          ,LT.NextAvailableNumber
          ,LT.WeightCapacity
          ,LT.VolumeCapacity
          ,LT.Status
          ,LT.SpecialField1
          ,LT.SpecialField2
          ,LT.SpecialField3
          ,LT.SpecialField4
          ,LT.DateCreated
          ,LT.UserCreated
          ,LT.DateModified
          ,LT.UserModified
          ,LT.PTLLabel
          FROM LPNType LT
          INNER JOIN Owner Own ON LT.IdOwn = Own.IdOwn
          WHERE LpnTypeCode = @Code
        </sql>
        <parameters>
          <parameter type="String">Code</parameter>
        </parameters>
      </query>

    <query code="GetLpnTypeByCodeAndOwn">
      <sql>
        SELECT LT.IdLpnType
        ,LT.LpnTypeCode
        ,LT.IdOwn
        ,Own.OwnCode
        ,Own.TradeName
        ,LT.LpnTypeName
        ,LT.Tare
        ,LT.Volume
        ,LT.Length
        ,LT.Width
        ,LT.Height
        ,LT.NextAvailableNumber
        ,LT.WeightCapacity
        ,LT.VolumeCapacity
        ,LT.Status
        ,LT.SpecialField1
        ,LT.SpecialField2
        ,LT.SpecialField3
        ,LT.SpecialField4
        ,LT.DateCreated
        ,LT.UserCreated
        ,LT.DateModified
        ,LT.UserModified
        ,LT.PTLLabel
        FROM LPNType LT
        INNER JOIN Owner Own ON LT.IdOwn = Own.IdOwn
        WHERE LpnTypeCode = @Code
        AND Own.IdOwn = @idOwn
      </sql>
      <parameters>
        <parameter type="String">Code</parameter>
        <parameter type="Int">idOwn</parameter>
      </parameters>
    </query>

    <!--<query code="GetLpnTypeById">
      <sql>
        SELECT LT.IdLpnType
        ,LT.LpnTypeCode
        ,LT.IdOwn
        ,Own.OwnCode
        ,Own.TradeName
        ,LT.LpnTypeName
        ,LT.Tare
        ,LT.Volume
        ,LT.Length
        ,LT.Width
        ,LT.Height
        ,LT.NextAvailableNumber
        ,LT.WeightCapacity
        ,LT.VolumeCapacity
        ,LT.Status
        ,LT.SpecialField1
        ,LT.SpecialField2
        ,LT.SpecialField3
        ,LT.SpecialField4
        ,LT.DateCreated
        ,LT.UserCreated
        ,LT.DateModified
        ,LT.UserModified
        FROM LPNType LT
        INNER JOIN Owner Own ON LT.IdOwn = Own.IdOwn
        WHERE IdLpnType = @Id;
      </sql>
      <parameters>
        <parameter type="Int">Id</parameter>
      </parameters>
    </query>-->

      <query code="LpnType_GetByCodeAndOwner">
        <sql>
          SELECT LT.IdLpnType
          ,LT.LpnTypeCode
          ,LT.IdOwn
          ,Own.OwnCode
          ,Own.TradeName
          ,LT.LpnTypeName
          ,LT.Tare
          ,LT.Volume
          ,LT.Length
          ,LT.Width
          ,LT.Height
          ,LT.NextAvailableNumber
          ,LT.WeightCapacity
          ,LT.VolumeCapacity
          ,LT.Status
          ,LT.SpecialField1
          ,LT.SpecialField2
          ,LT.SpecialField3
          ,LT.SpecialField4
          ,LT.DateCreated
          ,LT.UserCreated
          ,LT.DateModified
          ,LT.UserModified
          ,LT.PTLLabel
          FROM LPNType LT
          INNER JOIN Owner Own ON LT.IdOwn = Own.IdOwn
          WHERE LpnTypeCode = @code
          AND LT.IdOwn = @idOwn;
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="LpnType_Insert">
        <sql>
          INSERT INTO LPNType
          (IdLpnType
          ,LpnTypeCode
          ,IdOwn
          ,LpnTypeName
          ,Tare
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NextAvailableNumber
          ,WeightCapacity
          ,VolumeCapacity
          ,Status
          ,DateCreated
          ,UserCreated
          ,PTLLabel)
          VALUES
          (@IdLpnType
          ,@LpnTypeCode
          ,@IdOwn
          ,@LpnTypeName
          ,@Tare
          ,@Volume
          ,@Length
          ,@Width
          ,@Height
          ,@NextAvailableNumber
          ,@WeightCapacity
          ,@VolumeCapacity
          ,@Status
          ,@DateCreated
          ,@UserCreated
          ,@PTLLabel)
        </sql>
        <parameters>
          <parameter type="Int">IdLpnType</parameter>
          <parameter type="String">LpnTypeCode</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">LpnTypeName</parameter>
          <parameter type="Decimal">Tare</parameter>
          <parameter type="Decimal">Volume</parameter>
          <parameter type="Decimal">Length</parameter>
          <parameter type="Decimal">Width</parameter>
          <parameter type="Decimal">Height</parameter>
          <parameter type="Int">NextAvailableNumber</parameter>
          <parameter type="Decimal">WeightCapacity</parameter>
          <parameter type="Decimal">VolumeCapacity</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
          <parameter type="Boolean">PTLLabel</parameter>
        </parameters>
      </query>

      <query code="LpnType_Update">
        <sql>
          UPDATE LPNType
          SET LpnTypeCode = @LpnTypeCode
          ,IdOwn = @IdOwn
          ,LpnTypeName = @LpnTypeName
          ,Tare = @Tare
          ,Volume = @Volume
          ,Length = @Length
          ,Width = @Width
          ,Height = @Height
          ,NextAvailableNumber = @NextAvailableNumber
          ,WeightCapacity = @WeightCapacity
          ,VolumeCapacity = @VolumeCapacity
          ,Status = @Status
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          ,PTLLabel = @PTLLabel
          WHERE IdLpnType = @IdLpnType
        </sql>
        <parameters>
          <parameter type="Int">IdLpnType</parameter>
          <parameter type="String">LpnTypeCode</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">LpnTypeName</parameter>
          <parameter type="Decimal">Tare</parameter>
          <parameter type="Decimal">Volume</parameter>
          <parameter type="Decimal">Length</parameter>
          <parameter type="Decimal">Width</parameter>
          <parameter type="Decimal">Height</parameter>
          <parameter type="Int">NextAvailableNumber</parameter>
          <parameter type="Decimal">WeightCapacity</parameter>
          <parameter type="Decimal">VolumeCapacity</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
          <parameter type="Boolean">PTLLabel</parameter>
        </parameters>
      </query>

      <query code="LpnType_Delete">
        <sql>
          DELETE FROM LPNType
          WHERE IdLpnType = @IdLpnType
        </sql>
        <parameters>
          <parameter type="Int">IdLpnType</parameter>
        </parameters>
      </query>

      <query code="GetLPNTypePrecubingByIdOwn">
        <sql>
          SELECT IdLpnType
          ,LpnTypeCode
          ,IdOwn
          ,LpnTypeName
          ,Tare
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NextAvailableNumber
          ,WeightCapacity
          ,VolumeCapacity
          ,Status
          FROM LPNType
          WHERE IdOwn = @idOwn
          @SQLPart;
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
        <filters>
          <filter name="LpnType" type="textIn">LpnTypeCode</filter>
        </filters>
      </query>

      <query code="LPNType_GetByAnyParameter">
        <sql>
          SELECT
          LT.IdLpnType,
          LT.LpnTypeCode,
          LT.IdOwn,
          Own.OwnCode,
          Own.TradeName,
          LT.LpnTypeName,
          LT.Tare,
          LT.Volume,
          LT.Length,
          LT.Width,
          LT.Height,
          LT.NextAvailableNumber,
          LT.WeightCapacity,
          LT.VolumeCapacity,
          LT.Status,
          LT.SpecialField1,
          LT.SpecialField2,
          LT.SpecialField3,
          LT.SpecialField4,
          LT.DateCreated,
          LT.UserCreated,
          LT.DateModified,
          LT.UserModified,
          LT.PTLLabel
          FROM LPNType LT
          INNER JOIN Owner Own ON LT.IdOwn = Own.IdOwn
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdLpnType" type="numericEqual">LT.IdLpnType</filter>
          <filter name="IdOwn" type="numericEqual">LT.IdOwn</filter>
          <filter name="LpnTypeCode" type="textEqual">LT.LpnTypeCode</filter>
          <filter name="LpnTypeName" type="textEqual">LT.LpnTypeName</filter>
        </filters>
      </query>
      <!--END LPN_TYPE section-->


      <!--Begin Reason section-->
      <query code="Reason_FindAll">
        <sql>
          SELECT IdReason
          ,ReasonCode
          ,ReasonName
          ,TypeInOut
          ,CanBlock
          ,CanCount
          ,Status
          ,InfoERP
          FROM Reason
          @SQLPart
          ORDER BY TypeInOut, ReasonName;

          SELECT q.IdCfgEntity,FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">ReasonCode</filter>
          <filter name="Name" type="textLike">ReasonName</filter>
          <filter name="Status" type="numericEqual">Status</filter>
          <filter name="Reason" type="numericEqual">TypeInOut</filter>
        </filters>
      </query>


      <query code="Reason_GetByCode">
        <sql>
          SELECT IdReason
          ,ReasonCode
          ,ReasonName
          ,TypeInOut
          ,CanBlock
          ,CanCount
          ,Status
          ,InfoERP
          FROM Reason
          WHERE ReasonCode = @Code;
        </sql>
        <parameters>
          <parameter type="String">Code</parameter>
        </parameters>
      </query>

      <query code="GetReasonByTypeInOut">
        <sql>
          SELECT IdReason
          ,ReasonCode
          ,ReasonName
          ,TypeInOut
          ,CanBlock
          ,CanCount
          ,Status
          ,InfoERP
          FROM Reason
          WHERE Status = 1
          AND TypeInOut = @TypeInOut
        </sql>
        <parameters>
          <parameter type="Int">TypeInOut</parameter>
        </parameters>
      </query>
  
      <query code="Reason_MovementGetByCode">
        <sql>
          SELECT ReasonCode
          FROM MovementLog
          WHERE ReasonCode = @Code;
        </sql>
        <parameters>
          <parameter type="String">Code</parameter>
        </parameters>
      </query>

      <query code="Reason_StockGetByCode">
        <sql>
          SELECT ReasonCode
          FROM Stock
          WHERE ReasonCode = @Code;
        </sql>
        <parameters>
          <parameter type="String">Code</parameter>
        </parameters>
      </query>


      <query code="Reason_Insert">
        <sql>
          INSERT INTO Reason
          (IdReason
          ,ReasonCode
          ,ReasonName
          ,TypeInOut
          ,CanBlock
          ,CanCount
          ,Status
          ,InfoERP
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdReason
          ,@ReasonCode
          ,@ReasonName
          ,@TypeInOut
          ,@CanBlock
          ,@CanCount
          ,@Status
          ,@InfoERP
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdReason</parameter>
          <parameter type="String">ReasonCode</parameter>
          <parameter type="String">ReasonName</parameter>
          <parameter type="Int">TypeInOut</parameter>
          <parameter type="Int">CanBlock</parameter>
          <parameter type="Int">CanCount</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="Boolean">InfoERP</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>


      <query code="Reason_Update">
        <sql>
          UPDATE Reason
          SET ReasonCode = @ReasonCode
          ,ReasonName = @ReasonName
          ,TypeInOut = @TypeInOut
          ,CanBlock = @CanBlock
          ,CanCount = @CanCount
          ,Status = @Status
          ,InfoERP = @InfoERP
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdReason = @IdReason
        </sql>
        <parameters>
          <parameter type="Int">IdReason</parameter>
          <parameter type="String">ReasonCode</parameter>
          <parameter type="String">ReasonName</parameter>
          <parameter type="Int">TypeInOut</parameter>
          <parameter type="Int">CanBlock</parameter>
          <parameter type="Int">CanCount</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="Boolean">InfoERP</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="Reason_Delete">
        <sql>
          DELETE FROM Reason
          WHERE IdReason = @IdReason
        </sql>
        <parameters>
          <parameter type="Int">IdReason</parameter>
        </parameters>
      </query>
      <!--END Reason section-->

      <!--Begin ReferenceDocType section-->
      <query code="ReferenceDocType_FindAll">
        <sql>
          SELECT IdReferenceDocType
          ,ReferenceDocTypeCode
          ,ReferenceDocTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM ReferenceDocType
          @SQLPart
          ORDER BY ReferenceDocTypeName;


          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">ReferenceDocTypeCode</filter>
          <filter name="Name" type="textLike">ReferenceDocTypeName</filter>
        </filters>
      </query>
      <query code="ReferenceDocType_GetByCode">
        <sql>
          SELECT IdReferenceDocType
          ,ReferenceDocTypeCode
          ,ReferenceDocTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM ReferenceDocType
          WHERE ReferenceDocTypeCode = @ReferenceDocTypeCode
        </sql>
        <parameters>
          <parameter type="String">ReferenceDocTypeCode</parameter>
        </parameters>
      </query>

      <query code="ReferenceDocType_GetByDispatchId">
        <sql>
          SELECT IdReferenceDocType
          FROM Dispatch
          WHERE IdReferenceDocType = @IdDocType;
        </sql>
        <parameters>
          <parameter type="Int">IdDocType</parameter>
        </parameters>
      </query>

      <query code="ReferenceDocType_GetByReceiptId">
        <sql>
          SELECT IdReferenceDocType
          FROM Receipt
          WHERE IdReferenceDocType = @IdDocType;
        </sql>
        <parameters>
          <parameter type="Int">IdDocType</parameter>
        </parameters>
      </query>

      <query code="ReferenceDocType_Insert">
        <sql>
          INSERT INTO ReferenceDocType
          (IdReferenceDocType
          ,ReferenceDocTypeCode
          ,ReferenceDocTypeName
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdReferenceDocType
          ,@ReferenceDocTypeCode
          ,@ReferenceDocTypeName
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdReferenceDocType</parameter>
          <parameter type="String">ReferenceDocTypeCode</parameter>
          <parameter type="String">ReferenceDocTypeName</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>
      <query code="ReferenceDocType_Update">
        <sql>
          UPDATE ReferenceDocType
          SET ReferenceDocTypeCode = @ReferenceDocTypeCode
          ,ReferenceDocTypeName = @ReferenceDocTypeName
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdReferenceDocType = @IdReferenceDocType
        </sql>
        <parameters>
          <parameter type="Int">IdReferenceDocType</parameter>
          <parameter type="String">ReferenceDocTypeCode</parameter>
          <parameter type="String">ReferenceDocTypeName</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query code="ReferenceDocType_Delete">
        <sql>
          DELETE FROM ReferenceDocType
          WHERE IdReferenceDocType = @IdReferenceDocType
        </sql>
        <parameters>
          <parameter type="Int">IdReferenceDocType</parameter>
        </parameters>
      </query>
      <!--END ReferenceDocType section-->


      <!--Begin Truck section-->
      <query code="Truck_FindAll">
        <sql>
          SELECT Tr.IdTruckCode
          ,Tr.Status
          ,Tr.Description
          ,Tr.IdTruckType
          ,Tt.TruckTypeName
          ,Tr.TruckMark
          ,Tr.TruckModel
          ,Tr.FabricationYear
          FROM Truck Tr
          INNER JOIN TruckType Tt ON Tr.IdTruckType = Tt.IdTruckType
          @SQLPart
          ORDER BY Tt.TruckTypeName, Tr.Description, Tr.TruckMark, Tr.TruckModel;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder;
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name ="TruckType" type="numericIn">Tr.IdTruckType</filter>
          <filter name="Code" type="textLike">Tr.IdTruckCode</filter>
          <filter name ="Status" type="numericEqual">Tr.Status</filter>
          <filter name ="Description" type="textLike">Tr.Description</filter>
        </filters>
      </query>
      <query code="Truck_GetByCode">
        <sql>
          SELECT Tr.IdTruckCode
          ,Tr.Status
          ,Tr.Description
          ,Tr.IdTruckType
          ,Tt.TruckTypeName
          ,Tr.TruckMark
          ,Tr.TruckModel
          ,Tr.FabricationYear
          FROM Truck Tr
          INNER JOIN TruckType Tt ON Tr.IdTruckType = Tt.IdTruckType
          WHERE Tr.IdTruckCode = @IdTruckCode
        </sql>
        <parameters>
          <parameter type="String">IdTruckCode</parameter>
        </parameters>
      </query>

      <query code="GetTruckByCode">
        <sql>
          SELECT IdTruckCode,Status,Description,IdTruckType,TruckMark,TruckModel
          FROM truck
          WHERE IdTruckCode = @idTruckCode
        </sql>
        <parameters>
          <parameter type="String">idTruckCode</parameter>
        </parameters>
      </query>

      <query code="Truck_GetById">
        <sql>
          SELECT IdTruckType
          FROM truck
          WHERE IdTruckType = @IdTruckType
        </sql>
        <parameters>
          <parameter type="Int">IdTruckType</parameter>
        </parameters>
      </query>

      <query code="Truck_Insert">
        <sql>
          INSERT INTO Truck
          (IdTruckCode
          ,Status
          ,Description
          ,IdTruckType
          ,TruckMark
          ,TruckModel
          ,FabricationYear
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdTruckCode
          ,@Status
          ,@Description
          ,@IdTruckType
          ,@TruckMark
          ,@TruckModel
          ,@FabricationYear
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="String">IdTruckCode</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="Int">IdTruckType</parameter>
          <parameter type="String">TruckMark</parameter>
          <parameter type="String">TruckModel</parameter>
          <parameter type="Int">FabricationYear</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>
      <query code="Truck_Update">
        <sql>
          UPDATE Truck
          SET Status = @Status
          ,Description = @Description
          ,IdTruckType = @IdTruckType
          ,TruckMark = @TruckMark
          ,TruckModel = @TruckModel
          ,FabricationYear = @FabricationYear
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdTruckCode = @IdTruckCode
        </sql>
        <parameters>
          <parameter type="String">IdTruckCode</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="Int">IdTruckType</parameter>
          <parameter type="String">TruckMark</parameter>
          <parameter type="String">TruckModel</parameter>
          <parameter type="Int">FabricationYear</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>
      <query code="Truck_Delete">
        <sql>
          DELETE FROM Truck
          WHERE IdTruckCode = @IdTruckCode
        </sql>
        <parameters>
          <parameter type="String">IdTruckCode</parameter>
        </parameters>
      </query>
      <!--END Truck section-->

      <!--Begin TruckType  section-->
      <query code="TruckType_FindAll">
        <sql>
          SELECT IdTruckType
          ,TruckTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM TruckType
          @SQLPart
          ORDER BY TruckTypeName;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textLike">TruckTypeName</filter>
        </filters>
      </query>
      <query code="TruckType_GetByName">
        <sql>
          SELECT IdTruckType
          ,TruckTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM TruckType
          WHERE TruckTypeName = @TruckTypeName
        </sql>
        <parameters>
          <parameter type="String">TruckTypeName</parameter>
        </parameters>
      </query>
      <query code="TruckType_Insert">
        <sql>
          INSERT INTO TruckType
          (IdTruckType
          ,TruckTypeName
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdTruckType
          ,@TruckTypeName
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdTruckType</parameter>
          <parameter type="String">TruckTypeName</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>
      <query code="TruckType_Update">
        <sql>
          UPDATE TruckType
          SET TruckTypeName = @TruckTypeName
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdTruckType  = @IdTruckType
        </sql>
        <parameters>
          <parameter type="Int">IdTruckType</parameter>
          <parameter type="String">TruckTypeName</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>
      <query code="TruckType_Delete">
        <sql>
          DELETE FROM TruckType
          WHERE IdTruckType  = @IdTruckType
        </sql>
        <parameters>
          <parameter type="Int">IdTruckType</parameter>
        </parameters>
      </query>
      <!--END TruckType  section-->

      <!--UomType Section-->
      <query code="UomType_Insert">
        <sql>
          INSERT INTO UomType
          (IdUomType
          ,IdOwn
          ,UomName
          ,HandlesDecimal
          ,IsVariableWeight
          ,OverPickingAllowed
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdUomType
          ,@IdOwn
          ,@UomName
          ,@HandlesDecimal
          ,@IsVariableWeight
          ,@OverPickingAllowed
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdUomType</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">UomName</parameter>
          <parameter type="Boolean">HandlesDecimal</parameter>
          <parameter type="Boolean">IsVariableWeight</parameter>
          <parameter type="Int">OverPickingAllowed</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="UomType_Update">
        <sql>
          UPDATE UomType
          SET UomName = @UomName
          ,HandlesDecimal = @HandlesDecimal
          ,IsVariableWeight = @IsVariableWeight
          ,OverPickingAllowed = @OverPickingAllowed
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdUomType  = @IdUomType

          UPDATE ItemUom SET UomName = @UomName
          WHERE IdUomType  = @IdUomType
        </sql>
        <parameters>
          <parameter type="Int">IdUomType</parameter>
          <parameter type="String">UomName</parameter>
          <parameter type="Boolean">HandlesDecimal</parameter>
          <parameter type="Boolean">IsVariableWeight</parameter>
          <parameter type="Int">OverPickingAllowed</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query code="UomType_Delete">
        <sql>
          DELETE FROM UomType
          WHERE IdUomType  = @IdUomType
        </sql>
        <parameters>
          <parameter type="Int">IdUomType</parameter>
        </parameters>
      </query>

      <query code="UomType_FindAll">
        <sql>
          SELECT UT.IdUomType
          ,O.IdOwn
          ,O.OwnName
          ,UT.UomName
          ,UT.HandlesDecimal
          ,UT.IsVariableWeight
          ,UT.OverPickingAllowed
          ,UT.DateCreated
          ,UT.UserCreated
          ,UT.DateModified
          ,UT.UserModified
          FROM UomType UT INNER JOIN OWNER O ON UT.IdOwn = O.IdOwn
          @SQLPart
          ORDER BY O.OwnName,UT.UomName;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textLike">UT.UomName</filter>
          <filter name="Owner" type="numericEqual">O.IdOwn</filter>
        </filters>
      </query>

      <query code="UomType_GetByOwn">
        <sql>
          SELECT UT.IdUomType
          ,O.IdOwn
          ,UT.UomName
          ,UT.DateCreated
          ,UT.UserCreated
          ,UT.DateModified
          ,UT.UserModified
          FROM UomType UT INNER JOIN OWNER O ON UT.IdOwn = O.IdOwn
          WHERE O.IdOwn = @IdOwn
        </sql>
        <parameters>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>


      <query code="UomType_GetByIdOwnAndName">
        <sql>
          SELECT IdUomType
          ,O.IdOwn
          ,O.OwnName
          ,UomName
          FROM UomType UT INNER JOIN OWNER O ON UT.IdOwn = O.IdOwn
          WHERE O.IdOwn = @IdOwn
          AND UomName = @UomName
        </sql>
        <parameters>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">UomName</parameter>
        </parameters>
      </query>
      <!--END UomType Section-->

      <query code="GetSecuencialByTableName">
        <sql>
          SELECT COALESCE(MAX(ColumnName),1) as ColumnName FROM TableName WITH(NOLOCK)
        </sql>
      </query>


      <!-- LABEL  -->
       
      <query code="GetLabelByCode">
        <sql>
          SELECT IdLabel,
          LabelCode,
          LabelName,
          IdPrinterType,
          PathTemplate,
          DateCreated,
          UserCreated,
          DateModified,
          UserModified
          FROM Label
          WHERE LabelCode = @labelCode
        </sql>
        <parameters>
          <parameter type="String">labelCode</parameter>
        </parameters>
      </query>

      <query code="GetLabelById">
        <sql>
          SELECT IdLabel, 
          LabelCode, 
          LabelName, 
          IdPrinterType, 
          PathTemplate, 
          DateCreated, 
          UserCreated, 
          DateModified, 
          UserModified
          FROM Label
          WHERE IdLabel = @idLabel
        </sql>
        <parameters>
          <parameter type="String">idLabel</parameter>
        </parameters>
      </query>

      <query code="Label_GetByAnyParameter">
        <sql>
          SELECT
          L.IdLabel,
          L.LabelCode,
          L.LabelName,
          L.IdPrinterType,
          L.PathTemplate,
          L.DateCreated,
          L.UserCreated,
          L.DateModified,
          L.UserModified
          FROM Label L
          WHERE 1=1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdLabel" type="numericEqual">L.IdLabel</filter>
          <filter name="LabelCode" type="textEqual">L.LabelCode</filter>
          <filter name="LabelName" type="textEqual">L.LabelName</filter>
          <filter name="IdPrinterType" type="numericEqual">L.IdPrinterType</filter>
        </filters>
      </query>

      <query code="GetLabelByCodeAndPrinterType">
        <sql>
          SELECT IdLabel,
          LabelCode,
          LabelName,
          IdPrinterType,
          PathTemplate,
          DateCreated,
          UserCreated,
          DateModified,
          UserModified
          FROM Label
          WHERE LabelCode = @labelCode
          AND IdPrinterType = @idPrinterType
        </sql>
        <parameters>
          <parameter type="String">labelCode</parameter>
          <parameter type="Int">idPrinterType</parameter>
        </parameters>
      </query>
  
      <!-- LABELITEM  -->
      <query code="GetItemForLabel">
        <sql>
          SELECT I.IdOwn, O.OwnName, I.ItemCode, I.IdItem, I.Description, IU.IdUom, IU.UomName,
          IU.UomCode, IU.Barcode, IU.ConversionFactor
          FROM Item I
          INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem
          INNER JOIN Owner O ON O.IdOwn = I.IdOwn
          WHERE	      I.IdItem = @idItem
          AND IU.IdUom = @idUom
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idUom</parameter>
        </parameters>
      </query>


      <query code="GetIdLocCodeForLabel">
        <sql>
          SELECT W.IdWhs, W.WhsName, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc,
          L.Aisle, L.IdHng, L.LocTypeCode, L.Status, O.OwnCode, O.OwnName, LT.LocTypeName
          FROM Warehouse W
          INNER JOIN Location L ON W.IdWhs = L.IdWhs
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          LEFT JOIN Owner O ON L.IdOwn = O.IdOwn
          WHERE IdLocCode = @idLocCode
        </sql>
        <parameters>
          <parameter type="String">idLocCode</parameter>
        </parameters>
      </query>

      <!-- LABELBULK  -->
      <query code="LabelBulk_FindAll">
        <sql>
          SELECT DISTINCT
          W.IdWhs,
          W.WhsCode,
          W.ShortWhsName,
          W.WhsName,
          O.IdOwn,
          O.OwnCode,
          O.TradeName,
          O.OwnName,
          OO.CustomerCode,
          OO.CustomerName,
          OO.DeliveryAddress1,
          CY.IdCity,
          CY.CityName,
          OO.DeliveryPhone,
          OO.OutboundNumber,
          L.IdLpnCode,
          L.WeightTotal,
          B2B.IdCustomerB2B,
          B2B.LabelLPN AS LabelLPNB2B,
          B2B.LabelCodeLPN AS LabelCodeLPNB2B,
          COUNT(S.IdItem) AS CountItems
          FROM Stock S
          INNER JOIN LPN L
          ON L.IdOwn = S.IdOwn
          AND L.IdLpnCode = S.IdLpnCode
          AND L.IsClosed = 1
          AND S.IdLocCode IN (SELECT IdLocCode FROM Location WHERE IdWhs = S.IdWhs AND LocTypeCode IN ('STGD','DOCK','TRUCK'))
          INNER JOIN Item I
          ON I.IdOwn = S.IdOwn
          AND I.IdItem = S.IdItem
          INNER JOIN OutboundOrder OO
          ON OO.IdWhs = S.IdWhs
          AND OO.IdOwn = S.IdOwn
          AND OO.IdOutboundOrder = S.IdOutboundOrder
          INNER JOIN Owner O
          ON O.IdOwn = S.IdOwn
          INNER JOIN Warehouse W
          ON W.IdWhs = S.IdWhs
          LEFT JOIN Customer C
          ON C.CustomerCode = OO.CustomerCode
          AND C.IdOwn = OO.IdOwn
          LEFT JOIN CustomerB2B B2B
          ON B2B.IdCustomer = C.IdCustomer
          LEFT JOIN City CY
          ON OO.IdCityDelivery = CY.IdCity
          WHERE NOT EXISTS (SELECT 1 FROM CustomerB2B B2B
          WHERE B2B.IdCustomer = C.IdCustomer
          AND B2B.LabelLPN = 1)
          @SQLPart
          GROUP BY W.IdWhs,W.WhsCode,W.ShortWhsName,W.WhsName,O.IdOwn,O.OwnCode,O.TradeName,
          O.OwnName,OO.CustomerCode,OO.CustomerName,OO.DeliveryAddress1,CY.IdCity,CY.CityName,
          OO.DeliveryPhone,OO.OutboundNumber,L.IdLpnCode,L.WeightTotal,
          B2B.IdCustomerB2B,B2B.LabelLPN, B2B.LabelCodeLPN;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
          <filter name="Description" type="textLike">OO.OutboundNumber</filter>
          <filter name="Code" type="textLike">L.IdLpnCode</filter>
          <filter name="Owner" type="numericIn">O.IdOwn</filter>
        </filters>        
      </query>

  <query code="LabelBulkB2B_FindAll">
    <sql>
      SELECT DISTINCT
      W.IdWhs, W.WhsCode, W.ShortWhsName, W.WhsName, O.IdOwn, O.OwnCode, O.TradeName, O.OwnName,
      OO.CustomerCode, OO.CustomerName, OO.DeliveryAddress1, CY.IdCity,CY.CityName, OO.DeliveryPhone,
      OO.OutboundNumber, L.IdLpnCode, L.WeightTotal,
      C.IdCustomer,
      B2B.IdCustomerB2B,
      B2B.LabelLPN AS LabelLPNB2B,
      B2B.LabelCodeLPN AS LabelCodeLPNB2B
      FROM Stock S
      INNER JOIN LPN L
      ON L.IdOwn = S.IdOwn
      AND L.IdLpnCode = S.IdLpnCode
      AND L.IsClosed = 1
      AND S.IdLocCode IN (SELECT IdLocCode FROM Location WHERE IdWhs = S.IdWhs AND LocTypeCode IN ('STGD','DOCK','TRUCK'))
      INNER JOIN Item I
      ON I.IdOwn = S.IdOwn
      AND I.IdItem = S.IdItem
      INNER JOIN OutboundOrder OO
      ON OO.IdWhs = S.IdWhs
      AND OO.IdOwn = S.IdOwn
      AND OO.IdOutboundOrder = S.IdOutboundOrder
      INNER JOIN Owner O
      ON O.IdOwn = S.IdOwn
      INNER JOIN Warehouse W
      ON W.IdWhs = S.IdWhs
      LEFT JOIN Customer C
      ON C.CustomerCode = OO.CustomerCode
      AND C.IdOwn = OO.IdOwn
      LEFT JOIN CustomerB2B B2B
      ON B2B.IdCustomer = C.IdCustomer
      LEFT JOIN City CY
      ON OO.IdCityDelivery = CY.IdCity
      WHERE EXISTS (SELECT 1 FROM CustomerB2B B2B
      WHERE B2B.IdCustomer = C.IdCustomer
      AND B2B.LabelLPN = 1)
      @SQLPart;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
      <filter name="Description" type="textLike">C.CustomerName</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
      <filter name="Code" type="textLike">L.IdLpnCode</filter>
      <filter name="Owner" type="numericIn">O.IdOwn</filter>
    </filters>
  </query>
  

      <query code="GetLpnForLabel">
        <sql>
          SELECT W.IdWhs, W.WhsName, O.IdOwn, O.OwnName,
          OO.CustomerCode, OO.CustomerName,
          C.IdCity, C.CityName, OO.DeliveryPhone, OO.DeliveryAddress1,
          OO.OutboundNumber, Bultos.IdLpnCOde, Bultos.WeightTotal
          FROM Warehouse W
          INNER JOIN OutboundOrder OO
          ON W.IdWhs = OO.IdWhs
          INNER JOIN (SELECT D.IdOutboundOrder, DD.IdDispatch, DD.IdLpnCOde, L.WeightTotal
          FROM Lpn L
          INNER JOIN DispatchDetail DD
          ON L.IdLpnCode = DD.IdLpnCode
          INNER JOIN Dispatch D
          ON DD.IdDispatch =  D.IdDispatch
          GROUP BY D.IdOutboundOrder, DD.IdDispatch, DD.IdLpnCOde, L.WeightTotal) Bultos
          ON OO.IdOutboundOrder = Bultos.IdOutboundOrder
          INNER JOIN Owner O
          ON OO.IdOwn = O.IdOwn
          INNER JOIN City C
          ON OO.IdCityDelivery = C.IdCity
          WHERE Bultos.IdLpnCOde = @idLpnCOde
        </sql>
        <parameters>
          <parameter type="String">idLpnCOde</parameter>
        </parameters>
      </query>


      <query code="GetLpnForLabelSecuence">
        <sql>
          SELECT CompanyName ,@idLpnCOde IdLpnCode
          FROM COMPANY
          WHERE IdCompany = 1
        </sql>
        <parameters>
          <parameter type="String">idLpnCOde</parameter>
        </parameters>
      </query>


      <!-- TASKLABEL  -->
      <query code="InsertTaskLabel">
        <sql>
          INSERT INTO TaskLabel
          (IdTaskLabel,
          IdLabel,
          IdPrinter,
          DateCreated,
          IdUserPrinted,
          DelayPrinted,
          IsPrinted,
          ParamString
          )
          VALUES
          (@idTaskLabel,
          @idLabel,
          @idPrinter,
          @dateCreated,
          @idUserPrinted,
          @delayPrinted,
          @isPrinted,
          @paramString
          )

        </sql>
        <parameters>
          <parameter type="Int">idTaskLabel</parameter>
          <parameter type="Int">idLabel</parameter>
          <parameter type="Int">idPrinter</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="Int">idUserPrinted</parameter>
          <parameter type="Int">delayPrinted</parameter>
          <parameter type="Int">isPrinted</parameter>
          <parameter type="String">paramString</parameter>
        </parameters>
      </query>

  <!--<query code="UpdateTaskLabel">
        <sql>
          UPDATE TaskLabel SET
          IdLabel = @idLabel,
          IdPrinter = @idPrinter,
          DateCreated = @dateCreated,
          IdUserPrinted = @idUserPrinted,
          DelayPrinted = @delayPrinted,
          IsPrinted = @isPrinted,
          ParamString = @paramString
          WHERE IdTaskLabel = @IdTaskLabel
        </sql>
        <parameters>
          <parameter type="Int">idTaskLabel</parameter>
          <parameter type="Int">idLabel</parameter>
          <parameter type="Int">idPrinter</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="Int">idUserPrinted</parameter>
          <parameter type="Int">delayPrinted</parameter>
          <parameter type="Int">isPrinted</parameter>
          <parameter type="String">paramString</parameter>
        </parameters>
      </query>-->

      <query code="TaskLabel_UpdateIsPrinted">
        <sql>
          UPDATE TaskLabel SET
          DelayPrinted = @delayPrinted
          WHERE IdTaskLabel = @IdTaskLabel
        </sql>
        <parameters>
          <parameter type="Int">idTaskLabel</parameter>
          <parameter type="Int">delayPrinted</parameter>
        </parameters>
      </query>

      <query code="TaskLabel_UpdateParamString">
        <sql>
          UPDATE TaskLabel SET
          ParamString = @ParamString
          WHERE IdTaskLabel = @IdTaskLabel
        </sql>
        <parameters>
          <parameter type="Int">IdTaskLabel</parameter>
          <parameter type="String">ParamString</parameter>
        </parameters>
      </query>

      <query code="DeleteTaskLabel">
        <sql>
          DELETE FROM TaskLabel
          WHERE IdTaskLabel = @IdTaskLabel
        </sql>
        <parameters>
          <parameter type="Int">idTaskLabel</parameter>
        </parameters>
      </query>


      <query code="TaskLabel_GetPendingTasksPrintLpn">
        <sql>
          SELECT
                  TL.IdTaskLabel,
                  TL.IdLabel,
                  CB2B.IdCustomer,
                  L.LabelCode,
                  C.CustomerName,
                  TL.DateCreated,
                  U.FirstName,
                  U.LastName,
                  'LPN' AS LabelName,
                  TL.ParamString
             FROM TaskLabel TL
       INNER JOIN Label L
               ON TL.IdLabel = L.IdLabel
       INNER JOIN CustomerB2B CB2B
               ON CB2B.LabelCodeLPN = L.LabelCode
       INNER JOIN Customer C
               ON C.IdCustomer = CB2B.IdCustomer
       INNER JOIN CfgUserWms U
               ON U.IdUserWms = TL.IdUserPrinted
            WHERE TL.IsPrinted = @IsPrinted
              AND TL.DelayPrinted = @delayPrinted
                  @SQLPart
                           
          order by DateCreated;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">delayPrinted</parameter>
          <parameter type="Boolean">IsPrinted</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">C.CustomerName</filter>
        </filters>
      </query>

      <query code="TaskLabel_GetTasksToReprintLpnLabel">
        <sql>
          SELECT TL.IdTaskLabel,
                 L.LabelCode,
                 C.CustomerName,
                 TL.DateCreated,
                 'LPN' AS LabelName,
                 TL.ParamString
            FROM TaskLabel TL
            JOIN Label L
              ON TL.IdLabel = L.IdLabel
            JOIN CustomerB2B CB2B
              ON CB2B.LabelCodeLPN = L.LabelCode
            JOIN Customer C
              ON C.IdCustomer = CB2B.IdCustomer
                 @SQLPart
           WHERE TL.IsPrinted = 1

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew,
                 VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
            FROM CfgEntityProperty qf
            JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
           WHERE QueryName = @EntityPropertyName
             AND IdPage = @IdPage
           ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">EntityPropertyName</parameter>
          <parameter type="String">IdPage</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textLike">C.CustomerName</filter>
          <filter name="DateRange" type="textBetween">TL.DateCreated</filter>
          <filter name="Code" type="textLike">L.LabelCode</filter>
        </filters>
      </query>
  
      <query code="TaskLabel_GetTasksToReprintPriceLabel">
        <sql>
          SELECT TL.IdTaskLabel,
                 L.LabelCode,
                 C.CustomerName,
                 TL.DateCreated,
                 'Precio' AS LabelName,
                 TL.ParamString
            FROM TaskLabel TL
            JOIN Label L
              ON TL.IdLabel = L.IdLabel
            JOIN CustomerB2B CB2B
              ON CB2B.LabelCodePrice = L.LabelCode
            JOIN Customer C
              ON C.IdCustomer = CB2B.IdCustomer
                 @SQLPart
           WHERE TL.IsPrinted = 1

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew,
                 VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
            FROM CfgEntityProperty qf
            JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
           WHERE QueryName = @EntityPropertyName
             AND IdPage = @IdPage
           ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">EntityPropertyName</parameter>
          <parameter type="String">IdPage</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textLike">C.CustomerName</filter>
          <filter name="DateRange" type="textBetween">TL.DateCreated</filter>
          <filter name="Code" type="textLike">L.LabelCode</filter>
        </filters>
      </query>
  
    <query code="TaskLabel_GetTasksToReprintPackingListLabel">
        <sql>
          SELECT TL.IdTaskLabel,
                 L.LabelCode,
                 C.CustomerName,
                 TL.DateCreated,
                 'Lista Embalaje' AS LabelName,
                 TL.ParamString
            FROM TaskLabel TL
            JOIN Label L
              ON TL.IdLabel = L.IdLabel
            JOIN CustomerB2B CB2B
              ON CB2B.LabelCodeLPNPackingList = L.LabelCode
            JOIN Customer C
              ON C.IdCustomer = CB2B.IdCustomer
                 @SQLPart
           WHERE TL.IsPrinted = 1

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew,
                 VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
            FROM CfgEntityProperty qf
            JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
           WHERE QueryName = @EntityPropertyName
             AND IdPage = @IdPage
           ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">EntityPropertyName</parameter>
          <parameter type="String">IdPage</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textLike">C.CustomerName</filter>
          <filter name="DateRange" type="textBetween">TL.DateCreated</filter>
          <filter name="Code" type="textLike">L.LabelCode</filter>
        </filters>
      </query>

    <query code="TaskLabel_UpdateTaskLabelsToReprint">
      <sql>
        UPDATE TaskLabel
           SET IsPrinted = 0
               @SQLPart
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="listSelected" type="numericIn">IdTaskLabel</filter>
      </filters>
    </query>

      <query code="TaskLabel_GetPendingTasksPrint">
        <sql>
          SELECT
          TL.IdTaskLabel,
          TL.IdLabel,
          CB2B.IdCustomer,
          L.LabelCode,
          C.CustomerName,
          TL.DateCreated,
          U.FirstName,
          U.LastName,
          'LPN' AS LabelName,
          TL.ParamString
          FROM TaskLabel TL
          INNER JOIN Label L
          ON TL.IdLabel = L.IdLabel
          INNER JOIN CustomerB2B CB2B
          ON CB2B.LabelCodeLPN = L.LabelCode
          INNER JOIN Customer C
          ON C.IdCustomer = CB2B.IdCustomer
          INNER JOIN CfgUserWms U
          ON U.IdUserWms = TL.IdUserPrinted
          WHERE TL.IsPrinted = @IsPrinted
          AND TL.DelayPrinted = @delayPrinted
          @SQLPart
          
          UNION ALL
          
          SELECT
          TL.IdTaskLabel,
          TL.IdLabel,
          CB2B.IdCustomer,
          L.LabelCode,
          C.CustomerName,
          TL.DateCreated,
          U.FirstName,
          U.LastName,
          'PRECIO' AS LabelName,
          TL.ParamString
          FROM TaskLabel TL
          INNER JOIN Label L
          ON TL.IdLabel = L.IdLabel
          INNER JOIN CustomerB2B CB2B
          ON CB2B.LabelCodePrice = L.LabelCode
          INNER JOIN Customer C
          ON C.IdCustomer = CB2B.IdCustomer
          INNER JOIN CfgUserWms U
          ON U.IdUserWms = TL.IdUserPrinted
          WHERE TL.IsPrinted = @IsPrinted
          AND TL.DelayPrinted = @delayPrinted
          @SQLPart

          order by DateCreated;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">delayPrinted</parameter>
          <parameter type="Boolean">IsPrinted</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">C.CustomerName</filter>
        </filters>
      </query>

      <query code="TaskLabel_GetPendingTasksPrintPrice">
        <sql>
          SELECT
                  TL.IdTaskLabel,
                  TL.IdLabel,
                  CB2B.IdCustomer,
                  L.LabelCode,
                  C.CustomerName,
                  TL.DateCreated,
                  U.FirstName,
                  U.LastName,
                  'Precio' AS LabelName,
                  TL.ParamString
             FROM TaskLabel TL
       INNER JOIN Label L
               ON TL.IdLabel = L.IdLabel
       INNER JOIN CustomerB2B CB2B
               ON CB2B.LabelCodePrice = L.LabelCode
       INNER JOIN Customer C
               ON C.IdCustomer = CB2B.IdCustomer
       INNER JOIN CfgUserWms U
               ON U.IdUserWms = TL.IdUserPrinted
            WHERE TL.IsPrinted = @IsPrinted
              AND TL.DelayPrinted = @delayPrinted
                  @SQLPart

          order by DateCreated;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">delayPrinted</parameter>
          <parameter type="Boolean">IsPrinted</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">C.CustomerName</filter>
        </filters>
      </query>
  
      <query code="TaskLabel_GetPendingTasksPrintPackingList">
        <sql>
          SELECT
                 TL.IdTaskLabel,
                 TL.IdLabel,
                 CB2B.IdCustomer,
                 L.LabelCode,
                 C.CustomerName,
                 TL.DateCreated,
                 U.FirstName,
                 U.LastName,
                 'Lista Embalaje' AS LabelName,
                 TL.ParamString
            FROM TaskLabel TL
      INNER JOIN Label L
              ON TL.IdLabel = L.IdLabel
      INNER JOIN CustomerB2B CB2B
              ON CB2B.LabelCodeLPNPackingList = L.LabelCode
      INNER JOIN Customer C
              ON C.IdCustomer = CB2B.IdCustomer
      INNER JOIN CfgUserWms U
              ON U.IdUserWms = TL.IdUserPrinted
           WHERE TL.IsPrinted = @IsPrinted
             AND TL.DelayPrinted = @delayPrinted
                 @SQLPart

          order by DateCreated;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">delayPrinted</parameter>
          <parameter type="Boolean">IsPrinted</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">C.CustomerName</filter>
        </filters>
      </query>

      <!-- MOVEMENTIfz section  -->
      <query code="MovementIfz_Insert">
        <sql>
          INSERT INTO MovementIfz
          (
          IdMovIfz
          ,SourceUserName
          ,SourceAppName
          ,SourceHostName
          ,IdTicketTransfer
          ,Dateprocess
          ,WebServiceName
          ,TypeMovto
          ,RecordRequestQty
          ,RecordProcessQty
          ,RangeRequest
          ,StatusProcess
          ,StatusMessage
          )
          VALUES
          (
          @IdMovIfz
          ,@SourceUserName
          ,@SourceAppName
          ,@SourceHostName
          ,@IdTicketTransfer
          ,@Dateprocess
          ,@WebServiceName
          ,@TypeMovto
          ,@RecordRequestQty
          ,@RecordProcessQty
          ,@RangeRequest
          ,@StatusProcess
          ,@StatusMessage
          )

        </sql>
        <parameters>
          <parameter type="Int">IdMovIfz</parameter>
          <parameter type="String">SourceUserName</parameter>
          <parameter type="String">SourceAppName</parameter>
          <parameter type="String">SourceHostName</parameter>
          <parameter type="String">IdTicketTransfer</parameter>
          <parameter type="DateTime">Dateprocess</parameter>
          <parameter type="String">WebServiceName</parameter>
          <parameter type="Char">TypeMovto</parameter>
          <parameter type="Int">RecordRequestQty</parameter>
          <parameter type="Int">RecordProcessQty</parameter>
          <parameter type="String">RangeRequest</parameter>
          <parameter type="String">StatusProcess</parameter>
          <parameter type="String">StatusMessage</parameter>
        </parameters>
      </query>
  
    <query  code="MovementIfz_Delete">
      <sql>
        DELETE MovementIfz
        WHERE IdMovIfz = @IdMovIfz
      </sql>
      <parameters>
        <parameter type="Int">IdMovIfz</parameter>
      </parameters>
    </query>

	<query  code="RequestApiSend_Delete">
		<sql>
			DELETE RequestApiSend
			WHERE IdRequestSend = @IdRequestApiSend
		</sql>
		<parameters>
			<parameter type="Int">IdRequestApiSend</parameter>
		</parameters>
	</query>

      <query code="NonWorkingDay_FindAll">
        <sql>
          select DateNonWorking
          ,Description
          ,DATENAME(weekday,DateNonWorking) AS WeekDays
          FROM NonworkingDay
          @SQLPart
          ORDER BY DateNonWorking;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = 'NonWorkingDay_FindAll'
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="DateRange" type="textBetween">DateNonWorking</filter>
        </filters>
      </query>
      <query code="NonWorkingDay_GetByDate">
        <sql>
          select DateNonWorking
          , Description
          , DateCreated
          , UserCreated
          , DateModified
          , UserModified
          From NonWorkingDay
          Where DateNonWorking = @DateNonWorking;
        </sql>
        <parameters>
          <parameter type="DateTime">DateNonWorking</parameter>
        </parameters>
      </query>
      <query code="NonWorkingDay_GetByYearDate">
        <sql>
          select DateNonWorking
          , Description
          , DateCreated
          , UserCreated
          , DateModified
          , UserModified
          From NonWorkingDay
          Where DateNonWorking between @YearFromDateNonWorking and @YearToDateNonWorking
        </sql>
        <parameters>
          <parameter type="DateTime">YearFromDateNonWorking</parameter>
          <parameter type="DateTime">YearToDateNonWorking</parameter>
        </parameters>
      </query>
      <query code="NonWorkingDay_Insert">
        <sql>
          INSERT INTO NonWorkingDay
          (DateNonWorking
          ,Description
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified)
          VALUES
          (@DateNonWorking
          ,@Description
          ,@DateCreated
          ,@UserCreated
          ,@DateModified
          ,@UserModified)
        </sql>
        <parameters>
          <parameter type="DateTime">DateNonWorking</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>
      <query code="NonWorkingDay_Update">
        <sql>
          UPDATE NonWorkingDay
          SET Description = @Description
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE DateNonWorking  = @DateNonWorking
        </sql>
        <parameters>
          <parameter type="DateTime">DateNonWorking</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>
      <query code="NonWorkingDay_Delete">
        <sql>
          DELETE FROM NonWorkingDay
          WHERE DateNonWorking = @DateNonWorking
        </sql>
        <parameters>
          <parameter type="DateTime">DateNonWorking</parameter>
        </parameters>
      </query>

      <query code="Kardex_GetAll">
        <sql>
          SELECT K.IdKardex
          , K.Idwhs
          , W.ShortWhsName WhsName
          , K.IdOwn
          , O.OwnName
          , k.KardexCode
          , K.MovementDate
          , K.IdDocument
          , K.DocumentNumber
          , K.DocumentTypeCode
          , K.ReferenceDoc
          , K.ReferenceDocTypeCode
          , K.IdItem
          , I.ItemCode
          , I.LongItemName
          , K.ItemQtySign
          , K.BalanceQtyNew
          FROM Kardex K
          Inner Join WareHouse W
          ON W.idWhs = K.idWhs
          INNER JOIN Owner O
          ON O.IdOwn = K.IdOwn
          INNER JOIN Item I
          ON I.IdItem = K.IdItem
          @SQLPart
          ORDER BY K.MovementDate ASC, K.KardexCode ASC, I.ItemCode ASC

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">SQLPart</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
          <!--<parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="String">KardexCode</parameter>
          <parameter type="DateTime">MovementDateFrom</parameter>
          <parameter type="DateTime">MovementDateTo</parameter>-->
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
          <filter name="Owner" type="numericIn">K.IdOwn</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="DateRange" type="textBetween">K.MovementDate</filter>
          <filter name="KardexType" type="textLike">k.KardexCode</filter>
        </filters>
      </query>

      <query code="KardexType_GetAll">
        <sql>
          select IdKardexType
          , KardexCode
          , KardexName
          , DateCreated
          , UserCreated
          , DateModified
          , UserModified
          from KardexType
        </sql>
        <parameters>
          <parameter type="SQLPart">SQLPart</parameter>
        </parameters>
      </query>

      <query code="InBoundLabel_GetAll">
        <sql>
          SELECT DISTINCT
          iOr.IdInboundOrder
          ,whs.IdWhs
          ,whs.WhsCode
          ,whs.ShortWhsName
          ,whs.WhsName
          ,own.IdOwn
          ,own.OwnCode
          ,own.OwnName
          ,own.TradeName
          ,iOr.InboundNumber
          ,iTy.IdInboundType
          ,iTy.InboundTypeCode
          ,iOr.OrderComment
          ,ven.IdVendor
          ,ven.VendorName
          ,ven.VendorCode
          ,iOr.DateExpected
          ,iOr.EmissionDate
          ,iOr.ExpirationDate
          ,iOr.Status
          ,tra.IdTrackInboundType
          ,tra.NameTrackInboundType
          ,out.IdOutboundOrder
          ,out.OutboundNumber
          ,iOr.IsAsn
          ,iOr.PercentLpnInspection
          ,iOr.PercentQA
          ,iOr.ShiftNumber
          ,iOr.SpecialField1
          ,iOr.SpecialField2
          ,iOr.SpecialField3
          ,iOr.SpecialField4
          ,iOr.DateCreated
          ,iOr.UserCreated
          ,iOr.DateModified
          ,iOr.UserModified
          FROM InboundOrder iOr
          JOIN Owner own ON iOr.IdOwn = own.IdOwn
          JOIN Warehouse whs ON iOr.IdWhs = whs.IdWhs
          JOIN InboundType iTy ON iOr.IdInboundType = iTy.IdInboundType AND iTy.Status = 1
          JOIN v_Inb_LatestTrack tra ON iOR.IdInboundOrder = tra.IdInboundOrder
          LEFT JOIN Vendor ven ON iOr.IdVendor = ven.IdVendor
          LEFT JOIN OutboundOrder out ON iOR.IdOutboundOrderSource = out.IdOutboundOrder
          LEFT JOIN InboundDetail iD ON iOR.IdInboundOrder = iD.IdInboundOrder
          LEFT JOIN Item itm ON itm.IdItem = iD.IdItem
          @SQLPart
          ORDER BY iOr.IdInboundOrder DESC;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">SQLPart</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">whs.IdWhs</filter>
          <filter name="Owner" type="numericIn">own.IdOwn</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="DocumentNbr" type="textLike">iOr.InboundNumber</filter>
          <filter name="InboundType" type="numericIn">iOr.IdInboundType</filter>
        </filters>
      </query>

      <query code="InBoundLabelDetail_GetAll">
        <sql>
          SELECT IdInboundDetail
          ,inDet.IdInboundOrder
          ,inDet.LineNumber
          ,inDet.LineCode
          ,itm.IdItem
          ,itm.Description
          ,itm.LongItemName
          ,itm.IdOwn
          ,itm.ItemCode
          ,Ctg.IdCtgItem
          ,Ctg.CtgName
          ,inDet.ItemQty
          ,COALESCE((SELECT sum(ItemQty)
          from ReceiptDetail redet
          JOIN Receipt rec ON redet.IdReceipt = rec.IdReceipt
                          AND COALESCE(rec.SpecialField1, '') &lt; &gt; 'NO_RECEIPTED_ITEMS'
          JOIN InboundOrder inbo ON rec.IdInboundOrder = inbo.IdInboundOrder
          JOIN Item itm ON redet.IdItem = itm.IdItem
          WHERE inDet.IdItem = itm.IdItem
          AND
          inbo.IdInboundOrder = inDet.IdInboundOrder) , 0)AS Received
          ,inDet.Status
          ,inDet.LineComment
          ,inDet.FifoDate
          ,inDet.ExpirationDate
          ,inDet.FabricationDate
          ,inDet.LotNumber
          ,inDet.LpnCode
          ,inDet.Price
          ,inDet.SpecialField1
          ,inDet.SpecialField2
          ,inDet.SpecialField3
          ,inDet.SpecialField4
          ,inDet.DateCreated
          ,inDet.UserCreated
          ,inDet.DateModified
          ,inDet.UserModified
          ,NULL Lote
          ,NULL Vencimiento
          ,inDet.ItemQty Copias
          FROM InboundDetail inDet
          INNER JOIN Item itm ON itm.IdItem = inDet.IdItem
          LEFT JOIN CategoryItem Ctg ON Ctg.IdCtgItem = inDet.IdCtgItem
          WHERE IdInboundOrder = @idInboundOrder;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idInboundOrder</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
      </query>

      <query code="Item_GetLotUse">
        <sql>
          Select
          Distinct(Itm.IdItem)
          ,Itm.ItemCode
          ,Itm.IdOwn
          ,Itm.AltItemCode
          ,Itm.Description
          ,Itm.IdGrpItem1
          ,Itm.IdGrpItem2
          ,Itm.IdGrpItem3
          ,Itm.IdGrpItem4
          ,Itm.LongItemName
          ,Itm.ShortItemName
          ,Itm.Status
          ,Itm.ItemComment
          ,Itm.ShelfLife
          ,Itm.ExpirationDays
          ,Itm.CtrlSerialInbound
          ,Itm.CtrlSerialInternal
          ,Itm.CtrlSerialOutbound
          ,Itm.LotControlInbound
          ,Itm.LotControlInternal
          ,Itm.LotControlOutbound
          ,Itm.Weight
          ,Itm.Volume
          ,Itm.Length
          ,Itm.Width
          ,Itm.Height
          ,Itm.NestedVolume
          ,Itm.InspectionRequerid
          ,Itm.InspectionCode
          ,Itm.IdPutawayZone
          ,Itm.ControlExpDate
          ,Itm.ControlFabDate
          ,Itm.Acumulable
          ,Itm.ReOrderPoint
          ,Itm.ReOrderQty
          ,Itm.PalletQty
          ,Itm.CutMinimum
          ,Itm.Originator
          ,Itm.VASProfile
          ,Itm.Hazard
          ,Itm.Price
          ,Itm.InventoryType
          ,Itm.StackingSequence
          ,Itm.CommentControl
          ,Itm.CompatibilityCode
          ,Itm.MSDSUrl
          ,Itm.PictureUrl
          ,Itm.GrpClass1
          ,Itm.GrpClass2
          ,Itm.GrpClass3
          ,Itm.GrpClass4
          ,Itm.GrpClass5
          ,Itm.GrpClass6
          ,Itm.GrpClass7
          ,Itm.GrpClass8
          ,Itm.SpecialField1
          ,Itm.SpecialField2
          ,Itm.SpecialField3
          ,Itm.SpecialField4
          ,Itm.DateCreated
          ,Itm.UserCreated
          ,Itm.DateModified
          ,Itm.UserModified
          From Item Itm
          Inner Join v_Cfg_WmsItemParameters vItem On vItem.iditem = Itm.IdITem
          Where vItem.IdParameter IN (1007,1008,1009)
          AND vItem.IdOwn = @IdOwn
          AND Itm.IdItem =@IdItem
        </sql>
        <parameters>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdItem</parameter>
        </parameters>
      </query>

      <query code="GetForItemLot">
        <sql>
          SELECT @LongItemName1 AS LongItemName1
          ,@LongItemName2 AS LongItemName2
          ,@Lote AS LotNumber
          ,@ExpirationDate AS ExpirationDate
          ,@ExpirationDateFormat AS ExpirationDateFormat
          ,@FabricationDate AS FabricationDate
          ,@FabricationDateFormat AS FabricationDateFormat
          ,IU.BarCode
          ,'(01)'+ IU.BarCode + '(10)' + @Lote + '(17)'+ @ExpirationDateFormat AS Codigo2D
          FROM Item I
          INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem
          WHERE	I.IdItem = @idItem
          AND IU.IdUom = @idUom
        </sql>
        <parameters>
          <parameter type="String">LongItemName1</parameter>
          <parameter type="String">LongItemName2</parameter>
          <parameter type="String">FabricationDate</parameter>
          <parameter type="String">FabricationDateFormat</parameter>
          <parameter type="String">ExpirationDate</parameter>
          <parameter type="String">ExpirationDateFormat</parameter>
          <parameter type="String">Lote</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idUom</parameter>
        </parameters>
      </query>

      <query code="GetLabelForItemCustomer">
        <sql>
          SELECT
          IC.IdCustomer,
          IC.IdOwn,
          IC.IdItem,
          IC.ItemCodeCustomer,
          IC.LongItemName ItemCustomerName,
          IC.Capacity,
          IC.Price,
          IC.SpecialField1,
          IC.SpecialField2,
          IC.SpecialField3,
          IC.SpecialField4,
          C.CustomerName,
          I.Description ItemName
          FROM ItemCustomer IC
          INNER JOIN Customer C
          ON C.IdOwn = IC.IdOwn
          AND C.IdCustomer = IC.IdCustomer
          INNER JOIN Item I
          ON I.IdOwn = IC.IdOwn
          AND I.IdItem = IC.IdItem
          WHERE IC.IdCustomer = @idCustomer
          AND IC.IdOwn = @idOwn
          AND IC.IdItem = @idItem
        </sql>
        <parameters>
          <parameter type="Int">idCustomer</parameter>
          <parameter type="Int">idOwn</parameter>
          <parameter type="Int">idItem</parameter>
        </parameters>
      </query>

      <!--Filtro Number Outbound Order -->
      

      <query code="NumberOutboundOrder_GetByWhsOwnAndType">
        <sql>
          SELECT Whs.IdWhs
          ,Whs.WhsCode
          ,Whs.ShortWhsName
          ,Whs.WhsName
          ,Own.IdOwn
          ,Own.OwnCode
          ,Own.OwnName
          ,OutType.IdOutboundType
          ,OutType.OutboudTypeCode AS OutboundTypeCode
          ,OutType.OutboundTypeName
          ,NumOut.LastOutboundNumber
          ,NumOut.NumberLength
          ,NumOut.IsCodePrefix
          FROM NumberOutboundOrder NumOut
          INNER JOIN Warehouse Whs ON Whs.IdWhs = NumOut.IdWhs
          INNER JOIN Owner Own ON Own.IdOwn = NumOut.IdOwn
          INNER JOIN OutboundType OutType ON OutType.OutboudTypeCode = NumOut.OutboundTypeCode AND OutType.Status = 1
          WHERE NumOut.IdWhs = @IdWhs
          AND NumOut.IdOwn = @IdOwn
          AND NumOut.OutboundTypeCode = @OutboundTypeCode
          ORDER BY IdWhs, IdOwn, OutboundTypeCode
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">OutboundTypeCode</parameter>
        </parameters>
      </query>

      <query code="NumberOutboundOrder_UpdateLastOutboundNumberValue">
        <sql>
          UPDATE NumberOutboundOrder
          SET LastOutboundNumber = LastOutboundNumber + 1
          WHERE IdWhs = @IdWhs
          AND IdOwn = @IdOwn
          AND OutboundTypeCode = @OutboundTypeCode
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">OutboundTypeCode</parameter>
        </parameters>
      </query>

      <query code="Location_Used_FindAll">
        <sql>
          SELECT IdLocCode
          , IdWhs
          , ShortWhsName
          , LocCode
          , IdHng
          , HngName
          , RowLoc
          , ColumnLoc
          , LevelLoc
          , Aisle
          , LocTypeCode
          , Description
          , SharedItem
          , OnlyLPN
          , IdOwn
          , DedicatedOwner
          , PickingFlow
          , PutawayFlow
          , CapacityLPN
          , CapacityUnit
          , Length
          , Width
          , Height
          , Volume
          , Weight
          , PositionX
          , PositionY
          , PositionZ
          , HoldCode
          , ReorderQty
          , SumItemQty
          , PctUsed
          FROM v_Sto_LocationUsed
          @SQLPart
          ORDER BY ShortWhsName, HngName, IdLocCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="UsedPercenter" type="numericLower">PctUsed</filter>
          <filter name="MaximumStock" type="numericGreater">SumItemQty</filter>
        </filters>
      </query>

    <query code="GetItemParamByItem">
      <sql>
        SELECT  IP.IdParameter,
        IP.ParameterCode + '#' + CAST(IP.IdWhs AS VARCHAR(3))+ '#' + CAST(IP.IdItem AS VARCHAR(10))AS ParameterKey,
        IP.ParameterValue,
        IP.IdModule,
        IP.Scope,
        IP.[Type]
        FROM v_Cfg_WmsItemParameters IP
        WHERE IP.IdItem = @idItem
        AND IP.IdWhs = @idWhs
      </sql>
      <parameters>
        <parameter type="Int">idItem</parameter>
        <parameter type="Int">idWhs</parameter>
      </parameters>
    </query>
      <!-- End MOVEMENTIfz section  -->

    
    <!--Filtro WmsProcess section-->
    <query code="WmsProcess_FindAll">
      <sql>
        SELECT W.IdWmsProcessCode AS Code,
        W.Name,
        W.WhereIn,
        W.IdModule,
        C.Name AS NameModule,
        W.DateCreated,
        W.UserCreated,
        W.DateModified,
        W.UserModified
        FROM WmsProcess W INNER JOIN
        CfgModule C ON W.IdModule = c.IdModule
        WHERE EXISTS (SELECT 1 FROM CustomRule R
                WHERE R.IdWmsProcessCode = W.IdWmsProcessCode)

        ORDER BY w.Name, W.IdWmsProcessCode
      </sql>
    </query>

  <query code="GetWmsProcessByIdModule">
    <sql>
      SELECT W.IdWmsProcessCode AS Code,
      W.Name,
      W.WhereIn,
      W.IdModule,
      C.Name AS NameModule,
      W.DateCreated,
      W.UserCreated,
      W.DateModified,
      W.UserModified
      FROM WmsProcess W INNER JOIN
      CfgModule C ON W.IdModule = c.IdModule
      WHERE W.IdModule =  @IdModule
      ORDER BY w.Name, W.IdWmsProcessCode;
    </sql>
    <parameters>
      <parameter type="Int">IdModule</parameter>
    </parameters>
  </query>
    <!--End WmsProcess section-->
    
    <!--Filro CustomRule section-->
    <query code="GetCustomRuleById">
      <sql>
        SELECT IdCustomRule
        FROM CustomRule
        WHERE IdCustomRule = @Id;
      </sql>
      <parameters>
        <parameter type="String">Id</parameter>
      </parameters>
    </query>

    <query code="GetCustomRule_By_IdWmsProcessCodeAndName">
      <sql>
        SELECT IdCustomRule
        FROM CustomRule
        WHERE IdWmsProcessCode = @IdWmsProcessCode
        AND Name = @Name
      </sql>
      <parameters>
        <parameter type="String">IdWmsProcessCode</parameter>
        <parameter type="String">Name</parameter>
      </parameters>
    </query>
    
    <query code="CustomRule_Delete">
      <sql>
        DELETE
        FROM CustomRule
        WHERE IdCustomRule = @IdCustomRule
      </sql>
      <parameters>
        <parameter type="Int">IdCustomRule</parameter>
      </parameters>
    </query>

    <query code="CustomRule_Insert">
      <sql>
        INSERT INTO dbo.CustomRule
        (IdCustomRule
        ,Status
        ,IdWmsProcessCode
        ,Name
        ,DefaultRule
        ,DateCreated
        ,UserCreated
        ,IdWhs)
        values (
        @IdCustomRule,
        @Status,
        @IdWmsProcessCode,
        @Name,
        @DefaultRule,
        @DateCreated,
        @UserCreated,
        @IdWhs)
      </sql>
      <parameters>
        <parameter  type="Int">IdCustomRule</parameter>
        <parameter type="Int">Status</parameter>
        <parameter type="String">IdWmsProcessCode</parameter>
        <parameter type="String">Name</parameter>
        <parameter type="Int">DefaultRule</parameter>
        <parameter type="DateTime">dateCreated</parameter>
        <parameter type="String">userCreated</parameter>
        <parameter type="Int">IdWhs</parameter>
      </parameters>
    </query>

    <query code="CustomRule_Update">
      <sql>
        UPDATE dbo.CustomRule SET
        Status = @Status,
        IdWmsProcessCode = @IdWmsProcessCode,
        Name = @Name,
        DefaultRule = @DefaultRule,
        DateModified = @DateModified,
        UserModified = @UserModified,
        IdWhs = @IdWhs
        WHERE IdCustomRule = @IdCustomRule
      </sql>
      <parameters>
        <parameter  type="Int">IdCustomRule</parameter>
        <parameter type="Int">Status</parameter>
        <parameter type="String">IdWmsProcessCode</parameter>
        <parameter type="String">Name</parameter>
        <parameter type="Int">DefaultRule</parameter>
        <parameter type="DateTime">DateModified</parameter>
        <parameter type="String">UserModified</parameter>
        <parameter type="Int">IdWhs</parameter>
      </parameters>
    </query>
    <!--End CustomRule section-->
    
    <!--Filtro GroupRule section-->
    <query code="GroupRule_Delete_By_IdCustomRole">
      <sql>
        DELETE
        FROM GroupRule
        WHERE IdCustomRule = @IdCustomRule
      </sql>
      <parameters>
        <parameter type="Int">IdCustomRule</parameter>
      </parameters>
    </query>

    <query code="GroupRule_Delete_By_IdCustomRoleAndIdRule">
      <sql>
        DELETE
        FROM GroupRule
        WHERE IdCustomRule = @IdCustomRule
        AND IdRule = @IdRule
      </sql>
      <parameters>
        <parameter type="Int">IdCustomRule</parameter>
        <parameter type="Int">IdRule</parameter>
      </parameters>
    </query>

      <query code="GroupRule_Insert">
        <sql>
          INSERT INTO dbo.GroupRule
          (IdCustomRule
          ,IdRule
          ,SequenceExecution)
          values (
          @idCustomRule,
          @idRule,
          @sequenceExecution)
        </sql>
        <parameters>
          <parameter type="Int">idCustomRule</parameter>
          <parameter type="Int">idRule</parameter>
          <parameter type="Int">sequenceExecution</parameter>
        </parameters>
      </query>

      <query code="GroupRule_Update">
        <sql>
          UPDATE dbo.GroupRule
          SET SequenceExecution = @sequenceExecution
          WHERE IdCustomRule = @idCustomRule
          AND IdRule = @idRule
        </sql>
        <parameters>
          <parameter type="Int">idCustomRule</parameter>
          <parameter type="Int">idRule</parameter>
          <parameter type="Int">sequenceExecution</parameter>
        </parameters>
      </query>
    <!--End GroupRule section-->
      
      
      
      <!--Dashboard-->
      <query code="GetKpiProductivity">
        <sql>
          SELECT  DD.UserWms,
          D.DateCreated,
          SUM(DD.ItemQty) Qty,
          I.ShortItemName,
          --DD.LotNumber,
          DD.ExpirationDate,
          DD.IdLocationStage,
          O.OutboundNumber,
          W.WhsName,
          DD.LineNumber,
          DD.IdLpnCode
          FROM DispatchDetail DD
          INNER JOIN Dispatch D ON D.IdDispatch = DD.IdDispatch
          INNER JOIN OutboundOrder O ON O.IdOutboundOrder = D.IdOutboundOrder
          INNER JOIN Item I ON I.IdItem = DD.IdItem
          INNER JOIN Warehouse W ON W.IdWhs = O.IdWhs
          WHERE DD.IdWmsProcessCode IN ('PKBAT','PKKIT','PKPSS','PKUNK','PKVAS','PKWAV','PICK','PKLPN')
          AND W.IdWhs = @IdWhs
          @SQLPart
          GROUP BY O.OutboundNumber,
          DD.UserWms,
          D.DateCreated,
          I.ShortItemName,
          --DD.LotNumber,
          DD.ExpirationDate,
          DD.IdLocationStage,
          W.WhsName,
          DD.LineNumber,
          DD.IdLpnCode
          order by D.DateCreated;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">UserName</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textEqual">DD.UserWms</filter>
        </filters>
      </query>

      <query code="GetKpiProductivityDetail">
        <sql>
          SELECT  DD.UserWms,
          D.DateCreated,
          SUM(DD.ItemQty) AS Qty,
          I.ShortItemName,
          --DD.LotNumber,
          DD.ExpirationDate,
          DD.IdLocationStage,
          O.OutboundNumber,
          W.WhsName,
          DD.LineNumber,
          DD.IdLpnCode,
          TD.IdLocSourceUsed
          FROM DispatchDetail DD
          INNER JOIN Dispatch D ON D.IdDispatch = DD.IdDispatch
          INNER JOIN OutboundOrder O ON O.IdOutboundOrder = D.IdOutboundOrder
          INNER JOIN Task T ON T.IdDocumentBound = O.IdOutboundOrder AND T.TaskTypeCode IN ('PIKOR','PIKBT','PIKWV','PIKPS','PIKIT','PIUNK','PIKVA','PKLPN')
          INNER JOIN TaskDetail TD ON T.IdTask = TD.IdTask AND TD.LineNumber = DD.LineNumber
          INNER JOIN Item I ON I.IdItem = DD.IdItem
          INNER JOIN Warehouse W ON W.IdWhs = O.IdWhs
          WHERE DD.IdWmsProcessCode IN ('PKBAT','PKKIT','PKPSS','PKUNK','PKVAS','PKWAV','PICK')
          AND W.IdWhs = @IdWhs
          @SQLPart

          GROUP BY O.OutboundNumber,
          DD.UserWms,
          D.DateCreated,
          I.ShortItemName,
          --DD.LotNumber,
          DD.ExpirationDate,
          DD.IdLocationStage,
          W.WhsName,
          DD.LineNumber,
          DD.IdLpnCode,
          TD.IdLocSourceUsed
          ORDER BY D.DateCreated

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">UserName</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textEqual">DD.UserWms</filter>
        </filters>
      </query>

      <query code="GetKpiZoneQty">
        <sql>
          SELECT
          WZ.IdWorkZone,
          WZ.WorkZoneName,
          S.ItemQty PercentageZone ,--CONVERT(INT,((SUM(S.ItemQty) * 100) / SUM(L.CapacityUnit))) PercentageZone,
          L.LocCode, LT.LocTypeName, L.CapacityUnit,
          L.Volume, S.TotalVolumen, L.Weight, S.TotalWeight
          FROM WorkZone  WZ
          INNER JOIN WorkZoneLocation WZL ON WZL.IdWorkZone = WZ.IdWorkZone
          INNER JOIN Stock S ON S.IdLocCode = WZL.IdLocCode
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          INNER JOIN LocationType LT ON LT.LocTypeCode = L.LocTypeCode
          WHERE L.LocTypeCode IN('PUT','PICK')
          AND WZ.TypeZone = 1
          AND WZ.IdWhs = @IdWhs
          @SQLPart
          GROUP BY WZ.IdWorkZone, WZ.WorkZoneName, L.LocCode, LT.LocTypeName, L.CapacityUnit,
          L.Volume, S.TotalVolumen, L.Weight, S.TotalWeight,S.ItemQty
          ORDER BY WZ.WorkZoneName, L.LocCode;
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
        <filters>
          <filter name="WorkZone" type="numericEqual">WZ.IdWorkZone</filter>
        </filters>
      </query>

      <query code="GetKpiZoneWeight">
        <sql>
          SELECT
          WZ.IdWorkZone,
          WZ.WorkZoneName,
          CONVERT(INT,((SUM(S.TotalWeight) * 100) / SUM(L.Weight))) PercentageZone,
          L.LocCode, LT.LocTypeName, L.CapacityUnit,
          L.Volume, S.TotalVolumen, L.Weight, S.TotalWeight
          FROM WorkZone  WZ
          INNER JOIN WorkZoneLocation WZL ON WZL.IdWorkZone = WZ.IdWorkZone
          INNER JOIN Stock S ON S.IdLocCode = WZL.IdLocCode
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          INNER JOIN LocationType LT ON LT.LocTypeCode = L.LocTypeCode
          WHERE L.LocTypeCode IN('PUT','PICK')
          AND WZ.TypeZone = 1
          AND WZ.IdWhs = @IdWhs
          @SQLPart
          GROUP BY WZ.IdWorkZone, WZ.WorkZoneName, L.LocCode, LT.LocTypeName, L.CapacityUnit,
          L.Volume, S.TotalVolumen, L.Weight, S.TotalWeight
          ORDER BY WZ.WorkZoneName, L.LocCode;
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
        <filters>
          <filter name="WorkZone" type="numericEqual">WZ.IdWorkZone</filter>
        </filters>
      </query>
      
      <query code="GetKpiZoneVolumen">
        <sql>
          SELECT
          WZ.IdWorkZone,
          WZ.WorkZoneName,
          CONVERT(INT,((SUM(S.TotalVolumen) * 100) / SUM(L.Volume))) PercentageZone,
          L.LocCode, LT.LocTypeName, L.CapacityUnit,
          L.Volume, S.TotalVolumen, L.Weight, S.TotalWeight
          FROM WorkZone  WZ
          INNER JOIN WorkZoneLocation WZL ON WZL.IdWorkZone = WZ.IdWorkZone
          INNER JOIN Stock S ON S.IdLocCode = WZL.IdLocCode
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          INNER JOIN LocationType LT ON LT.LocTypeCode = L.LocTypeCode
          WHERE L.LocTypeCode IN('PUT','PICK')
          AND WZ.TypeZone = 1
          AND WZ.IdWhs = @IdWhs
          @SQLPart
          GROUP BY WZ.IdWorkZone, WZ.WorkZoneName, L.LocCode, LT.LocTypeName, L.CapacityUnit,
          L.Volume, S.TotalVolumen, L.Weight, S.TotalWeight
          ORDER BY WZ.WorkZoneName, L.LocCode;
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
        <filters>
          <filter name="WorkZone" type="numericEqual">WZ.IdWorkZone</filter>
        </filters>
      </query>

      <query code="GetKpiZoneDetail">
        <sql>
          SELECT
          WZ.IdWorkZone,
          WZ.WorkZoneName,
          CONVERT(INT,((SUM(S.ItemQty) * 100) / SUM(L.CapacityUnit))) AS PercentageZone,
          L.LocCode,
          LT.LocTypeName,
          S.ItemQty,
          L.CapacityUnit,
          L.Volume,
          S.TotalVolumen,
          L.Weight,
          S.TotalWeight,
          OccupancyQty  = CASE WHEN CONVERT(INT,((SUM(S.ItemQty) * 100) / SUM(L.CapacityUnit))) BETWEEN 0 AND 10 THEN 'VACIA'
          WHEN CONVERT(INT,((SUM(S.ItemQty) * 100) / SUM(L.CapacityUnit))) BETWEEN 11 AND 50 THEN 'MEDIA'
          ELSE 'LLENA'
          END,
          OccupancyVolume = CASE WHEN CONVERT(INT,((SUM(S.TotalVolumen) * 100) / SUM(L.Volume))) BETWEEN 0 AND 10 THEN 'VACIA'
          WHEN CONVERT(INT,((SUM(S.TotalVolumen) * 100) / SUM(L.Volume))) BETWEEN 11 AND 50 THEN 'MEDIA'
          ELSE 'LLENA'
          END,
          OccupancyWeight = CASE WHEN CONVERT(INT,((SUM(S.TotalWeight) * 100) / SUM(L.Weight))) BETWEEN 0 AND 10 THEN 'VACIA'
          WHEN CONVERT(INT,((SUM(S.TotalWeight) * 100) / SUM(L.Weight))) BETWEEN 11 AND 50 THEN 'MEDIA'
          ELSE 'LLENA'
          END
          FROM WorkZone  WZ
          INNER JOIN WorkZoneLocation WZL ON WZL.IdWorkZone = WZ.IdWorkZone
          INNER JOIN Stock S ON S.IdLocCode = WZL.IdLocCode
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          INNER JOIN LocationType LT ON LT.LocTypeCode = L.LocTypeCode
          WHERE L.LocTypeCode IN('PUT','PICK')
          AND WZ.TypeZone = 1
          AND WZ.IdWhs = @IdWhs
          @SQLPart
          GROUP BY WZ.IdWorkZone, WZ.WorkZoneName, L.LocCode, LT.LocTypeName,
          L.Volume, L.Weight,S.ItemQty,L.CapacityUnit,
          S.TotalVolumen,S.TotalWeight
          ORDER BY WZ.WorkZoneName, L.LocCode;
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
        <filters>
          <filter name="WorkZone" type="numericEqual">WZ.IdWorkZone</filter>
        </filters>
      </query>
      
      <query code="GetKpiFillRate">
        <sql>
          SELECT OO.OutboundNumber
          ,OD.LineNumber
          ,SUM(OD.ItemQty) QtyRequested
          ,COALESCE(SUM(DD.ItemQty),0) QtyDispatched
          ,OO.EmissionDate
          ,OO.ExpectedDate
          ,OO.DateCreated
          ,T.CreateDate
          ,DD.DateCreated DateCreatedDetail
          ,OO.CustomerName
          ,CONVERT(INT,(SUM(DD.ItemQty)*100) / COALESCE(SUM(OD.ItemQty),0)) PercentSatisfaction
          ,CONVERT(INT,(SUM(DD.ItemQty) - COALESCE(SUM(OD.ItemQty),0)),0) Delta
          FROM OutboundOrder OO
          --INNER JOIN OutboundTrack OT ON OT.IdOutboundOrder = OO.IdOutboundOrder AND IdTrackOutboundType = 71
          INNER JOIN OutboundDetail OD ON OO.IdOutboundOrder = OD.IdOutboundOrder
          INNER JOIN Dispatch D ON OO.IdOutboundOrder = D.IdOutboundOrder AND D.IdDispatchType = 6
          INNER JOIN DispatchDetail DD ON D.IdDispatch = DD.IdDispatch AND OD.LineNumber = DD.LineNumber AND DD.IdWmsProcessCode = 'SHIPP'
          INNER JOIN Task T ON T.IdDocumentBound = OO.IdOutboundOrder AND T.TaskTypeCode IN('PIKOR','PIKBT','PIKWV','PIKWV','PIKIT','PIUNK','PKLPN')
          WHERE OO.IdWhs = @IdWhs
          @SQLPart
          --AND  OO.CustomerCode = @CustomerCode
          GROUP BY OO.OutboundNumber,OD.LineNumber,OO.EmissionDate
          ,OO.ExpectedDate
          ,OO.DateCreated
          ,T.CreateDate
          ,DD.DateCreated
          ,OO.CustomerName;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">CustomerCode</parameter>
        </parameters>
        <filters>
          <filter name="Customer" type="textEqual">OO.CustomerCode</filter>
          <filter name="Owner" type="numericIn">OO.IdOwn</filter>
        </filters>
      </query>

      <query code="GetKpiLeadTimeHours">
        <sql>
          SELECT OO.OutboundNumber
          ,OD.LineNumber
          ,SUM(OD.ItemQty) QtyRequested
          ,COALESCE(SUM(DD.ItemQty),0) QtyDispatched
          ,OO.EmissionDate
          ,OO.ExpectedDate
          ,OO.DateCreated
          ,T.CreateDate
          ,DD.DateCreated
          ,OO.CustomerName
          ,C.SpecialField1
          ,DATEDIFF(HOUR,OO.EmissionDate,DD.DateCreated) AS Delta
          FROM OutboundOrder OO
          --INNER JOIN OutboundTrack OT ON OT.IdOutboundOrder = OO.IdOutboundOrder AND IdTrackOutboundType = 71
          INNER JOIN OutboundDetail OD ON OO.IdOutboundOrder = OD.IdOutboundOrder
          INNER JOIN Dispatch D ON OO.IdOutboundOrder = D.IdOutboundOrder AND D.IdDispatchType = 6
          INNER JOIN DispatchDetail DD ON D.IdDispatch = DD.IdDispatch AND OD.LineNumber = DD.LineNumber AND DD.IdWmsProcessCode = 'SHIPP'
          INNER JOIN Task T ON T.IdDocumentBound = OO.IdOutboundOrder AND T.TaskTypeCode IN('PIKOR','PIKBT','PIKWV','PIKWV','PIKIT','PIUNK','PKLPN')
          LEFT JOIN Customer C ON OO.CustomerCode = C.CustomerCode
          WHERE OO.IdWhs = @IdWhs
          @SQLPart
          --WHERE EXISTS(SELECT * FROM OutboundTrack OT WHERE OT.IdOutboundOrder = OO.IdOutboundOrder AND IdTrackOutboundType BETWEEN 70 AND 71)
          GROUP BY OO.OutboundNumber,OD.LineNumber,OO.EmissionDate
          ,OO.ExpectedDate
          ,OO.DateCreated
          ,T.CreateDate
          ,DD.DateCreated
          ,OO.CustomerName
          ,C.SpecialField1;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="Int">IdWhs</parameter>
    </parameters>
    <filters>
      <filter name="Customer" type= "textEqual">C.SpecialField1</filter>
      <filter name="Owner" type="numericIn">OO.IdOwn</filter>
    </filters>
    </query>

      <query code="GetKpiLeadTimeDays">
        <sql>
          SELECT OO.OutboundNumber
          ,OD.LineNumber
          ,SUM(OD.ItemQty) QtyRequested
          ,COALESCE(SUM(DD.ItemQty),0) QtyDispatched
          ,OO.EmissionDate
          ,OO.ExpectedDate
          ,OO.DateCreated
          ,T.CreateDate
          ,DD.DateCreated DateCreatedDetail
          ,OO.CustomerName
          ,C.SpecialField1
          ,DATEDIFF(DAY,OO.EmissionDate,DD.DateCreated) AS Delta
          FROM OutboundOrder OO
          --INNER JOIN OutboundTrack OT ON OT.IdOutboundOrder = OO.IdOutboundOrder AND IdTrackOutboundType = 71
          INNER JOIN OutboundDetail OD ON OO.IdOutboundOrder = OD.IdOutboundOrder
          INNER JOIN Dispatch D ON OO.IdOutboundOrder = D.IdOutboundOrder AND D.IdDispatchType = 6
          INNER JOIN DispatchDetail DD ON D.IdDispatch = DD.IdDispatch AND OD.LineNumber = DD.LineNumber AND DD.IdWmsProcessCode = 'SHIPP'
          INNER JOIN Task T ON T.IdDocumentBound = OO.IdOutboundOrder AND T.TaskTypeCode IN('PIKOR','PIKBT','PIKWV','PIKWV','PIKIT','PIUNK','PKLPN')
          LEFT JOIN Customer C ON OO.CustomerCode = C.CustomerCode
          WHERE OO.IdWhs = @IdWhs
          @SQLPart
          --WHERE EXISTS(SELECT * FROM OutboundTrack OT WHERE OT.IdOutboundOrder = OO.IdOutboundOrder AND IdTrackOutboundType BETWEEN 70 AND 71)
          GROUP BY OO.OutboundNumber,OD.LineNumber,OO.EmissionDate
          ,OO.ExpectedDate
          ,OO.DateCreated
          ,T.CreateDate
          ,DD.DateCreated
          ,OO.CustomerName
          ,C.SpecialField1;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
        <filters>
          <filter name="Customer" type="textEqual">C.SpecialField1</filter>
          <filter name="Owner" type="numericIn">OO.IdOwn</filter>
        </filters>
      </query>

    <query code="GetKpiInfoDashboard">
      <sql>
		  SELECT COUNT(DISTINCT(O.IdOutboundOrder)) AS Total,
		  'TotalPedidos' AS Type,
		  1 AS IsComplete
		  FROM OutboundOrder O
		  JOIN OutboundType OT
		  ON OT.IdOutboundType = O.IdOutboundType
		  @SQLPart
		  AND OT.OutboudTypeCode &lt;&gt; 'PIKWV'

		  UNION ALL

		  SELECT   COUNT(O.IdOutboundOrder) AS Total,
		  'PedidosPendientes' AS Type,
		  1 AS IsComplete
		  FROM OutboundOrder O
		  JOIN v_Oub_LatestTrack TRA
		  ON O.IdOutboundOrder = TRA.IdOutboundOrder
		  @SQLPart
		  AND TRA.IdTrackOutboundType = 1
		  GROUP BY TRA.IdTrackOutboundType

		  UNION ALL

		  SELECT COUNT(O.IdOutboundOrder) AS Total,
		  'PedidosLiberados' AS Type,
		  1 AS IsComplete
		  FROM OutboundOrder O
		  JOIN OutboundTrack TRA
		  ON O.IdOutboundOrder = TRA.IdOutboundOrder
		  @SQLPart
		  AND TRA.IdTrackOutboundType = 9
		  GROUP BY TRA.IdTrackOutboundType

		  UNION ALL

		  SELECT COUNT(O.IdOutboundOrder) AS Total,
		  'Picking' AS Type,
		  T.IsComplete
		  FROM Task T
		  JOIN OutboundOrder O
		  ON T.IdDocumentBound = O.IdOutboundOrder
		  JOIN OutboundTrack TRA
		  ON O.IdOutboundOrder = TRA.IdOutboundOrder
		  @SQLPart
		  AND TRA.IdTrackOutboundType = 11
		  AND T.TaskTypeCode IN ('PIKOR', 'PIKBT', 'PIKPS', 'PIKIT', 'PIKVA', 'PKLPN')
		  GROUP BY TRA.IdTrackOutboundType,
		  T.IsComplete

		  UNION ALL

		  SELECT COUNT(O.IdOutboundOrder) AS Total,
		  'PickingOla' AS Type,
		  T.IsComplete
		  FROM Task T
		  JOIN OutboundOrder O
		  ON T.IdDocumentBound = O.IdOutboundOrder
		  JOIN OutboundTrack TRA
		  ON O.IdOutboundOrder = TRA.IdOutboundOrder
		  @SQLPart
		  AND TRA.IdTrackOutboundType = 11
		  AND T.TaskTypeCode = 'PIKWV'
		  GROUP BY TRA.IdTrackOutboundType,
		  T.IsComplete

		  UNION ALL

		  SELECT COUNT(O.IdOutboundOrder) AS Total,
		  'Packing' AS Type,
		  T.IsComplete
		  FROM Task T
		  JOIN OutboundOrder O
		  ON T.IdDocumentBound = O.IdOutboundOrder
		  JOIN OutboundTrack TRA
		  ON O.IdOutboundOrder = TRA.IdOutboundOrder
		  @SQLPart
		  AND TRA.IdTrackOutboundType = 21
		  AND T.TaskTypeCode = 'PAKOR'
		  GROUP BY TRA.IdTrackOutboundType,
		  T.IsComplete

		  UNION ALL

		  SELECT COUNT(O.IdOutboundOrder) AS Total,
		  'Despacho' AS Type,
		  1 AS IsComplete
		  FROM OutboundOrder O
		  JOIN OutboundTrack TRA
		  ON O.IdOutboundOrder = TRA.IdOutboundOrder
		  @SQLPart
		  AND TRA.IdTrackOutboundType = 71
		  GROUP BY TRA.IdTrackOutboundType

		  UNION ALL

		  SELECT  COUNT(O.IdOutboundOrder) AS Total,
		  'Distribucion' AS Type,
		  T.IsComplete
		  FROM Task T
		  JOIN OutboundOrder O
		  ON T.IdDocumentBound = O.IdOutboundOrder
		  JOIN OutboundTrack TRA
		  ON O.IdOutboundOrder = TRA.IdOutboundOrder
		  @SQLPart
		  AND TRA.IdTrackOutboundType = 15
		  AND T.TaskTypeCode = 'SORT'
		  GROUP BY TRA.IdTrackOutboundType,
		  T.IsComplete
	  </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>     
      </parameters>
      <filters>
        <filter name="DateRange" type="textBetween">EmissionDate</filter>
        <filter name="Owner" type="numericIn">O.IdOwn</filter>
        <filter name="Warehouse" type="numericIn">O.IdWhs</filter>
      </filters>
    </query>

    <query code="GetKpiInfoDashboardByTasks">
      <sql>
        SELECT COUNT(DISTINCT(T.IdTask)) AS Total,
              'Reposicion' AS Type,
              T.IsComplete
         FROM Task T
         JOIN TaskType TT
           ON T.TaskTypeCode = TT.TaskTypeCode
              @SQLPart 
          AND TT.TaskTypeCode = 'REPL'
     GROUP BY TT.TaskTypeCode,
              T.IsComplete
              
         UNION ALL
        
        SELECT COUNT(DISTINCT(T.IdTask)) AS Total,
              'Almacenamiento' AS Type,
              T.IsComplete
         FROM Task T
         JOIN TaskType TT
           ON T.TaskTypeCode = TT.TaskTypeCode
              @SQLPart 
          AND TT.TaskTypeCode = 'PUT'
     GROUP BY TT.TaskTypeCode,
              T.IsComplete
              
         UNION ALL
        
        SELECT SUM(Q.Total) AS Total,
               Q.Type,
	             Q.IsComplete
         FROM (
                    SELECT COUNT(DISTINCT(T.IdTask)) AS Total,
                          'Ajuste' AS Type,
                          T.IsComplete
                     FROM Task T
                     JOIN TaskType TT
                       ON T.TaskTypeCode = TT.TaskTypeCode
                          @SQLPart 
                      AND TT.TaskTypeCode IN ('CCNT', 'CCLOC', 'AJU')
                 GROUP BY TT.TaskTypeCode,
                          T.IsComplete
               ) Q
      GROUP BY Q.Type,
		           Q.IsComplete
              
         UNION ALL
        
        SELECT COUNT(DISTINCT(T.IdTask)) AS Total,
              'MovimientoDirigido' AS Type,
              T.IsComplete
         FROM Task T
         JOIN TaskType TT
           ON T.TaskTypeCode = TT.TaskTypeCode
              @SQLPart 
          AND TT.TaskTypeCode = 'MDLPN'
     GROUP BY TT.TaskTypeCode,
              T.IsComplete       
        
        UNION ALL
        
        SELECT COUNT(DISTINCT(T.IdDocumentBound)) AS Total,
              'Ruteo' AS Type,
              T.IsComplete
         FROM Task T
         JOIN TaskType TT
           ON T.TaskTypeCode = TT.TaskTypeCode
              @SQLPart 
          AND TT.TaskTypeCode = 'RUTEO'
     GROUP BY TT.TaskTypeCode,
              T.IsComplete
        
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="DateRange" type="textBetween">T.DateCreated</filter>
        <filter name="Owner" type="numericIn">T.IdOwn</filter>
        <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
      </filters>
    </query>
  
      <!---->
      
      <!--TemplateLineRole-->
      <query code="TemplateLineRole_FindAll">
        <sql>
          SELECT IdTemplateLineRole
                ,IdTemplateLine
                ,IdRole
          FROM dbo.CfgTemplateLineRole
        </sql>
        <parameters>
        </parameters>
      </query>

      <query code="TemplateLineRole_FindIdRole">
        <sql>
          SELECT IdTemplateLineRole
          ,IdTemplateLine
          ,IdRole
          FROM dbo.CfgTemplateLineRole
          WHERE IdRole = @idRole
        </sql>
        <parameters>
          <parameter type="Int">idRole</parameter>
        </parameters>
      </query>
  
      <query code="TemplateLineRole_FindIdRoleAndIdTemplateLine">
        <sql>
          SELECT IdTemplateLineRole
          ,IdTemplateLine
          ,IdRole
          FROM dbo.CfgTemplateLineRole
          WHERE IdRole = @idRole
          AND IdTemplateLine = @idTemplateLine
        </sql>
        <parameters>
          <parameter type="Int">idRole</parameter>
          <parameter type="Int">idTemplateLine</parameter>
        </parameters>
      </query>
      
      <query code="TemplateLineRole_Insert">
        <sql>
          INSERT INTO dbo.CfgTemplateLineRole
          (IdTemplateLineRole
          ,IdTemplateLine
          ,IdRole)
          values (
          @idTemplateLineRole,
          @idTemplateLine,
          @idRole)
        </sql>
        <parameters>
          <parameter type="Int">idTemplateLineRole</parameter>
          <parameter type="Int">idTemplateLine</parameter>
          <parameter type="Int">idRole</parameter>
        </parameters>
      </query>

      <query code="TemplateLineRole_Delete">
        <sql>
          DELETE
          FROM dbo.CfgTemplateLineRole
          WHERE IdTemplateLineRole = @idTemplateLineRole
        </sql>
        <parameters>
          <parameter type="Int">idTemplateLineRole</parameter>
        </parameters>
      </query>
  
      <query code="TemplateLineRole_DeleteByIdRole">
        <sql>
          DELETE
          FROM dbo.CfgTemplateLineRole
          WHERE IdRole = @idRole
        </sql>
        <parameters>
          <parameter type="Int">idRole</parameter>
        </parameters>
      </query>
      <!---->


      <query code="GetQtyLPNStockByAnden">
        <sql>
          SELECT	L.IdLocCode,
          L.CapacityLPN,
          (SELECT COUNT(DISTINCT S.IdLpnCode)
          FROM Stock S
          WHERE S.IdLocCode = L.IdLocCode
          AND S.IdWhs = L.IdWhs) AS NroLpns
          FROM Location L
          WHERE L.LocTypeCode = 'STGD'
          AND L.IdWhs = @idWhs
        </sql>
        <parameters>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="TaskOutboundOrder_Delete">
        <sql>
          DELETE TaskOutboundOrder
          WHERE IdTask = @IdTask
          AND IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdTask</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="TaskOutboundOrder_DeleteByIdTask">
        <sql>
          DELETE TaskOutboundOrder
           WHERE IdTask = @IdTask
        </sql>
        <parameters>
          <parameter type="Int">IdTask</parameter>
        </parameters>
      </query>

      <query code="TaskOutboundOrder_FindAll">
        <sql>
          SELECT  IdTask,
                  IdOutboundOrder,
                  IdOutboundDetail
          FROM TaskOutboundOrder
          WHERE IdOutboundOrder = @IdOutboundOrder;
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
        
      </query>
  
      <query code="TaskOutboundOrder_GetByAnyParameter">
        <sql>
          SELECT  IdTask,
          IdOutboundOrder,
          IdOutboundDetail
          FROM TaskOutboundOrder
          WHERE 1=1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdTask" type="numericEqual">IdTask</filter>
          <filter name="IdOutboundOrder" type="numericEqual">IdOutboundOrder</filter>
          <filter name="IdOutboundDetail" type="numericEqual">IdOutboundDetail</filter>
        </filters>
      </query>
  
      <query code="GetOutboundOrdersFromWave">
        <sql>
          SELECT  DISTINCT(IdOutboundOrder) AS IdOutboundOrder,
                  T.IdTask
             FROM Task T
             JOIN TaskOutboundOrder TOO
               ON T.IdTask = TOO.IdTask
            WHERE T.TaskTypeCode = 'PIKWV'
              AND T.IdOwn = @idOwn 
              AND T.IdWhs = @idWhs
              AND T.IdDocumentBound = @idWave
        </sql>
        <parameters>
          <parameter type="Int">idOwn</parameter>
          <parameter type="Int">idWhs</parameter>
          <parameter type="Int">idWave</parameter>
        </parameters>
      </query>


      <query code="GetLocationByCodeAndOwnerFilter">
        <sql>
          SELECT l.IdLocCode, l.LocCode,
          l.Status, l.LocTypeCode,
          lp.LocTypeName,
          l.RowLoc, l.ColumnLoc,
          l.LevelLoc, l.Aisle,
          l.Description, l.SharedItem,
          l.OnlyLPN, l.PickingFlow,
          l.PutawayFlow, l.IdWhs
          FROM dbo.Location l INNER JOIN
          dbo.LocationType lp ON l.LocTypeCode = lp.LocTypeCode
          WHERE l.LocTypeCode = 'PICK'
          AND l.Status = 1
          AND l.IdLocCode LIKE @code
          AND l.LocCode LIKE @name
          AND l.IdWhs = @idWhs
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="GetLocationByCodeAndOwnerFilterWithOutStock">
        <sql>
          SELECT l.IdLocCode, l.LocCode,
          l.Status, l.LocTypeCode,
          lp.LocTypeName,
          l.RowLoc, l.ColumnLoc,
          l.LevelLoc, l.Aisle,
          l.Description, l.SharedItem,
          l.OnlyLPN, l.PickingFlow,
          l.PutawayFlow, l.IdWhs
          FROM dbo.Location l INNER JOIN
          dbo.LocationType lp ON l.LocTypeCode = lp.LocTypeCode
          WHERE l.LocTypeCode = 'PICK'
          AND NOT EXISTS (SELECT * FROM STOCK WHERE IdLocCode = l.IdLocCode AND IdWhs = l.IdWhs)
          AND l.Status = 1
          AND l.IdLocCode LIKE @code
          AND l.LocCode LIKE @name
          AND l.IdWhs = @idWhs
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="GetLocationByFilterItemsAndEntityFilter">
        <sql>
          SELECT l.IdLocCode, l.LocCode,
          l.Status, l.LocTypeCode,
          lp.LocTypeName,
          l.RowLoc, l.ColumnLoc,
          l.LevelLoc, l.Aisle,
          l.Description, l.SharedItem,
          l.OnlyLPN, l.PickingFlow,
          l.PutawayFlow, l.IdWhs
          FROM dbo.Location l INNER JOIN
          dbo.LocationType lp ON l.LocTypeCode = lp.LocTypeCode
          WHERE l.Status = 1
          AND l.IdLocCode LIKE @code
          AND l.LocCode LIKE @name
          @SQLPart;
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericEqual">l.IdWhs</filter>
          <filter name="LocationType" type="textIn">l.LocTypeCode</filter>
        </filters>
      </query>

    <query code="GetLocationNotBlockedByFilterItemsAndEntityFilter">
      <sql>
        SELECT Distinct l.IdLocCode, l.LocCode,
        l.Status, l.LocTypeCode,
        lp.LocTypeName,
        l.RowLoc, l.ColumnLoc,
        l.LevelLoc, l.Aisle,
        l.Description, l.SharedItem,
        l.OnlyLPN, l.PickingFlow,
        l.PutawayFlow, l.IdWhs
        FROM dbo.Location l INNER JOIN
        dbo.LocationType lp ON l.LocTypeCode = lp.LocTypeCode INNER JOIN
        dbo.Stock s ON s.IdLocCode = l.IdLocCode
          AND s.IdWhs = l.IdWhs
          AND s.ReasonCode IS NULL
          AND s.HoldCode IS NULL
        WHERE l.Status = 1
        AND l.IdLocCode LIKE @code
        AND l.LocCode LIKE @name
        @SQLPart;
      </sql>
      <parameters>
        <parameter type="String">code</parameter>
        <parameter type="String">name</parameter>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="Warehouse" type="numericEqual">l.IdWhs</filter>
        <filter name="LocationType" type="textIn">l.LocTypeCode</filter>
      </filters>
    </query>

    <query code="GetLocationNotExistsStockByFilterItemsAndEntityFilter">
      <sql>
        SELECT Distinct l.IdLocCode, l.LocCode,
        l.Status, l.LocTypeCode,
        lp.LocTypeName,
        l.RowLoc, l.ColumnLoc,
        l.LevelLoc, l.Aisle,
        l.Description, l.SharedItem,
        l.OnlyLPN, l.PickingFlow,
        l.PutawayFlow, l.IdWhs
        FROM dbo.Location l INNER JOIN
        dbo.LocationType lp ON l.LocTypeCode = lp.LocTypeCode
        WHERE l.Status = 1
        AND NOT EXISTS (SELECT 1 FROM Stock s
                        WHERE s.IdLocCode = l.IdLocCode
                        AND s.IdWhs = l.IdWhs)
        AND l.IdLocCode LIKE @code
        AND l.LocCode LIKE @name
        @SQLPart;
      </sql>
      <parameters>
        <parameter type="String">code</parameter>
        <parameter type="String">name</parameter>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="Warehouse" type="numericEqual">l.IdWhs</filter>
        <filter name="LocationType" type="textIn">l.LocTypeCode</filter>
      </filters>
    </query>
  
  <query code="Stock_FindAllByAnyParameter">
    <sql>
      SELECT
      S.StockId,
      S.IdWhs,
      S.IdOwn,
      S.IdLocCode,
      S.IdItem,
      I.ShortItemName,
      S.IdCtgItem,
      S.ItemQty,
      S.TotalWeight,
      S.TotalVolumen,
      S.Status,
      S.FifoDate,
      S.ExpirationDate,
      S.FabricationDate,
      S.LotNumber,
      S.IdLpnCode,
      S.LpnTypeCode,
      S.IdLpnCodeContainer,
      S.LpnTypeCodeContainer,
      S.Price,
      S.IdReceipt,
      S.IdInboundOrder,
      S.InboundLineNumber,
      S.IdOutboundOrder,
      S.OutboundLineNumber,
      S.SealNumber,
      S.ReasonCode,
      S.HoldCode,
      S.IdInboundOrder,
      S.InboundLineNumber,
      S.IdOutboundOrder,
      S.OutboundLineNumber,
      L.IdWhs,
      L.LocCode,
      L.Status,
      L.LocTypeCode,
      L.CapacityLPN,
      L.CapacityUnit,
      L.Length,
      L.Width,
      L.Height,
      L.Volume,
      L.Weight,
      LP.IdLpnCode,
      LP.FifoDate,
      LP.IdLpnType,
      LP.Status,
      LPT.WeightCapacity,
      LPT.VolumeCapacity
      FROM Stock S
      INNER JOIN Item I
      ON S.IdItem = I.IdItem
      INNER JOIN Location L
      ON L.IdLocCode = S.IdLocCode
      LEFT JOIN LPN LP
      ON LP.IdLpnCode = S.IdLpnCode
      LEFT JOIN LPNType LPT
      ON LP.IdLpnType = LPT.IdLpnType
      WHERE 1=1
      @SQLPart
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="WhId" type="numericEqual">S.IdWhs</filter>
      <filter name="IdOwn" type="numericEqual">S.IdOwn</filter>
      <filter name="IdLocCode" type="textEqual">S.IdLocCode</filter>
      <filter name="IdLpnCode" type="textEqual">S.IdLpnCode</filter>
      <filter name="IdItem" type="numericEqual">S.IdItem</filter>
      <filter name="Lote" type="textEqual">S.LotNumber</filter>
      <filter name="IdCategory" type="numericEqual">S.IdCtgItem</filter>
      <filter name="ExpirationDate" type="textEqual">S.ExpirationDate</filter>
      <filter name="FabricationDate" type="textEqual">S.FabricationDate</filter>
      <filter name="FifoDate" type="textEqual">S.FifoDate</filter>
      <filter name="IdOutboundOrder" type="numericEqual">S.IdOutboundOrder</filter>
      <filter name="IdInboundOrder" type="numericEqual">S.IdInboundOrder</filter>
    </filters>
  </query>


  <query code="GetStockConsultTaskByParameters">
    <sql>
      SELECT
      A.IdWhs,
      A.IdOwn,
      A.ItemQtyStock,
      COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
      FROM v_Other_LocationPicking AS OLP
      WHERE A.IdItem = OLP.IdItem
      AND A.IdLocCode = OLP.IdLocSourceProposal
      AND A.IdWhs = OLP.IdWhs
      AND ((@idCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL)
      OR(@idCtgItem IS NULL)
      OR(OLP.IdCtgItem IS NULL))
      AND ((@lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL)
      OR(@lotNumber IS NULL)
      OR(OLP.LotNumber IS NULL))
      AND ((@fifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL)
      OR(@fifoDate IS NULL)
      OR(OLP.FifoDate IS NULL))
      AND ((@fabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL)
      OR(@fabricationDate IS NULL)
      OR(OLP.FabricationDate IS NULL))
      AND ((@expirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND @expirationDate IS NOT NULL)
      OR(@expirationDate IS NULL)
      OR(OLP.expirationDate IS NULL))
      ),0) AS ItemQtyTask,
      (A.ItemQtyStock - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
      FROM v_Other_LocationPicking AS OLP
      WHERE A.IdItem = OLP.IdItem
      AND A.IdLocCode = OLP.IdLocSourceProposal
      AND A.IdWhs = OLP.IdWhs
      AND ((@idCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL)
      OR(@idCtgItem IS NULL)
      OR(OLP.IdCtgItem IS NULL))
      AND ((@lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL)
      OR(@lotNumber IS NULL)
      OR(OLP.LotNumber IS NULL))
      AND ((@fifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL)
      OR(@fifoDate IS NULL)
      OR(OLP.FifoDate IS NULL))
      AND ((@fabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL)
      OR(@fabricationDate IS NULL)
      OR(OLP.FabricationDate IS NULL))
      AND ((@expirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND @expirationDate IS NOT NULL)
      OR(@expirationDate IS NULL)
      OR(OLP.expirationDate IS NULL))
      ),0) ) AS ItemQtyDisp,
      A.IdItem,
      A.IdLpnCode
      FROM(
      SELECT
      S.IdWhs,
      S.IdOwn,
      SUM(S.ItemQty) AS ItemQtyStock,
      S.IdItem,
      S.IdLpnCode,
      S.IdLocCode
      FROM Stock S
      INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
      INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
      INNER JOIN Item I ON I.IdItem = S.IdItem
      WHERE S.IdWhs = L.IdWhs
      --AND L.LocTypeCode = 'PICK'
      AND (L.HoldCode IS NULL OR L.HoldCode = 'LBUSY')
      AND L.Status = 1
      --AND S.HoldCode IS NULL
      AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
      AND S.IdLocCode = @idLocCode
      AND S.IdItem = @idItem
      AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
      AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
      AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
      AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
      AND ((S.ExpirationDate = @expirationDate AND @expirationDate IS NOT NULL)OR(@expirationDate IS NULL))
      AND S.IdWhs = @idWhs
      AND S.IdOwn = @idOwn
      GROUP BY S.IdWhs, S.IdOwn,  S.IdItem, S.IdLpnCode, S.IdLocCode) A
    </sql>
    <parameters>
      <parameter type="String">idLocCode</parameter>
      <parameter type="String">idItem</parameter>
      <parameter type="Int">idCtgItem</parameter>
      <parameter type="String">lotNumber</parameter>
      <parameter type="DateTime">fifoDate</parameter>
      <parameter type="DateTime">fabricationDate</parameter>
      <parameter type="DateTime">expirationDate</parameter>
      <parameter type="String">idWhs</parameter>
      <parameter type="String">idOwn</parameter>
    </parameters>
    <filters>      
    </filters>
  </query>

  
  <!--Start... CustomRuleItem-->
  <query code="CustomRuleItem_Delete">
    <sql>
      DELETE FROM CustomRuleItem
      WHERE IdCustomRuleItem = @IdCustomRule
    </sql>
    <parameters>
      <parameter type="Int">IdCustomRule</parameter>
    </parameters>
  </query>

  <query code="CustomRuleItem_Insert">
    <sql>
      INSERT INTO CustomRuleItem
      (IdCustomRule,
      IdItem)
      VALUES
      (@IdCustomRule, 
      @IdItem)
    </sql>
    <parameters>
      <parameter type="Int">IdCustomRule</parameter>
      <parameter type="Int">IdItem</parameter>      
    </parameters>
  </query>

  <query code="CustomRuleItem_Insert">
    <sql>
      INSERT INTO CustomRuleItem
      (IdCustomRule,
      IdItem)
      VALUES
      (@IdCustomRule,
      @IdItem)
    </sql>
    <parameters>
      <parameter type="Int">IdCustomRule</parameter>
      <parameter type="Int">IdItem</parameter>
    </parameters>
  </query>

  <query code="CustomRuleItem_InsertByIgGroups">
    <sql>
      INSERT INTO CustomRuleItem (IdCustomRule, IdItem)
      SELECT @IdCustomRule, IdItem
      FROM Item I
      WHERE ((I.IdGrpItem1 = @idGrpItem1 AND @idGrpItem1 &lt;&gt; -2) OR (@idGrpItem1 = -2))
        AND ((I.IdGrpItem2 = @idGrpItem2 AND @idGrpItem2 &lt;&gt; -2) OR (@idGrpItem2 = -2))
        AND ((I.IdGrpItem3 = @idGrpItem3 AND @idGrpItem3 &lt;&gt; -2) OR (@idGrpItem3 = -2))
        AND ((I.IdGrpItem4 = @idGrpItem4 AND @idGrpItem4 &lt;&gt; -2) OR (@idGrpItem4 = -2))
        AND ((I.IdOwn = @idOwn AND @idOwn &lt;&gt; -2) OR (@idOwn = -2))
    </sql>
    <parameters>
      <parameter type="Int">idCustomRule</parameter>
      <parameter type="Int">idGrpItem1</parameter>
      <parameter type="Int">idGrpItem2</parameter>
      <parameter type="Int">idGrpItem3</parameter>
      <parameter type="Int">idGrpItem4</parameter>
      <parameter type="Int">idOwn</parameter>
    </parameters>
  </query>

  <query code="CustomRuleItem_DeleteByIgGroups">
    <sql>
      DELETE FROM CustomRuleItem
      WHERE IdCustomRule = @idCustomRule
      AND EXISTS (
      SELECT 1
      FROM Item I
      WHERE I.IdItem = CustomRuleItem.IdItem
      AND ((I.IdGrpItem1 = @idGrpItem1 AND @idGrpItem1 &lt;&gt; -2) OR (@idGrpItem1 = -2))
      AND ((I.IdGrpItem2 = @idGrpItem2 AND @idGrpItem2 &lt;&gt; -2) OR (@idGrpItem2 = -2))
      AND ((I.IdGrpItem3 = @idGrpItem3 AND @idGrpItem3 &lt;&gt; -2) OR (@idGrpItem3 = -2))
      AND ((I.IdGrpItem4 = @idGrpItem4 AND @idGrpItem4 &lt;&gt; -2) OR (@idGrpItem4 = -2))
      AND ((I.IdOwn = @idOwn AND @idOwn &lt;&gt; -2) OR (@idOwn = -2)))
    </sql>
    <parameters>
      <parameter type="Int">idCustomRule</parameter>
      <parameter type="Int">idGrpItem1</parameter>
      <parameter type="Int">idGrpItem2</parameter>
      <parameter type="Int">idGrpItem3</parameter>
      <parameter type="Int">idGrpItem4</parameter>
      <parameter type="Int">idOwn</parameter>
    </parameters>
  </query>

  <query code="CustomRuleItem_InsertAll">
    <sql>
      INSERT INTO CustomRuleItem (IdCustomRule, IdItem)
      SELECT @IdCustomRule, IdItem
      FROM Item I
    </sql>
    <parameters>
      <parameter type="Int">idCustomRule</parameter>
    </parameters>
  </query>

  <query code="CustomRuleItem_DeleteAll">
    <sql>
      DELETE FROM CustomRuleItem
      WHERE IdCustomRule = @idCustomRule
    </sql>
    <parameters>
      <parameter type="Int">idCustomRule</parameter>
    </parameters>
  </query>
  <!--End... CustomRuleItem-->
  
  
  <!-- Start.. Release For LPN-->
  <query code="GetLpnByIdOutboundOrderIdWhsIdOwnAndEntityFilter">
    <sql>
      SELECT DISTINCT tmp.IdLpnCode, tmp.IdLocCode,
                      tmp.IdWhs, tmp.IdOwn, tmp.LocTypeCode, tmp.LocTypeName,
                      tmp.IdCtgItem,
                      tmp.LotNumber,
                      tmp.FifoDate,
                      tmp.ExpirationDate,
                      tmp.FabricationDate
      FROM (
            SELECT s.IdLpnCode, s.IdLocCode, od.IdOutboundOrder,
                   s.IdWhs, s.IdOwn, l.LocTypeCode, lt.LocTypeName,
                   s.IdCtgItem,
                   s.LotNumber,
                   s.FifoDate,
                   s.ExpirationDate,
                   s.FabricationDate
            FROM (SELECT S1.IdItem, S1.IdLocCode, S1.IdLpnCode, S1.IdOwn, S1.IdWhs,
                         S1.IdCtgItem,
						             S1.LotNumber,
						             S1.FifoDate,
						             S1.ExpirationDate,
						             S1.FabricationDate,
                         SUM(S1.ItemQty)AS ItemQty
                    FROM Stock S1
                    WHERE NOT EXISTS(SELECT  1 FROM Stock S2
                                              WHERE S2.IdWhs = S1.IdWhs
                                                AND S2.IdOwn = S1.IdOwn
                                                AND S2.IdLpnCode = S1.IdLpnCode
                                                AND S2.IdLocCode = S1.IdLocCode
                                                AND S2.HoldCode IS NOT NULL)
                    GROUP BY S1.IdItem,S1.IdLocCode,S1.IdLpnCode,S1.IdOwn, S1.IdWhs,
                             S1.IdCtgItem,
                             S1.LotNumber,
                             S1.FifoDate,
                             S1.ExpirationDate,
                             S1.FabricationDate
                    ) s

      INNER JOIN OutboundDetail od 
              ON od.IdItem = s.IdItem
             AND ((s.lotNumber = od.LotNumber AND od.LotNumber IS NOT NULL AND s.LotNumber IS NOT NULL)
	                 OR(s.lotNumber IS NULL)
	                 OR(od.LotNumber IS NULL))
             AND ((s.ExpirationDate = od.ExpirationDate AND od.ExpirationDate IS NOT NULL AND s.ExpirationDate IS NOT NULL)
	                 OR(s.ExpirationDate IS NULL)
	                 OR(od.ExpirationDate IS NULL))
	           AND ((s.FabricationDate = od.FabricationDate AND od.FabricationDate IS NOT NULL AND s.FabricationDate IS NOT NULL)
	                 OR(s.FabricationDate IS NULL)
	                 OR(od.FabricationDate IS NULL))
             AND ((s.FifoDate = od.FifoDate AND od.FifoDate IS NOT NULL AND s.FifoDate IS NOT NULL)
	                 OR(s.FifoDate IS NULL)
	                 OR(od.FifoDate IS NULL))
             AND ((s.IdCtgItem = od.IdCtgItem AND od.IdCtgItem IS NOT NULL AND s.IdCtgItem IS NOT NULL)
	                 OR(s.IdCtgItem IS NULL)
	                 OR(od.IdCtgItem IS NULL))             
             AND od.ItemQty >= s.ItemQty
      INNER JOIN Location L
              ON l.IdLocCode = s.IdLocCode
             AND l.OnlyLPN = 1
             AND l.LocTypeCode IN ('PUT','PICK')
      INNER JOIN LocationType lt on l.LocTypeCode = lt.LocTypeCode
           WHERE od.IdOutboundOrder = @idOutboundOrder
             AND s.IdWhs = @idWhs
             AND s.IdOwn = @idOwn
      ) tmp
      WHERE  (
          SELECT COUNT(s1.IdItem)
            from Stock s1
            where NOT EXISTS (SELECT 1 FROM OutboundDetail od1
                                      WHERE s1.IdItem = od1.IdItem
                                        AND od1.IdOutboundOrder =  tmp.IdOutboundOrder )
                                        AND s1.IdWhs = tmp.IdWhs
                                        AND s1.IdOwn = tmp.IdOwn
                                        AND s1.IdLpnCode = tmp.IdLpnCode
      ) = 0
      AND NOT EXISTS (SELECT 1 FROM Task t 
                         INNER JOIN TaskDetail td ON t.IdTask = td.IdTask
                              WHERE t.IdWhs = tmp.IdWhs
                                AND t.IdOwn = tmp.IdOwn
                                AND td.IdLpnSourceProposal = tmp.IdLpnCode
                                AND t.IsComplete = 0
                                AND td.IsComplete = 0)
      @SQLPart;
    </sql>
    <parameters>
      <parameter type="Int">idOutboundOrder</parameter>
      <parameter type="Int">idWhs</parameter>
      <parameter type="Int">idOwn</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="LpnCode" type="textLike">tmp.IdLpnCode</filter>
      <filter name="IdCtgItem" type="numericEqual">tmp.IdCtgItem</filter>
      <filter name="LotNumber" type="textEqual">tmp.LotNumber</filter>
      <filter name="FifoDate" type="textEqual">tmp.FifoDate</filter>
      <filter name="ExpirationDate" type="textEqual">tmp.ExpirationDate</filter>
      <filter name="FabricationDate" type="textEqual">tmp.FabricationDate</filter>
    </filters>
  </query>
  <!-- End.. Release For LPN-->
  
  <!--VAS SECTION-->
  <query code="GetVasByItemAndOwn">
    <sql>
      SELECT V.IdVas,
      V.IdOwn,
      V.VasName,
      V.VasDescription,
      V.Status,
      IV.Secuence
      FROM Vas V
      INNER JOIN ItemVas IV ON IV.IdVas = V.IdVas
      WHERE IV.IdItem = @idItem
      AND V.IdOwn = @idOwn
      ORDER BY IV.Secuence ASC
    </sql>
    <parameters>
      <parameter type="Int">idItem</parameter>
      <parameter type="Int">idOwn</parameter>
    </parameters>
  </query>
  <query code="GetVasByNameAndOwn">
    <sql>
      SELECT V.IdVas,
      V.IdOwn,
      V.VasName,
      V.VasDescription,
      V.Status
      FROM Vas V
      WHERE V.VasName = @name
      AND V.IdOwn = @idOwn
    </sql>
    <parameters>
      <parameter type="Text">name</parameter>
      <parameter type="Int">idOwn</parameter>
    </parameters>
  </query>
  
    <query code="GetVasByNameAndOwnAndCustomer">
    <sql>
      SELECT V.IdVas,
      V.IdOwn,
      V.VasName,
      V.VasDescription,
      V.Status,
      V.IdCustomer
      FROM Vas V
      WHERE V.VasName = @name
      AND V.IdOwn = @idOwn
      AND V.IdCustomer = @idCustomer
    </sql>
    <parameters>
      <parameter type="Text">name</parameter>
      <parameter type="Int">idOwn</parameter>
      <parameter type="Int">idCustomer</parameter>
    </parameters>
  </query>
  <query code="GetNextVasByCurrentItemAndOwn">
    <sql>
      SELECT V.IdVas,
      V.IdOwn,
      V.VasName,
      V.VasDescription,
      V.Status,
      IV.Secuence
      FROM Vas V
      INNER JOIN ItemVas IV ON IV.IdVas = V.IdVas
      WHERE IV.IdItem = @idItem
      AND V.IdOwn = @idOwn
      AND IV.Secuence > @secuence
      ORDER BY IV.Secuence ASC
    </sql>
    <parameters>
      <parameter type="Int">idItem</parameter>
      <parameter type="Int">idOwn</parameter>
      <parameter type="Int">secuence</parameter>
    </parameters>
  </query>
  <query code="Vas_FindAll">
    <sql>
      SELECT V.IdVas,
      V.IdOwn,
      O.OwnCode,
      O.OwnName,
      O.TradeName,
      V.VasName,
      V.VasDescription,
      V.Status,
      C.CustomerCode,
      C.CustomerName
      FROM Vas V
      INNER JOIN Owner O
      ON O.IdOwn = V.IdOwn
      LEFT JOIN Customer C 
      ON V.IdCustomer = C.IdCustomer
      AND O.IdOwn = C.IdOwn
      @SQLPart
      ORDER BY V.IdOwn,V.VasName ASC;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="Owner" type="numericIn">V.IdOwn</filter>
      <filter name="Name" type="textLike">V.VasName</filter>
      <filter name="Description" type="textLike">V.VasDescription</filter>
      <filter name="Code" type="textLike">C.CustomerCode</filter>
    </filters>
  </query>

  <query code="GetVasByAnyParameter">
    <sql>
      SELECT V.IdVas,
      V.IdOwn,
      O.OwnCode,
      O.OwnName,
      O.TradeName,
      V.VasName,
      V.VasDescription,
      V.Status
      FROM Vas V
      INNER JOIN Owner O
      ON O.IdOwn = V.IdOwn
      WHERE 1=1
      @SQLPart
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="IdVas" type="numericEqual">V.IdVas</filter>
      <filter name="IdOwn" type="numericEqual">V.IdOwn</filter>
      <filter name="VasName" type="textEqual">V.VasName</filter>
    </filters>
  </query>
  
  <query code="GetByExistsByOrder">
    <sql>
      SELECT 
      V.IdVas,
      V.IdOwn,
      V.VasName,
      V.VasDescription,
      V.Status
      FROM vas v
      INNER JOIN OutboundOrder o ON v.IdOwn = o.IdOwn
      WHERE v.IdCustomer = (SELECT IdCustomer 
                FROM Customer c 
                WHERE c.CustomerCode = o.CustomerCode 
                AND c.IdOwn = v.IdOwn)
      AND v.IdVas IN (SELECT IdVas 
                FROM ItemVas iv INNER JOIN OutboundDetail od 
                ON iv.IdItem = od.IdItem 
                WHERE IdOutboundOrder = o.IdOutboundOrder)
      AND o.IdOutboundOrder = @idOutboundOrder
    </sql>
    <parameters>
      <parameter type="Int">idOutboundOrder</parameter>>
    </parameters>
  </query>
  
  <query code="GetByExistsByOrderByWave">
    <sql>
      SELECT 
      V.IdVas,
      V.IdOwn,
      V.VasName,
      V.VasDescription,
      V.Status,
      IV.Secuence
      FROM Vas V
      INNER JOIN ItemVas IV ON IV.IdVas = V.IdVas
      WHERE IdCustomer IN (SELECT IdCustomer FROM customer 
                           WHERE CustomerCode IN 
                                  (SELECT CustomerCode FROM OutboundOrder 
                                    WHERE IdOutboundOrder IN 
                                          (SELECT IdOutboundOrder FROM TaskOutboundOrder 
                                              WHERE IdTask = @idTask)))
      AND IdItem IN (SELECT IdItem FROM OutboundDetail 
                      WHERE IdOutboundDetail IN (SELECT IdOutboundDetail FROM TaskOutboundOrder 
                                                  WHERE IdTask = @idTask))
      ORDER BY IV.Secuence ASC
    </sql>
    <parameters>
      <parameter type="Int">idTask</parameter>>
    </parameters>
  </query>
  
  <query code="Vas_Insert">
    <sql>
      INSERT INTO Vas
      (IdVas
      ,IdOwn
      ,VasName
      ,VasDescription
      ,Status
      ,DateCreated
      ,UserCreated
      ,IdCustomer)
      VALUES
      (@IdVas
      ,@IdOwn
      ,@VasName
      ,@VasDescription
      ,@Status
      ,@DateCreated
      ,@UserCreated
      ,@IdCustomer)
    </sql>
    <parameters>
      <parameter type="Int">IdVas</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="String">VasName</parameter>
      <parameter type="String">VasDescription</parameter>
      <parameter type="Boolean">Status</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
      <parameter type="Int">IdCustomer</parameter>
    </parameters>
  </query>

  <query code="Vas_Update">
    <sql>
      UPDATE Vas
      SET VasName = @VasName
      ,IdOwn = @IdOwn
      ,VasDescription = @VasDescription
      ,Status = @Status
      ,DateModified = @DateModified
      ,UserModified = @UserModified
      ,IdCustomer = @IdCustomer
      WHERE IdVas  = @IdVas
      
    </sql>
    <parameters>
      <parameter type="Int">IdVas</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="String">VasName</parameter>
      <parameter type="String">VasDescription</parameter>
      <parameter type="Boolean">Status</parameter>
      <parameter type="DateTime">DateModified</parameter>
      <parameter type="String">UserModified</parameter>
      <parameter type="Int">IdCustomer</parameter>
    </parameters>
  </query>

  <query code="Vas_Delete">
    <sql>
      DELETE FROM Vas
      WHERE IdVas  = @IdVas
    </sql>
    <parameters>
      <parameter type="Int">IdVas</parameter>
    </parameters>
  </query>
  
  <query code="GetVasByItemAndOwnAndCustomer">
    <sql>
      SELECT V.IdVas,
      V.IdOwn,
      V.VasName,
      V.VasDescription,
      V.Status,
      IV.Secuence
      FROM Vas V
      INNER JOIN ItemVas IV ON IV.IdVas = V.IdVas
      WHERE IV.IdItem = @idItem
      AND V.IdOwn = @idOwn
      AND V.IdCustomer = @IdCustomer
      ORDER BY IV.Secuence ASC
    </sql>
    <parameters>
      <parameter type="Int">idItem</parameter>
      <parameter type="Int">idOwn</parameter>
      <parameter type="Int">idCustomer</parameter>
    </parameters>
  </query>

  <query code="GetByItemAndOwnWaveOrder">
    <sql>
      SELECT V.IdVas,
      V.IdOwn,
      V.VasName,
      V.VasDescription,
      V.Status,
      IV.Secuence
      FROM Vas V
      INNER JOIN ItemVas IV ON IV.IdVas = V.IdVas
      WHERE IdCustomer IN (SELECT IdCustomer FROM customer
                          WHERE CustomerCode IN
                                (SELECT CustomerCode FROM OutboundOrder
                                WHERE IdOutboundOrder IN
                                      (SELECT IdOutboundOrder FROM TaskOutboundOrder
                                      WHERE IdTask = @idTask)))
      AND IV.IdItem = @idItem
      AND V.IdOwn = @idOwn
      ORDER BY IV.Secuence ASC
    </sql>
    <parameters>
      <parameter type="Int">idItem</parameter>
      <parameter type="Int">idOwn</parameter>
      <parameter type="Int">idTask</parameter>
    </parameters>
  </query>
  <!--END VAS SECTION-->

  <!--ITEMVAS SECTION-->
  <query code="GetItemVasByAnyParameter">
    <sql>
      SELECT
      IV.IdItem,
      IV.IdVas,
      IV.Secuence,
      IV.DateCreated,
      IV.UserCreated,
      I.ShortItemName,
      I.LongItemName,
      I.Description,
      I.ItemCode,
      V.IdOwn,
      V.VasName
      FROM ItemVas IV
      INNER JOIN Item I ON IV.IdItem = I.IdItem
      INNER JOIN Vas V ON IV.IdVas = V.IdVas
      WHERE 1=1
      @SQLPart
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="IdItem" type="numericEqual">IV.IdItem</filter>
      <filter name="IdVas" type="numericEqual">IV.IdVas</filter>
    </filters>
    <sub-querys>
      <sub-query code="CustomerOrderBySecuenceAndItem">
        <sql>
          AND V.IdCustomer = @idCustomer
          ORDER BY IV.IdItem, IV.Secuence
        </sql>
        <parameters>
          <parameter type="numericEqual">idCustomer</parameter>
        </parameters>
      </sub-query>
    </sub-querys>
  </query>
  
  <query code="ItemVas_Insert">
    <sql>
      INSERT INTO ItemVas
      (IdItem
      ,IdVas
      ,Secuence
      ,DateCreated
      ,UserCreated)
      VALUES
      (@IdItem
      ,@IdVas
      ,@Secuence
      ,@DateCreated
      ,@UserCreated)
    </sql>
    <parameters>
      <parameter type="Int">IdItem</parameter>
      <parameter type="Int">IdVas</parameter>
      <parameter type="Int">Secuence</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
    </parameters>
  </query>

  <query code="ItemVas_Update">
    <sql>
      UPDATE ItemVas
      SET Secuence = @Secuence
      WHERE IdItem = @IdItem 
      AND IdVas  = @IdVas

    </sql>
    <parameters>
      <parameter type="Int">Secuence</parameter>
      <parameter type="Int">IdItem</parameter>
      <parameter type="Int">IdVas</parameter>
    </parameters>
  </query>

  <query code="ItemVas_Delete">
    <sql>
      DELETE FROM ItemVas
      WHERE IdItem = @IdItem
      AND IdVas  = @IdVas
    </sql>
    <parameters>
      <parameter type="Int">IdItem</parameter>
      <parameter type="Int">IdVas</parameter>
    </parameters>
  </query>
  <!--END ITEMVAS SECTION-->

  <!-- KARDEX section  -->
  <query code="Kardex_Insert">
    <sql>
      INSERT INTO Kardex
      (IdKardex,
      IdWhs,
      IdOwn,
      KardexCode,
      MovementDate,
      IdDocument,
      DocumentNumber,
      DocumentTypeCode,
      ReferenceDoc,
      ReferenceDocTypeCode,
      IdItem,
      ItemQtySign,
      BalanceQtyNew,
      DateCreated,
      UserCreated)
      VALUES
      (@IdKardex,
      @IdWhs,
      @IdOwn,
      @KardexCode,
      @MovementDate,
      @IdDocument,
      @DocumentNumber,
      @DocumentTypeCode,
      @ReferenceDoc,
      @ReferenceDocTypeCode,
      @IdItem,
      @ItemQtySign,
      @BalanceQtyNew,
      @DateCreated,
      @UserCreated)
    </sql>
    <parameters>
      <parameter type="Int">IdKardex</parameter>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="String">KardexCode</parameter>
      <parameter type="DateTime">MovementDate</parameter>
      <parameter type="Int">IdDocument</parameter>
      <parameter type="String">DocumentNumber</parameter>
      <parameter type="String">DocumentTypeCode</parameter>
      <parameter type="String">ReferenceDoc</parameter>
      <parameter type="String">ReferenceDocTypeCode</parameter>
      <parameter type="Int">IdItem</parameter>
      <parameter type="Decimal">ItemQtySign</parameter>
      <parameter type="Decimal">BalanceQtyNew</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
    </parameters>
  </query>

  <query code="GetKardexLastBalanceByIdWhsIdOwnIdItem">
    <sql>
      SELECT TOP 1
      IdKardex,
      IdWhs,
      IdOwn,
      KardexCode,
      MovementDate,
      IdDocument,
      DocumentNumber,
      DocumentTypeCode,
      ReferenceDoc,
      ReferenceDocTypeCode,
      IdItem,
      ItemQtySign,
      BalanceQtyNew,
      DateCreated,
      UserCreated,
      DateModified,
      UserModified
      FROM Kardex
      WHERE IdWhs = @IdWhs
      AND IdOwn = @IdOwn
      AND IdItem = @IdItem
      ORDER BY IdKardex DESC
    </sql>
    <parameters>
      <parameter type="Int">idWhs</parameter>
      <parameter type="Int">idOwn</parameter>
      <parameter type="Int">idItem</parameter>
    </parameters>
  </query>

  <query code="Kardex_GetByAnyParameter">
    <sql>
      SELECT
      K.IdKardex,
      K.IdWhs,
      K.IdOwn,
      K.KardexCode,
      K.MovementDate,
      K.IdDocument,
      K.DocumentNumber,
      K.DocumentTypeCode,
      K.ReferenceDoc,
      K.ReferenceDocTypeCode,
      K.IdItem,
      I.ShortItemName,
      I.ItemCode,
      I.Weight,
      I.Description,
      I.Status,
      K.ItemQtySign,
      K.BalanceQtyNew,
      K.DateCreated,
      K.UserCreated,
      K.DateModified,
      K.UserModified
      FROM Kardex K LEFT JOIN
      Item I ON K.IdItem = I.IdItem
      WHERE 1=1
      @SQLPart
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="IdKardex" type="numericEqual">K.IdKardex</filter>
      <filter name="WhId" type="numericEqual">K.IdWhs</filter>
      <filter name="IdOwn" type="numericEqual">K.IdOwn</filter>
      <filter name="KardexCode" type="textEqual">K.KardexCode</filter>
      <filter name="MovementDate" type="textEqual">K.MovementDate</filter>
      <filter name="IdDocument" type="numericEqual">K.IdDocument</filter>
      <filter name="DocumentNumber" type="textEqual">K.DocumentNumber</filter>
      <filter name="DocumentTypeCode" type="textEqual">K.DocumentTypeCode</filter>
      <filter name="ReferenceDoc" type="textEqual">K.ReferenceDoc</filter>
      <filter name="ReferenceDocTypeCode" type="textEqual">K.ReferenceDocTypeCode</filter>
      <filter name="IdItem" type="numericEqual">K.IdItem</filter>
      <filter name="DateCreated" type="textEqual">K.DateCreated</filter>
      <filter name="UserCreated" type="textEqual">K.UserCreated</filter>
      <filter name="DateModified" type="textEqual">K.DateModified</filter>
      <filter name="UserModified" type="textEqual">K.UserModified</filter>
    </filters>
    <sub-querys>
      <sub-query code="OrderByIdKardex">
        <sql>
          ORDER BY IdKardex
        </sql>
        <parameters>
        </parameters>
      </sub-query>
    </sub-querys>
  </query>

  <!-- KARDEX MOVEMENT section  -->
  <query code="KardexMovement_GetByAnyParameter">
    <sql>
      SELECT
      KM.IdMovementType,
      KM.IdKardexType,
      KT.KardexCode,
      KT.KardexName,
      KM.ActionLogCode,
      KM.DateCreated,
      KM.UserCreated,
      KM.DateModified,
      KM.UserModified
      FROM KardexMovement KM INNER JOIN
      KardexType KT ON KM.IdKardexType = KT.IdKardexType
      WHERE 1=1
      @SQLPart
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="IdMovementType" type="numericEqual">KM.IdMovementType</filter>
      <filter name="IdKardexType" type="numericEqual">KM.IdKardexType</filter>
      <filter name="ActionLogCode" type="textEqual">KM.ActionLogCode</filter>
      <filter name="DateCreated" type="textEqual">KM.DateCreated</filter>
      <filter name="UserCreated" type="textEqual">KM.UserCreated</filter>
      <filter name="DateModified" type="textEqual">KM.DateModified</filter>
      <filter name="UserModified" type="textEqual">KM.UserModified</filter>
    </filters>
    <sub-querys>
      <sub-query code="OrderByIdMovementType">
        <sql>
          ORDER BY KM.IdMovementType
        </sql>
        <parameters>
        </parameters>
      </sub-query>
    </sub-querys>
  </query>

  <!-- MOVEMENTADJUST section  -->
  <query code="MovementAdjust_Insert">
    <sql>
      INSERT INTO MovementAdjust
      (IdMovementAdjust,
      IdMovementType,
      AdjustDate,
      UserName,
      IdWhs,
      IdOwn,
      IdLocCode,
      IdLpnCode,
      IdItem,
      IdUom,
      IdCtgItem,
      LotNumber,
      FifoDate,
      ExpirationDate,
      FabricationDate,
      ItemQty,
      ReasonCode,
      HoldCode,
      SpecialField1,
      SpecialField2,
      SpecialField3,
      SpecialField4,
      StateInterface,
      DateCreatedWMS,
      DateReadIFZ)
      VALUES
      (@IdMovementAdjust,
      @IdMovementType,
      @AdjustDate,
      @UserName,
      @IdWhs,
      @IdOwn,
      @IdLocCode,
      @IdLpnCode,
      @IdItem,
      @IdUom,
      @IdCtgItem,
      @LotNumber,
      @FifoDate,
      @ExpirationDate,
      @FabricationDate,
      @ItemQty,
      @ReasonCode,
      @HoldCode,
      @SpecialField1,
      @SpecialField2,
      @SpecialField3,
      @SpecialField4,
      @StateInterface,
      @DateCreatedWMS,
      @DateReadIFZ)
    </sql>
    <parameters>
      <parameter type="Int">IdMovementAdjust</parameter>
      <parameter type="Int">IdMovementType</parameter>
      <parameter type="DateTime">AdjustDate</parameter>
      <parameter type="String">UserName</parameter>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="String">IdLocCode</parameter>
      <parameter type="String">IdLpnCode</parameter>
      <parameter type="Int">IdItem</parameter>
      <parameter type="Int">IdUom</parameter>
      <parameter type="Int">IdCtgItem</parameter>
      <parameter type="String">LotNumber</parameter>
      <parameter type="DateTime">FifoDate</parameter>
      <parameter type="DateTime">ExpirationDate</parameter>
      <parameter type="DateTime">FabricationDate</parameter>
      <parameter type="Decimal">ItemQty</parameter>
      <parameter type="String">ReasonCode</parameter>
      <parameter type="String">HoldCode</parameter>
      <parameter type="String">SpecialField1</parameter>
      <parameter type="String">SpecialField2</parameter>
      <parameter type="String">SpecialField3</parameter>
      <parameter type="String">SpecialField4</parameter>
      <parameter type="String">StateInterface</parameter>
      <parameter type="DateTime">DateCreatedWMS</parameter>
      <parameter type="DateTime">DateReadIFZ</parameter>
    </parameters>
  </query>
  
  <query code="MovementAdjust_Update">
      <sql>
        UPDATE MovementAdjust
        SET IdMovementType = @IdMovementType,
        AdjustDate = @AdjustDate,
        UserName = @UserName,
        IdWhs = @IdWhs,
        IdOwn = @IdOwn,
        IdLocCode = @IdLocCode,
        IdLpnCode = @IdLpnCode,
        IdItem = @IdItem,
        IdUom = @IdUom,
        IdCtgItem = @IdCtgItem,
        LotNumber = @LotNumber,
        FifoDate = @FifoDate,
        ExpirationDate = @ExpirationDate,
        FabricationDate = @FabricationDate,
        ItemQty = @ItemQty,
        ReasonCode = @ReasonCode,
        HoldCode = @HoldCode,
        SpecialField1 = @SpecialField1,
        SpecialField2 = @SpecialField2,
        SpecialField3 = @SpecialField3,
        SpecialField4 = @SpecialField4,
        StateInterface = @StateInterface
        WHERE IdMovementAdjust = @IdMovementAdjust
      </sql>
      <parameters>
        <parameter type="Int">IdMovementAdjust</parameter>
        <parameter type="Int">IdMovementType</parameter>
        <parameter type="DateTime">AdjustDate</parameter>
        <parameter type="String">UserName</parameter>
        <parameter type="Int">IdWhs</parameter>
        <parameter type="Int">IdOwn</parameter>
        <parameter type="String">IdLocCode</parameter>
        <parameter type="String">IdLpnCode</parameter>
        <parameter type="Int">IdItem</parameter>
        <parameter type="Int">IdUom</parameter>
        <parameter type="Int">IdCtgItem</parameter>
        <parameter type="String">LotNumber</parameter>
        <parameter type="DateTime">FifoDate</parameter>
        <parameter type="DateTime">ExpirationDate</parameter>
        <parameter type="DateTime">FabricationDate</parameter>
        <parameter type="Decimal">ItemQty</parameter>
        <parameter type="String">ReasonCode</parameter>
        <parameter type="String">HoldCode</parameter>
        <parameter type="String">SpecialField1</parameter>
        <parameter type="String">SpecialField2</parameter>
        <parameter type="String">SpecialField3</parameter>
        <parameter type="String">SpecialField4</parameter>
        <parameter type="String">StateInterface</parameter>
        <parameter type="DateTime">DateCreatedWMS</parameter>
        <parameter type="DateTime">DateReadIFZ</parameter>
      </parameters>
    </query>

  <query code="MovementAdjust_GetByAnyParameter">
    <sql>
      SELECT
      MA.IdMovementAdjust,
      MA.IdMovementType,
      MT.MovementName,
      MA.AdjustDate,
      MA.UserName,
      MA.IdWhs,
      W.WhsCode,
      MA.IdOwn,
      O.OwnCode,
      MA.IdLocCode,
      MA.IdLpnCode,
      MA.IdItem,
      I.ItemCode,
      MA.IdUom,
      IU.UomCode,
      IU.BarCode,
      MA.IdCtgItem,
      CI.CtgCode,
      MA.LotNumber,
      MA.FifoDate,
      MA.ExpirationDate,
      MA.FabricationDate,
      MA.ItemQty,
      MA.ReasonCode,
      MA.HoldCode,
      MA.SpecialField1,
      MA.SpecialField2,
      MA.SpecialField3,
      MA.SpecialField4,
      MA.StateInterface,
      MA.DateCreatedWMS,
      MA.DateReadIFZ
      FROM MovementAdjust MA INNER JOIN
      MovementType MT ON MA.IdMovementType = MT.IdMovementType INNER JOIN
      Warehouse W ON MA.IdWhs = W.IdWhs INNER JOIN
      Owner O ON MA.IdOwn = O.IdOwn INNER JOIN
      Item I ON MA.IdItem = I.IdItem LEFT JOIN
      ItemUom IU ON MA.IdUom = IU.IdUom LEFT JOIN
      CategoryItem CI ON MA.IdCtgItem = CI.IdCtgItem
      WHERE 1=1
      @SQLPart
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="IdMovementAdjust" type="numericEqual">MA.IdMovementAdjust</filter>
      <filter name="IdMovementType" type="numericEqual">MA.IdMovementType</filter>
      <filter name="AdjustDate" type="textEqual">MA.AdjustDate</filter>
      <filter name="UserName" type="textEqual">MA.UserName</filter>
      <filter name="WhId" type="numericEqual">K.IdWhs</filter>
      <filter name="IdOwn" type="numericEqual">K.IdOwn</filter>
      <filter name="IdLocCode" type="textEqual">MA.IdLocCode</filter>
      <filter name="IdLpnCode" type="textEqual">MA.IdLpnCode</filter>
      <filter name="IdItem" type="numericEqual">MA.IdItem</filter>
      <filter name="IdUom" type="numericEqual">MA.IdUom</filter>
      <filter name="IdCtgItem" type="numericEqual">MA.IdCtgItem</filter>
      <filter name="LotNumber" type="textEqual">MA.LotNumber</filter>
      <filter name="FifoDate" type="textEqual">MA.FifoDate</filter>
      <filter name="ExpirationDate" type="textEqual">MA.ExpirationDate</filter>
      <filter name="FabricationDate" type="textEqual">MA.FabricationDate</filter>
      <filter name="ReasonCode" type="textEqual">MA.ReasonCode</filter>
      <filter name="HoldCode" type="textEqual">MA.HoldCode</filter>
      <filter name="SpecialField1" type="textEqual">MA.SpecialField1</filter>
      <filter name="SpecialField2" type="textEqual">MA.SpecialField2</filter>
      <filter name="SpecialField3" type="textEqual">MA.SpecialField3</filter>
      <filter name="SpecialField4" type="textEqual">MA.SpecialField4</filter>
      <filter name="StateInterface" type="textEqual">MA.StateInterface</filter>
      <filter name="DateCreatedWMS" type="textEqual">MA.DateCreatedWMS</filter>
      <filter name="DateReadIFZ" type="textEqual">MA.DateReadIFZ</filter>
    </filters>
    <sub-querys>
      <sub-query code="OrderByIdMovementAdjust">
        <sql>
          ORDER BY MA.IdMovementAdjust
        </sql>
        <parameters>
        </parameters>
      </sub-query>
    </sub-querys>
  </query>

  <query code="GetMovementAdjustUnProcessedWithPagination">
    <sql>
      SELECT TOP (@pagination)
      MA.IdMovementAdjust,
      MA.IdMovementType,
      MT.MovementName,
      MA.AdjustDate,
      MA.UserName,
      MA.IdWhs,
      W.WhsCode,
      MA.IdOwn,
      O.OwnCode,
      MA.IdLocCode,
      MA.IdLpnCode,
      MA.IdItem,
      I.ItemCode,
      MA.IdUom,
      IU.UomCode,
      IU.BarCode,
      MA.IdCtgItem,
      CI.CtgCode,
      MA.LotNumber,
      MA.FifoDate,
      MA.ExpirationDate,
      MA.FabricationDate,
      MA.ItemQty,
      MA.ReasonCode,
      MA.HoldCode,
      MA.SpecialField1,
      MA.SpecialField2,
      MA.SpecialField3,
      MA.SpecialField4,
      MA.StateInterface,
      MA.DateCreatedWMS,
      MA.DateReadIFZ
      FROM MovementAdjust MA INNER JOIN
      MovementType MT ON MA.IdMovementType = MT.IdMovementType INNER JOIN
      Warehouse W ON MA.IdWhs = W.IdWhs INNER JOIN
      Owner O ON MA.IdOwn = O.IdOwn INNER JOIN
      Item I ON MA.IdItem = I.IdItem LEFT JOIN
      ItemUom IU ON MA.IdUom = IU.IdUom LEFT JOIN
      CategoryItem CI ON MA.IdCtgItem = CI.IdCtgItem
      WHERE StateInterface = 'C'
    </sql>
    <parameters>
      <parameter type="Int">pagination</parameter>
    </parameters>
  </query>

  <query code="MovementAdjust_FindAll">
    <sql>
      SELECT
      MA.IdMovementAdjust,
      MA.IdMovementType,
      MT.MovementName,
      MA.AdjustDate,
      MA.UserName,
      MA.IdWhs,
      W.WhsCode,
      W.WhsName,
      W.ShortWhsName,
      MA.IdOwn,
      O.OwnCode,
      O.OwnName,
      MA.IdLocCode,
      MA.IdLpnCode,
      MA.IdItem,
      I.ItemCode,
      I.Description,
      MA.IdUom,
      IU.UomCode,
      IU.BarCode,
      MA.IdCtgItem,
      CI.CtgCode,
      MA.LotNumber,
      MA.FifoDate,
      MA.ExpirationDate,
      MA.FabricationDate,
      MA.ItemQty,
      MA.ReasonCode,
      MA.HoldCode,
      MA.SpecialField1,
      MA.SpecialField2,
      MA.SpecialField3,
      MA.SpecialField4,
      MA.StateInterface,
      MA.DateCreatedWMS,
      MA.DateReadIFZ
      FROM MovementAdjust MA INNER JOIN
      MovementType MT ON MA.IdMovementType = MT.IdMovementType INNER JOIN
      Warehouse W ON MA.IdWhs = W.IdWhs INNER JOIN
      Owner O ON MA.IdOwn = O.IdOwn INNER JOIN
      Item I ON MA.IdItem = I.IdItem LEFT JOIN
      ItemUom IU ON MA.IdUom = IU.IdUom LEFT JOIN
      CategoryItem CI ON MA.IdCtgItem = CI.IdCtgItem
      @SQLPart
      ORDER BY MA.IdMovementAdjust;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="Owner" type="numericIn">MA.IdOwn</filter>
      <filter name="Warehouse" type="numericIn">MA.IdWhs</filter>
      <filter name="DateRange" type="textBetween">MA.AdjustDate</filter>
      <filter name="Code" type="textEqual">MA.StateInterface</filter>
    </filters>
  </query>

  <query code="MovementAdjust_GetToConfirm">
    <sql>
      SELECT
            MA.IdMovementAdjust,
            MA.IdMovementType,
            MT.MovementName,
            MA.AdjustDate,
            MA.UserName,
            MA.IdWhs,
            W.WhsCode,
            W.WhsName,
            W.ShortWhsName,
            MA.IdOwn,
            O.OwnCode,
            O.OwnName,
            MA.IdLocCode,
            MA.IdLpnCode,
            MA.IdItem,
            I.ItemCode,
            I.Description,
            MA.IdUom,
            IU.UomCode,
            IU.BarCode,
            MA.IdCtgItem,
            CI.CtgCode,
            MA.LotNumber,
            MA.FifoDate,
            MA.ExpirationDate,
            MA.FabricationDate,
            MA.ItemQty,
            MA.ReasonCode,
            MA.HoldCode,
            MA.SpecialField1,
            MA.SpecialField2,
            MA.SpecialField3,
            MA.SpecialField4,
            MA.StateInterface,
            MA.DateCreatedWMS,
            MA.DateReadIFZ,
            R.ReasonName,
			CI.CtgName
       FROM MovementAdjust MA 
 INNER JOIN MovementType MT 
         ON MA.IdMovementType = MT.IdMovementType 
 INNER JOIN Warehouse W 
         ON MA.IdWhs = W.IdWhs 
 INNER JOIN Owner O 
         ON MA.IdOwn = O.IdOwn 
 INNER JOIN Item I 
         ON MA.IdItem = I.IdItem 
  LEFT JOIN ItemUom IU 
         ON MA.IdUom = IU.IdUom 
  LEFT JOIN CategoryItem CI 
         ON MA.IdCtgItem = CI.IdCtgItem
  LEFT JOIN Reason R
         ON R.ReasonCode = MA.ReasonCode
            @SQLPart
        AND MA.StateInterface = 'A'
   ORDER BY MA.IdMovementAdjust;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="Owner" type="numericIn">MA.IdOwn</filter>
      <filter name="Warehouse" type="numericIn">MA.IdWhs</filter>
      <filter name="DateRange" type="textBetween">MA.AdjustDate</filter>
    </filters>
  </query>
  
  <query  code="MovementAdjust_Delete">
    <sql>
      DELETE MovementAdjust
      WHERE IdMovementAdjust = @IdMovementAdjust
    </sql>
    <parameters>
      <parameter type="Int">IdMovementAdjust</parameter>
    </parameters>
  </query>

  <!-- INFOPRECUBING SECTION  -->
  <query code="InsertInfoPrecubing">
    <sql>
      INSERT INTO InfoPrecubing
      (IdTask,
      IdDocumentBound,
      LpnTypeCode,
      Qty,
      DateCreated,
      UserCreated)
      VALUES
      (@IdTask,
      @IdDocumentBound,
      @LpnTypeCode,
      @Qty,
      @DateCreated,
      @UserCreated)
    </sql>
    <parameters>
      <parameter type="Int">IdTask</parameter>
      <parameter type="Int">IdDocumentBound</parameter>
      <parameter type="String">LpnTypeCode</parameter>
      <parameter type="Int">Qty</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
    </parameters>
  </query>
  
  <query code="InfoPrecubing_Delete">
    <sql>
      DELETE InfoPrecubing
      WHERE IdTask = @idTask
    </sql>
    <parameters>
      <parameter type="Int">idTask</parameter>
    </parameters>
  </query>
  <!--END INFOPRECUBING SECTION-->


  <!--ITEMCUSTOMER section begin -->
    <query code="ItemCustomer_Insert">
      <sql>
        INSERT INTO ItemCustomer
        (IdCustomer
        ,IdOwn
        ,IdItem
        ,ItemCodeCustomer
        ,LongItemName
        ,Capacity
        ,Price
        ,Status
        ,DepartmentItem
        ,DepartmentDescription
        ,BarCode
        ,SpecialField1
        ,SpecialField2
        ,SpecialField3
        ,SpecialField4
        ,DateCreated
        ,UserCreated)

        VALUES
        (@IdCustomer
        ,@IdOwn
        ,@IdItem
        ,@ItemCodeCustomer
        ,@LongItemName
        ,@Capacity
        ,@Price
        ,@Status
        ,@DepartmentItem
        ,@DepartmentDescription
        ,@BarCode
        ,@SpecialField1
        ,@SpecialField2
        ,@SpecialField3
        ,@SpecialField4
        ,@DateCreated
        ,@UserCreated)
      </sql>
      <parameters>
        <parameter type="Int">IdCustomer</parameter>
        <parameter type="Int">IdOwn</parameter>
        <parameter type="Int">IdItem</parameter>
        <parameter type="String">ItemCodeCustomer</parameter>
        <parameter type="String">LongItemName</parameter>
        <parameter type="Int">Capacity</parameter>
        <parameter type="Decimal">Price</parameter>
        <parameter type="Boolean">Status</parameter>
        <parameter type="String">DepartmentItem</parameter>
        <parameter type="String">DepartmentDescription</parameter>
        <parameter type="String">BarCode</parameter>
        <parameter type="String">SpecialField1</parameter>
        <parameter type="String">SpecialField2</parameter>
        <parameter type="String">SpecialField3</parameter>
        <parameter type="String">SpecialField4</parameter>
        <parameter type="DateTime">DateCreated</parameter>
        <parameter type="String">UserCreated</parameter>
      </parameters>
    </query>

    <query code="ItemCustomer_Delete">
      <sql>
        DELETE FROM ItemCustomer
        WHERE IdCustomer = @IdCustomer
        AND IdOwn = @IdOwn
        AND IdItem = @IdItem
        AND ItemCodeCustomer = @ItemCodeCustomer
      </sql>
      <parameters>
        <parameter type="Int">IdCustomer</parameter>
        <parameter type="Int">IdOwn</parameter>
        <parameter type="Int">IdItem</parameter>
        <parameter type="String">ItemCodeCustomer</parameter>       
      </parameters>
    </query>

    <query code="ItemCustomer_Update">
      <sql>
        UPDATE ItemCustomer
        SET ItemCodeCustomer = @ItemCodeCustomer
        ,LongItemName = @LongItemName
        ,Capacity = @Capacity
        ,Price = @Price
        ,Status = @Status
        ,DepartmentItem = @DepartmentItem
        ,DepartmentDescription = @DepartmentDescription
        ,BarCode = @BarCode
        ,SpecialField1 = @SpecialField1
        ,SpecialField2 = @SpecialField2
        ,SpecialField3 = @SpecialField3
        ,SpecialField4 = @SpecialField4
        ,DateModified = @DateModified
        ,UserModified = @UserModified
        WHERE IdCustomer = @IdCustomer
        AND IdOwn = @IdOwn
        AND IdItem = @IdItem
      </sql>
      <parameters>
        <parameter type="Int">IdCustomer</parameter>
        <parameter type="Int">IdOwn</parameter>
        <parameter type="Int">IdItem</parameter>
        <parameter type="String">ItemCodeCustomer</parameter>
        <parameter type="String">LongItemName</parameter>
        <parameter type="Int">Capacity</parameter>
        <parameter type="Decimal">Price</parameter>
        <parameter type="Boolean">Status</parameter>
        <parameter type="String">DepartmentItem</parameter>
        <parameter type="String">DepartmentDescription</parameter>
        <parameter type="String">BarCode</parameter>
        <parameter type="String">SpecialField1</parameter>
        <parameter type="String">SpecialField2</parameter>
        <parameter type="String">SpecialField3</parameter>
        <parameter type="String">SpecialField4</parameter>
        <parameter type="DateTime">DateCreated</parameter>
        <parameter type="String">UserCreated</parameter>
        <parameter type="DateTime">DateModified</parameter>
        <parameter type="String">UserModified</parameter>
      </parameters>
    </query>


  <query code="ItemCustomer_GetByOwnerAndCustomerAndItem">
      <sql>
        SELECT
        IC.IdCustomer,
        C.CustomerCode,
        C.CustomerName,
        IC.IdOwn,
        O.OwnCode,
        O.OwnName,
        O.TradeName,
        IC.IdItem,
        I.ItemCode,
        IC.ItemCodeCustomer,
        IC.LongItemName,
        IC.Capacity,
        IC.Price,
        IC.Status,
        IC.SpecialField1,
        IC.SpecialField2,
        IC.SpecialField3,
        IC.SpecialField4,
        IC.DateCreated,
        IC.UserCreated,
        IC.DateModified,
        IC.UserModified,
        IC.DepartmentItem,
        IC.DepartmentDescription,
        IC.BarCode
        FROM ItemCustomer IC INNER JOIN
        Customer C ON IC.IdCustomer = C.IdCustomer INNER JOIN
        Owner O ON IC.IdOwn = O.IdOwn INNER JOIN
        Item I ON IC.IdItem = I.IdItem
        WHERE IC.IdCustomer = @IdCustomer
        AND IC.IdOwn = @IdOwn
        AND IC.IdItem = @IdItem
      </sql>
      <parameters>
        <parameter type="Int">IdCustomer</parameter>
        <parameter type="Int">IdOwn</parameter>
        <parameter type="Int">IdItem</parameter>
      </parameters>
    </query>
  
    <query code="ItemCustomer_GetByCodeAndOwnerAndCustomerAndItem">
      <sql>
        SELECT
        IC.IdCustomer,
        C.CustomerCode,
        C.CustomerName,
        IC.IdOwn,
        O.OwnCode,
        O.OwnName,
        O.TradeName,
        IC.IdItem,
        I.ItemCode,
        IC.ItemCodeCustomer,
        IC.LongItemName,
        IC.Capacity,
        IC.Price,
        IC.Status,
        IC.SpecialField1,
        IC.SpecialField2,
        IC.SpecialField3,
        IC.SpecialField4,
        IC.DateCreated,
        IC.UserCreated,
        IC.DateModified,
        IC.UserModified,
        IC.DepartmentItem,
        IC.DepartmentDescription,
        IC.BarCode
        FROM ItemCustomer IC INNER JOIN
        Customer C ON IC.IdCustomer = C.IdCustomer INNER JOIN
        Owner O ON IC.IdOwn = O.IdOwn INNER JOIN
        Item I ON IC.IdItem = I.IdItem
        WHERE IC.IdCustomer = @IdCustomer
        AND IC.IdOwn = @IdOwn
        AND IC.IdItem = @IdItem
        AND IC.ItemCodeCustomer = @ItemCodeCustomer
      </sql>
      <parameters>
        <parameter type="Int">IdCustomer</parameter>
        <parameter type="Int">IdOwn</parameter>
        <parameter type="Int">IdItem</parameter>
        <parameter type="String">ItemCodeCustomer</parameter>
      </parameters>
    </query>

    <query code="GetItemCustomerByAnyParameter">
      <sql>
        SELECT
        IC.IdCustomer,
        C.CustomerCode,
        C.CustomerName,
        IC.IdOwn,
        O.OwnCode,
        O.OwnName,
        O.TradeName,
        IC.IdItem,
        I.ItemCode,
        IC.ItemCodeCustomer,
        IC.LongItemName,
        IC.Capacity,
        IC.Price,
        IC.Status,
        IC.SpecialField1,
        IC.SpecialField2,
        IC.SpecialField3,
        IC.SpecialField4,
        IC.DateCreated,
        IC.UserCreated,
        IC.DateModified,
        IC.UserModified,
        IC.DepartmentItem,
        IC.DepartmentDescription,
        IC.BarCode
        FROM ItemCustomer IC INNER JOIN
        Customer C ON IC.IdCustomer = C.IdCustomer INNER JOIN
        Owner O ON IC.IdOwn = O.IdOwn INNER JOIN
        Item I ON IC.IdItem = I.IdItem
        WHERE 1=1
        @SQLPart
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="IdCustomer" type="numericEqual">IC.IdCustomer</filter>
        <filter name="IdOwn" type="numericEqual">IC.IdOwn</filter>
        <filter name="IdItem" type="numericEqual">IC.IdItem</filter>
        <filter name="ItemCodeCustomer" type="textEqual">IC.ItemCodeCustomer</filter>
        <filter name="LongItemName" type="textEqual">IC.LongItemName</filter>
        <filter name="Capacity" type="numericEqual">IC.Capacity</filter>
        <filter name="Price" type="numericEqual">IC.Price</filter>
        <filter name="Status" type="numericEqual">IC.Status</filter>
        <filter name="SpecialField1" type="textEqual">IC.SpecialField1</filter>
        <filter name="SpecialField2" type="textEqual">IC.SpecialField2</filter>
        <filter name="SpecialField3" type="textEqual">IC.SpecialField3</filter>
        <filter name="SpecialField4" type="textEqual">IC.SpecialField4</filter>
        <filter name="DateCreated" type="textEqual">IC.DateCreated</filter>
        <filter name="UserCreated" type="textEqual">IC.UserCreated</filter>
        <filter name="DateModified" type="textEqual">IC.DateModified</filter>
        <filter name="UserModified" type="textEqual">IC.UserModified</filter>
      </filters>
    </query>

    <query code="ItemCustomer_FindAll">
      <sql>
        SELECT
        IC.IdCustomer,
        C.CustomerCode,
        C.CustomerName,
        IC.IdOwn,
        O.OwnCode,
        O.OwnName,
        O.TradeName,
        IC.IdItem,
        I.ItemCode,
        I.ShortItemName,
        IC.ItemCodeCustomer,
        IC.LongItemName,
        IC.Capacity,
        IC.Price,
        IC.Status,
        IC.SpecialField1,
        IC.SpecialField2,
        IC.SpecialField3,
        IC.SpecialField4,
        IC.DateCreated,
        IC.UserCreated,
        IC.DateModified,
        IC.UserModified,
        IC.DepartmentItem,
        IC.DepartmentDescription,
        IC.BarCode
        FROM ItemCustomer IC INNER JOIN
        Customer C ON IC.IdCustomer = C.IdCustomer INNER JOIN
        Owner O ON IC.IdOwn = O.IdOwn INNER JOIN
        Item I ON IC.IdItem = I.IdItem
        @SQLPart
        ORDER BY C.CustomerCode,O.OwnCode,I.ItemCode,IC.ItemCodeCustomer

        SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
        FROM CfgEntityProperty qf
        JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
        WHERE QueryName = @queryName
        ORDER BY FieldOrder
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
        <parameter type="String">queryName</parameter>
      </parameters>
      <filters>
        <filter name="Name" type="textLike">C.CustomerCode</filter>
        <filter name="Owner" type="numericIn">IC.IdOwn</filter>
        <filter name="Item" type="textLike">I.ItemCode</filter>
        <filter name="Code" type="textLike">IC.ItemCodeCustomer</filter>
        <filter name="Status" type="numericEqual">IC.Status</filter>
      </filters>
    </query>

  <query code="ItemCustomerB2B_FindAll">
    <sql>
      SELECT
      IC.IdCustomer,
      C.CustomerCode,
      C.CustomerName,
      IC.IdOwn,
      O.OwnCode,
      O.OwnName,
      O.TradeName,
      IC.IdItem,
      I.ItemCode,
      I.ShortItemName,
      IC.ItemCodeCustomer,
      IC.LongItemName,
      IC.Capacity,
      IC.Price,
      IC.Status,
      IC.DateCreated,
      IC.UserCreated,
      IC.DateModified,
      IC.UserModified,
      IC.DepartmentItem,
      IC.DepartmentDescription,
      IC.BarCode,
      OO.OutboundNumber,
      OO.ReferenceNumber,
      sum(TD.RealQty) as RealQty,
      CB2B.LabelCodePrice
      FROM ItemCustomer IC INNER JOIN
      Customer C ON IC.IdCustomer = C.IdCustomer INNER JOIN
      CustomerB2B CB2B ON C.IdCustomer = CB2B.IdCustomer
      AND CB2B.LabelPrice = 1 INNER JOIN
      Owner O ON IC.IdOwn = O.IdOwn INNER JOIN
      Item I ON IC.IdItem = I.IdItem INNER JOIN
      OutboundOrder OO ON OO.CustomerCode = C.CustomerCode INNER JOIN
      Task T ON OO.IdOutboundOrder = T.IdDocumentBound
      AND T.IsComplete = 1
      AND T.TaskTypeCode IN ('PIKSE','PIKVA','PIUNK','PIKIT','PIKPS','PIKWV','PIKBT','PIKOR','PKLPN') INNER JOIN
      TaskDetail TD ON T.IdTask = TD.IdTask
      AND TD.IdItem = I.IdItem
      @SQLPart
      GROUP BY IC.IdCustomer,C.CustomerCode, C.CustomerName, IC.IdOwn, O.OwnCode, O.OwnName, O.TradeName, IC.IdItem, I.ItemCode, I.ShortItemName, IC.ItemCodeCustomer, IC.LongItemName,
      IC.Capacity, IC.Price, IC.Status, IC.DateCreated, IC.UserCreated, IC.DateModified, IC.UserModified, IC.DepartmentItem, IC.DepartmentDescription, IC.BarCode,
      OO.OutboundNumber, OO.ReferenceNumber, CB2B.LabelCodePrice
      ORDER BY OO.ReferenceNumber,OO.OutboundNumber,C.CustomerCode,O.OwnCode,I.ItemCode,IC.ItemCodeCustomer

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="Name" type="textLike">C.CustomerCode</filter>
      <filter name="Owner" type="numericIn">IC.IdOwn</filter>
      <filter name="Item" type="textLike">I.ItemCode</filter>
      <filter name="Code" type="textLike">OO.ReferenceNumber</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
    </filters>
  </query>
  
  <!--ITEMCUSTOMER section end -->



  <!--ITEMVENDOR section begin -->
  <query code="ItemVendor_Insert">
    <sql>
      INSERT INTO ItemVendor
      (IdVendor
      ,IdOwn
      ,IdItem
      ,ItemCodeVendor
      ,LongItemName
      ,Status
      ,SpecialField1
      ,SpecialField2
      ,SpecialField3
      ,SpecialField4
      ,DateCreated
      ,UserCreated)

      VALUES
      (@IdVendor
      ,@IdOwn
      ,@IdItem
      ,@ItemCodeVendor
      ,@LongItemName
      ,@Status
      ,@SpecialField1
      ,@SpecialField2
      ,@SpecialField3
      ,@SpecialField4
      ,@DateCreated
      ,@UserCreated)
    </sql>
    <parameters>
      <parameter type="Int">IdVendor</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="Int">IdItem</parameter>
      <parameter type="String">ItemCodeVendor</parameter>
      <parameter type="String">LongItemName</parameter>
      <parameter type="Boolean">Status</parameter>
      <parameter type="String">SpecialField1</parameter>
      <parameter type="String">SpecialField2</parameter>
      <parameter type="String">SpecialField3</parameter>
      <parameter type="String">SpecialField4</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
    </parameters>
  </query>

  <query code="ItemVendor_Delete">
    <sql>
      DELETE FROM ItemVendor
      WHERE IdVendor = @IdVendor
      AND IdOwn = @IdOwn
      AND IdItem = @IdItem
      AND ItemCodeVendor = @ItemCodeVendor
    </sql>
    <parameters>
      <parameter type="Int">IdVendor</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="Int">IdItem</parameter>
      <parameter type="String">ItemCodeVendor</parameter>
    </parameters>
  </query>

  <query code="ItemVendor_Update">
    <sql>
      UPDATE ItemVendor
      SET ItemCodeVendor = @ItemCodeVendor
      ,LongItemName = @LongItemName
      ,Status = @Status
      ,SpecialField1 = @SpecialField1
      ,SpecialField2 = @SpecialField2
      ,SpecialField3 = @SpecialField3
      ,SpecialField4 = @SpecialField4
      ,DateModified = @DateModified
      ,UserModified = @UserModified
      WHERE IdVendor = @IdVendor
      AND IdOwn = @IdOwn
      AND IdItem = @IdItem
      AND ItemCodeVendor = @ItemCodeVendor

    </sql>
    <parameters>
      <parameter type="Int">IdVendor</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="Int">IdItem</parameter>
      <parameter type="String">ItemCodeVendor</parameter>
      <parameter type="String">LongItemName</parameter>
      <parameter type="Boolean">Status</parameter>
      <parameter type="String">SpecialField1</parameter>
      <parameter type="String">SpecialField2</parameter>
      <parameter type="String">SpecialField3</parameter>
      <parameter type="String">SpecialField4</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
      <parameter type="DateTime">DateModified</parameter>
      <parameter type="String">UserModified</parameter>
    </parameters>
  </query>


  <query code="ItemVendor_GetByCodeAndOwnerAndVendorAndItem">
    <sql>
      SELECT
      IC.IdVendor,
      C.VendorCode,
      C.VendorName,
      IC.IdOwn,
      O.OwnCode,
      O.OwnName,
      O.TradeName,
      IC.IdItem,
      I.ItemCode,
      IC.ItemCodeVendor,
      IC.LongItemName,
      IC.Status,
      IC.SpecialField1,
      IC.SpecialField2,
      IC.SpecialField3,
      IC.SpecialField4,
      IC.DateCreated,
      IC.UserCreated,
      IC.DateModified,
      IC.UserModified
      FROM ItemVendor IC INNER JOIN
      Vendor C ON IC.IdVendor = C.IdVendor INNER JOIN
      Owner O ON IC.IdOwn = O.IdOwn INNER JOIN
      Item I ON IC.IdItem = I.IdItem
      WHERE IC.IdVendor = @IdVendor
      AND IC.IdOwn = @IdOwn
      AND IC.IdItem = @IdItem
      AND IC.ItemCodeVendor = @ItemCodeVendor
    </sql>
    <parameters>
      <parameter type="Int">IdVendor</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="Int">IdItem</parameter>
      <parameter type="String">ItemCodeVendor</parameter>
    </parameters>
  </query>

  <query code="ItemVendor_FindAll">
    <sql>
      SELECT
      IC.IdVendor,
      C.VendorCode,
      C.VendorName,
      IC.IdOwn,
      O.OwnCode,
      O.OwnName,
      O.TradeName,
      IC.IdItem,
      I.ItemCode,
      I.ShortItemName,
      IC.ItemCodeVendor,
      IC.LongItemName,
      IC.Status,
      IC.SpecialField1,
      IC.SpecialField2,
      IC.SpecialField3,
      IC.SpecialField4,
      IC.DateCreated,
      IC.UserCreated,
      IC.DateModified,
      IC.UserModified
      FROM ItemVendor IC INNER JOIN
      Vendor C ON IC.IdVendor = C.IdVendor INNER JOIN
      Owner O ON IC.IdOwn = O.IdOwn INNER JOIN
      Item I ON IC.IdItem = I.IdItem
      @SQLPart
      ORDER BY C.VendorCode,O.OwnCode,I.ItemCode,IC.ItemCodeVendor;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="Name" type="textLike">C.VendorCode</filter>
      <filter name="Owner" type="numericIn">IC.IdOwn</filter>
      <filter name="Item" type="textLike">I.ItemCode</filter>
      <filter name="Code" type="textLike">IC.ItemCodeVendor</filter>
      <filter name="Status" type="numericEqual">IC.Status</filter>
    </filters>
  </query>
  
  <!--ITEMVENDOR section end -->

  <!--Begin OutboundOrder Pending section-->
  <query code="OutboundOrder_Pending_GetByFilter">
    <sql>
      SELECT DISTINCT OO.IdOutboundOrder,
      OO.IdWhs,
      OO.WhsCode,
      OO.ShortWhsName,
      OO.WhsName,
      OO.IdOwn,
      OO.OwnCode,
      OO.OwnName,
      OO.TradeName,
      OO.OutboundNumber,
      OO.IdOutboundType,
      OO.OutboudTypeCode,
      OO.OutboundTypeName,
      OO.Status,
      OO.ReferenceNumber,
      OO.LoadCode,
      OO.LoadSeq,
      OO.Priority,
      OO.InmediateProcess,
      OO.EmissionDate,
      OO.ExpectedDate,
      OO.ShipmentDate,
      OO.ExpirationDate,
      OO.CancelDate,
      OO.CancelUser,
      OO.IdTrackOutboundType,
      OO.NameTrackOutboundType,
      OO.CustomerCode,
      OO.CustomerName,
      OO.DeliveryAddress1,
      OO.DeliveryAddress2,
      OO.IdCountryDelivery,
      OO.CountryDeliveryName,
      OO.IdStateDelivery,
      OO.StateDeliveryName,
      OO.IdCityDelivery,
      OO.CityDeliveryName,
      OO.DeliveryPhone,
      OO.DeliveryEmail,
      OO.IdWhsTarget,
      OO.WhsTargetCode,
      OO.WhsTargetShortName,
      OO.WhsTargetName,
      OO.FullShipment,
      OO.CarrierCode,
      OO.CarrierName,
      OO.RouteCode,
      OO.Plate,
      OO.Invoice,
      OO.FactAddress1,
      OO.FactAddress2,
      OO.IdCountryFact,
      OO.CountryFactName,
      OO.IdStateFact,
      OO.StateFactName,
      OO.IdCityFact,
      OO.CityFactName,
      OO.FactPhone,
      OO.FactEmail,
      OO.AllowCrossDock,
      OO.AllowBackOrder,
      OO.DateCreated,
      OO.UserCreated,
      OO.DateModified,
      OO.UserModified,
      CR.Name AS NameCustomRule,
      (SELECT CASE WHEN COUNT(IdOutboundOrder) = 0 THEN 0 ELSE 1 END AS IsTrue
      FROM v_Oub_InOtherSimulation
      WHERE ((IdUser = @idUser AND WmsProcess != @dispatchType) OR IdUser != @idUser)
      AND IdOutboundOrder = OO.IdOutboundOrder) AS InOtherSimulation
      FROM v_Oub_DispachPending OO
      JOIN v_Oub_LatestTrack tra
      ON OO.IdOutboundOrder = tra.IdOutboundOrder
      LEFT JOIN OutboundDetail OD ON OO.IdOutboundOrder = OD.IdOutboundOrder
      LEFT JOIN Item I ON I.IdItem = OD.IdItem
      LEFT JOIN Customer Cust ON OO.CustomerCode = Cust.CustomerCode AND OO.IdOwn = Cust.IdOwn
      LEFT JOIN RulesByOrder RO ON RO.IdOutboundOrder =  OO.IdOutboundOrder AND RO.IdItem IS NULL
      LEFT JOIN CustomRule CR ON CR.IdCustomRule = RO.IdCustomRule
      WHERE 1=1
      AND (NOT EXISTS (SELECT 1 FROM Task T
      INNER JOIN TaskDetail TD ON T.IdTask = TD.IdTask
      WHERE T.IdWhs = OO.IdWhs
      AND T.IdOwn = OO.IdOwn
      AND T.TaskTypeCode IN ('PIKOR', 'PIKBT', 'PIKWV', 'PIKPS', 'PIKIT', 'PIUNK', 'PIKVA', 'PAKOR', 'PKLPN')
      AND TD.IdDocumentBound = OO.IdOutboundOrder
      AND TD.IdItem = OD.IdItem )
      OR EXISTS (SELECT 1 FROM Task T
      INNER JOIN TaskDetail TD  ON T.IdTask = TD.IdTask
      WHERE T.IdWhs = OO.IdWhs
      AND T.IdOwn = OO.IdOwn
      AND T.TaskTypeCode IN ('PIKOR', 'PIKBT', 'PIKWV', 'PIKPS', 'PIKIT', 'PIUNK', 'PIKVA', 'PAKOR', 'PKLPN')
      AND TD.IdDocumentBound = OO.IdOutboundOrder
      AND TD.IdItem = OD.IdItem
      AND TD.RealQty &lt; OD.ItemQty))
      AND tra.IdTrackOutboundType NOT IN (101, 102)
      @SQLPart
      ORDER BY OO.CustomerCode, OO.Priority, OO.IdOutboundOrder DESC;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      AND IdModule = @idModule
      AND IdPage = @idPage
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="Int">idModule</parameter>
      <parameter type="String">idPage</parameter>
      <parameter type="Int">idUser</parameter>
      <parameter type="String">dispatchType</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericIn">OO.IdWhs</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
      <filter name="DateRange" type="textBetween">OO.EmissionDate</filter>
      <filter name="ExpectedDateRange" type="textBetween">OO.ExpectedDate</filter>
      <filter name="ShipmentDateRange" type="textBetween">Out.ShipmentDate</filter>
      <filter name="ExpirationDateRange" type="textBetween">OO.ExpirationDate</filter>
      <filter name="Item" type="textLike">I.ItemCode</filter>
      <filter name="Owner" type="numericIn">OO.IdOwn</filter>
      <filter name="PriorityRange" type="textBetween">OO.Priority</filter>
      <filter name="Customer" type="textLike">OO.CustomerName</filter>
      <filter name="Carrier" type="textLike">OO.CarrierName</filter>
      <filter name="Route" type="textLike">OO.RouteCode</filter>
      <filter name="Country" type="numericEqual">OO.IdCountryDelivery</filter>
      <filter name="State" type="numericEqual">OO.IdStateDelivery</filter>
      <filter name="City" type="numericEqual">OO.IdCityDelivery</filter>
      <filter name="GroupItem1" type="numericEqual">I.IdGrpItem1</filter>
      <filter name="GroupItem2" type="numericEqual">I.IdGrpItem2</filter>
      <filter name="GroupItem3" type="numericEqual">I.IdGrpItem3</filter>
      <filter name="GroupItem4" type="numericEqual">I.IdGrpItem4</filter>
      <filter name="OutboundType" type="numericIn">OO.IdOutboundType</filter>
      <filter name="CodeAlt" type="textLike">Cust.SpecialField1</filter>
    </filters>
  </query>

  <query code="OutboundOrderDetail_Pending_ById_ItemStock">
    <sql>
      SELECT IdOutboundDetail
      ,VW.IdOutboundOrder
      ,LineNumber
      ,LineCode
      ,VW.IdItem
      ,ItemCode
      ,Description
      ,LongItemName
      ,IdCtgItem
      ,CtgName
      ,ItemQty
      ,CR.Name AS NameCustomRule
      ,CASE WHEN (SELECT (stock.ItemQty - taskDetail.ItemQty) AS ItemQty
      FROM (SELECT COALESCE(SUM(s.ItemQty), 0) AS ItemQty
      FROM Stock s INNER JOIN
      Location l ON s.idLocCode = l.idLocCode
      WHERE l.LocTypeCode IN('PICK', 'PUT')
      AND s.IdItem = VW.IdItem) stock,
      (SELECT COALESCE(SUM(td.ProposalQty), 0) AS ItemQty
      FROM TaskDetail td INNER JOIN
      Task T ON TD.IdTask = T.IdTask
      WHERE T.IsComplete = 0
      AND T.TaskTypeCode NOT IN('REPL')
      AND td.Status = 1
      AND td.IsComplete = 0
      AND td.IdItem = VW.IdItem) AS taskDetail) &lt; 0 THEN 0
      ELSE
	      (SELECT (stock.ItemQty - taskDetail.ItemQty) AS ItemQty
	      FROM (SELECT COALESCE(SUM(s.ItemQty), 0) AS ItemQty
			      FROM Stock s INNER JOIN
			      Location l ON s.idLocCode = l.idLocCode
			      WHERE l.LocTypeCode IN('PICK', 'PUT')
			      AND s.IdItem = VW.IdItem) stock,
		      (SELECT COALESCE(SUM(td.ProposalQty), 0) AS ItemQty
			      FROM TaskDetail td INNER JOIN
			      Task T ON TD.IdTask = T.IdTask
			      WHERE T.IsComplete = 0
			      AND T.TaskTypeCode NOT IN('REPL')
			      AND td.Status = 1
			      AND td.IsComplete = 0
			      AND td.IdItem = VW.IdItem) taskDetail)
      END  AS ItemStock
      ,VW.Status
      ,LotNumber
      ,FifoDate
      ,ExpirationDate
      ,FabricationDate
      FROM v_Oub_DispachPendingDetail VW
      LEFT JOIN RulesByOrder RO ON RO.IdOutboundOrder =  VW.IdOutboundOrder AND RO.IdItem = VW.IdItem
      LEFT JOIN CustomRule CR ON CR.IdCustomRule = RO.IdCustomRule
      WHERE VW.IdOutboundOrder = @idOutboundOrder
      ORDER BY VW.LineNumber;
      
      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      AND IdModule = @idModule
      AND IdPage = @idPage
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="Int">idOutboundOrder</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="Int">idModule</parameter>
      <parameter type="String">idPage</parameter>
    </parameters>
  </query>

  <query code="OutboundOrderDetail_Pending_ById">
    <sql>
		SELECT IdOutboundDetail
		,VW.IdOutboundOrder
		,LineNumber
		,LineCode
		,VW.IdItem
		,ItemCode
		,Description
		,LongItemName
		,IdCtgItem
		,CtgName
		,ItemQty
		,VW.Status
		,LotNumber
		,FifoDate
		,ExpirationDate
		,FabricationDate
		,ItemWeight
		,ItemVolume
		,CR.Name AS NameCustomRule
		FROM v_Oub_DispachPendingDetail VW
		LEFT JOIN RulesByOrder RO ON RO.IdOutboundOrder =  VW.IdOutboundOrder AND RO.IdItem = VW.IdItem
		LEFT JOIN CustomRule CR ON CR.IdCustomRule = RO.IdCustomRule
		WHERE VW.IdOutboundOrder = @idOutboundOrder
		ORDER BY VW.LineNumber;

		SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
		FROM CfgEntityProperty qf
		JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
		WHERE QueryName = @queryName
		AND IdModule = @idModule
		AND IdPage = @idPage
		ORDER BY FieldOrder
	</sql>
    <parameters>
      <parameter type="Int">idOutboundOrder</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="Int">idModule</parameter>
      <parameter type="String">idPage</parameter>
    </parameters>
  </query>

  <query code="GetOutboundOrderPendingDispatch">
    <sql>
      SELECT DISTINCT
      Out.IdOutboundOrder,
      Out.IdWhs,
      Whs1.WhsCode,
      Whs1.ShortWhsName,
      Whs1.WhsName,
      Own.IdOwn,
      Own.OwnCode,
      Own.OwnName,
      Own.TradeName,
      Out.OutboundNumber,
      OutType.IdOutboundType,
      OutType.OutboudTypeCode,
      OutType.OutboundTypeName,
      Out.Status,
      Out.ReferenceNumber,
      Out.LoadCode,
      Out.LoadSeq,
      Out.Priority,
      Out.InmediateProcess,
      Out.EmissionDate,
      Out.ExpectedDate,
      Out.ShipmentDate,
      Out.ExpirationDate,
      Out.CancelDate,
      Out.CancelUser,
      tra.IdTrackOutboundType,
      tra.NameTrackOutboundType,
      Out.CustomerCode,
      Out.CustomerName,
      Out.DeliveryAddress1,
      Out.DeliveryAddress2,
      Out.IdCountryDelivery,
      Co1.CountryName	as CountryDeliveryName,
      Out.IdStateDelivery,
      St1.StateName as StateDeliveryName,
      Out.IdCityDelivery,
      Ci1.CityName as CityDeliveryName,
      Out.DeliveryPhone,
      Out.DeliveryEmail,
      Out.IdWhsTarget,
      whs2.WhsCode as WhsTargetCode,
      whs2.ShortWhsName as WhsTargetShortName,
      whs2.WhsName as WhsTargetName,
      Out.FullShipment,
      Out.CarrierCode,
      Car.CarrierName,
      Out.RouteCode,
      Out.Plate,
      Out.Invoice,
      Out.FactAddress1,
      Out.FactAddress2,
      Out.IdCountryFact,
      CO2.CountryName	as CountryFactName,
      Out.IdStateFact,
      St2.StateName as StateFactName,
      Out.IdCityFact,
      Ci2.CityName as CityFactName,
      Out.FactPhone,
      Out.FactEmail,
      Out.DateCreated,
      Out.UserCreated,
      Out.DateModified,
      Out.UserModified,
      Out.SpecialField1,
      Out.SpecialField2,
      Out.SpecialField3,
      Out.SpecialField4
      FROM OutboundOrder Out

      LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
      INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType AND OutType.Status = 1
      LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
      LEFT JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
      LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs
      LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
      LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
      LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity
      LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
      LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
      LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity
      LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
      JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
      AND tra.IdTrackOutboundType >=9
      AND tra.IdTrackOutboundType NOT IN (101, 102)
      LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
      WHERE (NOT EXISTS (SELECT 1 FROM Task T
      INNER JOIN TaskDetail TD ON T.IdTask = TD.IdTask
      WHERE T.IdWhs = Out.IdWhs
      AND T.IdOwn = Out.IdOwn
      AND T.TaskTypeCode IN ('PIKOR', 'PIKBT', 'PIKWV', 'PIKPS', 'PIKIT', 'PIUNK', 'PIKVA', 'PAKOR', 'PKLPN')
      AND TD.IdDocumentBound = Out.IdOutboundOrder
      AND TD.IdItem = OutD.IdItem )
      OR EXISTS (SELECT 1 FROM Task T
	  INNER JOIN (Select IdTask,IdWhs,IdDocumentBound,IdItem, sum(RealQty) RealQty from TaskDetail Group By IdTask,IdWhs,IdDocumentBound,IdItem) TD On T.IdTask = TD.IdTask
      WHERE T.IdWhs = out.IdWhs
      AND T.IdOwn = out.IdOwn
      AND T.TaskTypeCode IN ('PIKOR', 'PIKBT', 'PIKWV', 'PIKPS', 'PIKIT', 'PIUNK', 'PIKVA', 'PAKOR', 'PKLPN')
      AND TD.IdDocumentBound = out.IdOutboundOrder
      AND TD.IdItem = outD.IdItem
      AND TD.RealQty &lt; outD.ItemQty))
      @SQLPart
      ORDER BY Whs1.ShortWhsName,Own.OwnName,OutType.OutboundTypeName,Out.OutboundNumber;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth, GridWidth, GridWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      AND IdModule = @idModule
      AND IdPage = @idPage
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="Int">idModule</parameter>
      <parameter type="String">idPage</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericIn">Whs1.IdWhs</filter>
      <filter name="DocumentNbr" type="textLike">Out.OutboundNumber</filter>
      <filter name="DateRange" type="textBetween">Out.EmissionDate</filter>
      <filter name="Item" type="textLike">itm.ItemCode</filter>
      <filter name="Owner" type="numericIn">Own.IdOwn</filter>
      <filter name="Name" type="textLike">Out.CustomerCode</filter>
      <filter name="Description" type="textLike">Out.CustomerName</filter>
      <filter name="TrackOutboundType" type="numericIn">tra.IdTrackOutboundType</filter>
      <filter name="OutboundType" type="numericIn">OutType.IdOutboundType</filter>
    </filters>
  </query>
 
  <!--End OutboundOrder Pending section-->
  
  <!--PARAMETERS-->
  <query code="GetItemParamByParamCodeAndItem">
    <sql>
      SELECT  IP.IdParameter,
      IP.ParameterCode + '#' + CAST(IP.IdWhs AS VARCHAR(3))+ '#' + CAST(IP.IdItem AS VARCHAR(10))AS ParameterKey,
      IP.ParameterValue,
      IP.IdModule,
      IP.Scope,
      IP.[Type]
      FROM v_Cfg_WmsItemParameters IP
      WHERE IP.ParameterCode = @parameterCode
        AND IP.IdItem = @idItem
        AND IP.IdWhs = @idWhs
    </sql>
    <parameters>
      <parameter type="String">parameterCode</parameter>
      <parameter type="Int">idItem</parameter>
      <parameter type="Int">idWhs</parameter>
    </parameters>
  </query>  
  
  <!--END PARAMETERS-->
  
  <!--Funtional section-->

  <!--ImperialB2B section-->
  <query code="ImperialB2B_GetOrdersDispatch">
    <sql>
      SELECT DISTINCT OO.IdOutboundOrder
      , OO.OutboundNumber
      , RD.ReferenceDocNumber AS NroGuia
      , C.CustomerName AS Store
      , DD.SealNumber AS LPN
      , DD.IdItem
      , I.ItemCode
      , IC.ItemCodeCustomer
      , IC.ItemCodeCustomer AS EAN13
      , 'UN' AS UOMCode
      , DD.ItemQty
      , DD.LotNumber
      , CASE
      WHEN OO.DeliveryAddress1 IS NULL THEN B.BranchAddress
      ELSE OO.DeliveryAddress1
      END AS DeliveryAddress
      ,D.IdWhs
      ,OO.IdOwn
      FROM Dispatch D INNER JOIN
      OutboundOrder OO ON D.IdOutboundOrder = OO.IdOutboundOrder
      AND D.IdWhs = OO.IdWhs INNER JOIN
      Customer C ON OO.CustomerCode = C.CustomerCode
      AND OO.IdOwn = C.IdOwn LEFT JOIN
      Branch B ON OO.IdBranch = B.IdBranch
      AND C.IdCustomer = B.IdCustomer INNER JOIN
      DispatchDetail DD ON D.IdDispatch = DD.IdDispatch INNER JOIN
      Item I ON DD.IdItem = I.IdItem INNER JOIN
      ItemCustomer IC ON DD.IdItem = IC.IdItem
      AND C.IdCustomer = IC.IdCustomer
      AND OO.IdOwn = IC.IdOwn
      INNER JOIN ReferenceDoc RD ON OO.IdOutboundOrder = RD.IdOutboundOrder
      AND OO.IdWhs = RD.IdWhs AND OO.IdOwn = RD.IdOwn
      WHERE D.IdDispatchType = 3
      AND C.CustomerCode = @CustomerCode
      AND OO.ReferenceNumber = @ReferenceNumber
      AND D.IdWhs = @IdWhs
      AND OO.IdOwn = @IdOwn
      ORDER BY OO.OutboundNumber
    </sql>
    <parameters>
      <parameter type="String">CustomerCode</parameter>
      <parameter type="String">ReferenceNumber</parameter>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdOwn</parameter>      
    </parameters>
  </query>
  <!--End ImperialB2B section-->

  <!--SodimacB2B section-->  
  <query code="GetByIdDispatchSodimac">
    <sql>
      SELECT DD.IdDispatchDetail
      ,DD.IdDispatch
      ,DD.LineNumber
      ,DD.IdItem
      ,I.ItemCode
      ,I.ShortItemName
      ,I.LongItemName
      ,OO.SpecialField1
      ,DD.ItemQty
      ,DD.FifoDate
      ,DD.ExpirationDate
      ,DD.FabricationDate
      ,DD.Price
      ,DD.IdLpnCode
      ,DD.SealNumber
      ,LT.LpnTypeCode AS LpnTypeCode
      ,LT.LpnTypeName AS LpnTypeName
      ,W.IdWhs
      ,W.WhsName
      ,O.IdOwn
      ,O.OwnCode
      ,O.OwnName
      ,B.BranchName
      ,B.BranchCode
      ,IC.BarCode as ItemCustomerBarCode
      ,OO.OutboundNumber
      ,RD.ReferenceDocNumber
      FROM DispatchDetail DD
      INNER JOIN Dispatch D
      ON D.IdDispatch = DD.IdDispatch
      INNER JOIN OutboundOrder OO
      ON D.IdOutboundOrder = OO.IdOutboundOrder AND
      D.IdWhs = OO.IdWhs
      INNER JOIN OutboundDetail OD
      ON D.IdOutboundOrder = OD.IdOutboundOrder AND
      OD.IdItem = DD.IdItem
      INNER JOIN Item I
      ON DD.IdItem = I.IdItem
      INNER JOIN Customer C
      ON C.CustomerCode = OO.CustomerCode
      AND C.IdOwn = OO.IdOwn
      LEFT JOIN ItemCustomer IC
      ON IC.IdItem = I.IdItem
      AND IC.IdCustomer = C.IdCustomer
      LEFT JOIN ReferenceDoc RD
      ON RD.IdOutboundOrder = OO.IdOutboundOrder
      AND OO.IdWhs = RD.IdWhs
      AND OO.IdOwn = RD.IdOwn
      INNER JOIN Owner O
      ON I.IdOwn = O.IdOwn
      INNER JOIN Warehouse W
      ON DD.IdWhs = W.IdWhs
      INNER JOIN LPN L
      ON L.IdLpnCode = DD.IdLpnCode
      LEFT JOIN LPNType LT
      ON DD.LpnTypeCode = LT.LpnTypeCode
      AND O.IdOwn = LT.IdOwn
      LEFT JOIN Branch B
      ON B.IdBranch = OO.IdBranch
      @SQLPart
      ORDER BY D.DateCreated, D.IdDispatch, DD.LineNumber;
    </sql>
    <parameters>
	    <parameter type="SQLPart">@SQLPart</parameter>
	    <parameter type="String">IdPage</parameter>
	    <parameter type="String">EntityPropertyName</parameter>
	  </parameters>
    <filters>
      <filter name="listDispatch" type="numericIn">DD.IdDispatch</filter>
      <filter name="listDispatchDetail" type="numericIn">DD.IdDispatchDetail</filter>
    </filters>
  </query>
  
  <query code="GetDispatchSpecialHeaderSodimac">
    <sql>
      SELECT D.IdDispatch
      ,D.IdOutboundOrder
      ,OO.OutboundNumber
      ,OO.ReferenceNumber
      ,OO.DeliveryAddress1
      ,OO.DeliveryAddress2
      ,D.Status
      ,D.IdTrackOutbound
      ,D.TrackOutboundDate
      ,D.IdDispatchType
      ,D.ReferenceDoc
      ,D.IdReferenceDocType
      ,D.IdCarrier
      ,D.IdTruckCode
      ,D.ShiftNumber
      ,D.IdWhs
      ,W.WhsName
      ,D.UserWms
      ,D.IdLocationForLift
      ,D.IdLocationStage
      ,D.SpecialField1
      ,D.SpecialField2
      ,D.SpecialField3
      ,D.SpecialField4
      ,D.DateCreated
      ,D.UserCreated
      ,D.DateModified
      ,D.UserModified
      ,C.IdCustomer
      ,C.CustomerCode
      ,C.CustomerName
      ,O.IdOwn
      ,O.OwnCode
      ,O.OwnName
      ,RD.ReferenceDocNumber
      ,B2B.ASNFile
      ,B2B.TemplateASNFile
      ,B.BranchName
      ,B.BranchCode
      ,OT.IdOutboundType
      ,OT.OutboudTypeCode
      ,OT.OutboundTypeName
      ,RDT.ReferenceDocTypeCode
      FROM Dispatch D
      INNER JOIN OutboundOrder OO 
      ON OO.IdOutboundOrder = D.IdOutboundOrder
      AND OO.IdWhs = D.IdWhs
      INNER JOIN OutboundType OT
      ON OO.IdOutboundType = OT.IdOutboundType
      AND OT.Status = 1
      INNER JOIN Customer C 
      ON OO.CustomerCode = C.CustomerCode
      AND OO.IdOwn = C.IdOwn
      INNER JOIN CustomerB2B B2B 
      ON C.IdCustomer = B2B.IdCustomer
      INNER JOIN ReferenceDoc RD 
      ON OO.IdOutboundOrder = RD.IdOutboundOrder
      AND OO.IdWhs = RD.IdWhs 
      AND OO.IdOwn = RD.IdOwn
      LEFT JOIN ReferenceDocType RDT
      ON RD.IdReferenceDocType = RDT.IdReferenceDocType
      INNER JOIN Owner O 
      ON OO.IdOwn = O.IdOwn
      INNER JOIN Warehouse W 
      ON OO.IdWhs = W.IdWhs
      LEFT JOIN Branch B
      ON B.IdBranch = OO.IdBranch
      WHERE D.IdDispatchType IN (3)
      AND B2B.IdCustomer = @IdCustomer
      @SQLPart;
    </sql>
    <parameters>
      <parameter type="Int">IdCustomer</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericEqual">OO.IdWhs</filter>
      <filter name="Owner" type="numericEqual">OO.IdOwn</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
      <filter name="Code" type="textLike">RD.ReferenceDocNumber</filter>
      <filter name="DateRange" type="textBetween">D.DateCreated</filter>
      <filter name="CodeAlt" type="textLike">OO.ReferenceNumber</filter>
    </filters>
  </query>
  <!--End SodimacB2B section-->
	
	 <!--DartelB2B section-->  
  <query code="GetByIdDispatchDartel">
    <sql>
		SELECT DD.IdDispatchDetail
		,DD.IdDispatch
		,DD.LineNumber
		,DD.IdItem
		,I.ItemCode
		,I.ShortItemName
		,I.LongItemName
		,OO.SpecialField1
		,DD.ItemQty
		,DD.FifoDate
		,DD.ExpirationDate
		,DD.FabricationDate
		,DD.Price
		,DD.IdLpnCode
		,DD.SealNumber
		,LT.LpnTypeCode AS LpnTypeCode
		,LT.LpnTypeName AS LpnTypeName
		,W.IdWhs
		,W.WhsName
		,O.IdOwn
		,O.OwnCode
		,O.OwnName
		,B.BranchName
		,B.BranchCode
		,IC.BarCode as ItemCustomerBarCode
		,OO.OutboundNumber
		,RD.ReferenceDocNumber
		,C.CustomerCode
		,DR.DriverName
		,RDT.ReferenceDocTypeName
		,D.DriveCode
		,I.Volume
		,I.Width
		,I.Length
		,IU.Volume as IUVolume
		,IU.Width as IUWidth
		,IU.Height as IUHeight
		,IU.Length as IULength
		FROM DispatchDetail DD
		INNER JOIN Dispatch D
		ON D.IdDispatch = DD.IdDispatch
		INNER JOIN OutboundOrder OO
		ON D.IdOutboundOrder = OO.IdOutboundOrder AND
		D.IdWhs = OO.IdWhs
		INNER JOIN OutboundDetail OD
		ON D.IdOutboundOrder = OD.IdOutboundOrder AND
		OD.IdItem = DD.IdItem
		INNER JOIN Item I
		ON DD.IdItem = I.IdItem
		INNER JOIN Customer C
		ON C.CustomerCode = OO.CustomerCode
		AND C.IdOwn = OO.IdOwn
		LEFT JOIN ItemCustomer IC
		ON IC.IdItem = I.IdItem
		AND IC.IdCustomer = C.IdCustomer
		LEFT JOIN ReferenceDoc RD
		ON RD.IdOutboundOrder = OO.IdOutboundOrder
		AND OO.IdWhs = RD.IdWhs
		AND OO.IdOwn = RD.IdOwn
		INNER JOIN Owner O
		ON I.IdOwn = O.IdOwn
		INNER JOIN Warehouse W
		ON DD.IdWhs = W.IdWhs
		INNER JOIN LPN L
		ON L.IdLpnCode = DD.IdLpnCode
		LEFT JOIN LPNType LT
		ON DD.LpnTypeCode = LT.LpnTypeCode
		AND O.IdOwn = LT.IdOwn
		LEFT JOIN Branch B
		ON B.IdBranch = OO.IdBranch
		INNER JOIN Driver DR
		ON D.DriveCode = DR.DriverCode
		INNER JOIN ReferenceDocType RDT
		ON RD.IdReferenceDocType = RDT.IdReferenceDocType
		OUTER APPLY (SELECT top(1) *
		FROM ItemUom IU WHERE I.IdItem = IU.IdItem) as IU
		@SQLPart
		ORDER BY D.DateCreated, D.IdDispatch, DD.LineNumber;
	</sql>
    <parameters>
	    <parameter type="SQLPart">@SQLPart</parameter>
	    <parameter type="String">IdPage</parameter>
	    <parameter type="String">EntityPropertyName</parameter>
	  </parameters>
    <filters>
      <filter name="listDispatch" type="numericIn">DD.IdDispatch</filter>
      <filter name="listDispatchDetail" type="numericIn">DD.IdDispatchDetail</filter>
    </filters>
  </query>
  
  <query code="GetDispatchSpecialHeaderDartel">
    <sql>
      SELECT D.IdDispatch
      ,D.IdOutboundOrder
      ,OO.OutboundNumber
      ,OO.ReferenceNumber
      ,OO.DeliveryAddress1
      ,OO.DeliveryAddress2
      ,D.Status
      ,D.IdTrackOutbound
      ,D.TrackOutboundDate
      ,D.IdDispatchType
      ,D.ReferenceDoc
      ,D.IdReferenceDocType
      ,D.IdCarrier
      ,D.IdTruckCode
      ,D.ShiftNumber
      ,D.IdWhs
      ,W.WhsName
      ,D.UserWms
      ,D.IdLocationForLift
      ,D.IdLocationStage
      ,D.SpecialField1
      ,D.SpecialField2
      ,D.SpecialField3
      ,D.SpecialField4
      ,D.DateCreated
      ,D.UserCreated
      ,D.DateModified
      ,D.UserModified
      ,C.IdCustomer
      ,C.CustomerCode
      ,C.CustomerName
      ,O.IdOwn
      ,O.OwnCode
      ,O.OwnName
      ,RD.ReferenceDocNumber
      ,B2B.ASNFile
      ,B2B.TemplateASNFile
      ,B.BranchName
      ,B.BranchCode
      ,OT.IdOutboundType
      ,OT.OutboudTypeCode
      ,OT.OutboundTypeName
      ,RDT.ReferenceDocTypeCode
      FROM Dispatch D
      INNER JOIN OutboundOrder OO 
      ON OO.IdOutboundOrder = D.IdOutboundOrder
      AND OO.IdWhs = D.IdWhs
      INNER JOIN OutboundType OT
      ON OO.IdOutboundType = OT.IdOutboundType
      AND OT.Status = 1
      INNER JOIN Customer C 
      ON OO.CustomerCode = C.CustomerCode
      AND OO.IdOwn = C.IdOwn
      INNER JOIN CustomerB2B B2B 
      ON C.IdCustomer = B2B.IdCustomer
      INNER JOIN ReferenceDoc RD 
      ON OO.IdOutboundOrder = RD.IdOutboundOrder
      AND OO.IdWhs = RD.IdWhs 
      AND OO.IdOwn = RD.IdOwn
      LEFT JOIN ReferenceDocType RDT
      ON RD.IdReferenceDocType = RDT.IdReferenceDocType
      INNER JOIN Owner O 
      ON OO.IdOwn = O.IdOwn
      INNER JOIN Warehouse W 
      ON OO.IdWhs = W.IdWhs
      LEFT JOIN Branch B
      ON B.IdBranch = OO.IdBranch
      WHERE D.IdDispatchType IN (3)
      AND B2B.IdCustomer = @IdCustomer
      @SQLPart;
    </sql>
    <parameters>
      <parameter type="Int">IdCustomer</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericEqual">OO.IdWhs</filter>
      <filter name="Owner" type="numericEqual">OO.IdOwn</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
      <filter name="Code" type="textLike">RD.ReferenceDocNumber</filter>
      <filter name="DateRange" type="textBetween">D.DateCreated</filter>
      <filter name="CodeAlt" type="textLike">OO.ReferenceNumber</filter>
    </filters>
  </query>
  <!--End DartelB2B section-->
  
  <!--WalmartB2B section-->  
  <query code="GetByIdDispatchWalmart">
    <sql>
          SELECT 
                 DD.IdDispatchDetail
                ,DD.IdDispatch
                ,DD.LineNumber
                ,DD.IdItem
                ,I.ItemCode
                ,I.ShortItemName
                ,I.LongItemName
                ,OO.SpecialField1
                ,DD.ItemQty
                ,DD.FifoDate
                ,DD.ExpirationDate
                ,DD.FabricationDate
                ,DD.Price
                ,DD.IdLpnCode
                ,DD.SealNumber
                ,W.IdWhs
                ,W.WhsName
                ,O.IdOwn
                ,O.OwnCode
                ,O.OwnName
                ,IC.BarCode as ItemCustomerBarCode
                ,IC.ItemCodeCustomer
                ,OO.OutboundNumber
                ,RD.ReferenceDocNumber
                ,IU.ConversionFactor
            FROM DispatchDetail DD
      INNER JOIN Dispatch D
              ON D.IdDispatch = DD.IdDispatch
      INNER JOIN OutboundOrder OO
              ON D.IdOutboundOrder = OO.IdOutboundOrder 
             AND D.IdWhs = OO.IdWhs
      INNER JOIN OutboundDetail OD
              ON D.IdOutboundOrder = OD.IdOutboundOrder 
             AND OD.IdItem = DD.IdItem
      INNER JOIN Item I
              ON DD.IdItem = I.IdItem
      INNER JOIN Customer C
              ON C.CustomerCode = OO.CustomerCode
             AND C.IdOwn = OO.IdOwn
      INNER JOIN CustomerB2B CB2B
		          ON CB2B.IdCustomer = C.IdCustomer
       LEFT JOIN ItemCustomer IC
              ON IC.IdItem = I.IdItem
             AND IC.IdCustomer = C.IdCustomer
      INNER JOIN ItemUom IU
              ON IU.IdItem = I.IdItem
             AND UPPER(IU.UomName) = UPPER(CB2B.UomTypeLpnCode)
       LEFT JOIN ReferenceDoc RD
              ON RD.IdOutboundOrder = OO.IdOutboundOrder
             AND OO.IdWhs = RD.IdWhs
             AND OO.IdOwn = RD.IdOwn
      INNER JOIN Owner O
              ON I.IdOwn = O.IdOwn
      INNER JOIN Warehouse W
              ON DD.IdWhs = W.IdWhs
                 @SQLPart
        ORDER BY D.DateCreated, 
                 D.IdDispatch, 
                 DD.LineNumber;
    </sql>
    <parameters>
	    <parameter type="SQLPart">@SQLPart</parameter>
	    <parameter type="String">IdPage</parameter>
	    <parameter type="String">EntityPropertyName</parameter>
	  </parameters>
    <filters>
      <filter name="listDispatch" type="numericIn">DD.IdDispatch</filter>
      <filter name="listDispatchDetail" type="numericIn">DD.IdDispatchDetail</filter>
    </filters>
  </query>
  
  <query code="GetDispatchSpecialHeaderWalmart">
    <sql>
          SELECT 
                 D.IdDispatch
                ,D.IdOutboundOrder
                ,OO.OutboundNumber
                ,OO.ReferenceNumber
                ,OO.DeliveryAddress1
                ,OO.DeliveryAddress2
                ,D.Status
                ,D.IdTrackOutbound
                ,D.TrackOutboundDate
                ,D.IdDispatchType
                ,D.ReferenceDoc
                ,D.IdReferenceDocType
                ,D.IdCarrier
                ,D.IdTruckCode
                ,D.ShiftNumber
                ,D.IdWhs
                ,W.WhsName
                ,D.UserWms
                ,D.IdLocationForLift
                ,D.IdLocationStage
                ,C.IdCustomer
                ,C.CustomerCode
                ,C.CustomerName
                ,O.IdOwn
                ,O.OwnCode
                ,O.OwnName
                ,RD.ReferenceDocNumber
                ,B2B.ASNFile
                ,B2B.TemplateASNFile
                ,OT.IdOutboundType
                ,OT.OutboudTypeCode
                ,OT.OutboundTypeName
                ,RDT.ReferenceDocTypeCode
            FROM Dispatch D
      INNER JOIN OutboundOrder OO 
              ON OO.IdOutboundOrder = D.IdOutboundOrder
             AND OO.IdWhs = D.IdWhs
      INNER JOIN OutboundType OT
              ON OO.IdOutboundType = OT.IdOutboundType
             AND OT.Status = 1
      INNER JOIN Customer C 
              ON OO.CustomerCode = C.CustomerCode
             AND OO.IdOwn = C.IdOwn
      INNER JOIN CustomerB2B B2B 
              ON C.IdCustomer = B2B.IdCustomer
      INNER JOIN ReferenceDoc RD 
              ON OO.IdOutboundOrder = RD.IdOutboundOrder
             AND OO.IdWhs = RD.IdWhs 
             AND OO.IdOwn = RD.IdOwn
       LEFT JOIN ReferenceDocType RDT
              ON RD.IdReferenceDocType = RDT.IdReferenceDocType
      INNER JOIN Owner O 
              ON OO.IdOwn = O.IdOwn
      INNER JOIN Warehouse W 
              ON OO.IdWhs = W.IdWhs
           WHERE D.IdDispatchType IN (3)
             AND B2B.IdCustomer = @IdCustomer
                 @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
            FROM CfgEntityProperty qf
            JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
           WHERE QueryName = @queryName
        ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="Int">IdCustomer</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericEqual">OO.IdWhs</filter>
      <filter name="Owner" type="numericEqual">OO.IdOwn</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
      <filter name="Code" type="textLike">RD.ReferenceDocNumber</filter>
      <filter name="DateRange" type="textBetween">D.DateCreated</filter>
      <filter name="CodeAlt" type="textLike">OO.ReferenceNumber</filter>
    </filters>
  </query>
  
  <query code="GetDispatchSpecialHeaderCencosud">
    <sql>
      SELECT DISTINCT
      D.IdDispatch
      ,D.IdOutboundOrder
      ,OO.OutboundNumber
      ,OO.ReferenceNumber
      ,OO.DeliveryAddress1
      ,OO.DeliveryAddress2
      ,D.Status
      ,D.IdTrackOutbound
      ,D.TrackOutboundDate
      ,D.IdDispatchType
      ,D.ReferenceDoc
      ,D.IdReferenceDocType
      ,D.IdCarrier
      ,D.IdTruckCode
      ,D.ShiftNumber
      ,D.IdWhs
      ,W.WhsName
      ,D.UserWms
      ,D.IdLocationForLift
      ,D.IdLocationStage
      ,C.IdCustomer
      ,C.CustomerCode
      ,C.CustomerName
      ,O.IdOwn
      ,O.OwnCode
      ,O.OwnName
      ,RD.ReferenceDocNumber
      ,B2B.ASNFile
      ,B2B.TemplateASNFile
      ,OT.IdOutboundType
      ,OT.OutboudTypeCode
      ,OT.OutboundTypeName
      ,RDT.ReferenceDocTypeCode
      FROM Dispatch D
      INNER JOIN OutboundOrder OO
      ON OO.IdOutboundOrder = D.IdOutboundOrder
      AND OO.IdWhs = D.IdWhs
      INNER JOIN OutboundType OT
      ON OO.IdOutboundType = OT.IdOutboundType
      AND OT.Status = 1
      INNER JOIN Customer C
      ON OO.CustomerCode = C.CustomerCode
      AND OO.IdOwn = C.IdOwn
      INNER JOIN CustomerB2B B2B
      ON C.IdCustomer = B2B.IdCustomer
      AND B2B.ASNFile = 1
      INNER JOIN ReferenceDoc RD
      ON OO.IdOutboundOrder = RD.IdOutboundOrder
      AND OO.IdWhs = RD.IdWhs
      AND OO.IdOwn = RD.IdOwn
      LEFT JOIN ReferenceDocType RDT
      ON RD.IdReferenceDocType = RDT.IdReferenceDocType
      INNER JOIN Owner O
      ON OO.IdOwn = O.IdOwn
      INNER JOIN Warehouse W
      ON OO.IdWhs = W.IdWhs
      WHERE D.IdDispatchType IN (2, 3)
      AND B2B.IdCustomer = @IdCustomer
      @SQLPart;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="Int">IdCustomer</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericEqual">OO.IdWhs</filter>
      <filter name="Owner" type="numericEqual">OO.IdOwn</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
      <filter name="Code" type="textLike">RD.ReferenceDocNumber</filter>
      <filter name="DateRange" type="textBetween">D.DateCreated</filter>
      <filter name="CodeAlt" type="textLike">OO.ReferenceNumber</filter>
    </filters>
  </query>
  
  <query code="GetByIdDispatchCencosud">
    <sql>
      SELECT DISTINCT
      DD.IdDispatch
      ,DD.LineNumber
      ,DD.IdItem
      ,I.ItemCode
      ,I.ShortItemName
      ,I.LongItemName
      ,OO.SpecialField1
      ,CAST(ROUND((SUM(DD.ItemQty) / IU.ConversionFactor),0) AS INTEGER) AS ItemQty
      ,DD.FifoDate
      ,DD.ExpirationDate
      ,DD.FabricationDate
      ,DD.LotNumber
      ,DD.Price
      ,DD.IdLpnCode
      ,DD.SealNumber
      ,W.IdWhs
      ,W.WhsName
      ,O.IdOwn
      ,O.OwnCode
      ,O.OwnName
      ,IC.BarCode as ItemCustomerBarCode
      ,IC.ItemCodeCustomer
      ,OO.OutboundNumber
      ,RD.ReferenceDocNumber
      ,IU.ConversionFactor
      ,B.BranchCode
      ,B.BranchName
      ,D.DateCreated
      FROM DispatchDetail DD
      INNER JOIN Dispatch D
      ON D.IdDispatch = DD.IdDispatch
      INNER JOIN OutboundOrder OO
      ON D.IdOutboundOrder = OO.IdOutboundOrder
      AND D.IdWhs = OO.IdWhs
      INNER JOIN OutboundDetail OD
      ON D.IdOutboundOrder = OD.IdOutboundOrder
      AND OD.IdItem = DD.IdItem
      INNER JOIN Item I
      ON DD.IdItem = I.IdItem
      INNER JOIN Customer C
      ON C.CustomerCode = OO.CustomerCode
      AND C.IdOwn = OO.IdOwn
      INNER JOIN CustomerB2B CB2B
      ON CB2B.IdCustomer = C.IdCustomer
      LEFT JOIN ItemCustomer IC
      ON IC.IdItem = I.IdItem
      AND IC.IdCustomer = C.IdCustomer
      INNER JOIN ItemUom IU
      ON IU.IdItem = I.IdItem
      AND UPPER(IU.UomName) = UPPER(CB2B.UomTypeLpnCode)
      LEFT JOIN ReferenceDoc RD
      ON RD.IdOutboundOrder = OO.IdOutboundOrder
      AND OO.IdWhs = RD.IdWhs
      AND OO.IdOwn = RD.IdOwn
      INNER JOIN Owner O
      ON I.IdOwn = O.IdOwn
      INNER JOIN Warehouse W
      ON DD.IdWhs = W.IdWhs
      LEFT JOIN Branch B
      ON B.IdBranch = OO.IdBranch
      @SQLPart
      GROUP BY DD.IdDispatch
      ,DD.LineNumber
      ,DD.IdItem
      ,I.ItemCode
      ,I.ShortItemName
      ,I.LongItemName
      ,OO.SpecialField1
      ,DD.FifoDate
      ,DD.ExpirationDate
      ,DD.FabricationDate
      ,DD.LotNumber
      ,DD.Price
      ,DD.IdLpnCode
      ,DD.SealNumber
      ,W.IdWhs
      ,W.WhsName
      ,O.IdOwn
      ,O.OwnCode
      ,O.OwnName
      ,IC.BarCode
      ,IC.ItemCodeCustomer
      ,OO.OutboundNumber
      ,RD.ReferenceDocNumber
      ,IU.ConversionFactor
      ,B.BranchCode
      ,B.BranchName
      ,D.DateCreated
      ORDER BY D.DateCreated,
      DD.IdDispatch,
      DD.LineNumber;
    </sql>
    <parameters>
	    <parameter type="SQLPart">@SQLPart</parameter>
	    <parameter type="String">IdPage</parameter>
	    <parameter type="String">EntityPropertyName</parameter>
	  </parameters>
    <filters>
      <filter name="listDispatch" type="numericIn">DD.IdDispatch</filter>
      <filter name="listDispatchDetail" type="numericIn">DD.IdDispatchDetail</filter>
    </filters>
  </query>
  <!--End WalmartB2B section-->

  <!--End Funtional section-->

  <!--BILLING section-->
  <!-- BillingMoney section Begin  -->
  <query code="BillingMoney_Insert">
	<sql>
		INSERT INTO BillingMoney
		(IdBillingMoney,
		BillingMoneyCode,
		Description,
		Value,
		DateCreated,
		UserCreated
		)
		VALUES
		(@idBillingMoney,
		@billingMoneyCode,
		@description,
		@value,
		@dateCreated,
		@userCreated)
	</sql>
	<parameters>
		<parameter type="Int">idBillingMoney</parameter>
		<parameter type="String">billingMoneyCode</parameter>
		<parameter type="String">description</parameter>
		<parameter type="Float">value</parameter>
		<parameter type="String">specialField1</parameter>
		<parameter type="String">specialField2</parameter>
		<parameter type="String">specialField3</parameter>
		<parameter type="String">specialField4</parameter>
		<parameter type="DateTime">dateCreated</parameter>
		<parameter type="String">userCreated</parameter>
	</parameters>
  </query>

  <query code="BillingMoney_Update">
	<sql>
		UPDATE BillingMoney
		SET BillingMoneyCode = @billingMoneyCode,
		Description = @description,
		Value = @value,
		DateModified = @dateModified,
		UserModified = @userModified
		WHERE IdBillingMoney = @idBillingMoney
	</sql>
	<parameters>
		<parameter type="Int">idBillingMoney</parameter>
		<parameter type="String">billingMoneyCode</parameter>
		<parameter type="String">description</parameter>
		<parameter type="Float">value</parameter>
		<parameter type="String">specialField1</parameter>
		<parameter type="String">specialField2</parameter>
		<parameter type="String">specialField3</parameter>
		<parameter type="String">specialField4</parameter>
		<parameter type="DateTime">dateModified</parameter>
		<parameter type="String">userModified</parameter>
	</parameters>
  </query>

  <query code="BillingMoney_Delete">
	<sql>
		DELETE
		FROM BillingMoney
		WHERE IdBillingMoney = @idBillingMoney;
	</sql>
	<parameters>
		<parameter type="Int">idBillingMoney</parameter>
	</parameters>
  </query>

  <query code="BillingMoney_GetByIdBillingMoney">
	<sql>
		SELECT
		IdBillingMoney,
		BillingMoneyCode,
		Description,
		Value,
		DateCreated,
		UserCreated,
		DateModified,
		UserModified
		FROM BillingMoney
		WHERE IdBillingMoney = @idBillingMoney;

		SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
		FROM CfgEntityProperty qf
		JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
		WHERE QueryName = @queryName
		AND IdPage = @idPage
		ORDER BY FieldOrder
	</sql>
	<parameters>
		<parameter type="Int">idBillingMoney</parameter>
		<parameter type="String">queryName</parameter>
		<parameter type="String">idPage</parameter>
	</parameters>
  </query>

  <query code="BillingMoney_GetByAnyParameter">
	<sql>
		SELECT
		IdBillingMoney,
		BillingMoneyCode,
		Description,
		Value,
		DateCreated,
		UserCreated,
		DateModified,
		UserModified
		FROM BillingMoney
		WHERE 1=1
		@SQLPart
	</sql>
	<parameters>
		<parameter type="SQLPart">@SQLPart</parameter>
	</parameters>
	<filters>
	  <filter name="IdBillingMoney" type="numericEqual">IdBillingMoney</filter>
	  <filter name="BillingMoneyCode" type="textEqual">BillingMoneyCode</filter>
	  <filter name="Description" type="textEqual">Description</filter>
	  <filter name="SpecialField1" type="textEqual">SpecialField1</filter>
	  <filter name="SpecialField2" type="textEqual">SpecialField2</filter>
	  <filter name="SpecialField3" type="textEqual">SpecialField3</filter>
	  <filter name="SpecialField4" type="textEqual">SpecialField4</filter>
	  <filter name="DateCreated" type="textEqual">DateCreated</filter>
	  <filter name="UserCreated" type="textEqual">UserCreated</filter>
	  <filter name="DateModified" type="textEqual">DateModified</filter>
	  <filter name="UserModified" type="textEqual">UserModified</filter>
	</filters>
	<sub-querys>
	  <sub-query code="OrderByIdBillingMoney">
		<sql>
			ORDER BY IdBillingMoney
		</sql>
		<parameters>
		</parameters>
	  </sub-query>
	</sub-querys>
  </query>

  <query code="BillingMoney_FindAll">
    <sql>
      SELECT
      IdBillingMoney,
      BillingMoneyCode,
      Description,
      Value,
      DateCreated,
      UserCreated,
      DateModified,
      UserModified
      FROM BillingMoney
      @SQLPart
      ORDER BY Description;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="Description" type="textLike">Description</filter>
    </filters>
  </query>
  <!-- End BillingMoney section  -->

  <!-- BillingContract section Begin  -->
  <query code="BillingContract_Insert">
	<sql>
		INSERT INTO BillingContract
		(IdContract,
		IdOwn,
		Description,
		Status,
		DateCreated,
		UserCreated
		)
		VALUES
		(@idContract,
		@idOwn,
		@description,
		@status,
		@dateCreated,
		@userCreated)
	</sql>
	<parameters>
		<parameter type="Int">idContract</parameter>
		<parameter type="Int">idOwn</parameter>
		<parameter type="String">description</parameter>
		<parameter type="Boolean">status</parameter>
		<parameter type="String">specialField1</parameter>
		<parameter type="String">specialField2</parameter>
		<parameter type="String">specialField3</parameter>
		<parameter type="String">specialField4</parameter>
		<parameter type="DateTime">dateCreated</parameter>
		<parameter type="String">userCreated</parameter>
	</parameters>
  </query>

  <query code="BillingContract_Update">
	<sql>
		UPDATE BillingContract
		SET IdOwn = @idOwn,
		Description = @description,
		Status = @status,
		DateModified = @dateModified,
		UserModified = @userModified
		WHERE IdContract = @idContract
	</sql>
	<parameters>
		<parameter type="Int">idContract</parameter>
		<parameter type="Int">idOwn</parameter>
		<parameter type="String">description</parameter>
		<parameter type="Boolean">status</parameter>
		<parameter type="String">specialField1</parameter>
		<parameter type="String">specialField2</parameter>
		<parameter type="String">specialField3</parameter>
		<parameter type="String">specialField4</parameter>
		<parameter type="DateTime">dateModified</parameter>
		<parameter type="String">userModified</parameter>
	</parameters>
  </query>

  <query code="BillingContract_Delete">
	<sql>
		DELETE
		FROM BillingContract
		WHERE IdContract = @idContract;
	</sql>
	<parameters>
		<parameter type="Int">idContract</parameter>
	</parameters>
  </query>

  <query code="BillingContract_GetByIdContract">
	<sql>
		SELECT
		IdContract,
		IdOwn,
		Description,
		Status,
		DateCreated,
		UserCreated,
		DateModified,
		UserModified
		FROM BillingContract
		WHERE IdContract = @idContract;

		SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
		FROM CfgEntityProperty qf
		JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
		WHERE QueryName = @queryName
		AND IdPage = @idPage
		ORDER BY FieldOrder
	</sql>
	<parameters>
		<parameter type="Int">idContract</parameter>
		<parameter type="String">queryName</parameter>
		<parameter type="String">idPage</parameter>
	</parameters>
  </query>

  <query code="BillingContract_FindAll">
    <sql>
      SELECT
      BC.IdContract,
      O.IdOwn,
      O.OwnCode,
      O.OwnName,
      BC.Description,
      BC.Status,
      BC.DateCreated,
      BC.UserCreated,
      BC.DateModified,
      BC.UserModified
      FROM BillingContract BC INNER JOIN
      Owner O ON BC.IdOwn = O.IdOwn
      @SQLPart
      ORDER BY O.OwnCode, O.OwnName, BC.Description;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="Owner" type="numericIn">O.IdOwn</filter>
      <filter name="Description" type="textLike">BC.Description</filter>
    </filters>
  </query>

  <query code="BillingContract_GetByAnyParameter">
	<sql>
		SELECT
		IdContract,
		IdOwn,
		Description,
		Status,
		DateCreated,
		UserCreated,
		DateModified,
		UserModified
		FROM BillingContract
		WHERE 1=1
		@SQLPart
	</sql>
	<parameters>
		<parameter type="SQLPart">@SQLPart</parameter>
	</parameters>
	<filters>
		<filter name="IdContract" type="numericEqual">IdContract</filter>
		<filter name="IdOwn" type="numericEqual">IdOwn</filter>
		<filter name="Description" type="textEqual">Description</filter>
		<filter name="SpecialField1" type="textEqual">SpecialField1</filter>
		<filter name="SpecialField2" type="textEqual">SpecialField2</filter>
		<filter name="SpecialField3" type="textEqual">SpecialField3</filter>
		<filter name="SpecialField4" type="textEqual">SpecialField4</filter>
		<filter name="DateCreated" type="textEqual">DateCreated</filter>
		<filter name="UserCreated" type="textEqual">UserCreated</filter>
		<filter name="DateModified" type="textEqual">DateModified</filter>
		<filter name="UserModified" type="textEqual">UserModified</filter>
	</filters>
	<sub-querys>
		<sub-query code="OrderByIdContract">
			<sql>
				ORDER BY IdContract
			</sql>
			<parameters>
			</parameters>
		</sub-query>
	</sub-querys>
  </query>
  <!-- End BillingContract section  -->

  <!-- BillingTimeType section Begin  -->
  <query code="BillingTimeType_Insert">
	<sql>
		INSERT INTO BillingTimeType
		(IdBillingTimeType,
		Description,
		Days,
		DateCreated,
		UserCreated
		)
		VALUES
		(@idBillingTimeType,
		@description,
		@days,
		@dateCreated,
		@userCreated)
	</sql>
	<parameters>
		<parameter type="Int">idBillingTimeType</parameter>
		<parameter type="String">description</parameter>
		<parameter type="Int">days</parameter>
		<parameter type="String">specialField1</parameter>
		<parameter type="String">specialField2</parameter>
		<parameter type="String">specialField3</parameter>
		<parameter type="String">specialField4</parameter>
		<parameter type="DateTime">dateCreated</parameter>
		<parameter type="String">userCreated</parameter>
	</parameters>
  </query>

  <query code="BillingTimeType_Update">
	<sql>
		UPDATE BillingTimeType
		SET Description = @description,
		Status = @days,
		DateModified = @dateModified,
		UserModified = @userModified
		WHERE IdBillingTimeType = @idBillingTimeType
	</sql>
	<parameters>
		<parameter type="Int">idBillingTimeType</parameter>
		<parameter type="String">description</parameter>
		<parameter type="Int">days</parameter>
		<parameter type="String">specialField1</parameter>
		<parameter type="String">specialField2</parameter>
		<parameter type="String">specialField3</parameter>
		<parameter type="String">specialField4</parameter>
		<parameter type="DateTime">dateModified</parameter>
		<parameter type="String">userModified</parameter>
	</parameters>
  </query>

  <query code="BillingTimeType_Delete">
	<sql>
		DELETE
		FROM BillingTimeType
		WHERE IdBillingTimeType = @idBillingTimeType;
	</sql>
	<parameters>
		<parameter type="Int">idBillingTimeType</parameter>
	</parameters>
  </query>

  <query code="BillingTimeType_GetByIdBillingTimeType">
	<sql>
		SELECT
		idBillingTimeType,
		Description,
		Days,
		DateCreated,
		UserCreated,
		DateModified,
		UserModified
		FROM BillingTimeType
		WHERE IdBillingTimeType = @idBillingTimeType;

		SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
		FROM CfgEntityProperty qf
		JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
		WHERE QueryName = @queryName
		AND IdPage = @idPage
		ORDER BY FieldOrder
	</sql>
	<parameters>
		<parameter type="Int">idBillingTimeType</parameter>
		<parameter type="String">queryName</parameter>
		<parameter type="String">idPage</parameter>
	</parameters>
  </query>

  <query code="BillingTimeType_GetByAnyParameter">
	<sql>
		SELECT
		IdBillingTimeType,
		Description,
		Days,
		DateCreated,
		UserCreated,
		DateModified,
		UserModified
		FROM BillingTimeType
		WHERE 1=1
		@SQLPart
	</sql>
	<parameters>
		<parameter type="SQLPart">@SQLPart</parameter>
	</parameters>
	<filters>
		<filter name="IdBillingTimeType" type="numericEqual">IdBillingTimeType</filter>
		<filter name="Description" type="textEqual">Description</filter>
		<filter name="SpecialField1" type="textEqual">SpecialField1</filter>
		<filter name="SpecialField2" type="textEqual">SpecialField2</filter>
		<filter name="SpecialField3" type="textEqual">SpecialField3</filter>
		<filter name="SpecialField4" type="textEqual">SpecialField4</filter>
		<filter name="DateCreated" type="textEqual">DateCreated</filter>
		<filter name="UserCreated" type="textEqual">UserCreated</filter>
		<filter name="DateModified" type="textEqual">DateModified</filter>
		<filter name="UserModified" type="textEqual">UserModified</filter>
	</filters>
	<sub-querys>
	  <sub-query code="OrderByIdBillingTimeType">
		<sql>
			ORDER BY IdBillingTimeType
		</sql>
		<parameters>
		</parameters>
	  </sub-query>
	</sub-querys>
  </query>
  
  <query code="BillingTimeType_FindAll">
    <sql>
      SELECT
      IdBillingTimeType,
      Description,
      Days,
      DateCreated,
      UserCreated,
      DateModified,
      UserModified
      FROM BillingTimeType
      @SQLPart
      ORDER BY Description;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="Description" type="textLike">Description</filter>
    </filters>
  </query>
  <!-- End BillingTimeType section  -->

  <!-- BillingMode section Begin  -->
  <query code="BillingMode_Insert">
    <sql>
      INSERT INTO BillingMode
      (IdBillingMode,
      BillingModeName,
      BillingModeCode,
      Status,
      TimeType,
      DateCreated,
      UserCreated
      )
      VALUES
      (@idBillingMode,
      @billingModeName,
      @billingModeCode,
      @status,
      @timeType,
      @dateCreated,
      @userCreated)
    </sql>
    <parameters>
      <parameter type="Int">idBillingMode</parameter>
      <parameter type="String">billingModeName</parameter>
      <parameter type="String">billingModeCode</parameter>
      <parameter type="Boolean">status</parameter>
      <parameter type="String">timeType</parameter>
      <parameter type="DateTime">dateCreated</parameter>
      <parameter type="String">userCreated</parameter>
    </parameters>
  </query>

  <query code="BillingMode_Update">
    <sql>
      UPDATE BillingMode
      SET BillingModeName = @billingModeName,
      BillingModeCode = @billingModeCode,
      Status = @status,
      TimeType = @timeType,
      DateModified = @dateModified,
      UserModified = @userModified
      WHERE IdBillingMode = @idBillingMode
    </sql>
    <parameters>
      <parameter type="Int">idBillingMode</parameter>
      <parameter type="String">billingModeName</parameter>
      <parameter type="String">billingModeCode</parameter>
      <parameter type="Boolean">status</parameter>
      <parameter type="String">timeType</parameter>
      <parameter type="DateTime">dateModified</parameter>
      <parameter type="String">userModified</parameter>
    </parameters>
  </query>

  <query code="BillingMode_Delete">
    <sql>
      DELETE
      FROM BillingMode
      WHERE IdBillingMode = @idBillingMode;
    </sql>
    <parameters>
      <parameter type="Int">idBillingMode</parameter>
    </parameters>
  </query>

  <query code="BillingMode_GetByIdBillingMode">
    <sql>
      SELECT
      IdBillingMode,
      BillingModeName,
      BillingModeCode,
      Status,
      TimeType,
      DateCreated,
      UserCreated,
      DateModified,
      UserModified
      FROM BillingMode
      WHERE IdBillingMode = @idBillingMode;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      AND IdPage = @idPage
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="Int">idBillingMode</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="String">idPage</parameter>
    </parameters>
  </query>

  <query code="BillingMode_GetByAnyParameter">
    <sql>
      SELECT
      IdBillingMode,
      BillingModeName,
      BillingModeCode,
      Status,
      TimeType,
      DateCreated,
      UserCreated,
      DateModified,
      UserModified
      FROM BillingMode 
      WHERE 1=1
      @SQLPart
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="IdBillingMode" type="numericEqual">IdBillingMode</filter>
      <filter name="BillingModeName" type="textEqual">BillingModeName</filter>
      <filter name="BillingModeCode" type="textEqual">BillingModeCode</filter>
      <filter name="BillingModeTimeType" type="textEqual">TimeType</filter>
      <filter name="DateCreated" type="textEqual">DateCreated</filter>
      <filter name="UserCreated" type="textEqual">UserCreated</filter>
      <filter name="DateModified" type="textEqual">DateModified</filter>
      <filter name="UserModified" type="textEqual">UserModified</filter>
    </filters>
    <sub-querys>
      <sub-query code="OrderByIdBillingMode">
        <sql>
          ORDER BY IdBillingMode
        </sql>
        <parameters>
        </parameters>
      </sub-query>
    </sub-querys>
  </query>

  <query code="BillingMode_FindAll">
    <sql>
      SELECT
      IdBillingMode,
      BillingModeName,
      BillingModeCode,
      Status,
      TimeType,
      DateCreated,
      UserCreated,
      DateModified,
      UserModified
      FROM BillingMode
      @SQLPart
      ORDER BY BillingModeName;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="Description" type="textLike">BillingModeName</filter>
    </filters>
  </query>
  <!-- End BillingMode section  -->

  <!-- BillingType section Begin  -->
  <query code="BillingType_Insert">
	<sql>
    INSERT INTO BillingType
    (IdBillingType,
    BillingTypeName,
    BillingTypeCode,
    Status,
    IdBillingMode,
    IdBillingStep,
    LPNTypeCode,
    IdVas,
    TimeType,
    DateCreated,
    UserCreated,
    IdWorkZone,
    OutboundTypeCode
    )
    VALUES
    (@idBillingType,
    @billingTypeName,
    @billingTypeCode,
    @status,
    @idBillingMode,
    @idBillingStep,
    @LPNTypeCode,
    @IdVas,
    @TimeType,
    @dateCreated,
    @userCreated,
    @IdWorkZone,
    @OutboundTypeCode)
  </sql>
	<parameters>
		<parameter type="Int">idBillingType</parameter>
		<parameter type="String">billingTypeName</parameter>
		<parameter type="String">billingTypeCode</parameter>
		<parameter type="Boolean">status</parameter>
		<parameter type="Int">idBillingMode</parameter>
    <parameter type="Int">idBillingStep</parameter>
    <parameter type="String">LPNTypeCode</parameter>
    <parameter type="Int">IdVas</parameter>
    <parameter type="String">TimeType</parameter>
		<parameter type="DateTime">dateCreated</parameter>
		<parameter type="String">userCreated</parameter>
    <parameter type="Int">IdWorkZone</parameter>
    <parameter type="String">OutboundTypeCode</parameter>
	</parameters>
  </query>

  <query code="BillingType_Update">
	<sql>
    UPDATE BillingType
    SET BillingTypeName = @billingTypeName,
    BillingTypeCode = @billingTypeCode,
    Status = @status,
    IdBillingMode = @idBillingMode,
    IdBillingStep = @idBillingStep,
    LPNTypeCode = @LPNTypeCode,
    IdVas = @IdVas,
    TimeType = @TimeType,
    DateModified = @dateModified,
    UserModified = @userModified,
    IdWorkZone = @IdWorkZone,
    OutboundTypeCode = @OutboundTypeCode
    WHERE IdBillingType = @idBillingType
  </sql>
	<parameters>
		<parameter type="Int">idBillingType</parameter>
		<parameter type="String">billingTypeName</parameter>
		<parameter type="String">billingTypeCode</parameter>
		<parameter type="Boolean">status</parameter>
		<parameter type="Int">idBillingMode</parameter>
    <parameter type="Int">idBillingStep</parameter>
    <parameter type="String">LPNTypeCode</parameter>
    <parameter type="Int">IdVas</parameter>
    <parameter type="String">TimeType</parameter>
		<parameter type="DateTime">dateModified</parameter>
		<parameter type="String">userModified</parameter>
    <parameter type="Int">IdWorkZone</parameter>
    <parameter type="String">OutboundTypeCode</parameter>
	</parameters>
  </query>

  <query code="BillingType_Delete">
	<sql>
		DELETE
		FROM BillingType
		WHERE IdBillingType = @idBillingType;
	</sql>
	<parameters>
		<parameter type="Int">idBillingType</parameter>
	</parameters>
  </query>

  <query code="BillingType_GetByIdBillingType">
	<sql>
		SELECT
		IdBillingType,
		BillingTypeName,
		BillingTypeCode,
		Status,
		IdBillingMode,
    IdBillingStep,
    LPNTypeCode,
    IdVas,
    TimeType,
		DateCreated,
		UserCreated,
		DateModified,
		UserModified
		FROM BillingType
		WHERE IdBillingType = @idBillingType;

		SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
		FROM CfgEntityProperty qf
		JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
		WHERE QueryName = @queryName
		AND IdPage = @idPage
		ORDER BY FieldOrder
	</sql>
	<parameters>
		<parameter type="Int">idBillingType</parameter>
		<parameter type="String">queryName</parameter>
		<parameter type="String">idPage</parameter>
	</parameters>
  </query>

  <query code="BillingType_GetByAnyParameter">
	<sql>
    SELECT
    TY.IdBillingType,
    TY.BillingTypeName,
    TY.BillingTypeCode,
    TY.Status,
    TY.TimeType,
    MO.IdBillingMode,
    MO.BillingModeName,
    MO.BillingModeCode,
    MO.TimeType BillingModeTimeType,
    MO.Status BillingModeStatus,
    ST.IdBillingStep,
    ST.BillingStepName,
    ST.BillingStepCode,
    --LPN.LPNTypeCode,
    --LPN.LPNTypeName,
    VAS.IdVas,
    VAS.VasName,
    TY.DateCreated,
    TY.UserCreated,
    TY.DateModified,
    TY.UserModified,
    W.IdWorkZone,
    W.WorkZoneName
    FROM BillingType TY
    LEFT JOIN BillingMode MO
    ON TY.IdBillingMode = MO.IdBillingMode
    LEFT JOIN BillingStep ST
    ON ST.IdBillingStep = TY.IdBillingStep
    --LEFT JOIN LPNType LPN
    --ON LPN.LPNTypeCode = TY.LPNTypeCode
    LEFT JOIN Vas
    ON Vas.IdVas = TY.IdVas
    LEFT JOIN WorkZone W
    ON W.IdWorkZone = TY.IdWorkZone
    WHERE 1=1
    @SQLPart
  </sql>
	<parameters>
		<parameter type="SQLPart">@SQLPart</parameter>
	</parameters>
	<filters>
		<filter name="IdBillingType" type="numericEqual">TY.IdBillingType</filter>
		<filter name="BillingTypeName" type="textEqual">TY.BillingTypeName</filter>
		<filter name="BillingTypeCode" type="textEqual">TY.BillingTypeCode</filter>
		<filter name="IdBillingMode" type="numericEqual">TY.IdBillingMode</filter>
    <filter name="IdBillingStep" type="numericEqual">TY.IdBillingStep</filter>
    <filter name="LPNTypeCode" type="textEqual">TY.LPNTypeCode</filter>
    <filter name="IdVas" type="numericEqual">TY.IdVas</filter>
    <filter name="TimeType" type="textEqual">TY.TimeType</filter>
		<filter name="DateCreated" type="textEqual">TY.DateCreated</filter>
		<filter name="UserCreated" type="textEqual">TY.UserCreated</filter>
		<filter name="DateModified" type="textEqual">TY.DateModified</filter>
		<filter name="UserModified" type="textEqual">TY.UserModified</filter>
	</filters>
	<sub-querys>
	  <sub-query code="OrderByIdBillingType">
		<sql>
			ORDER BY IdBillingType
		</sql>
		<parameters>
		</parameters>
	  </sub-query>
	</sub-querys>
  </query>
  
  <query code="BillingType_FindAll">
    <sql>
      SELECT
      TY.IdBillingType,
      TY.BillingTypeName,
      TY.BillingTypeCode,
      TY.Status,
      TY.TimeType,
      MO.IdBillingMode,
      MO.BillingModeName,
      MO.BillingModeCode,
      MO.TimeType BillingModeTimeType,
      MO.Status BillingModeStatus,
      ST.IdBillingStep,
      ST.BillingStepName,
      ST.BillingStepCode,
      LPN.LPNTypeCode,
      LPN.LPNTypeName,
      VAS.IdVas,
      VAS.VasName,
      TY.DateCreated,
      TY.UserCreated,
      TY.DateModified,
      TY.UserModified,
      W.IdWorkZone,
      W.WorkZoneName,
      OT.OutboudTypeCode AS OutboundTypeCode,
      OT.OutboundTypeName
      FROM BillingType TY
      LEFT JOIN BillingMode MO
      ON TY.IdBillingMode = MO.IdBillingMode
      LEFT JOIN BillingStep ST
      ON ST.IdBillingStep = TY.IdBillingStep
      LEFT JOIN LPNType LPN
      ON LPN.LPNTypeCode = TY.LPNTypeCode
      LEFT JOIN VAS
      ON VAS.IdVas = TY.IdVas
      LEFT JOIN WorkZone W
      ON W.IdWorkZone = TY.IdWorkZone
      LEFT JOIN OutboundType OT
      ON OT.OutboudTypeCode = TY.OutboundTypeCode
      WHERE 1=1
      @SQLPart
      ORDER BY TY.BillingTypeName, MO.BillingModeName;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="Description" type="textLike">TY.BillingTypeName</filter>
    </filters>
  </query>
  <!-- End BillingType section  -->

  <!-- BillingTypeContract section Begin  -->
  <query code="BillingTypeContract_Insert">
	<sql>
    INSERT INTO BillingTypeContract
    (IdBillingTypeContract,
    IdWhs,
    IdBillingContract,
    IdBillingTransaction,
    IdBillingType,
    IdBillingMoney,
    IdBillingTimeType,
    Value,
    StartTime,
    EndTime,
    DateCreated,
    UserCreated
    )
    VALUES
    (@idBillingTypeContract,
    @idWhs,
    @idBillingContract,
    @idBillingTransaction,
    @idBillingType,
    @idBillingMoney,
    @idBillingTimeType,
    @value,
    @startTime,
    @endTime,
    @dateCreated,
    @userCreated)
  </sql>
	<parameters>
		<parameter type="Int">idBillingTypeContract</parameter>
    <parameter type="Int">idWhs</parameter>
    <parameter type="Int">idBillingContract</parameter>
		<parameter type="Int">idBillingTransaction</parameter>
		<parameter type="Int">idBillingType</parameter>
		<parameter type="Int">idBillingMoney</parameter>
		<parameter type="Int">idBillingTimeType</parameter>
		<parameter type="Decimal">value</parameter>
    <parameter type="DateTime">startTime</parameter>
    <parameter type="DateTime">endTime</parameter>
		<parameter type="String">specialField1</parameter>
		<parameter type="String">specialField2</parameter>
		<parameter type="String">specialField3</parameter>
		<parameter type="String">specialField4</parameter>
		<parameter type="DateTime">dateCreated</parameter>
		<parameter type="String">userCreated</parameter>
	</parameters>
  </query>

  <query code="BillingTypeContract_Update">
	<sql>
    UPDATE BillingTypeContract
    SET IdWhs = @idWhs,
    IdBillingContract = @idBillingContract,
    IdBillingTransaction = @idBillingTransaction,
    IdBillingType = @idBillingType,
    IdBillingMoney = @idBillingMoney,
    IdBillingTimeType = @idBillingTimeType,
    Value = @value,
    StartTime = @startTime,
    EndTime = @endTime,
    DateModified = @dateModified,
    UserModified = @userModified
    WHERE IdBillingTypeContract = @idBillingTypeContract
  </sql>
	<parameters>
		<parameter type="Int">idBillingTypeContract</parameter>
    <parameter type="Int">idWhs</parameter>
		<parameter type="Int">idBillingContract</parameter>
		<parameter type="Int">idBillingTransaction</parameter>
		<parameter type="Int">idBillingType</parameter>
		<parameter type="Int">idBillingMoney</parameter>
		<parameter type="Int">idBillingTimeType</parameter>
		<parameter type="Decimal">value</parameter>
    <parameter type="DateTime">startTime</parameter>
    <parameter type="DateTime">endTime</parameter>
		<parameter type="String">specialField1</parameter>
		<parameter type="String">specialField2</parameter>
		<parameter type="String">specialField3</parameter>
		<parameter type="String">specialField4</parameter>
		<parameter type="DateTime">dateModified</parameter>
		<parameter type="String">userModified</parameter>
	</parameters>
  </query>

  <query code="BillingTypeContract_Delete">
	<sql>
    DELETE
    FROM BillingTypeContract
    WHERE IdBillingTypeContract = @idBillingTypeContract;
  </sql>
	<parameters>
		<parameter type="Int">idBillingTypeContract</parameter>
	</parameters>
  </query>

  <query code="BillingTypeContract_GetByIdContractBillingType">
    <sql>
      SELECT
      IdBillingTypeContract,
      IdWhs,
      IdBillingContract,
      IdBillingTransaction,
      IdBillingType,
      IdBillingMoney,
      IdBillingTimeType,
      Value,
      StartTime,
      EndTime,
      DateCreated,
      UserCreated,
      DateModified,
      UserModified
      FROM BillingTypeContract
      WHERE IdBillingTypeContract = @idBillingTypeContract;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      AND IdPage = @idPage
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="Int">idBillingTypeContract</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="String">idPage</parameter>
    </parameters>
  </query>

  <query code="BillingTypeContract_GetByAnyParameter">
    <sql>
      SELECT
      BTC.IdBillingTypeContract,
      W.IdWhs,
      W.WhsCode,
      W.WhsName,
      W.ShortWhsName,
      BC.IdContract IdBillingContract,
      BC.Description BillingContractDescription,
      BC.Status BillingContractStatus,
      O.IdOwn,
      O.OwnName,
      O.OwnCode,
      BTR.IdTransaction IdBillingTransaction,
      BTR.TransactionCode BillingTransactionCode,
      BTR.TransactionName BillingTransactionName,
      BTR.Status BillingTransactionStatus,
      BTR.Type BillingTransactionType,
      BTR.IdWmsProcessCode BillingTransactionWmsProcessCode,
      COALESCE(WP.WhereIn,BTR.Type) WmsProcessWhereIn,
      BTY.IdBillingType,
      BTY.BillingTypeName,
      BTY.BillingTypeCode,
      BTY.Status BillingTypeStatus,
      BTY.LpnTypeCode,
      BM.IdBillingMoney,
      BM.BillingMoneyCode,
      BM.Description BillingMoneyDescription,
      BM.Value BillingMoneyValue,
      BTT.IdBillingTimeType,
      BTT.Description BillingTimeTypeDescription,
      BTT.Days BillingTimeTypeDays,
      BMO.IdBillingMode,
      BMO.BillingModeName,
      BMO.BillingModeCode,
      BMO.Status BillingModeStatus,
      BST.IdBillingStep,
      BST.BillingStepName,
      BST.BillingStepCode,
      BTC.Value,
      BTC.StartTime,
      BTC.EndTime,
      BTC.DateCreated,
      BTC.UserCreated,
      BTC.DateModified,
      BTC.UserModified
      FROM BillingTypeContract BTC
      INNER JOIN BillingContract BC ON BTC.IdBillingContract = BC.IdContract
      INNER JOIN Owner O ON BC.IdOwn = O.IdOwn
      INNER JOIN Warehouse W ON BTC.IdWhs = W.IdWhs
      INNER JOIN BillingTransaction BTR ON BTC.IdBillingTransaction = BTR.IdTransaction
      LEFT JOIN BillingType BTY ON BTC.IdBillingType = BTY.IdBillingType
      INNER JOIN BillingMoney BM ON BTC.IdBillingMoney = BM.IdBillingMoney
      INNER JOIN BillingTimeType BTT ON BTC.IdBillingTimeType = BTT.IdBillingTimeType
      LEFT JOIN BillingMode BMO ON BTY.IdBillingMode = BMO.IdBillingMode
      LEFT JOIN BillingStep BST ON BTY.IdBillingStep = BST.IdBillingStep
      LEFT JOIN WmsProcess WP ON WP.IdWmsProcessCode = BTR.IdWmsProcessCode
      WHERE 1=1
      @SQLPart
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="IdBillingTypeContract" type="numericEqual">BTC.IdBillingTypeContract</filter>
      <filter name="IdWhs" type="numericEqual">BTC.IdWhs</filter>
      <filter name="IdBillingContract" type="numericEqual">BTC.IdBillingContract</filter>
      <filter name="IdBillingTransaction" type="numericEqual">BTC.IdBillingTransaction</filter>
      <filter name="IdBillingType" type="numericEqual">BTC.IdBillingType</filter>
      <filter name="IdBillingMoney" type="numericEqual">BTC.IdBillingMoney</filter>
      <filter name="IdBillingTimeType" type="numericEqual">BTC.IdBillingTimeType</filter>
      <filter name="IdBillingContractOwn" type="numericEqual">O.IdOwn</filter>
      <filter name="BillingTransactionCode" type="textEqual">BTR.TransactionCode</filter>
      <filter name="BillingTransactionType" type="textEqual">BTR.Type</filter>
      <filter name="BillingTransactionWmsProcessCode" type="textEqual">BTR.WmsProcessCode</filter>
      <filter name="BillingTypeCode" type="textEqual">BTY.BillingTypeCode</filter>
      <filter name="LpnTypeCode" type="textEqual">BTY.LpnTypeCode</filter>
      <filter name="BillingModeCode" type="textEqual">BMO.BillingModeCode</filter>
      <filter name="BillingStepCode" type="textEqual">BST.BillingStepCode</filter>
      <filter name="BillingMoneyCode" type="textEqual">BM.BillingMoneyCode</filter>
      <filter name="DateCreated" type="textEqual">BTC.DateCreated</filter>
      <filter name="UserCreated" type="textEqual">BTC.UserCreated</filter>
      <filter name="DateModified" type="textEqual">BTC.DateModified</filter>
      <filter name="UserModified" type="textEqual">BTC.UserModified</filter>
    </filters>
    <sub-querys>
      <sub-query code="OrderByIdContractBillingType">
        <sql>
          ORDER BY IdBillingTypeContract
        </sql>
        <parameters>
        </parameters>
      </sub-query>
      <sub-query code="ByActiveStatus">
        <sql>
          AND BC.Status = 1
          AND BTR.Status = 1
          AND BTY.Status = 1
        </sql>
        <parameters>
        </parameters>
      </sub-query>
      <sub-query code="ByActiveStatusAndBetweenStartEndTime">
        <sql>
          AND BC.Status = 1
          AND BTR.Status = 1
          AND BTY.Status = 1
          AND BTC.StartTime &lt;= @nowTime
          AND BTC.EndTime &gt;= @nowTime
        </sql>
        <parameters>
          <parameter type="String">startTime</parameter>
        </parameters>
      </sub-query>
    </sub-querys>
  </query>

  <query code="BillingTypeContract_FindAll">
    <sql>
      SELECT
      BTC.IdBillingTypeContract,
      W.IdWhs,
      W.WhsCode,
      W.WhsName,
      W.ShortWhsName,
      BC.IdContract IdBillingContract,
      BC.Description BillingContractDescription,
      BC.Status BillingContractStatus,
      O.IdOwn,
      O.OwnName,
      O.OwnCode,
      BTR.IdTransaction IdBillingTransaction,
      BTR.TransactionCode BillingTransactionCode,
      BTR.TransactionName BillingTransactionName,
      BTR.Status BillingTransactionStatus,
      BTR.Type BillingTransactionType,
      BTR.IdWmsProcessCode BillingTransactionWmsProcessCode,
      BTY.IdBillingType,
      BTY.BillingTypeName,
      BTY.BillingTypeCode,
      BTY.Status BillingTypeStatus,
      BTY.LpnTypeCode,
      BM.IdBillingMoney,
      BM.BillingMoneyCode,
      BM.Description BillingMoneyDescription,
      BM.Value BillingMoneyValue,
      BTT.IdBillingTimeType,
      BTT.Description BillingTimeTypeDescription,
      BTT.Days BillingTimeTypeDays,
      BMO.IdBillingMode,
      BMO.BillingModeName,
      BMO.BillingModeCode,
      BMO.Status BillingModeStatus,
      BST.IdBillingStep,
      BST.BillingStepName,
      BST.BillingStepCode,
      BTC.Value,
      BTC.StartTime,
      BTC.EndTime,
      BTC.DateCreated,
      BTC.UserCreated,
      BTC.DateModified,
      BTC.UserModified
      FROM BillingTypeContract BTC
      INNER JOIN BillingContract BC ON BTC.IdBillingContract = BC.IdContract
      INNER JOIN Owner O ON BC.IdOwn = O.IdOwn
      INNER JOIN Warehouse W ON BTC.IdWhs = W.IdWhs
      INNER JOIN BillingTransaction BTR ON BTC.IdBillingTransaction = BTR.IdTransaction
      LEFT JOIN BillingType BTY ON BTC.IdBillingType = BTY.IdBillingType
      INNER JOIN BillingMoney BM ON BTC.IdBillingMoney = BM.IdBillingMoney
      INNER JOIN BillingTimeType BTT ON BTC.IdBillingTimeType = BTT.IdBillingTimeType
      LEFT JOIN BillingMode BMO ON BTY.IdBillingMode = BMO.IdBillingMode
      LEFT JOIN BillingStep BST ON BTY.IdBillingStep = BST.IdBillingStep
      @SQLPart
      ORDER BY O.OwnName, BC.Description

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
      <filter name="Owner" type="numericIn">O.IdOwn</filter>
      <filter name="Description" type="textLike">BTR.TransactionName</filter>
      <filter name="Name" type="textLike">BC.Description</filter>
    </filters>
  </query>

  <query code="BillingTypeContract_FindAllFixedTransaction">
    <sql>
      SELECT
      BTC.IdBillingTypeContract,
      W.IdWhs,
      W.WhsCode,
      W.WhsName,
      W.ShortWhsName,
      BC.IdContract IdBillingContract,
      BC.Description BillingContractDescription,
      BC.Status BillingContractStatus,
      O.IdOwn,
      O.OwnName,
      O.OwnCode,
      BTR.IdTransaction IdBillingTransaction,
      BTR.TransactionCode BillingTransactionCode,
      BTR.TransactionName BillingTransactionName,
      BTR.Status BillingTransactionStatus,
      BTR.Type BillingTransactionType,
      BTR.IdWmsProcessCode BillingTransactionWmsProcessCode,
      BTY.IdBillingType,
      BTY.BillingTypeName,
      BTY.BillingTypeCode,
      BTY.Status BillingTypeStatus,
      BTY.LpnTypeCode,
      BM.IdBillingMoney,
      BM.BillingMoneyCode,
      BM.Description BillingMoneyDescription,
      BM.Value BillingMoneyValue,
      BTT.IdBillingTimeType,
      BTT.Description BillingTimeTypeDescription,
      BTT.Days BillingTimeTypeDays,
      BMO.IdBillingMode,
      BMO.BillingModeName,
      BMO.BillingModeCode,
      BMO.Status BillingModeStatus,
      BST.IdBillingStep,
      BST.BillingStepName,
      BST.BillingStepCode,
      BTC.Value,
      BTC.StartTime,
      BTC.EndTime,
      BTC.DateCreated,
      BTC.UserCreated,
      BTC.DateModified,
      BTC.UserModified
      FROM BillingTypeContract BTC
      INNER JOIN BillingContract BC ON BTC.IdBillingContract = BC.IdContract
      INNER JOIN Owner O ON BC.IdOwn = O.IdOwn
      INNER JOIN Warehouse W ON BTC.IdWhs = W.IdWhs
      INNER JOIN BillingTransaction BTR ON BTC.IdBillingTransaction = BTR.IdTransaction
      AND BTC.IdBillingTransaction = BTR.IdTransaction AND BTR.Type = 'F'
      LEFT JOIN BillingType BTY ON BTC.IdBillingType = BTY.IdBillingType
      INNER JOIN BillingMoney BM ON BTC.IdBillingMoney = BM.IdBillingMoney
      INNER JOIN BillingTimeType BTT ON BTC.IdBillingTimeType = BTT.IdBillingTimeType
      LEFT JOIN BillingMode BMO ON BTY.IdBillingMode = BMO.IdBillingMode
      LEFT JOIN BillingStep BST ON BTY.IdBillingStep = BST.IdBillingStep
      WHERE W.IdWhs = @IdWhs
      AND O.IdOwn = @IdOwn
      AND BTC.StartTime &gt;= @StartTime
      AND BTC.EndTime &lt;= @EndTime
      ORDER BY O.OwnName, BC.Description;
    </sql>
    <parameters>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="String">StartTime</parameter>
      <parameter type="String">EndTime</parameter>
    </parameters>   
  </query>
  <!-- End BillingTypeContract section  -->

  <!-- BillingTransaction section Begin  -->
  <query code="BillingTransaction_Insert">
	<sql>
		INSERT INTO BillingTransaction
		(IdTransaction,
		TransactionCode,
		TransactionName,
		Status,
		Type,
		IdWmsProcessCode,
		DateCreated,
		UserCreated
		)
		VALUES
		(@idTransaction,
		@transactionCode,
		@transactionName,
		@status,
		@type,
		@idWmsProcessCode,
		@dateCreated,
		@userCreated)
	</sql>
	<parameters>
		<parameter type="Int">idTransaction</parameter>
		<parameter type="String">transactionCode</parameter>
		<parameter type="String">transactionName</parameter>
		<parameter type="Boolean">status</parameter>
		<parameter type="String">type</parameter>
		<parameter type="String">idWmsProcessCode</parameter>
		<parameter type="String">specialField1</parameter>
		<parameter type="String">specialField2</parameter>
		<parameter type="String">specialField3</parameter>
		<parameter type="String">specialField4</parameter>
		<parameter type="DateTime">dateCreated</parameter>
		<parameter type="String">userCreated</parameter>
	</parameters>
  </query>

  <query code="BillingTransaction_Update">
	<sql>
		UPDATE BillingTransaction
		SET TransactionCode = @transactionCode,
		TransactionName = @transactionName,
		Status = @status,
		Type = @type,
		IdWmsProcessCode = @idWmsProcessCode,
		DateModified = @dateModified,
		UserModified = @userModified
		WHERE IdTransaction = @idTransaction
	</sql>
	<parameters>
		<parameter type="Int">idTransaction</parameter>
		<parameter type="String">transactionCode</parameter>
		<parameter type="String">transactionName</parameter>
		<parameter type="Boolean">status</parameter>
		<parameter type="String">type</parameter>
		<parameter type="String">idWmsProcessCode</parameter>
		<parameter type="String">specialField1</parameter>
		<parameter type="String">specialField2</parameter>
		<parameter type="String">specialField3</parameter>
		<parameter type="String">specialField4</parameter>
		<parameter type="DateTime">dateModified</parameter>
		<parameter type="String">userModified</parameter>
	</parameters>
  </query>

  <query code="BillingTransaction_Delete">
	<sql>
		DELETE
		FROM BillingTransaction
		WHERE IdTransaction = @idTransaction;
	</sql>
	<parameters>
		<parameter type="Int">idTransaction</parameter>
	</parameters>
  </query>

  <query code="BillingTransaction_GetByIdTransaction">
	<sql>
		SELECT
		IdTransaction,
		TransactionCode,
		TransactionName,
		Status,
		Type,
		IdWmsProcessCode,
		DateCreated,
		UserCreated,
		DateModified,
		UserModified
		FROM BillingTransaction
		WHERE IdTransaction = @idTransaction;

		SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
		FROM CfgEntityProperty qf
		JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
		WHERE QueryName = @queryName
		AND IdPage = @idPage
		ORDER BY FieldOrder
	</sql>
	<parameters>
		<parameter type="Int">idTransaction</parameter>
		<parameter type="String">queryName</parameter>
		<parameter type="String">idPage</parameter>
	</parameters>
  </query>

  <query code="BillingTransaction_GetByAnyParameter">
	<sql>
		SELECT
		IdTransaction,
		TransactionCode,
		TransactionName,
		Status,
		Type,
		IdWmsProcessCode,
		DateCreated,
		UserCreated,
		DateModified,
		UserModified
		FROM BillingTransaction
		WHERE 1=1
		@SQLPart
	</sql>
	<parameters>
		<parameter type="SQLPart">@SQLPart</parameter>
	</parameters>
	<filters>
		<filter name="IdTransaction" type="numericEqual">IdTransaction</filter>
		<filter name="TransactionCode" type="textEqual">TransactionCode</filter>
		<filter name="TransactionName" type="textEqual">TransactionName</filter>
		<filter name="Type" type="textEqual">Type</filter>
		<filter name="IdWmsProcessCode" type="textEqual">IdWmsProcessCode</filter>
		<filter name="SpecialField1" type="textEqual">SpecialField1</filter>
		<filter name="SpecialField2" type="textEqual">SpecialField2</filter>
		<filter name="SpecialField3" type="textEqual">SpecialField3</filter>
		<filter name="SpecialField4" type="textEqual">SpecialField4</filter>
		<filter name="DateCreated" type="textEqual">DateCreated</filter>
		<filter name="UserCreated" type="textEqual">UserCreated</filter>
		<filter name="DateModified" type="textEqual">DateModified</filter>
		<filter name="UserModified" type="textEqual">UserModified</filter>
	</filters>
	<sub-querys>
	  <sub-query code="OrderByIdTransaction">
		<sql>
			ORDER BY IdTransaction
		</sql>
		<parameters>
		</parameters>
	  </sub-query>
	</sub-querys>
  </query>

  <query code="BillingTransaction_FindAll">
    <sql>
      SELECT
      BT.IdTransaction,
      BT.TransactionCode,
      BT.TransactionName,
      BT.Status,
      BT.Type,
      BT.IdWmsProcessCode,
      WP.Name AS WmsProcessName,
      BT.DateCreated,
      BT.UserCreated,
      BT.DateModified,
      BT.UserModified
      FROM BillingTransaction BT LEFT JOIN
      WmsProcess WP ON BT.IdWmsProcessCode = WP.IdWmsProcessCode
      @SQLPart
      ORDER BY BT.Type, BT.TransactionName, WP.Name

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="Code" type="textLike">TransactionCode</filter>
      <filter name="Name" type="textLike">TransactionName</filter>
    </filters>
  </query>
  <!-- End BillingTransaction section  -->

  <!-- BillingLog section Begin  -->
  <query code="BillingLog_Insert">
  <sql>
    INSERT INTO BillingLog
    (IdBillingLog,
    IdOwn,
    IdWhs,
    IdBillingContract,
    BillingContractDescription,
    IdBillingTransaction,
    BillingTransactionName,
    BillingTransactionAddName,
    BillingTransactionType,
    IdBillingTypeContract,
    BillingTypeContractValue,
    IdBillingType,
    BillingTypeName,
    IdBillingMoney,
    BillingMoneyValue,
    Qty,
    DocumentType,
    DocumentNumber,
    ReferenceDocNumber,
    DocumentInOut,
    UserName,
    DateEntry,
    Invoiced,
    IdLpnCode,
    IdItem,
    StateInterface,
    DateReadIFZ,
    DateCreated,
    UserCreated
    )
    VALUES
    (@idBillingLog,
    @idOwn,
    @idWhs,
    @idBillingContract,
    @billingContractDescription,
    @idBillingTransaction,
    @billingTransactionName,
    @billingTransactionAddName,
    @billingTransactionType,
    @idBillingTypeContract,
    @billingTypeContractValue,
    @idBillingType,
    @billingTypeName,
    @idBillingMoney,
    @billingMoneyValue,
    @Qty,
    @documentType,
    @documentNumber,
    @referenceDocNumber,
    @documentInOut,
    @userName,
    @dateEntry,
    @invoiced,
    @idLpnCode,
    @idItem,
    @stateInterface,
    @dateReadIFZ,
    @dateCreated,
    @userCreated)
  </sql>
  <parameters>
    <parameter type="Int">idBillingLog</parameter>
    <parameter type="Int">idOwn</parameter>
    <parameter type="Int">idWhs</parameter>
    <parameter type="Int">idBillingContract</parameter>
    <parameter type="String">billingContractDescription</parameter>
    <parameter type="Int">idBillingTransaction</parameter>
    <parameter type="String">billingTransactionName</parameter>
    <parameter type="String">billingTransactionAddName</parameter>
    <parameter type="String">billingTransactionType</parameter>
    <parameter type="Int">idBillingTypeContract</parameter>
    <parameter type="Decimal">billingTypeContractValue</parameter>
    <parameter type="Int">idBillingType</parameter>
    <parameter type="String">billingTypeName</parameter>
    <parameter type="Int">idBillingMoney</parameter>
    <parameter type="Decimal">billingMoneyValue</parameter>
    <parameter type="Decimal">qty</parameter>
    <parameter type="String">documentType</parameter>
    <parameter type="String">documentNumber</parameter>
    <parameter type="String">referenceDocNumber</parameter>
    <parameter type="String">documentInOut</parameter>
    <parameter type="String">userName</parameter>
    <parameter type="DateTime">dateEntry</parameter>
    <parameter type="Boolean">invoiced</parameter>
    <parameter type="String">idLpnCode</parameter>
    <parameter type="Int">idItem</parameter>
    <parameter type="String">stateInterface</parameter>
    <parameter type="DateTime">dateReadIFZ</parameter>
    <parameter type="DateTime">dateCreated</parameter>
    <parameter type="String">userCreated</parameter>
  </parameters>
  </query>

  <query code="BillingLog_Update">
    <sql>
      UPDATE BillingLog
      SET IdOwn = @idOwn,
      IdWhs = @idWhs,
      IdBillingContract = @idBillingContract,
      BillingContractDescription = @billingContractDescription,
      IdBillingTransaction = @idBillingTransaction,
      BillingTransactionName = @billingTransactionName,
      BillingTransactionAddName = @billingTransactionAddName,
      BillingTransactionType = @billingTransactionType,
      IdBillingTypeContract = @idBillingTypeContract,
      BillingTypeContractValue = @billingTypeContractValue,
      IdBillingType = @idBillingType,
      BillingTypeName = @billingTypeName,
      IdBillingMoney = @idBillingMoney,
      BillingMoneyValue = @billingMoneyValue,
      Qty = @qty,
      DocumentType = @documentType,
      DocumentNumber = @documentNumber,
      ReferenceDocNumber = @referenceDocNumber,
      DocumentInOut = @documentInOut,
      UserName = @userName,
      DateEntry = @dateEntry,
      Invoiced = @invoiced,
      IdItem = @idItem,
      IdLpnCode = @idLpnCode,
      BillingFolio = @BillingFolio,
      StateInterface = @stateInterface,
      DateReadIFZ = @dateReadIFZ,
      DateModified = @dateModified,
      UserModified = @userModified
      WHERE IdBillingLog = @idBillingLog
    </sql>
    <parameters>
      <parameter type="Int">idBillingLog</parameter>
      <parameter type="Int">idOwn</parameter>
      <parameter type="Int">idWhs</parameter>
      <parameter type="Int">idBillingContract</parameter>
      <parameter type="String">billingContractDescription</parameter>
      <parameter type="Int">idBillingTransaction</parameter>
      <parameter type="String">billingTransactionName</parameter>
      <parameter type="String">billingTransactionAddName</parameter>
      <parameter type="String">billingTransactionType</parameter>
      <parameter type="Int">idBillingTypeContract</parameter>
      <parameter type="Decimal">billingTypeContractValue</parameter>
      <parameter type="Int">idBillingType</parameter>
      <parameter type="String">billingTypeName</parameter>
      <parameter type="Int">idBillingMoney</parameter>
      <parameter type="Decimal">billingMoneyValue</parameter>
      <parameter type="Decimal">qty</parameter>
      <parameter type="String">documentType</parameter>
      <parameter type="String">documentNumber</parameter>
      <parameter type="String">referenceDocNumber</parameter>
      <parameter type="String">documentInOut</parameter>
      <parameter type="String">userName</parameter>
      <parameter type="DateTime">dateEntry</parameter>
      <parameter type="Boolean">invoiced</parameter>
      <parameter type="Int">idItem</parameter>
      <parameter type="String">idLpnCode</parameter>
      <parameter type="Int">BillingFolio</parameter>
      <parameter type="String">stateInterface</parameter>
      <parameter type="DateTime">dateReadIFZ</parameter>
      <parameter type="DateTime">dateModified</parameter>
      <parameter type="String">userModified</parameter>
    </parameters>
  </query>
  
  <query code="BillingLog_UpdateInvoiced">
	<sql>
    UPDATE BillingLog
    SET Invoiced = @Invoiced,
    BillingFolio = @BillingFolio,
    StateInterface = @StateInterface,
    DateModified = @DateModified,
    UserModified = @UserModified
    WHERE IdOwn = @IdOwn
    AND IdBillingLog IN (@SQLPart)
    AND Invoiced = 0
    AND BillingFolio IS NULL
  </sql>
	<parameters>
		<parameter type="Int">IdOwn</parameter>		
    <parameter type="SQLPart">@SQLPart</parameter>
    <parameter type="Boolean">Invoiced</parameter>
    <parameter type="Int">BillingFolio</parameter>
    <parameter type="String">StateInterface</parameter>
		<parameter type="DateTime">DateModified</parameter>
		<parameter type="String">UserModified</parameter>
    <parameter type="Decimal">BillingMoneyValue</parameter>
	</parameters>
  </query>

  <query code="BillingLog_UpdateInvoicedMarval">
    <sql>
      UPDATE BillingLog
      SET Invoiced = @Invoiced,
      BillingFolio = @BillingFolio,
      StateInterface = @StateInterface,
      DateModified = @DateModified,
      UserModified = @UserModified,
      SpecialField1 = @SpecialField1,
      SpecialField2 = @SpecialField2,
      SpecialField3 = @SpecialField3,
      SpecialField4 = @SpecialField4,
      BillingMoneyValue = @BillingMoneyValue
      WHERE IdOwn = @IdOwn
      AND IdBillingLog IN (@SQLPart)
      AND Invoiced = 0
      AND BillingFolio IS NULL
    </sql>
    <parameters>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="Boolean">Invoiced</parameter>
      <parameter type="Int">BillingFolio</parameter>
      <parameter type="String">StateInterface</parameter>
      <parameter type="DateTime">DateModified</parameter>
      <parameter type="String">UserModified</parameter>
      <parameter type="String">SpecialField1</parameter>
      <parameter type="String">SpecialField2</parameter>
      <parameter type="String">SpecialField3</parameter>
      <parameter type="String">SpecialField4</parameter>
      <parameter type="Decimal">BillingMoneyValue</parameter>
    </parameters>
  </query>

  <query code="BillingLog_Delete">
	<sql>
		DELETE
		FROM BillingLog
		WHERE IdBillingLog = @idBillingLog;
	</sql>
	<parameters>
		<parameter type="Int">idBillingLog</parameter>
	</parameters>
  </query>

  <query code="BillingLog_GetByIdBillingLog">
	<sql>
    SELECT
    IdBillingLog,
    IdOwn,
    IdWhs,
    IdBillingContract,
    BillingContractDescription,
    IdBillingTransaction,
    BillingTransactionName,
    BillingTransactionAddName,
    BillingTransactionType,
    IdBillingTypeContract,
    BillingTypeContractValue,
    IdBillingType,
    BillingTypeName,
    IdBillingMoney,
    BillingMoneyValue,
    Qty,
    DocumentType,
    DocumentNumber,
    ReferenceDocNumber,
    DocumentInOut,
    UserName,
    DateEntry,
    Invoiced,
    IdItem,
    IdLpnCode,
    BIllingFolio,
    StateInterface,
    DateReadIFZ,
    DateCreated,
    UserCreated,
    DateModified,
    UserModified
    FROM BillingLog
    WHERE IdBillingLog = @idBillingLog;

    SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
    FROM CfgEntityProperty qf
    JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
    WHERE QueryName = @queryName
    AND IdPage = @idPage
    ORDER BY FieldOrder
  </sql>
	<parameters>
		<parameter type="Int">idBillingLog</parameter>
		<parameter type="String">queryName</parameter>
		<parameter type="String">idPage</parameter>
	</parameters>
  </query>

  <query code="BillingLog_FindAll">
    <sql>
      SELECT
      BL.IdBillingLog,
      O.IdOwn,
      O.OwnCode,
      O.OwnName,
      W.IdWhs,
      W.WhsCode,
      W.WhsName,
      W.ShortWhsName,
      BL.IdBillingContract,
      BL.BillingContractDescription,
      BL.IdBillingTransaction,
      BL.BillingTransactionName,
      BL.BillingTransactionAddName,
      BL.BillingTransactionType,
      BL.IdBillingTypeContract,
      BL.BillingTypeContractValue,
      BL.IdBillingType,
      BL.BillingTypeName,
      BL.IdBillingMoney,
      BL.BillingMoneyValue,
      BM.Description BillingMoneyDescription,
      BL.Qty,
      BL.DocumentType,
      BL.DocumentNumber,
      BL.ReferenceDocNumber,
      BL.DocumentInOut,
      BL.UserName,
      BL.DateEntry,
      BL.Invoiced,
      BL.IdLpnCode,
      BL.IdItem,
      BL.BillingFolio,
      BL.StateInterface,
      BL.DateReadIFZ,
      BL.DateCreated,
      BL.UserCreated,
      BL.DateModified,
      BL.UserModified
      FROM BillingLog BL INNER JOIN
      Owner O ON BL.IdOwn = O.IdOwn INNER JOIN
      Warehouse W ON BL.IdWhs = W.IdWhs LEFT JOIN 
      BillingMoney BM ON BL.IdBillingMoney = BM.IdBillingMoney
      @SQLPart
      ORDER BY IdBillingLog;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="Owner" type="numericIn">O.IdOwn</filter>
      <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
      <filter name="Name" type="textLike">BL.BillingContractDescription</filter>
      <filter name="Description" type="textLike">BL.BillingTransactionName</filter>
      <filter name="DocumentNbr" type="textLike">BL.DocumentNumber</filter>
      <filter name="Status" type="numericEqual">BL.Invoiced</filter>
      <filter name="DateRange" type="textBetween">BL.DateEntry</filter>
    </filters>
  </query>

  <query code="BillingLog_GetByAnyParameter">
    <sql>
      SELECT
      IdBillingLog,
      IdOwn,
      IdWhs,
      IdBillingContract,
      BillingContractDescription,
      IdBillingTransaction,
      BillingTransactionName,
      BillingTransactionAddName,
      BillingTransactionType,
      IdBillingTypeContract,
      BillingTypeContractValue,
      IdBillingType,
      BillingTypeName,
      IdBillingMoney,
      BillingMoneyValue,
      Qty,
      DocumentType,
      DocumentNumber,
      ReferenceDocNumber,
      DocumentInOut,
      UserName,
      DateEntry,
      Invoiced,
      IdLpnCode,
      IdItem,
      BillingFolio,
      StateInterface,
      DateReadIFZ,
      DateCreated,
      UserCreated,
      DateModified,
      UserModified
      FROM BillingLog
      WHERE 1=1
      @SQLPart
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="IdBillingLog" type="numericEqual">IdBillingLog</filter>
      <filter name="IdOwn" type="numericEqual">IdOwn</filter>
      <filter name="IdWhs" type="numericEqual">IdWhs</filter>
      <filter name="IdBillingContract" type="numericEqual">IdBillingContract</filter>
      <filter name="IdBillingTransaction" type="numericEqual">IdBillingTransaction</filter>
      <filter name="BillingTransactionName" type="textEqual">BillingTransactionName</filter>
      <filter name="BillingTransactionType" type="textEqual">BillingTransactionType</filter>
      <filter name="IdBillingTypeContract" type="numericEqual">IdBillingTypeContract</filter>
      <filter name="IdBillingMoney" type="numericEqual">IdBillingMoney</filter>
      <filter name="IdBillingType" type="numericEqual">IdBillingType</filter>
      <filter name="BillingTypeName" type="textEqual">BillingTypeName</filter>
      <filter name="DocumentType" type="textEqual">DocumentType</filter>
      <filter name="DocumentNumber" type="textEqual">DocumentNumber</filter>
      <filter name="ReferenceDocNumber" type="textEqual">ReferenceDocNumber</filter>
      <filter name="ReferenceDocNumber" type="textEqual">DocumentInOut</filter>
      <filter name="UserName" type="textEqual">UserName</filter>
      <filter name="DateEntry" type="textEqual">DateEntry</filter>
      <filter name="IdLpnCode" type="textEqual">IdLpnCode</filter>
      <filter name="IdItem" type="numericEqual">IdItem</filter>
      <filter name="BillingFolio" type="numericEqual">BillingFolio</filter>
      <filter name="StateInterface" type="textEqual">StateInterface</filter>
      <filter name="DateReadIFZ" type="textEqual">DateReadIFZ</filter>
      <filter name="DateCreated" type="textEqual">DateCreated</filter>
      <filter name="UserCreated" type="textEqual">UserCreated</filter>
      <filter name="DateModified" type="textEqual">DateModified</filter>
      <filter name="UserModified" type="textEqual">UserModified</filter>
    </filters>
    <sub-querys>
      <sub-query code="OrderByIdBillingLog">
        <sql>
          ORDER BY IdBillingLog
        </sql>
        <parameters>
        </parameters>
      </sub-query>
    </sub-querys>
  </query>
  
   <query code="BillingLogConsult_GetByFilter">
	<sql>
    SELECT
    IdBillingLog
    ,IdOwn
    ,IdBillingTransaction
    ,BillingTransactionName
    ,IdBillingType
    ,BillingTypeName
    ,IdBillingContract
    ,BillingContractName
    ,IdBillingTypeContract
    ,BillingTypeContractValue
    ,IdBillingMoney
    ,BillingMoneyValue
    ,DateEntry
    ,Qty
    ,Invoiced
    ,BillingFolio
    ,WhereIn
    FROM v_Billing_Log_Invoice
    @SQLPart
    ORDER BY DateEntry, BillingTransactionName, BillingTypeName;

    SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
    FROM CfgEntityProperty qf
    JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
    WHERE QueryName = @queryName
    ORDER BY FieldOrder
  </sql>
	<parameters>
		<parameter type="SQLPart">@SQLPart</parameter>
		<parameter type="String">queryName</parameter>
	</parameters>
	<filters>
		<filter name="Owner" type="numericIn">IdOwn</filter>
		<filter name="DateRange" type="textBetween">DateEntry</filter>
	</filters>
  </query>
  
  <!-- End BillingLog section  -->
  
  
  

  <!-- BillingStep section Begin  -->
  <query code="BillingStep_Insert">
	<sql>
    INSERT INTO BillingStep
    (IdBillingStep,
    BillingStepName,
    BillingStepCode,
    DateCreated,
    UserCreated
    )
    VALUES
    (@idBillingStep,
    @billingStepName,
    @billingStepCode,
    @dateCreated,
    @userCreated)
  </sql>
	<parameters>
		<parameter type="Int">idBillingStep</parameter>
		<parameter type="String">billingStepName</parameter>
		<parameter type="String">billingStepCode</parameter>
		<parameter type="DateTime">dateCreated</parameter>
		<parameter type="String">userCreated</parameter>
	</parameters>
  </query>

  <query code="BillingStep_Update">
	<sql>
		UPDATE BillingStep
		SET BillingStepName = @billingStepName,
		BillingStepCode = @billingStepCode,
		DateModified = @dateModified,
		UserModified = @userModified
		WHERE IdBillingType = @idBillingStep
	</sql>
	<parameters>
		<parameter type="Int">idBillingStep</parameter>
		<parameter type="String">billingStepName</parameter>
		<parameter type="String">billingStepCode</parameter>
		<parameter type="DateTime">dateModified</parameter>
		<parameter type="String">userModified</parameter>
	</parameters>
  </query>

  <query code="BillingStep_Delete">
	<sql>
		DELETE
		FROM BillingStep
		WHERE IdBillingStep = @idBillingStep;
	</sql>
	<parameters>
		<parameter type="Int">idBillingStep</parameter>
	</parameters>
  </query>

  <query code="BillingStep_GetByAnyParameter">
	<sql>
    SELECT
    IdBillingStep,
    BillingStepName,
    BillingStepCode,
    DateCreated,
    UserCreated,
    DateModified,
    UserModified
    FROM BillingStep 
    WHERE 1=1
    @SQLPart
  </sql>
	<parameters>
		<parameter type="SQLPart">@SQLPart</parameter>
	</parameters>
	<filters>
		<filter name="IdBillingStep" type="numericEqual">IdBillingStep</filter>
		<filter name="BillingStepName" type="textEqual">BillingStepName</filter>
		<filter name="BillingStepCode" type="textEqual">BillingStepCode</filter>
		<filter name="DateCreated" type="textEqual">DateCreated</filter>
		<filter name="UserCreated" type="textEqual">UserCreated</filter>
		<filter name="DateModified" type="textEqual">DateModified</filter>
		<filter name="UserModified" type="textEqual">UserModified</filter>
	</filters>
	<sub-querys>
	  <sub-query code="OrderByIdBillingStep">
		<sql>
			ORDER BY IdBillingStep
		</sql>
		<parameters>
		</parameters>
	  </sub-query>
	</sub-querys>
  </query>
  
  <query code="BillingStep_FindAll">
    <sql>
      SELECT
      IdBillingStep,
      BillingStepName,
      BillingStepCode,
      DateCreated,
      UserCreated,
      DateModified,
      UserModified
      FROM BillingStep 
      @SQLPart
      ORDER BY BillingStepName;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="Description" type="textLike">BillingStepName</filter>
    </filters>
  </query>
  <!-- End BillingStep section  -->
  
  <!-- End BILLING section-->

  <query code="GetDispatchSpecialById">
    <sql>
      SELECT D.IdDispatch
      ,D.IdOutboundOrder
      ,OO.OutboundNumber
      ,OO.ReferenceNumber
      ,OO.DeliveryAddress1
      ,OO.DeliveryAddress2
      ,OT.IdOutboundType
      ,OT.OutboudTypeCode
      ,OT.OutboundTypeName
      ,D.Status
      ,D.IdTrackOutbound
      ,D.TrackOutboundDate
      ,D.IdDispatchType
      ,D.ReferenceDoc
      ,D.IdReferenceDocType
      ,D.IdCarrier
      ,D.IdTruckCode
      ,D.ShiftNumber
      ,D.IdWhs
      ,W.WhsName
      ,D.UserWms
      ,D.IdLocationForLift
      ,D.IdLocationStage
      ,D.SpecialField1
      ,D.SpecialField2
      ,D.SpecialField3
      ,D.SpecialField4
      ,D.DateCreated
      ,D.UserCreated
      ,D.DateModified
      ,D.UserModified
      ,C.IdCustomer
      ,C.CustomerCode
      ,C.CustomerName
      ,O.IdOwn
      ,O.OwnCode
      ,O.OwnName
      ,O.TradeName
      ,RD.ReferenceDocNumber
      ,B2B.ASNFile
      ,B2B.TemplateASNFile
      ,B.BranchName
      ,B.BranchCode
      ,RDT.ReferenceDocTypeCode
      ,RD.ReferenceDocNumber
      ,RD.IdReferenceDoc
      ,D.StateInterface
      FROM Dispatch D
      INNER JOIN OutboundOrder OO
      ON OO.IdOutboundOrder = D.IdOutboundOrder
      AND OO.IdWhs = D.IdWhs
      INNER JOIN OutboundType OT
      ON OO.IdOutboundType = OT.IdOutboundType
      AND OT.Status = 1
      INNER JOIN Customer C
      ON OO.CustomerCode = C.CustomerCode
      AND OO.IdOwn = C.IdOwn
      INNER JOIN CustomerB2B B2B
      ON C.IdCustomer = B2B.IdCustomer
      LEFT JOIN ReferenceDoc RD
      ON OO.IdOutboundOrder = RD.IdOutboundOrder
      AND OO.IdWhs = RD.IdWhs
      AND OO.IdOwn = RD.IdOwn
      LEFT JOIN ReferenceDocType RDT
      ON RD.IdReferenceDocType = RDT.IdReferenceDocType
      INNER JOIN Owner O
      ON OO.IdOwn = O.IdOwn
      INNER JOIN Warehouse W
      ON OO.IdWhs = W.IdWhs
      LEFT JOIN Branch B
      ON B.IdBranch = OO.IdBranch
      WHERE D.IdDispatchType IN (2, 3)
      AND D.IdDispatch = @IdDispatch
    </sql>
    <parameters>
      <parameter type="Int">IdDispatch</parameter>
    </parameters>
  </query>

  <query code="GetDispatchSpecialHeaderABCDin">
    <sql>
      SELECT D.IdDispatch
      ,D.IdOutboundOrder
      ,OO.OutboundNumber
      ,OO.ReferenceNumber
      ,OO.DeliveryAddress1
      ,OO.DeliveryAddress2
      ,OT.IdOutboundType
      ,OT.OutboudTypeCode
      ,OT.OutboundTypeName
      ,D.Status
      ,D.IdTrackOutbound
      ,D.TrackOutboundDate
      ,D.IdDispatchType
      ,D.ReferenceDoc
      ,D.IdReferenceDocType
      ,D.IdCarrier
      ,D.IdTruckCode
      ,D.ShiftNumber
      ,D.IdWhs
      ,W.WhsName
      ,D.UserWms
      ,D.IdLocationForLift
      ,D.IdLocationStage
      ,D.SpecialField1
      ,D.SpecialField2
      ,D.SpecialField3
      ,D.SpecialField4
      ,D.DateCreated
      ,D.UserCreated
      ,D.DateModified
      ,D.UserModified
      ,C.IdCustomer
      ,C.CustomerCode
      ,C.CustomerName
      ,O.IdOwn
      ,O.OwnCode
      ,O.OwnName
      ,O.TradeName
      ,RD.ReferenceDocNumber
      ,B2B.ASNFile
      ,B2B.TemplateASNFile
      ,B.BranchName
      ,B.BranchCode
      ,RDT.ReferenceDocTypeCode
      ,RD.ReferenceDocNumber
      ,RD.IdReferenceDoc
      FROM Dispatch D
      INNER JOIN OutboundOrder OO
      ON OO.IdOutboundOrder = D.IdOutboundOrder
      AND OO.IdWhs = D.IdWhs
      INNER JOIN OutboundType OT
      ON OO.IdOutboundType = OT.IdOutboundType
      AND OT.Status = 1
      INNER JOIN Customer C
      ON OO.CustomerCode = C.CustomerCode
      AND OO.IdOwn = C.IdOwn
      INNER JOIN CustomerB2B B2B
      ON C.IdCustomer = B2B.IdCustomer
      LEFT JOIN ReferenceDoc RD
      ON OO.IdOutboundOrder = RD.IdOutboundOrder
      AND OO.IdWhs = RD.IdWhs
      AND OO.IdOwn = RD.IdOwn
      LEFT JOIN ReferenceDocType RDT
      ON RD.IdReferenceDocType = RDT.IdReferenceDocType
      INNER JOIN Owner O
      ON OO.IdOwn = O.IdOwn
      INNER JOIN Warehouse W
      ON OO.IdWhs = W.IdWhs
      LEFT JOIN Branch B
      ON B.IdBranch = OO.IdBranch
      WHERE D.IdDispatchType IN (2, 3)
      AND B2B.IdCustomer = @IdCustomer
      @SQLPart;
    </sql>
    <parameters>
      <parameter type="Int">IdCustomer</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericEqual">OO.IdWhs</filter>
      <filter name="Owner" type="numericEqual">OO.IdOwn</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
      <filter name="Code" type="textLike">RD.ReferenceDocNumber</filter>
      <filter name="DateRange" type="textBetween">D.DateCreated</filter>
      <filter name="CodeAlt" type="textLike">OO.ReferenceNumber</filter>
    </filters>
  </query>

  <query code="GetDispatchSpecialHeaderCorona">
    <sql>
      SELECT D.IdDispatch
      ,D.IdOutboundOrder
      ,OO.OutboundNumber
      ,OO.ReferenceNumber
      ,OO.EmissionDate
      ,OO.DeliveryAddress1
      ,OO.DeliveryAddress2
      ,OT.IdOutboundType
      ,OT.OutboudTypeCode
      ,OT.OutboundTypeName
      ,D.Status
      ,D.IdTrackOutbound
      ,D.TrackOutboundDate
      ,D.IdDispatchType
      ,D.ReferenceDoc
      ,D.IdReferenceDocType
      ,D.IdCarrier
      ,D.IdTruckCode
      ,D.ShiftNumber
      ,D.IdWhs
      ,W.WhsName
      ,D.UserWms
      ,D.IdLocationForLift
      ,D.IdLocationStage
      ,D.SpecialField1
      ,D.SpecialField2
      ,D.SpecialField3
      ,D.SpecialField4
      ,D.DateCreated
      ,D.UserCreated
      ,D.DateModified
      ,D.UserModified
      ,C.IdCustomer
      ,C.CustomerCode
      ,C.CustomerName
      ,O.IdOwn
      ,O.OwnCode
      ,O.OwnName
      ,O.TradeName
      ,RD.ReferenceDocNumber
      ,B2B.ASNFile
      ,B2B.TemplateASNFile
      ,B.BranchName
      ,B.BranchCode
      ,RDT.ReferenceDocTypeCode
      ,RD.ReferenceDocNumber
      ,RD.IdReferenceDoc
      ,RD.InvoiceDate
      FROM Dispatch D
      INNER JOIN OutboundOrder OO
      ON OO.IdOutboundOrder = D.IdOutboundOrder
      AND OO.IdWhs = D.IdWhs
      INNER JOIN OutboundType OT
      ON OO.IdOutboundType = OT.IdOutboundType
      AND OT.Status = 1
      INNER JOIN Customer C
      ON OO.CustomerCode = C.CustomerCode
      AND OO.IdOwn = C.IdOwn
      INNER JOIN CustomerB2B B2B
      ON C.IdCustomer = B2B.IdCustomer
      LEFT JOIN ReferenceDoc RD
      ON OO.IdOutboundOrder = RD.IdOutboundOrder
      AND OO.IdWhs = RD.IdWhs
      AND OO.IdOwn = RD.IdOwn
      LEFT JOIN ReferenceDocType RDT
      ON RD.IdReferenceDocType = RDT.IdReferenceDocType
      INNER JOIN Owner O
      ON OO.IdOwn = O.IdOwn
      INNER JOIN Warehouse W
      ON OO.IdWhs = W.IdWhs
      LEFT JOIN Branch B
      ON B.IdBranch = OO.IdBranch
      WHERE D.IdDispatchType IN (2, 3)
      AND B2B.IdCustomer = @IdCustomer
      @SQLPart;
    </sql>
    <parameters>
      <parameter type="Int">IdCustomer</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericEqual">OO.IdWhs</filter>
      <filter name="Owner" type="numericEqual">OO.IdOwn</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
      <filter name="Code" type="textLike">RD.ReferenceDocNumber</filter>
      <filter name="DateRange" type="textBetween">D.DateCreated</filter>
      <filter name="CodeAlt" type="textLike">OO.ReferenceNumber</filter>
    </filters>
  </query>
  
  <query code="GetDispatchSpecialHeaderEasy">
    <sql>
      SELECT D.IdDispatch
      ,D.IdOutboundOrder
      ,OO.OutboundNumber
      ,OO.ReferenceNumber
      ,OO.EmissionDate
      ,OO.DeliveryAddress1
      ,OO.DeliveryAddress2
      ,OT.IdOutboundType
      ,OT.OutboudTypeCode
      ,OT.OutboundTypeName
      ,D.Status
      ,D.IdTrackOutbound
      ,D.TrackOutboundDate
      ,D.IdDispatchType
      ,D.ReferenceDoc
      ,D.IdReferenceDocType
      ,D.IdCarrier
      ,D.IdTruckCode
      ,D.ShiftNumber
      ,D.IdWhs
      ,W.WhsName
      ,D.UserWms
      ,D.IdLocationForLift
      ,D.IdLocationStage
      ,D.SpecialField1
      ,D.SpecialField2
      ,D.SpecialField3
      ,D.SpecialField4
      ,D.DateCreated
      ,D.UserCreated
      ,D.DateModified
      ,D.UserModified
      ,C.IdCustomer
      ,C.CustomerCode
      ,C.CustomerName
      ,O.IdOwn
      ,O.OwnCode
      ,O.OwnName
      ,O.TradeName
      ,RD.ReferenceDocNumber
      ,B2B.ASNFile
      ,B2B.TemplateASNFile
      ,B.BranchName
      ,B.BranchCode
      ,RDT.ReferenceDocTypeCode
      ,RD.ReferenceDocNumber
      ,RD.IdReferenceDoc
      FROM Dispatch D
      INNER JOIN OutboundOrder OO
      ON OO.IdOutboundOrder = D.IdOutboundOrder
      AND OO.IdWhs = D.IdWhs
      INNER JOIN OutboundType OT
      ON OO.IdOutboundType = OT.IdOutboundType
      AND OT.Status = 1
      INNER JOIN Customer C
      ON OO.CustomerCode = C.CustomerCode
      AND OO.IdOwn = C.IdOwn
      INNER JOIN CustomerB2B B2B
      ON C.IdCustomer = B2B.IdCustomer
      LEFT JOIN ReferenceDoc RD
      ON OO.IdOutboundOrder = RD.IdOutboundOrder
      AND OO.IdWhs = RD.IdWhs
      AND OO.IdOwn = RD.IdOwn
      LEFT JOIN ReferenceDocType RDT
      ON RD.IdReferenceDocType = RDT.IdReferenceDocType
      INNER JOIN Owner O
      ON OO.IdOwn = O.IdOwn
      INNER JOIN Warehouse W
      ON OO.IdWhs = W.IdWhs
      LEFT JOIN Branch B
      ON B.IdBranch = OO.IdBranch
      WHERE D.IdDispatchType IN (2, 3)
      AND B2B.IdCustomer = @IdCustomer
      @SQLPart;
    </sql>
    <parameters>
      <parameter type="Int">IdCustomer</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericEqual">OO.IdWhs</filter>
      <filter name="Owner" type="numericEqual">OO.IdOwn</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
      <filter name="Code" type="textLike">RD.ReferenceDocNumber</filter>
      <filter name="DateRange" type="textBetween">D.DateCreated</filter>
      <filter name="CodeAlt" type="textLike">OO.ReferenceNumber</filter>
    </filters>
  </query>

  <query code="GetDispatchSpecialHeaderHites">
    <sql>
      SELECT D.IdDispatch
      ,D.IdOutboundOrder
      ,OO.OutboundNumber
      ,OO.ReferenceNumber
      ,OO.EmissionDate
      ,OO.DeliveryAddress1
      ,OO.DeliveryAddress2
      ,OT.IdOutboundType
      ,OT.OutboudTypeCode
      ,OT.OutboundTypeName
      ,D.Status
      ,D.IdTrackOutbound
      ,D.TrackOutboundDate
      ,D.IdDispatchType
      ,D.ReferenceDoc
      ,D.IdReferenceDocType
      ,D.IdCarrier
      ,D.IdTruckCode
      ,D.ShiftNumber
      ,D.IdWhs
      ,W.WhsName
      ,D.UserWms
      ,O.TradeName
      ,D.IdLocationForLift
      ,D.IdLocationStage
      ,D.SpecialField1
      ,D.SpecialField2
      ,D.SpecialField3
      ,D.SpecialField4
      ,D.DateCreated
      ,D.UserCreated
      ,D.DateModified
      ,D.UserModified
      ,C.IdCustomer
      ,C.CustomerCode
      ,C.CustomerName
      ,O.IdOwn
      ,O.OwnCode
      ,O.OwnName
      ,RD.ReferenceDocNumber
      ,B2B.ASNFile
      ,B2B.TemplateASNFile
      ,B.BranchName
      ,B.BranchCode
      ,RDT.ReferenceDocTypeCode
      ,RD.ReferenceDocNumber
      ,RD.IdReferenceDoc
      FROM Dispatch D
      INNER JOIN OutboundOrder OO
      ON OO.IdOutboundOrder = D.IdOutboundOrder
      AND OO.IdWhs = D.IdWhs
      INNER JOIN OutboundType OT
      ON OO.IdOutboundType = OT.IdOutboundType
      AND OT.Status = 1
      INNER JOIN Customer C
      ON OO.CustomerCode = C.CustomerCode
      AND OO.IdOwn = C.IdOwn
      INNER JOIN CustomerB2B B2B
      ON C.IdCustomer = B2B.IdCustomer
      LEFT JOIN ReferenceDoc RD
      ON OO.IdOutboundOrder = RD.IdOutboundOrder
      AND OO.IdWhs = RD.IdWhs
      AND OO.IdOwn = RD.IdOwn
      LEFT JOIN ReferenceDocType RDT
      ON RD.IdReferenceDocType = RDT.IdReferenceDocType
      INNER JOIN Owner O
      ON OO.IdOwn = O.IdOwn
      INNER JOIN Warehouse W
      ON OO.IdWhs = W.IdWhs
      LEFT JOIN Branch B
      ON B.IdBranch = OO.IdBranch
      WHERE D.IdDispatchType IN (2, 3)
      AND B2B.IdCustomer = @IdCustomer
      @SQLPart;
    </sql>
    <parameters>
      <parameter type="Int">IdCustomer</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericEqual">OO.IdWhs</filter>
      <filter name="Owner" type="numericEqual">OO.IdOwn</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
      <filter name="Code" type="textLike">RD.ReferenceDocNumber</filter>
      <filter name="DateRange" type="textBetween">D.DateCreated</filter>
      <filter name="CodeAlt" type="textLike">OO.ReferenceNumber</filter>
    </filters>
  </query>

  <query code="GetDispatchSpecialHeaderTottus">
    <sql>
      SELECT D.IdDispatch
      ,(SELECT COUNT(DISTINCT(DD2.IdLpnCode))
      FROM DispatchDetail DD2
      WHERE DD2.IdDispatch = D.IdDispatch
      AND DD2.LpnTypeCode = 'LPN'
      ) AS SpecialField4 --CountLpn
      ,D.IdOutboundOrder
      ,OO.OutboundNumber
      ,OO.ReferenceNumber
      ,OO.EmissionDate
      ,OO.DeliveryAddress1
      ,OO.DeliveryAddress2
      ,OT.IdOutboundType
      ,OT.OutboudTypeCode
      ,OT.OutboundTypeName
      ,D.Status
      ,D.IdTrackOutbound
      ,D.TrackOutboundDate
      ,D.IdDispatchType
      ,D.ReferenceDoc
      ,D.IdReferenceDocType
      ,D.IdCarrier
      ,D.IdTruckCode
      ,D.ShiftNumber
      ,D.IdWhs
      ,W.WhsName
      ,D.UserWms
      ,D.IdLocationForLift
      ,D.IdLocationStage
      ,D.SpecialField1
      ,D.SpecialField2
      ,D.SpecialField3
      --,D.SpecialField4
      ,D.DateCreated
      ,D.UserCreated
      ,D.DateModified
      ,D.UserModified
      ,C.IdCustomer
      ,C.CustomerCode
      ,C.CustomerName
      ,O.IdOwn
      ,O.OwnCode
      ,O.OwnName
      ,O.TradeName
      ,RD.ReferenceDocNumber
      ,B2B.ASNFile
      ,B2B.TemplateASNFile
      ,B.BranchName
      ,B.BranchCode
      ,RDT.ReferenceDocTypeCode
      ,RD.ReferenceDocNumber
      ,RD.IdReferenceDoc
      FROM Dispatch D
      INNER JOIN OutboundOrder OO
      ON OO.IdOutboundOrder = D.IdOutboundOrder
      AND OO.IdWhs = D.IdWhs
      INNER JOIN OutboundType OT
      ON OO.IdOutboundType = OT.IdOutboundType
      AND OT.Status = 1
      INNER JOIN Customer C
      ON OO.CustomerCode = C.CustomerCode
      AND OO.IdOwn = C.IdOwn
      INNER JOIN CustomerB2B B2B
      ON C.IdCustomer = B2B.IdCustomer
      LEFT JOIN ReferenceDoc RD
      ON OO.IdOutboundOrder = RD.IdOutboundOrder
      AND OO.IdWhs = RD.IdWhs
      AND OO.IdOwn = RD.IdOwn
      LEFT JOIN ReferenceDocType RDT
      ON RD.IdReferenceDocType = RDT.IdReferenceDocType
      INNER JOIN Owner O
      ON OO.IdOwn = O.IdOwn
      INNER JOIN Warehouse W
      ON OO.IdWhs = W.IdWhs
      LEFT JOIN Branch B
      ON B.IdBranch = OO.IdBranch
      WHERE D.IdDispatchType IN (2, 3)
      AND B2B.IdCustomer = @IdCustomer
      @SQLPart;
    </sql>
    <parameters>
      <parameter type="Int">IdCustomer</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericEqual">OO.IdWhs</filter>
      <filter name="Owner" type="numericEqual">OO.IdOwn</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
      <filter name="Code" type="textLike">RD.ReferenceDocNumber</filter>
      <filter name="DateRange" type="textBetween">D.DateCreated</filter>
      <filter name="CodeAlt" type="textLike">OO.ReferenceNumber</filter>
    </filters>
  </query>

  <query code="GetDispatchSpecialHeaderRipley">
    <sql>
      SELECT D.IdDispatch
      ,D.IdOutboundOrder
      ,OO.OutboundNumber
      ,OO.ReferenceNumber
      ,OO.EmissionDate
      ,OO.DeliveryAddress1
      ,OO.DeliveryAddress2
      ,OT.IdOutboundType
      ,OT.OutboudTypeCode
      ,OT.OutboundTypeName
      ,D.Status
      ,D.IdTrackOutbound
      ,D.TrackOutboundDate
      ,D.IdDispatchType
      ,D.ReferenceDoc
      ,D.IdReferenceDocType
      ,D.IdCarrier
      ,D.IdTruckCode
      ,D.ShiftNumber
      ,D.IdWhs
      ,W.WhsName
      ,D.UserWms
      ,D.IdLocationForLift
      ,D.IdLocationStage
      ,D.SpecialField1
      ,D.SpecialField2
      ,D.SpecialField3
      ,D.SpecialField4
      ,D.DateCreated
      ,D.UserCreated
      ,D.DateModified
      ,D.UserModified
      ,C.IdCustomer
      ,C.CustomerCode
      ,C.CustomerName
      ,O.IdOwn
      ,O.OwnCode
      ,O.OwnName
      ,O.TradeName
      ,RD.ReferenceDocNumber
      ,B2B.ASNFile
      ,B2B.TemplateASNFile
      ,B.BranchName
      ,B.BranchCode
      ,RDT.ReferenceDocTypeCode
      ,RD.ReferenceDocNumber
      ,RD.IdReferenceDoc
      FROM Dispatch D
      INNER JOIN OutboundOrder OO
      ON OO.IdOutboundOrder = D.IdOutboundOrder
      AND OO.IdWhs = D.IdWhs
      INNER JOIN OutboundType OT
      ON OO.IdOutboundType = OT.IdOutboundType
      AND OT.Status = 1
      INNER JOIN Customer C
      ON OO.CustomerCode = C.CustomerCode
      AND OO.IdOwn = C.IdOwn
      INNER JOIN CustomerB2B B2B
      ON C.IdCustomer = B2B.IdCustomer
      LEFT JOIN ReferenceDoc RD
      ON OO.IdOutboundOrder = RD.IdOutboundOrder
      AND OO.IdWhs = RD.IdWhs
      AND OO.IdOwn = RD.IdOwn
      LEFT JOIN ReferenceDocType RDT
      ON RD.IdReferenceDocType = RDT.IdReferenceDocType
      INNER JOIN Owner O
      ON OO.IdOwn = O.IdOwn
      INNER JOIN Warehouse W
      ON OO.IdWhs = W.IdWhs
      LEFT JOIN Branch B
      ON B.IdBranch = OO.IdBranch
      WHERE D.IdDispatchType IN (2, 3)
      AND B2B.IdCustomer = @IdCustomer
      @SQLPart;
    </sql>
    <parameters>
      <parameter type="Int">IdCustomer</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericEqual">OO.IdWhs</filter>
      <filter name="Owner" type="numericEqual">OO.IdOwn</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
      <filter name="Code" type="textLike">RD.ReferenceDocNumber</filter>
      <filter name="DateRange" type="textBetween">D.DateCreated</filter>
      <filter name="CodeAlt" type="textLike">OO.ReferenceNumber</filter>
    </filters>
  </query>

  <query code="GetDispatchSpecialHeaderParis">
    <sql>
      SELECT D.IdDispatch
      ,D.IdOutboundOrder
      ,OO.OutboundNumber
      ,OO.ReferenceNumber
      ,OO.EmissionDate
      ,OO.DeliveryAddress1
      ,OO.DeliveryAddress2
      ,OT.IdOutboundType
      ,OT.OutboudTypeCode
      ,OT.OutboundTypeName
      ,D.Status
      ,D.IdTrackOutbound
      ,D.TrackOutboundDate
      ,D.IdDispatchType
      ,D.ReferenceDoc
      ,D.IdReferenceDocType
      ,D.IdCarrier
      ,D.IdTruckCode
      ,D.ShiftNumber
      ,D.IdWhs
      ,W.WhsName
      ,D.UserWms
      ,D.IdLocationForLift
      ,D.IdLocationStage
      ,D.SpecialField1
      ,D.SpecialField2
      ,D.SpecialField3
      ,D.SpecialField4
      ,D.DateCreated
      ,D.UserCreated
      ,D.DateModified
      ,D.UserModified
      ,C.IdCustomer
      ,C.CustomerCode
      ,C.CustomerName
      ,O.IdOwn
      ,O.OwnCode
      ,O.OwnName
      ,O.TradeName
      ,RD.ReferenceDocNumber
      ,B2B.ASNFile
      ,B2B.TemplateASNFile
      ,B.BranchName
      ,B.BranchCode
      ,RDT.ReferenceDocTypeCode
      ,RD.ReferenceDocNumber
      ,RD.IdReferenceDoc
      FROM Dispatch D
      INNER JOIN OutboundOrder OO
      ON OO.IdOutboundOrder = D.IdOutboundOrder
      AND OO.IdWhs = D.IdWhs
      INNER JOIN OutboundType OT
      ON OO.IdOutboundType = OT.IdOutboundType
      AND OT.Status = 1
      INNER JOIN Customer C
      ON OO.CustomerCode = C.CustomerCode
      AND OO.IdOwn = C.IdOwn
      INNER JOIN CustomerB2B B2B
      ON C.IdCustomer = B2B.IdCustomer
      LEFT JOIN ReferenceDoc RD
      ON OO.IdOutboundOrder = RD.IdOutboundOrder
      AND OO.IdWhs = RD.IdWhs
      AND OO.IdOwn = RD.IdOwn
      LEFT JOIN ReferenceDocType RDT
      ON RD.IdReferenceDocType = RDT.IdReferenceDocType
      INNER JOIN Owner O
      ON OO.IdOwn = O.IdOwn
      INNER JOIN Warehouse W
      ON OO.IdWhs = W.IdWhs
      LEFT JOIN Branch B
      ON B.IdBranch = OO.IdBranch
      WHERE D.IdDispatchType IN (2, 3)
      AND B2B.IdCustomer = @IdCustomer
      @SQLPart;
    </sql>
    <parameters>
      <parameter type="Int">IdCustomer</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericEqual">OO.IdWhs</filter>
      <filter name="Owner" type="numericEqual">OO.IdOwn</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
      <filter name="Code" type="textLike">RD.ReferenceDocNumber</filter>
      <filter name="DateRange" type="textBetween">D.DateCreated</filter>
      <filter name="CodeAlt" type="textLike">OO.ReferenceNumber</filter>
    </filters>
  </query>

  <query code="GetDispatchSpecialHeaderLaPolar">
    <sql>
      SELECT D.IdDispatch
      ,D.IdOutboundOrder
      ,OO.OutboundNumber
      ,OO.ReferenceNumber
      ,OO.EmissionDate
      ,OO.DeliveryAddress1
      ,OO.DeliveryAddress2
      ,OT.IdOutboundType
      ,OT.OutboudTypeCode
      ,OT.OutboundTypeName
      ,D.Status
      ,D.IdTrackOutbound
      ,D.TrackOutboundDate
      ,D.IdDispatchType
      ,D.ReferenceDoc
      ,D.IdReferenceDocType
      ,D.IdCarrier
      ,D.IdTruckCode
      ,D.ShiftNumber
      ,D.IdWhs
      ,W.WhsName
      ,D.UserWms
      ,D.IdLocationForLift
      ,D.IdLocationStage
      ,D.SpecialField1
      ,D.SpecialField2
      ,D.SpecialField3
      ,D.SpecialField4
      ,D.DateCreated
      ,D.UserCreated
      ,D.DateModified
      ,D.UserModified
      ,C.IdCustomer
      ,C.CustomerCode
      ,C.CustomerName
      ,O.IdOwn
      ,O.OwnCode
      ,O.OwnName
      ,O.TradeName
      ,RD.ReferenceDocNumber
      ,B2B.ASNFile
      ,B2B.TemplateASNFile
      ,B.BranchName
      ,B.BranchCode
      ,RDT.ReferenceDocTypeCode
      ,RD.ReferenceDocNumber
      ,RD.IdReferenceDoc
      ,DT.DispatchTypeName
      FROM Dispatch D
      INNER JOIN DispatchType DT
	            ON D.IdDispatchType = DT.IdDispatchType
      INNER JOIN OutboundOrder OO
      ON OO.IdOutboundOrder = D.IdOutboundOrder
      AND OO.IdWhs = D.IdWhs
      INNER JOIN OutboundType OT
      ON OO.IdOutboundType = OT.IdOutboundType
      AND OT.Status = 1
      INNER JOIN Customer C
      ON OO.CustomerCode = C.CustomerCode
      AND OO.IdOwn = C.IdOwn
      INNER JOIN CustomerB2B B2B
      ON C.IdCustomer = B2B.IdCustomer
      LEFT JOIN ReferenceDoc RD
      ON OO.IdOutboundOrder = RD.IdOutboundOrder
      AND OO.IdWhs = RD.IdWhs
      AND OO.IdOwn = RD.IdOwn
      LEFT JOIN ReferenceDocType RDT
      ON RD.IdReferenceDocType = RDT.IdReferenceDocType
      INNER JOIN Owner O
      ON OO.IdOwn = O.IdOwn
      INNER JOIN Warehouse W
      ON OO.IdWhs = W.IdWhs
      LEFT JOIN Branch B
      ON B.IdBranch = OO.IdBranch
      WHERE D.IdDispatchType IN (2, 3, 26)
      AND B2B.IdCustomer = @IdCustomer
      AND EXISTS (
		      SELECT 1 
		        FROM DispatchDetail DDaux
		       WHERE DDaux.IdDispatch = D.IdDispatch
		         AND DDaux.SealNumber IS NOT NULL
	    )
      @SQLPart
      ORDER BY D.IdOutboundOrder
    </sql>
    <parameters>
      <parameter type="Int">IdCustomer</parameter>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericEqual">OO.IdWhs</filter>
      <filter name="Owner" type="numericEqual">OO.IdOwn</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
      <filter name="Code" type="textLike">RD.ReferenceDocNumber</filter>
      <filter name="DateRange" type="textBetween">D.DateCreated</filter>ç
      <filter name="CodeAlt" type="textLike">OO.ReferenceNumber</filter>
    </filters>
  </query>
  
  <query code="GetDispatchSpecialHeaderFalabella">
        <sql>
          SELECT D.IdDispatch
          ,D.IdOutboundOrder
          ,OO.OutboundNumber
          ,OO.ReferenceNumber
          ,OO.DeliveryAddress1
          ,OO.DeliveryAddress2
          ,OT.IdOutboundType
          ,OT.OutboudTypeCode
          ,OT.OutboundTypeName
          ,D.Status
          ,D.IdTrackOutbound
          ,D.TrackOutboundDate
          ,D.IdDispatchType
          ,D.ReferenceDoc
          ,D.IdReferenceDocType
          --,RDT.ReferenceDocTypeCode
          --,RDT.ReferenceDocTypeName
          ,D.IdCarrier
          ,D.IdTruckCode
          --,D.IdDriveCode
          ,D.ShiftNumber
          ,D.IdWhs
          ,W.WhsName
          ,D.UserWms
          ,D.IdLocationForLift
          ,D.IdLocationStage
          ,D.SpecialField1
          ,D.SpecialField2
          ,D.SpecialField3
          ,D.SpecialField4
          ,D.DateCreated
          ,D.UserCreated
          ,D.DateModified
          ,D.UserModified
          ,C.IdCustomer
          ,C.CustomerCode
          ,C.CustomerName
          ,O.IdOwn
          ,O.OwnCode
          ,O.OwnName
          ,O.TradeName
          ,RD.ReferenceDocNumber
          ,B2B.ASNFile
          ,B2B.TemplateASNFile
          FROM Dispatch D
          INNER JOIN OutboundOrder OO ON OO.IdOutboundOrder = D.IdOutboundOrder
          AND OO.IdWhs = D.IdWhs
          INNER JOIN OutboundType OT ON OO.IdOutboundType = OT.IdOutboundType AND OT.Status = 1
          INNER JOIN Customer C ON OO.CustomerCode = C.CustomerCode
          AND OO.IdOwn = C.IdOwn
          INNER JOIN CustomerB2B B2B ON C.IdCustomer = B2B.IdCustomer
          INNER JOIN ReferenceDoc RD ON OO.IdOutboundOrder = RD.IdOutboundOrder
          AND OO.IdWhs = RD.IdWhs AND OO.IdOwn = RD.IdOwn
          INNER JOIN Owner O ON OO.IdOwn = O.IdOwn
          INNER JOIN Warehouse W ON OO.IdWhs = W.IdWhs
          WHERE D.IdDispatchType IN (2, 3)
          AND B2B.ASNFile = 1
          AND B2B.IdCustomer = @IdCustomer
          @SQLPart;
        </sql>
        <parameters>
          <parameter type="Int">IdCustomer</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericEqual">OO.IdWhs</filter>
          <filter name="Owner" type="numericEqual">OO.IdOwn</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="Code" type="textLike">RD.ReferenceDocNumber</filter>
          <filter name="DateRange" type="textBetween">D.DateCreated</filter>
          <filter name="CodeAlt" type="textLike">OO.ReferenceNumber</filter>
        </filters>
      </query>

  <query code="GetDispatchSpecialHeaderForB2BAdministration">
    <sql>
      SELECT DISTINCT
      OO.IdOutboundOrder,
      OO.OutboundNumber,
      OO.ReferenceNumber,
      OO.EmissionDate,
      C.CustomerName,
      C.CustomerCode,
      OT.OutboundTypeName,
      OT.OutboudTypeCode,
      O.OwnName,
      O.TradeName,
      W.WhsName,
      B2B.ASNFile,
      DT.DispatchTypeName,
      B.BranchName,
      --DT.IdDispatch,
      RD.ReferenceDocNumber,
      B2B.TemplateASNFile,
      (SELECT COUNT(DISTINCT(IdOutboundOrder))
      FROM Task T
      JOIN TaskOutboundOrder TOO
      ON T.IdTask = TOO.IdTask
      WHERE T.TaskTypeCode = 'PIKWV'
      AND T.IdOwn = OO.IdOwn
      AND T.IdWhs = OO.IdWhs
      AND T.IdDocumentBound = OO.IdOutboundOrder) AS QtyOrdersFromWave
      FROM OutboundOrder OO
      JOIN OutboundType OT ON OT.IdOutboundType = OO.IdOutboundType
      JOIN Owner O ON O.IdOwn = OO.IdOwn
      JOIN Warehouse W ON W.IdWhs = OO.IdWhs
      LEFT JOIN ReferenceDoc RD ON RD.IdOutboundOrder = OO.IdOutboundOrder
      AND OO.IdWhs = RD.IdWhs
      AND OO.IdOwn = RD.IdOwn
      LEFT JOIN Branch B ON B.IdBranch = OO.IdBranch
      JOIN Customer C ON C.CustomerCode = OO.CustomerCode
      AND C.IdOwn = OO.IdOwn
      JOIN CustomerB2B B2B ON C.IdCustomer = B2B.IdCustomer
      JOIN Task T	ON T.IdDocumentBound = OO.IdOutboundOrder
      AND T.TaskTypeCode = 'PIKWV'
      AND T.IsComplete = 1
      JOIN (SELECT D.IdDispatch, DT.DispatchTypeName,
      D.IdDispatchType, T1.IdDocumentBound AS IdOutboundOrder,
      T1.IdOwn, T1.IdWhs
      FROM Task T1 INNER JOIN
      TaskOutboundOrder TOO ON T1.IdTask = TOO.IdTask INNER JOIN
      Dispatch D ON D.IdOutboundOrder = TOO.IdOutboundOrder INNER JOIN
      DispatchType DT ON DT.IdDispatchType = D.IdDispatchType
      WHERE D.IdDispatchType = 8) DT ON DT.IdOutboundOrder = OO.IdOutboundOrder
      AND DT.IdWhs = OO.IdWhs
      AND DT.IdOwn = OO.IdOwn
      WHERE 1 = 1
      @SQLPart
      ORDER BY OO.EmissionDate DESC

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView,
      VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericEqual">OO.IdWhs</filter>
      <filter name="Owner" type="numericEqual">OO.IdOwn</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
      <filter name="Name" type="textLike">C.CustomerName</filter>
      <filter name="DateRange" type="textBetween">OO.EmissionDate</filter>
      <filter name="Code" type="textLike">OO.ReferenceNumber</filter>
    </filters>
  </query>

  <query code="GetDispatchSpecialDetailForB2BAdministration">
    <sql>
      SELECT
      D.IdDispatch,
      DD.IdDispatchDetail,
      DD.LineNumber,
      I.ItemCode,
      I.IdItem,
      I.ShortItemName,
      IU.ConversionFactor,
      DD.IdLpnCodeContainer,
      OO.OutboundNumber,
      OO.ReferenceNumber,
      OO.IdOutboundOrder,
      OOT.OutboudTypeCode,
      OOT.OutboundTypeName,
      IC.BarCode as ItemCustomerBarCode,
      DD.ItemQty,
      DD.Price,
      DD.IdLpnCode,
      DD.SealNumber,
      O.OwnCode,
      O.OwnName,
      O.IdOwn,
      O.TradeName,
      W.IdWhs,
      B.BranchCode,
      B.BranchName,
      RD.ReferenceDocNumber,
      RD.InvoiceDate,
      RDT.ReferenceDocTypeName,
      C.CustomerName,
      C.CustomerCode,
      CB2B.TemplateASNFile
      FROM DispatchDetail DD
      JOIN Dispatch D
      ON D.IdDispatch = DD.IdDispatch
      JOIN OutboundDetail OD
      ON D.IdOutboundOrder = OD.IdOutboundOrder
      AND OD.IdItem = DD.IdItem
      JOIN OutboundOrder OO
      ON OO.IdOutboundOrder = OD.IdOutboundOrder
      JOIN OutboundType OOT
      ON OOT.IdOutboundType = OO.IdOutboundType
      JOIN Item I
      ON DD.IdItem = I.IdItem
      JOIN Customer C
      ON C.CustomerCode = OO.CustomerCode
      AND C.IdOwn = OO.IdOwn
      JOIN CustomerB2B CB2B
      ON CB2B.IdCustomer = C.IdCustomer
      LEFT JOIN ItemCustomer IC
      ON IC.IdItem = I.IdItem
      AND IC.IdCustomer = C.IdCustomer
      JOIN ItemUom IU
      ON IU.IdItem = I.IdItem
      AND UPPER(IU.UomName) = UPPER(CB2B.UomTypeLpnCode)
      JOIN Owner O
      ON I.IdOwn = O.IdOwn
      JOIN Warehouse W
      ON DD.IdWhs = W.IdWhs
      LEFT JOIN ReferenceDoc RD
      ON RD.IdOutboundOrder = OO.IdOutboundOrder
      AND OO.IdWhs = RD.IdWhs
      AND OO.IdOwn = RD.IdOwn
      LEFT JOIN ReferenceDocType RDT
      ON RDT.IdReferenceDocType = RD.IdReferenceDocType
      LEFT JOIN Branch B
      ON B.IdBranch = OO.IdBranch
      @SQLPart
      AND DD.IdDispatch IN (SELECT IdDispatch
      FROM Dispatch
      WHERE IdDispatchType = 8
      AND IdOutboundOrder IN (SELECT  DISTINCT(IdOutboundOrder)
      FROM Task T
      JOIN TaskOutboundOrder TOO
      ON T.IdTask = TOO.IdTask
      WHERE T.TaskTypeCode = 'PIKWV'
      AND T.IdOwn = OO.IdOwn
      AND T.IdWhs = OO.IdWhs
      AND T.IdDocumentBound = @IdOutboundOrder
      )
      )
      ORDER BY OO.IdOutboundOrder,
      DD.IdLpnCode,
      DD.IdLpnCodeContainer;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @EntityPropertyName
      AND IdPage = @IdPage
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="Int">IdOutboundOrder</parameter>
      <parameter type="String">IdPage</parameter>
      <parameter type="String">EntityPropertyName</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericIn">OO.IdWhs</filter>
      <filter name="Owner" type="numericIn">OO.IdOwn</filter>
    </filters>
  </query>

  <query code="DispatchDetail_SealNumberByIdDispatch">
    <sql>
        UPDATE DispatchDetail
           SET SealNumber = @SealNumber,
               UserModified = @UserModified,
               DateModified = @DateModified
         WHERE IdDispatch = @IdDispatch
           AND IdLpnCode = @IdLpnCode
    </sql>
    <parameters>
      <parameter type="String">SealNumber</parameter>
      <parameter type="String">UserModified</parameter>
      <parameter type="DateTime">DateModified</parameter>
      <parameter type="Int">IdDispatch</parameter>
      <parameter type="String">IdLpnCode</parameter>
    </parameters>
  </query>

  <query code="GetDispatchSpecialHeaderForCarrierIntegration">
    <sql>
      SELECT
      D.IdDispatch,
      OO.IdOutboundOrder,
      OO.OutboundNumber,
      OO.ReferenceNumber,
      OO.EmissionDate,
      OO.CarrierCode,
      CA.CarrierName,
      C.CustomerName,
      C.CustomerCode,
      OT.OutboundTypeName,
      OT.OutboudTypeCode,
      O.OwnName,
      O.TradeName,
      W.WhsName,
      ,O.TradeName
      CC.IntegrationType,
      CC.FileTemplate,
      CC.WebServiceUrl,
      L.LabelCode,
      L.LabelName,
      RD.ReferenceDocNumber,
      RDT.ReferenceDocTypeName,
      RDT.ReferenceDocTypeCode
      FROM Dispatch D
      JOIN DispatchType DT
      ON DT.IdDispatchType = D.IdDispatchType
      JOIN OutboundOrder OO
      ON D.IdOutboundOrder = OO.IdOutboundOrder
      AND D.IdWhs = OO.IdWhs
      JOIN OutboundType OT
      ON OT.IdOutboundType = OO.IdOutboundType
      LEFT JOIN ReferenceDoc RD
      ON RD.IdOutboundOrder = OO.IdOutboundOrder
      AND OO.IdWhs = RD.IdWhs
      AND OO.IdOwn = RD.IdOwn
      LEFT JOIN ReferenceDocType RDT
      ON RDT.IdReferenceDocType = RD.IdReferenceDocType
      JOIN Carrier CA
      ON CA.CarrierCode = OO.CarrierCode
      JOIN CfgCarrier CC
      ON CA.CarrierCode = CC.CarrierCode
      JOIN Label L
      ON L.LabelCode = CC.LabelCode
      JOIN Customer C
      ON C.CustomerCode = OO.CustomerCode
      AND C.IdOwn = OO.IdOwn
      JOIN Owner O
      ON O.IdOwn = OO.IdOwn
      JOIN Warehouse W
      ON W.IdWhs = OO.IdWhs
      JOIN Task T
      ON T.IdDocumentBound = OO.IdOutboundOrder
      AND T.TaskTypeCode = 'PIKOR'
      WHERE DT.IdDispatchType = 1
      AND T.IsComplete = 1
      @SQLPart
      ORDER BY OO.EmissionDate DESC

    </sql>
    <parameters>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericEqual">OO.IdWhs</filter>
      <filter name="Owner" type="numericEqual">OO.IdOwn</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
      <filter name="Name" type="textLike">OO.CarrierCode</filter>
      <filter name="DateRange" type="textBetween">OO.EmissionDate</filter>
      <filter name="Code" type="textLike">OO.ReferenceNumber</filter>
    </filters>
  </query>

  <query code="GetDispatchSpecialDetailForCarrierIntegration">
    <sql>
      SELECT
      D.IdDispatch,
      DD.IdDispatchDetail,
      DD.LineNumber,
      I.ItemCode,
      I.IdItem,
      I.ShortItemName,
      DD.IdLpnCodeContainer,
      OO.OutboundNumber,
      OO.ReferenceNumber,
      OO.IdOutboundOrder,
      OOT.OutboudTypeCode,
      OOT.OutboundTypeName,
      DD.ItemQty,
      DD.Price,
      DD.IdLpnCode,
      DD.SealNumber,
      O.OwnCode,
      O.OwnName,
      O.TradeName,
      O.IdOwn,
      W.IdWhs,
      C.CustomerName,
      C.CustomerCode
      FROM DispatchDetail DD
      JOIN Dispatch D
      ON D.IdDispatch = DD.IdDispatch
      JOIN OutboundDetail OD
      ON D.IdOutboundOrder = OD.IdOutboundOrder
      AND OD.IdItem = DD.IdItem
      JOIN OutboundOrder OO
      ON OO.IdOutboundOrder = OD.IdOutboundOrder
      JOIN OutboundType OOT
      ON OOT.IdOutboundType = OO.IdOutboundType
      JOIN Item I
      ON DD.IdItem = I.IdItem
      JOIN Customer C
      ON C.CustomerCode = OO.CustomerCode
      AND C.IdOwn = OO.IdOwn
      JOIN Owner O
      ON I.IdOwn = O.IdOwn
      JOIN Warehouse W
      ON DD.IdWhs = W.IdWhs
      @SQLPart
      ORDER BY OO.IdOutboundOrder,
      DD.IdLpnCode;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView,
      VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @EntityPropertyName
      AND IdPage = @IdPage
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">IdPage</parameter>
      <parameter type="String">EntityPropertyName</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericIn">OO.IdWhs</filter>
      <filter name="Owner" type="numericIn">OO.IdOwn</filter>
      <filter name="listDispatch" type="numericIn">DD.IdDispatch</filter>
    </filters>
  </query>

  <query code="CfgCarrier_GetByCarrierCode">
    <sql>
      SELECT 
             CarrierCode,
             IntegrationType,
             FileTemplate,
             WebServiceUrl,
             LabelCode,
             CorrelativeLabel,
             CorrelativeOT
        FROM CfgCarrier
       WHERE CarrierCode = @CarrierCode
    </sql>
    <parameters>
      <parameter type="String">CarrierCode</parameter>
    </parameters>
  </query>
  
  <query code="CfgCarrier_UpdateCorrelativeOT">
    <sql>
       UPDATE CfgCarrier
          SET CorrelativeOT = @CorrelativeOT
        WHERE CarrierCode = @CarrierCode
    </sql>
    <parameters>
      <parameter type="Float">CorrelativeOT</parameter>
      <parameter type="String">CarrierCode</parameter>
    </parameters>
  </query>

  <!-- TaskQueue -->

  <query code="TaskQueue_Insert">
    <sql>
		INSERT INTO TaskQueue
		(IdTaskQueue,
		IdTypeTask,
		IdTrackTaskQueue,
		IdOwn,
		IdWhs,
		IdDocumentBound,
		PercCompletion,
		SpecialField4,
		DateCreated,
		UserCreated,
		IdLpnCode)

		VALUES
		(@IdTaskQueue,
		@IdTypeTask,
		@IdTrackTaskQueue,
		@IdOwn,
		@IdWhs,
		@IdDocumentBound,
		@PercCompletion,
		@SpecialField4,
		@DateCreated,
		@UserCreated,
		@IdLpnCode)
	</sql>
    <parameters>
      <parameter type="Int">IdTaskQueue</parameter>
      <parameter type="Int">IdTypeTask</parameter>
      <parameter type="Int">IdTrackTaskQueue</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdDocumentBound</parameter>
      <parameter type="Int">PercCompletion</parameter>
	  <parameter type="String">SpecialField4</parameter>
      <parameter type="DateTime">DateCreated</parameter>
	  <parameter type="String">UserCreated</parameter>
	  <parameter type="String">IdLpnCode</parameter>
    </parameters>
  </query>
  
  <query code="TaskQueue_Update">
    <sql>
     UPDATE TaskQueue SET
            IdTypeTask = @IdTypeTask,
            IdTrackTaskQueue = @IdTrackTaskQueue,
            IdOwn = @IdOwn,
            IdWhs = @IdWhs,
            IdDocumentBound = @IdDocumentBound,
            DateModified = @DateModified,
            UserModified = @UserModified,
            IdLpnCode = @IdLpnCode
      WHERE IdTaskQueue = @IdTaskQueue
    </sql>
    <parameters>
      <parameter type="Int">IdTypeTask</parameter>
      <parameter type="Int">IdTrackTaskQueue</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdDocumentBound</parameter>
      <parameter type="DateTime">DateModified</parameter>
      <parameter type="String">UserModified</parameter>
      <parameter type="Int">IdTaskQueue</parameter>
      <parameter type="String">IdLpnCode</parameter>
    </parameters>
  </query>

  <query code="TaskQueue_GetOrdersWaveInQueue">
    <sql>
		SELECT
		TQ.IdTaskQueue,
		TQ.IdDocumentBound,
		TQ.IdTypeTask,
		C.CustomerCode,
		C.CustomerName,
		TTQ.NameTrackTaskQueue,
		O.OwnName,
		O.IdOwn,
		W.IdWhs,
		W.WhsName,
		TQ.IdTrackTaskQueue,
		TQ.PercCompletion,
		PT.PtlTypeCode,
		PT.PtlTypeName
		FROM TaskQueue TQ
		JOIN TrackTaskQueue TTQ
		ON TQ.IdTrackTaskQueue = TTQ.IdTrackTaskQueue
		JOIN OutboundOrder OO
		ON TQ.IdOwn = OO.IdOwn
		AND TQ.IdWhs = OO.IdWhs
		AND TQ.IdDocumentBound = OO.IdOutboundOrder
		JOIN Customer C
		ON OO.CustomerCode = C.CustomerCode
		AND OO.IdOWn = C.IdOwn
		JOIN Owner O
		ON O.IdOwn = TQ.IdOwn
		JOIN Warehouse W
		ON W.IdWhs = TQ.IdWhs
		LEFT JOIN PtlType PT ON TQ.SpecialField4 = PT.PtlTypeCode
		@SQLPart
		ORDER BY TQ.DateCreated desc

		SELECT q.IdCfgEntity,
		FieldName,
		Enabled,
		VisibleGrid,
		VisibleEditNew,
		VisibleView,
		VisibleReport,
		Required,
		DefaultValue,
		FieldOrder,
		FieldWidth
		FROM CfgEntityProperty qf
		JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
		WHERE QueryName = @queryName
		ORDER BY FieldOrder
	</sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="Owner" type="numericIn">TQ.IdOwn</filter>
      <filter name="Warehouse" type="numericIn">TQ.IdWhs</filter>
      <filter name="IdTypeTask" type="numericIn">TQ.IdTypeTask</filter>
      <filter name="CodeNumeric" type="numericEqual">TQ.IdDocumentBound</filter>
      <filter name="IdTrackTaskQueue" type="numericIn">TQ.IdTrackTaskQueue</filter>
    </filters>
  </query>
  
  <query code="TaskQueue_GetOrdersInQueue">
    <sql>
		SELECT
		TQ.IdTaskQueue,
		TQ.IdDocumentBound,
		TQ.IdTypeTask,
		C.CustomerCode,
		C.CustomerName,
		TTQ.NameTrackTaskQueue,
		O.OwnName,
		O.IdOwn,
		W.IdWhs,
		W.WhsName,
		TQ.IdTrackTaskQueue,
		OO.OutboundNumber as NumberDocumentBound,
		TQ.PercCompletion,
		TQ.SpecialField1,
		TQ.SpecialField2,
		TQ.SpecialField3,
		TQ.SpecialField4,
		TQ.IdLpnCode as IdLpnCode
		FROM TaskQueue TQ
		JOIN TrackTaskQueue TTQ
		ON TQ.IdTrackTaskQueue = TTQ.IdTrackTaskQueue
		JOIN OutboundOrder OO
		ON TQ.IdOwn = OO.IdOwn
		AND TQ.IdWhs = OO.IdWhs
		AND TQ.IdDocumentBound = OO.IdOutboundOrder
		JOIN Customer C
		ON OO.CustomerCode = C.CustomerCode
		AND OO.IdOWn = C.IdOwn
		JOIN Owner O
		ON O.IdOwn = TQ.IdOwn
		JOIN Warehouse W
		ON W.IdWhs = TQ.IdWhs
		@SQLPart
		ORDER BY TQ.DateCreated

		SELECT q.IdCfgEntity,
		FieldName,
		Enabled,
		VisibleGrid,
		VisibleEditNew,
		VisibleView,
		VisibleReport,
		Required,
		DefaultValue,
		FieldOrder,
		FieldWidth
		FROM CfgEntityProperty qf
		JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
		WHERE QueryName = @queryName
		ORDER BY FieldOrder
	</sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="Owner" type="numericIn">TQ.IdOwn</filter>
      <filter name="Warehouse" type="numericIn">TQ.IdWhs</filter>
      <filter name="IdTypeTask" type="numericIn">TQ.IdTypeTask</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
      <filter name="IdTrackTaskQueue" type="numericIn">TQ.IdTrackTaskQueue</filter>
		<filter name="LpnCode" type="textIn">TQ.IdLpnCode</filter>
	</filters>
  </query>

  <query code="TrackTaskQueue_FindAll">
    <sql>
      SELECT
            IdTrackTaskQueue,
            NameTrackTaskQueue,
            DateCreated,
            UserCreated,
            DateModified,
            UserModified
       FROM TrackTaskQueue
            @SQLPart
   ORDER BY IdTrackTaskQueue;
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="IdTrackTaskQueue" type="textIn">IdTrackTaskQueue</filter>
      <filter name="Name" type="textLike">NameTrackTaskQueue</filter>
    </filters>
  </query>

  <!-- end TaskQueue -->

  <!-- NumberInboundOrder -->
  <query code="NumberInboundOrder_FindAll">
    <sql>
      SELECT
      W.IdWhs,
      W.WhsCode,
      W.ShortWhsName,
      W.WhsName,
      O.IdOwn,
      O.OwnCode,
      O.OwnName,
      IT.IdInboundType,
      IT.InboundTypeCode,
      IT.InboundTypeName,
      NIO.LastInboundNumber,
      NIO.NumberLength,
      NIO.IsCodePrefix
      FROM NumberInboundOrder NIO INNER JOIN
      Warehouse W ON NIO.IdWhs = W.IdWhs INNER JOIN
      Owner O ON NIO.IdOwn = O.IdOwn INNER JOIN
      InboundType IT ON NIO.InboundTypeCode = IT.InboundTypeCode
      WHERE 1 = 1
      @SQLPart;
      
      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
      <filter name="Owner" type="numericIn">O.IdOwn</filter>
      <filter name="Code" type="textLike">IT.InboundTypeCode</filter>
    </filters>
  </query>
  
  <query code="NumberInboundOrder_GetByWhsOwnAndIdType">
    <sql>
      SELECT
      W.IdWhs,
      W.WhsCode,
      W.ShortWhsName,
      W.WhsName,
      O.IdOwn,
      O.OwnCode,
      O.OwnName,
      IT.IdInboundType,
      IT.InboundTypeCode,
      IT.InboundTypeName,
      NIO.LastInboundNumber,
      NIO.NumberLength,
      NIO.IsCodePrefix
      FROM NumberInboundOrder NIO INNER JOIN
      Warehouse W ON W.IdWhs = NIO.IdWhs INNER JOIN
      Owner O ON O.IdOwn = NIO.IdOwn INNER JOIN
      InboundType IT ON IT.InboundTypeCode = NIO.InboundTypeCode
      WHERE NIO.IdWhs = @IdWhs
      AND NIO.IdOwn = @IdOwn
      AND IT.IdInboundType = @IdInboundType
      ORDER BY NIO.IdWhs, NIO.IdOwn, NIO.InboundTypeCode
    </sql>
    <parameters>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="Int">IdInboundType</parameter>
    </parameters>
  </query>

  <query code="NumberInboundOrder_Insert">
    <sql>
      INSERT INTO NumberInboundOrder
      (IdWhs
      ,IdOwn
      ,InboundTypeCode
      ,LastInboundNumber
      ,NumberLength
      ,IsCodePrefix)
      VALUES
      (@IdWhs
      ,@IdOwn
      ,@InboundTypeCode
      ,@LastInboundNumber
      ,@NumberLength
      ,@IsCodePrefix)
    </sql>
    <parameters>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="String">InboundTypeCode</parameter>
      <parameter type="Int">LastInboundNumber</parameter>
      <parameter type="Int">NumberLength</parameter>
      <parameter type="Int">IsCodePrefix</parameter>
    </parameters>
  </query>

  <query code="NumberInboundOrder_DeleteByIdOwner">
    <sql>
      DELETE FROM NumberInboundOrder WHERE IdOwn = @IdOwner;
    </sql>
    <parameters>
      <parameter type="Int">IdOwner</parameter>
    </parameters>
  </query>
  
  <query code="NumberInboundOrder_Delete">
    <sql>
      DELETE FROM NumberInboundOrder 
      WHERE IdWhs = @idWhs
      AND IdOwn = @idOwn
      AND InboundTypeCode = @inboundTypeCode;
    </sql>
    <parameters>
      <parameter type="Int">idWhs</parameter>
      <parameter type="Int">idOwn</parameter>
      <parameter type="String">inboundTypeCode</parameter>
    </parameters>
  </query>
  <!-- END NumberInboundOrder -->

  <!-- NumberOutboundOrder -->
  <query code="NumberOutboundOrder_FindAll">
    <sql>
      SELECT W.ShortWhsName,
      W.IdWhs,
      O.OwnCode,
      O.OwnName,
      OT.OutboundTypeName,
      NOO.OutboundTypeCode,
      NOO.LastOutboundNumber,
      NOO.NumberLength,
      NOO.IsCodePrefix
      FROM NumberOutboundOrder NOO INNER JOIN
      Warehouse W ON NOO.IdWhs = W.IdWhs INNER JOIN
      Owner O ON NOO.IdOwn = O.IdOwn INNER JOIN
      OutboundType OT ON NOO.OutboundTypeCode = OT.OutboudTypeCode
      WHERE 1 = 1
      @SQLPart;
      
      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericEqual">W.IdWhs</filter>
      <filter name="Owner" type="numericEqual">O.IdOwn</filter>
      <filter name="Code" type="textLike">OT.OutboudTypeCode</filter>
    </filters>
  </query>

  <query code="NumberOutboundOrder_Insert">
    <sql>
      INSERT INTO NumberOutboundOrder
      (IdWhs
      ,IdOwn
      ,OutboundTypeCode
      ,LastOutboundNumber
      ,NumberLength
      ,IsCodePrefix)
      VALUES
      (@IdWhs
      ,@IdOwn
      ,@OutboundTypeCode
      ,@LastOutboundNumber
      ,@NumberLength
      ,@IsCodePrefix)
    </sql>
    <parameters>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="String">OutboundTypeCode</parameter>
      <parameter type="Int">LastOutboundNumber</parameter>
      <parameter type="Int">NumberLength</parameter>
      <parameter type="Int">IsCodePrefix</parameter>
    </parameters>
  </query>
  
  <query code="NumberOutboundOrder_DeleteByIdOwner">
    <sql>
      DELETE FROM NumberOutboundOrder WHERE IdOwn = @IdOwner;
    </sql>
    <parameters>
      <parameter type="Int">IdOwner</parameter>
    </parameters>
  </query>
  
  <query code="NumberOutboundOrder_Delete">
    <sql>
      DELETE FROM NumberOutboundOrder 
      WHERE IdWhs = @idWhs
      AND IdOwn = @idOwn
      AND OutboundTypeCode = @outboundTypeCode;
    </sql>
    <parameters>
      <parameter type="Int">idWhs</parameter>
      <parameter type="Int">idOwn</parameter>
      <parameter type="String">outboundTypeCode</parameter>
    </parameters>
  </query>
  <!-- END NumberOutboundOrder -->
  
  <!-- TaskEmail -->
  <query code="TaskEmail_Insert">
    <sql>
      INSERT INTO TaskEmail
      (IdTaskEmail,
      Comments,
      Subject,
      ToEmail,
      FromEmail,
      Priority,
      Sent,
      DateCreated,
      UserCreated)
      VALUES
      (@IdTaskEmail,
      @Comments,
      @Subject,
      @ToEmail,
      @FromEmail,
      @Priority,
      @Sent,
      @DateCreated,
      @UserCreated)
    </sql>
    <parameters>
      <parameter type="Int">IdTaskEmail</parameter>
      <parameter type="String">Comments</parameter>
      <parameter type="String">Subject</parameter>
      <parameter type="String">ToEmail</parameter>
      <parameter type="String">FromEmail</parameter>
      <parameter type="Int">Priority</parameter>
      <parameter type="Boolean">Sent</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
    </parameters>
  </query>

  <query code="TaskEmail_Update">
    <sql>
      UPDATE TaskEmail SET
      Comments = @Comments,
      Subject = @Subject,
      ToEmail = @ToEmail,
      FromEmail = @FromEmail,
      Priority = @Priority,
      Sent = @Sent,
      DateModified = @DateModified,
      UserModified = @UserModified
      WHERE
      IdTaskEmail = @IdTaskEmail
    </sql>
    <parameters>
      <parameter type="String">Comments</parameter>
      <parameter type="String">Subject</parameter>
      <parameter type="String">ToEmail</parameter>
      <parameter type="String">FromEmail</parameter>
      <parameter type="Int">Priority</parameter>
      <parameter type="Boolean">Sent</parameter>
      <parameter type="DateTime">DateModified</parameter>
      <parameter type="String">UserModified</parameter>
      <parameter type="Int">IdTaskEmail</parameter>
    </parameters>
  </query>

  <query code="TaskEmail_GetById">
    <sql>
      SELECT
      IdTaskEmail,
      Comments,
      Subject,
      ToEmail,
      FromEmail,
      Priority,
      Sent,
      DateCreated,
      UserCreated,
      DateModified,
      UserModified
      FROM TaskEmail
      WHERE IdTaskEmail = @IdTaskEmail
    </sql>
    <parameters>
      <parameter type="Int">IdTaskEmail</parameter>
    </parameters>
  </query>

  <query code="TaskEmail_GetByIsSent">
    <sql>
      SELECT
      IdTaskEmail,
      Comments,
      Subject,
      ToEmail,
      FromEmail,
      Priority,
      Sent,
      DateCreated,
      UserCreated,
      DateModified,
      UserModified
      FROM TaskEmail
      WHERE Sent = @Sent
    </sql>
    <parameters>
      <parameter type="Boolean">Sent</parameter>
    </parameters>
  </query>

  <query code="ConfigEmail_GetByActive">
    <sql>
      SELECT
      IdConfigEmail,
      HostSmtp,
      Port,
      UserSmtp,
      PassSmtp,
      Active
      FROM ConfigEmail
      WHERE Active = @Active
    </sql>
    <parameters>
      <parameter type="Boolean">Active</parameter>
    </parameters>
  </query>
  <!-- End TaskEmail -->
  
  <query code="MovementIfz_FindAll">
    <sql>
		SELECT
		M.IdMovIfz,
		M.DateProcess,
		M.StatusProcess,
		M.StatusMessage,
		M.TypeMovto,
		M.IdTicketTransfer
		FROM MovementIfz M
		@SQLPart
		ORDER BY M.DateProcess;

		SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
		FROM CfgEntityProperty qf
		JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
		WHERE QueryName = @queryName
		ORDER BY FieldOrder
	</sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="DateRange" type="textBetween">M.DateProcess</filter>
      <filter name="Code" type="textLike">M.StatusProcess</filter>
    </filters>
  </query>
	
	  <query code="RequestApiSend_FindAll">
    <sql>
		SELECT 
     	RAS.IdRequestSend,
		RAS.IdEmp,
		RAS.UserName,
		RAS.ReferenceNumber,
		RAS.Origin,
		RAS.ErrorMessage,
		RAS.Status,
		RAS.SendDate
		FROM requestApiSend RAS
		@SQLPart
		ORDER BY RAS.SendDate;

		SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
		FROM CfgEntityProperty qf
		JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
		WHERE QueryName = @queryName
		ORDER BY FieldOrder
	</sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="DateRange" type="textBetween">RAS.SendDate</filter>
      <filter name="Status" type="textLike">RAS.Status</filter>
    </filters>
  </query>

  <query code="GetOutboundOrderByNumber2">
    <sql>
      SELECT
      Out.IdOutboundOrder,
      Out.IdWhs,
      Out.IdOwn,
      Out.OutboundNumber,
      Out.Status,
      Out.ReferenceNumber,
      Out.Priority,
      Out.InmediateProcess,
      Out.EmissionDate,
      Out.ExpectedDate,
      Out.ShipmentDate,
      Out.ExpirationDate,
      Out.CancelDate,
      Out.CancelUser,
      Out.CustomerCode,
      Out.CustomerName,
      Out.DeliveryAddress1,
      Out.DeliveryAddress2,
      Out.IdCountryDelivery,
      Out.IdStateDelivery,
      Out.IdCityDelivery,
      Out.DeliveryPhone,
      Out.DeliveryEmail,
      Out.IdWhsTarget,
      Out.FullShipment,
      Out.CarrierCode,
      Out.RouteCode,
      Out.Plate,
      Out.Invoice,
      Out.FactAddress1,
      Out.FactAddress2,
      Out.IdCountryFact,
      Out.IdStateFact,
      Out.IdCityFact,
      Out.FactPhone,
      Out.FactEmail,
      Out.SpecialField1,
      Out.SpecialField2,
      Out.SpecialField3,
      Out.SpecialField4
      FROM OutboundOrder Out
      WHERE Out.OutboundNumber = @outboundnumber
    </sql>
    <parameters>
      <parameter type="String">outboundnumber</parameter>
    </parameters>
  </query>

  <!-- Begin CfgUtility section  -->
  <query code="CfgUtility_FindAll">
    <sql>
      SELECT 
            U.IdCfgUtility,
	          U.UtilityCode,
	          U.UtilityName,
	          U.Description,
	          U.Status,
            U.FrequenceInterval,
            U.StartDate,
            U.EndDate,
            U.StartTime,
            U.EndTime,
            U.Pagination,
            U.DateCreated,
            U.UserCreated,
            U.DateModified,
            U.UserModified
      FROM CfgUtility U
           @SQLPart
      ORDER BY U.DateCreated;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
        <filter name="Code" type="textLike">U.UtilityName</filter>
        <filter name="CodeAlt" type="textLike">U.Description</filter>
    </filters>
  </query>
  
  <query code="CfgUtility_Delete">
    <sql>
      DELETE FROM CfgUtility WHERE idCfgUtility = @idCfgUtility;
    </sql>
    <parameters>
      <parameter type="Int">idCfgUtility</parameter>
    </parameters>
  </query>
  
  <query code="CfgUtility_Insert">
    <sql>
        INSERT INTO CfgUtility
            (IdCfgUtility,
	           UtilityCode,
	           UtilityName,
	           Description,
	           Status,
             FrequenceInterval,
             StartDate,
             EndDate,
             StartTime,
             EndTime,
             Pagination,
             DateCreated,
             UserCreated)
      VALUES
            (@IdCfgUtility,
	           @UtilityCode,
	           @UtilityName,
	           @Description,
	           @Status,
             @FrequenceInterval,
             @StartDate,
             @EndDate,
             @StartTime,
             @EndTime,
             @Pagination,
             @DateCreated,
             @UserCreated)
    </sql>
    <parameters>
      <parameter type="Int">IdCfgUtility</parameter>
      <parameter type="String">UtilityCode</parameter>
      <parameter type="String">UtilityName</parameter>
      <parameter type="String">Description</parameter>
      <parameter type="Boolean">Status</parameter>
      <parameter type="Int">FrequenceInterval</parameter>
      <parameter type="DateTime">StartDate</parameter>
      <parameter type="DateTime">EndDate</parameter>
      <parameter type="DateTime">StartTime</parameter>
      <parameter type="DateTime">EndTime</parameter>
      <parameter type="Int">Pagination</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
    </parameters>
    <filters>
    </filters>
  </query>
  
  <query code="CfgUtility_Update">
    <sql>
        UPDATE CfgUtility
        SET 
	           UtilityCode = @UtilityCode,
	           UtilityName = @UtilityName,
	           Description = @Description,
	           Status = @Status,
             FrequenceInterval = @FrequenceInterval,
             StartDate = @StartDate,
             EndDate = @EndDate,
             StartTime = @StartTime,
             EndTime = @EndTime,
             Pagination = @Pagination,
             DateModified = @DateModified,
             UserModified = @UserModified
       WHERE IdCfgUtility = @IdCfgUtility
    </sql>
    <parameters>
      <parameter type="String">UtilityCode</parameter>
      <parameter type="String">UtilityName</parameter>
      <parameter type="String">Description</parameter>
      <parameter type="Boolean">Status</parameter>
      <parameter type="Int">FrequenceInterval</parameter>
      <parameter type="DateTime">StartDate</parameter>
      <parameter type="DateTime">EndDate</parameter>
      <parameter type="DateTime">StartTime</parameter>
      <parameter type="DateTime">EndTime</parameter>
      <parameter type="Int">Pagination</parameter>
      <parameter type="DateTime">DateModified</parameter>
      <parameter type="String">UserModified</parameter>
      <parameter type="Int">IdCfgUtility</parameter>
    </parameters>
    <filters>
    </filters>
  </query>
  <!-- End CfgUtility section  -->
  
  <!-- Begin CfgBilling section  -->
  <query code="CfgBilling_FindAll">
    <sql>
      SELECT
      IdCfgBilling,
      BillingCode,
      BillingName,
      Description,
      Status,
      FrequenceInterval,
      StartDate,
      EndDate,
      StartTime,
      EndTime,
      NoEndDate,
      Pagination,
      DateCreated,
      UserCreated,
      DateModified,
      UserModified
      FROM CfgBilling
      @SQLPart
      ORDER BY BillingName;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="Code" type="textLike">BillingName</filter>
      <filter name="CodeAlt" type="textLike">Description</filter>
    </filters>
  </query>

  <query code="CfgBilling_Delete">
    <sql>
      DELETE FROM CfgBilling WHERE IdCfgBilling = @idCfgBilling;
    </sql>
    <parameters>
      <parameter type="Int">idCfgBilling</parameter>
    </parameters>
  </query>

  <query code="CfgBilling_Insert">
    <sql>
      INSERT INTO CfgBilling
      (IdCfgBilling,
      BillingCode,
      BillingName,
      Description,
      Status,
      FrequenceInterval,
      StartDate,
      EndDate,
      StartTime,
      EndTime,
      Pagination,
      DateCreated,
      UserCreated)
      VALUES
      (@IdCfgBilling,
      @BillingCode,
      @BillingName,
      @Description,
      @Status,
      @FrequenceInterval,
      @StartDate,
      @EndDate,
      @StartTime,
      @EndTime,
      @Pagination,
      @DateCreated,
      @UserCreated)
    </sql>
    <parameters>
      <parameter type="Int">IdCfgBilling</parameter>
      <parameter type="String">BillingCode</parameter>
      <parameter type="String">BillingName</parameter>
      <parameter type="String">Description</parameter>
      <parameter type="Boolean">Status</parameter>
      <parameter type="Int">FrequenceInterval</parameter>
      <parameter type="DateTime">StartDate</parameter>
      <parameter type="DateTime">EndDate</parameter>
      <parameter type="DateTime">StartTime</parameter>
      <parameter type="DateTime">EndTime</parameter>
      <parameter type="Int">Pagination</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
    </parameters>
    <filters>
    </filters>
  </query>

  <query code="CfgBilling_Update">
    <sql>
      UPDATE CfgBilling
      SET
      BillingCode = @BillingCode,
      BillingName = @BillingName,
      Description = @Description,
      Status = @Status,
      FrequenceInterval = @FrequenceInterval,
      StartDate = @StartDate,
      EndDate = @EndDate,
      StartTime = @StartTime,
      EndTime = @EndTime,
      Pagination = @Pagination,
      DateModified = @DateModified,
      UserModified = @UserModified
      WHERE IdCfgBilling = @IdCfgBilling
    </sql>
    <parameters>
      <parameter type="String">BillingCode</parameter>
      <parameter type="String">BillingName</parameter>
      <parameter type="String">Description</parameter>
      <parameter type="Boolean">Status</parameter>
      <parameter type="Int">FrequenceInterval</parameter>
      <parameter type="DateTime">StartDate</parameter>
      <parameter type="DateTime">EndDate</parameter>
      <parameter type="DateTime">StartTime</parameter>
      <parameter type="DateTime">EndTime</parameter>
      <parameter type="Int">Pagination</parameter>
      <parameter type="DateTime">DateModified</parameter>
      <parameter type="String">UserModified</parameter>
      <parameter type="Int">IdCfgBilling</parameter>
    </parameters>
    <filters>
    </filters>
  </query>
  <!-- End CfgBilling section  -->

  <!-- Begin CfgInterface section  -->
  <query code="CfgInterfaceIfz_FindAll">
    <sql>
      SELECT
      IdInterface,
      InterfaceCode,
      InterfaceName,
      Description,
      Status,
      FrequenceInterval,
      StartDate,
      EndDate,
      StartTime,
      EndTime,
      NoEndDate,
      Pagination,
      DateCreated,
      UserCreated,
      DateModified,
      UserModified
      FROM CfgInterface
      @SQLPart
      ORDER BY InterfaceName;
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Code" type="textLike">InterfaceName</filter>
      <filter name="CodeAlt" type="textLike">Description</filter>
    </filters>
  </query>

  <query code="CfgInterfaceIfz_Delete">
    <sql>
      DELETE FROM CfgInterface WHERE IdInterface = @IdInterface;
    </sql>
    <parameters>
      <parameter type="Int">IdInterface</parameter>
    </parameters>
  </query>

  <query code="CfgInterfaceIfz_Insert">
    <sql>
      INSERT INTO CfgInterface
      (InterfaceCode,
      InterfaceName,
      Description,
      Status,
      FrequenceInterval,
      StartDate,
      EndDate,
      StartTime,
      EndTime,
      Pagination,
      DateCreated,
      UserCreated)
      VALUES
      (@InterfaceCode,
      @InterfaceName,
      @Description,
      @Status,
      @FrequenceInterval,
      @StartDate,
      @EndDate,
      @StartTime,
      @EndTime,
      @Pagination,
      @DateCreated,
      @UserCreated)
    </sql>
    <parameters>
      <parameter type="String">InterfaceCode</parameter>
      <parameter type="String">InterfaceName</parameter>
      <parameter type="String">Description</parameter>
      <parameter type="Boolean">Status</parameter>
      <parameter type="Int">FrequenceInterval</parameter>
      <parameter type="DateTime">StartDate</parameter>
      <parameter type="DateTime">EndDate</parameter>
      <parameter type="DateTime">StartTime</parameter>
      <parameter type="DateTime">EndTime</parameter>
      <parameter type="Int">Pagination</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
    </parameters>
    <filters>
    </filters>
  </query>

  <query code="CfgInterfaceIfz_Update">
    <sql>
      UPDATE CfgInterface
      SET
      InterfaceCode = @InterfaceCode,
      InterfaceName = @InterfaceName,
      Description = @Description,
      Status = @Status,
      FrequenceInterval = @FrequenceInterval,
      StartDate = @StartDate,
      EndDate = @EndDate,
      StartTime = @StartTime,
      EndTime = @EndTime,
      Pagination = @Pagination,
      DateModified = @DateModified,
      UserModified = @UserModified
      WHERE IdInterface = @IdInterface
    </sql>
    <parameters>
      <parameter type="String">InterfaceCode</parameter>
      <parameter type="String">InterfaceName</parameter>
      <parameter type="String">Description</parameter>
      <parameter type="Boolean">Status</parameter>
      <parameter type="Int">FrequenceInterval</parameter>
      <parameter type="DateTime">StartDate</parameter>
      <parameter type="DateTime">EndDate</parameter>
      <parameter type="DateTime">StartTime</parameter>
      <parameter type="DateTime">EndTime</parameter>
      <parameter type="Int">Pagination</parameter>
      <parameter type="DateTime">DateModified</parameter>
      <parameter type="String">UserModified</parameter>
      <parameter type="Int">IdInterface</parameter>
    </parameters>
    <filters>
    </filters>
  </query>
  <!-- End CfgInterface section  -->

  <!-- Begin CfgArchiving section  -->
  <query code="CfgArchivingKpi_FindAll">
    <sql>
      SELECT
      IdCfgArchiving,
      ArchivingCode,
      ArchivingName,
      Description,
      Status,
      FrequenceInterval,
      StartDate,
      EndDate,
      StartTime,
      EndTime,
      Pagination,
      DateCreated,
      UserCreated,
      DateModified,
      UserModified
      FROM CfgArchiving
      @SQLPart
      ORDER BY ArchivingName;
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Code" type="textLike">ArchivingName</filter>
      <filter name="CodeAlt" type="textLike">Description</filter>
    </filters>
  </query>

  <query code="CfgArchivingKpi_Delete">
    <sql>
      DELETE FROM CfgArchiving WHERE IdCfgArchiving = @IdCfgArchiving;
    </sql>
    <parameters>
      <parameter type="Int">IdCfgArchiving</parameter>
    </parameters>
  </query>

  <query code="CfgArchivingKpi_Insert">
    <sql>
      INSERT INTO CfgArchiving
      (ArchivingCode,
      ArchivingName,
      Description,
      Status,
      FrequenceInterval,
      StartDate,
      EndDate,
      StartTime,
      EndTime,
      Pagination,
      DateCreated,
      UserCreated)
      VALUES
      (@ArchivingCode,
      @ArchivingName,
      @Description,
      @Status,
      @FrequenceInterval,
      @StartDate,
      @EndDate,
      @StartTime,
      @EndTime,
      @Pagination,
      @DateCreated,
      @UserCreated)
    </sql>
    <parameters>
      <parameter type="String">ArchivingCode</parameter>
      <parameter type="String">ArchivingName</parameter>
      <parameter type="String">Description</parameter>
      <parameter type="Boolean">Status</parameter>
      <parameter type="Int">FrequenceInterval</parameter>
      <parameter type="DateTime">StartDate</parameter>
      <parameter type="DateTime">EndDate</parameter>
      <parameter type="DateTime">StartTime</parameter>
      <parameter type="DateTime">EndTime</parameter>
      <parameter type="Int">Pagination</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
    </parameters>
    <filters>
    </filters>
  </query>

  <query code="CfgArchivingKpi_Update">
    <sql>
      UPDATE CfgArchiving
      SET
      ArchivingCode = @ArchivingCode,
      ArchivingName = @ArchivingName,
      Description = @Description,
      Status = @Status,
      FrequenceInterval = @FrequenceInterval,
      StartDate = @StartDate,
      EndDate = @EndDate,
      StartTime = @StartTime,
      EndTime = @EndTime,
      Pagination = @Pagination,
      DateModified = @DateModified,
      UserModified = @UserModified
      WHERE IdCfgArchiving = @IdCfgArchiving
    </sql>
    <parameters>
      <parameter type="String">ArchivingCode</parameter>
      <parameter type="String">ArchivingName</parameter>
      <parameter type="String">Description</parameter>
      <parameter type="Boolean">Status</parameter>
      <parameter type="Int">FrequenceInterval</parameter>
      <parameter type="DateTime">StartDate</parameter>
      <parameter type="DateTime">EndDate</parameter>
      <parameter type="DateTime">StartTime</parameter>
      <parameter type="DateTime">EndTime</parameter>
      <parameter type="Int">Pagination</parameter>
      <parameter type="DateTime">DateModified</parameter>
      <parameter type="String">UserModified</parameter>
      <parameter type="Int">IdCfgArchiving</parameter>
    </parameters>
    <filters>
    </filters>
  </query>
  <!-- End CfgArchiving section  -->
  
  <!-- UsefulLife Section -->
    <query code="UsefulLife_FindAll">
        <sql>
          SELECT
          US.IdUsefulLife,
          US.DayQty,
          C.CustomerName,
          C.CustomerCode,
          C.IdCustomer,
          O.OwnCode,
          O.OwnName,
          O.IdOwn,
          W.WhsName,
          W.WhsCode,
          W.IdWhs,
          I.IdItem,
          I.ItemCode,
          I.ShortItemName,
          I.Description,
          B.IdBranch,
          B.BranchCode,
          B.BranchName
          FROM UsefulLife US
          INNER JOIN Customer C ON US.IdCustomer = C.IdCustomer
          INNER JOIN Owner O ON O.IdOwn = US.IdOwn
          INNER JOIN Warehouse W ON W.IdWhs = US.IdWhs
          INNER JOIN Item I ON I.IdItem = US.IdItem
          INNER JOIN Branch B ON B.IdBranch = US.IdBranch
          @SQLPart

          SELECT q.IdCfgEntity,FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="IdCustomer" type="numericEqual">US.IdCustomer</filter>
          <filter name="Owner" type="numericIn">US.IdOwn</filter>
          <filter name="Warehouse" type="numericIn">US.IdWhs</filter>
          <filter name="Code" type="textLike">C.CustomerCode</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Branch" type="textLike">B.BranchCode</filter>
        </filters>
      </query>

      <query code="UsefulLife_GetByAnyParameter">
        <sql>
          SELECT
          IdUsefulLife,
          IdOwn,
          IdWhs,
          IdCustomer,
          IdItem,
          IdBranch,
          DayQty
          FROM UsefulLife
          WHERE 1=1
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="IdUsefulLife" type="numericEqual">IdUsefulLife</filter>
          <filter name="IdOwn" type="numericEqual">IdOwn</filter>
          <filter name="IdCustomer" type="numericEqual">IdCustomer</filter>
          <filter name="IdItem" type="numericEqual">IdItem</filter>
          <filter name="IdWhs" type="numericEqual">IdWhs</filter>
          <filter name="IdBranch" type="numericEqual">IdBranch</filter>
        </filters>
      </query>
  
      <query code="UsefulLife_Insert">
        <sql>
          INSERT INTO UsefulLife(
          IdUsefulLife,
          IdOwn,
          IdWhs,
          IdCustomer,
          IdItem,
          IdBranch,
          DayQty,
          DateCreated,
          UserCreated)
          VALUES(
          @IdUsefulLife,
          @IdOwn,
          @IdWhs,
          @IdCustomer,
          @IdItem,
          @IdBranch,
          @DayQty,
          @dateCreated,
          @UserCreated
          )
        </sql>
        <parameters>
          <parameter type="Int">IdUsefulLife</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdCustomer</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdBranch</parameter>
          <parameter type="Int">DayQty</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
        <filters>
        </filters>
      </query>

      <query code="UsefulLife_Update">
        <sql>
          UPDATE UsefulLife
          SET
          IdOwn = @IdOwn,
          IdWhs = @IdWhs,
          IdCustomer = @IdCustomer,
          IdItem = @IdItem,
          IdBranch = @IdBranch,
          DayQty = @DayQty,
          DateModified = @DateModified,
          UserModified = @UserModified
          WHERE IdUsefulLife = @IdUsefulLife
        </sql>
        <parameters>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdCustomer</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdBranch</parameter>
          <parameter type="Int">DayQty</parameter>
          <parameter type="Int">IdUsefulLife</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
        <filters>
        </filters>
      </query>

      <query code="UsefulLife_Delete">
        <sql>
          DELETE FROM UsefulLife WHERE IdUsefulLife = @IdUsefulLife;
        </sql>

        <parameters>
          <parameter type="Int">IdUsefulLife</parameter>
        </parameters>
      </query>
  <!-- End UsefulLife Section -->
  
  <query code="TaskWithTaskDetailIncomplete">
    <sql>
      SELECT
          TD.IdTaskDetail,
          TD.IdWhs,
          TD.IdTask,
          TD.IsComplete,
          TD.IdDocumentBound,
          TD.IdDetailBound,
          TD.LineNumber,
          TD.IdItem,
          TD.IdCtgItem,
          TD.LotNumber,
          TD.FifoDate,
          TD.FabricationDate,
          TD.ExpirationDate,
          TD.Priority,
          TD.IdLocSourceProposal,
          TD.IdLocForkLiftProposal,
          TD.IdLocTargetProposal,
          TD.IdLocSourceUsed,
          TD.IdLocForkLiftUsed,
          TD.IdLocTargetUsed,
          TD.IdLpnSourceProposal,
          TD.IdLpnTargetProposal,
          TD.IdLpnSourceUsed,
          TD.IdLpnTargetUsed,
          TD.Status,
          TD.ProposalQty,
          TD.RealQty,
          TD.IdPlanedProcess,
          TD.WaveCode,
          TD.LabelCode,
          TD.LoadCode,
          TD.LoadSeq,
          TD.UserAssigned,
          TD.SerialNumber,
          TD.StartDate,
          TD.EndDate,
          TD.MadeCrossDock,
          TD.DateCreated,
          TD.UserCreated,
          TD.DateModified,
          TD.UserModified,
          T.IdOwn
		 FROM TaskDetail TD 
		 JOIN Task T 
		   ON TD.IdTask = T.IdTask 
		WHERE T.IdTask = @IdTask
		  AND TD.IsComplete = 0
    </sql>
    <parameters>
      <parameter type="Int">IdTask</parameter>
    </parameters>
  </query>

  <!-- Begin WServiceMessageIfz Section -->
  <query code="WServiceMessageIfz_WServiceMessageIfzWithErrors">
    <sql>
     SELECT Id,
            Objeto,
            Ticket,
            Transferido,
            Procesado,
            IdObjeto,
            Error
      FROM  WServiceMessage
      WHERE Error IS NOT NULL
            @SQLPart
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="CodeNumeric" type="numericEqual">Ticket</filter>
    </filters>
  </query>

  <query code="WServiceMessageIfz_ReprocessWServiceMessage">
    <sql>
      UPDATE WServiceMessage
      SET Error = NULL,
      Procesado = 0,
	  IdObjeto = NULL
      WHERE Id = @Id
    </sql>
    <parameters>
      <parameter type="Int">Id</parameter>
    </parameters>
  </query>

  <!-- End WServiceMessageIfz Section -->
  

   <query code="ReserveStockLog_FindAll">
    <sql>
      SELECT RSL.IdReserveStockLog,
             TRSL.NameTypeReserveStockLog,
             RSL.IdOutboundOrder,
             OO.OutboundNumber,
             RSL.IdItem,
             RSL.Qty,
             RSL.DateCreated,
             RSL.UserCreated,
             RSL.DateModified,
             RSL.UserModified
        FROM ReserveStockLog RSL
        JOIN TypeReserveStockLog TRSL
          ON RSL.IdTypeReserveStockLog = TRSL.IdTypeReserveStockLog
   LEFT JOIN OutboundOrder OO
          ON OO.IdOwn = RSL.IdOwn
         AND OO.IdOutboundOrder = RSL.IdOutboundOrder
       WHERE RSL.IdOwn = @idOwn
         AND RSL.IdWhs = @idWhs
         AND RSL.IdCustomer = @idCustomer
         AND RSL.IdItem = @idItem
             @SQLPart
    ORDER BY DateCreated DESC
    </sql>
    <parameters>
      <parameter type="Int">idOwn</parameter>
      <parameter type="Int">idWhs</parameter>
      <parameter type="Int">idItem</parameter>
      <parameter type="Int">idCustomer</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="ReserveStockType" type="textIn">RSL.IdTypeReserveStockLog</filter>
    </filters>
  </query>

  <query code="ReserveStockLog_Insert">
    <sql>
      INSERT INTO ReserveStockLog
      (
        IdReserveStockLog,
        IdTypeReserveStockLog,
        IdOwn,
        IdWhs,
        IdCustomer,
        IdOutboundOrder,
        IdItem,
        Qty,
        DateCreated,
        UserCreated
      )
      VALUES
      (
        @IdReserveStockLog,
        @IdTypeReserveStockLog,
        @IdOwn,
        @IdWhs,
        @IdCustomer,
        @IdOutboundOrder,
        @IdItem,
        @Qty,
        @DateCreated,
        @UserCreated
      )
    </sql>
    <parameters>
      <parameter type="Int">IdReserveStockLog</parameter>
      <parameter type="Int">IdTypeReserveStockLog</parameter>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdCustomer</parameter>
      <parameter type="Int">IdOutboundOrder</parameter>
      <parameter type="Int">IdItem</parameter>
      <parameter type="Decimal">Qty</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
    </parameters>
  </query>
  
  <query code="ReserveStockLog_Header">
    <sql>
      SELECT RsLog.IdOwn,
	           O.OwnName,
             RsLog.IdWhs,
	           W.WhsName,
	           RsLog.IdCustomer,
	           C.CustomerName,
	           RsLog.IdItem,
             I.ItemCode,
             I.ShortItemName as LongItemName,
	           COALESCE(RS.QtyReserve, 0) AS QtyReserve
        FROM
		        (
			      SELECT 
				         DISTINCT RSL.IdOwn, 
							            RSL.IdWhs, 
							            RSL.IdItem, 
							            RSL.IdCustomer
			        FROM ReserveStockLog RSL
		        ) RsLog
  LEFT JOIN ReserveStock RS
         ON RS.IdOwn = RsLog.IdOwn
	      AND RS.IdWhs = RsLog.IdWhs
	      AND RS.IdCustomer = RsLog.IdCustomer
	      AND RS.IdItem = RsLog.IdItem
	     JOIN Warehouse W
	       ON W.IdWhs = RsLog.IdWhs
       JOIN Owner O
	       ON O.IdOwn = RsLog.IdOwn
	     JOIN Customer C
	       ON C.IdCustomer = RsLog.IdCustomer
	      AND C.IdOwn = RsLog.IdOwn
       JOIN Item I
	       ON I.IdItem = RsLog.IdItem
	      AND I.IdOwn = RsLog.IdOwn
            @SQLPart
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
        <filter name="Warehouse" type="numericIn">RsLog.IdWhs</filter>
        <filter name="Owner" type="numericIn">RsLog.IdOwn</filter>
        <filter name="Item" type="numericEqual">I.IdItem</filter>
        <filter name="Customer" type="textLike">C.CustomerName</filter>
    </filters>
  </query> 
   
  <query code="InsertSerial">
    <sql>
      INSERT INTO Serial
      (IdSerial,
      IdItem,
      IdOwn,
      IdWhs,
      SerialNumber,
      IdTrackSerialType,
      IdStockLast,
      IdInboundOrderLast,
      IdReceiptLast,
      IdOutboundOrderLast,
      IdDispatchLast,
      DateCreated,
      UserCreated
      )
      VALUES
      (@idSerial,
      @idItem,
      @idOwn,
      @idWhs,
      @serialNumber,
      @idTrackSerialType,
      @idStockLast,
      @idInboundOrderLast,
      @idReceiptLast,
      @idOutboundOrderLast,
      @idDispatchLast,
      @dateCreated,
      @userCreated
      )

    </sql>
    <parameters>
      <parameter type="Int">idSerial</parameter>
      <parameter type="Int">idItem</parameter>
      <parameter type="Int">idOwn</parameter>
      <parameter type="Int">idWhs</parameter>
      <parameter type="String">serialNumber</parameter>
      <parameter type="Int">idTrackSerialType</parameter>
      <parameter type="Int">IdStockLast</parameter>
      <parameter type="Int">IdInboundOrderLast</parameter>
      <parameter type="Int">IdReceiptLast</parameter>
      <parameter type="Int">IdOutboundOrderLast</parameter>
      <parameter type="Int">IdDispatchLast</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
    </parameters>
  </query>
  
  <query code="UpdateSerial">
    <sql>
      UPDATE Serial SET
      IdItem = @idItem,
      IdOwn = @idOwn,
      IdWhs = @idWhs,
      SerialNumber = @serialNumber,
      IdTrackSerialType = @idTrackSerialType,
      IdStockLast = @idStockLast,
      IdInboundOrderLast = @idInboundOrderLast,
      IdReceiptLast = @idReceiptLast,
      IdOutboundOrderLast = @idOutboundOrderLast,
      IdDispatchLast = @idDispatchLast,
      DateModified = @dateModified,
      UserModified = @userModified
      WHERE IdSerial = @idSerial
    </sql>
    <parameters>
      <parameter type="Int">idItem</parameter>
      <parameter type="Int">idOwn</parameter>
      <parameter type="Int">idWhs</parameter>
      <parameter type="String">serialNumber</parameter>
      <parameter type="Int">idTrackSerialType</parameter>
      <parameter type="Int">idStockLast</parameter>
      <parameter type="Int">idInboundOrderLast</parameter>
      <parameter type="Int">idReceiptLast</parameter>
      <parameter type="Int">idOutboundOrderLast</parameter>
      <parameter type="Int">idDispatchLast</parameter>
      <parameter type="DateTime">dateModified</parameter>
      <parameter type="String">userModified</parameter>
      <parameter type="Int">idSerial</parameter>
    </parameters>
  </query>
  
  <query code="DeleteSerial">
    <sql>
      DELETE Serial 
       WHERE IdSerial = @idSerial
    </sql>
    <parameters>
      <parameter type="Int">idSerial</parameter>
    </parameters>
  </query>
  
  <query code="InsertSerialTrack">
    <sql>
      INSERT INTO SerialTrack
      (IdSerialTrack,
      IdSerial,
      IdMovementType,
      MovementDate,
      UserName,
      IdInboundOrder,
      IdReceipt,
      IdOutboundOrder,
      IdDispatch,
      IdTask,
      IdTaskDetail,
      IdLpnCodeSource,
      IdLpnCodeTarget,
      LpnParentSource,
      LpnParentTarget,
      IdLocCodeSource,
      IdLocCodeTarget,
      DateCreated,
      UserCreated
      )
      VALUES
      (@idSerialTrack,
      @idSerial,
      @idMovementType,
      @movementDate,
      @userName,
      @idInboundOrder,
      @idReceipt,
      @idOutboundOrder,
      @idDispatch,
      @idTask,
      @idTaskDetail,
      @idLpnCodeSource,
      @idLpnCodeTarget,
      @lpnParentSource,
      @lpnParentTarget,
      @idLocCodeSource,
      @idLocCodeTarget,
      @dateCreated,
      @userCreated
      )
    </sql>
    <parameters>
      <parameter type="Int">idSerialTrack</parameter>
      <parameter type="Int">idSerial</parameter>
      <parameter type="Int">idMovementType</parameter>
      <parameter type="DateTime">movementDate</parameter>
      <parameter type="String">userName</parameter>
      <parameter type="Int">idInboundOrder</parameter>
      <parameter type="Int">idReceipt</parameter>
      <parameter type="Int">idOutboundOrder</parameter>
      <parameter type="Int">idDispatch</parameter>
      <parameter type="Int">idTask</parameter>
      <parameter type="Int">idTaskDetail</parameter>
      <parameter type="String">idLpnCodeSource</parameter>
      <parameter type="String">idLpnCodeTarget</parameter>
      <parameter type="String">lpnParentSource</parameter>
      <parameter type="String">lpnParentTarget</parameter>
      <parameter type="String">idLocCodeSource</parameter>
      <parameter type="String">idLocCodeTarget</parameter>
      <parameter type="DateTime">dateCreated</parameter>
      <parameter type="String">userCreated</parameter>
    </parameters>
  </query>
  
 <query code="DeleteSerialTrackByIdSerial">
   <sql>
      DELETE FROM SerialTrack 
            WHERE IdSerial = @idSerial
   </sql>
    <parameters>
      <parameter type="Int">idSerial</parameter>
    </parameters>
 </query>
  
  <query code="SerialGetBySerialNumber">
    <sql>
        SELECT IdSerial,
               IdItem,
               SerialNumber,
               IdOwn,
               IdWhs
          FROM Serial
         WHERE SerialNumber = @serialNumber
    </sql>
    <parameters>
      <parameter type="String">serialNumber</parameter>
    </parameters>
  </query>

	<query code="GetSerialByStock">
		<sql>
			SELECT
			IdSerial,
			IdItem,
			IdOwn,
			IdWhs,
			SerialNumber,
			IdTrackSerialType,
			IdStockLast,
			IdInboundOrderLast,
			IdReceiptLast,
			IdOutboundOrderLast,
			IdDispatchLast,
			DateCreated,
			UserCreated,
			DateModified,
			UserModified
			FROM Serial
			WHERE IdStockLast = @stockId
		</sql>
		<parameters>
			<parameter type="Int">stockId</parameter>
		</parameters>
	</query>

	<query code="DeleteSerial_byStockId">
		<sql>
			DELETE FROM SerialTrack
			WHERE IdSerial IN (SELECT IdSerial FROM Serial
			WHERE IdStockLast = @idStockLast)
			
			DELETE FROM Serial
			WHERE IdStockLast = @idStockLast
		</sql>
		<parameters>
			<parameter type="Int">idStockLast</parameter>
		</parameters>
	</query>

  <query code="WorkOrders_FindAll">
    <sql>
       SELECT
            OO.IdOutboundOrder,
            OO.OutboundNumber,
			      OO.EmissionDate as OutboundEmissionDate,
			      OOT.OutboudTypeCode,
			      OOT.OutboundTypeName,
            W.WhsName,
            O.OwnName,
			      IO.IdInboundOrder,
			      IO.InboundNumber,
            IO.EmissionDate,
			      IT.InboundTypeCode,
			      IT.InboundTypeName,
			      R.IdReceipt,
			      R.ReceiptDate,
			      RT.ReceiptTypeCode,
			      RT.ReceiptTypeName
       FROM OutboundOrder OO
	     JOIN OutboundType OOT
	       ON OO.IdOutboundType = OOT.IdOutboundType
       JOIN Warehouse W
         ON W.IdWhs = OO.IdWhs
       JOIN Owner O
         ON OO.IdOwn = O.IdOwn
       JOIN InboundOrder IO
         ON IO.IdOutboundOrderSource = OO.IdOutboundOrder
	     JOIN InboundType IT
	       ON IT.IdInboundType = IO.IdInboundType
	     JOIN Receipt R
	       ON R.IdInboundOrder = IO.IdInboundOrder
	     JOIN ReceiptType RT
	       ON R.IdReceiptType = RT.IdReceiptType
            @SQLPart
   ORDER BY OO.EmissionDate;

     SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
       FROM CfgEntityProperty qf
       JOIN CfgEntity q 
         ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="DateRange" type="textBetween">OO.EmissionDate</filter>
      <filter name="Warehouse" type="numericIn">OO.IdWhs</filter>
      <filter name="Owner" type="numericIn">OO.IdOwn</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
    </filters>
  </query>

  <query code="WorkOrdersDetails">
    <sql>
        SELECT OD.IdItem,
               I.ItemCode,
               I.Description,
               OD.ItemQty AS OutboundItemQty,
	             IOD.ItemQty AS InboundItemQty,
	             RD.LineNumber,
	             RD.ItemQty AS Received, 
	             RD.IdLpnCode,
	             RD.LotNumber,
	             RD.FifoDate,
	             RD.ExpirationDate,
	             RD.FabricationDate,
	             RD.IdCtgItem,
               CI.CtgName
          FROM OutboundDetail OD
          JOIN OutboundOrder OO
            ON OD.IdOutboundOrder = OO.IdOutboundOrder
          JOIN Item I
            ON I.IdItem = OD.IdItem
          JOIN InboundOrder IO
            ON IO.IdOutboundOrderSource = OO.IdOutboundOrder
          JOIN InboundDetail IOD
            ON IOD.IdInboundOrder = IO.IdInboundOrder
           AND IOD.IdItem = OD.IdItem
          JOIN Receipt R
            ON R.IdInboundOrder = IO.IdInboundOrder 
          JOIN ReceiptDetail RD
            ON RD.IdReceipt = R.IdReceipt
           AND RD.IdItem = OD.IdItem
     LEFT JOIN CategoryItem CI
            ON RD.IdCtgItem = CI.IdCtgItem
         WHERE OD.IdOutboundOrder = @idOutboundOrder
           AND RD.IdReceipt = @idReceipt
      ORDER BY OD.LineNumber;
      
       SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
         FROM CfgEntityProperty qf
         JOIN CfgEntity q 
           ON qf.IdCfgEntity = q.IdCfgEntity
        WHERE QueryName = @queryName
     ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="Int">idOutboundOrder</parameter>
      <parameter type="Int">idReceipt</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
  </query>

  <query code="TaskMgr_GetTasksPendingReplenishment">
    <sql>
        SELECT 
               OO.IdOutboundOrder as IdDocumentBound,
               OO.OutboundNumber,
	           OT.OutboudTypeCode,
	           OT.OutboundTypeName,
	           W.WhsCode,
	           W.WhsName,
	           O.OwnCode,
	           O.OwnName,
			   OO.EmissionDate,
			   T.TaskTypeCode
          FROM Task T
          JOIN OutboundOrder OO
            ON T.IdDocumentBound = OO.IdOutboundOrder
          JOIN OutboundType OT
            ON OT.IdOutboundType = OO.IdOutboundType
          JOIN Warehouse W
            ON W.IdWhs = T.IdWhs
          JOIN Owner O
            ON O.IdOwn = T.IdOwn
         WHERE T.TaskTypeCode IN ('PIKOR', 'PIKWV', 'PIKBT', 'PIKIT', 'PIKPS', 'PIUNK', 'PIKVA', 'PKLPN')
           AND T.IsComplete = 0
           AND T.IdTrackTaskType IN (11, 21)
           AND EXISTS (
					        SELECT 1
					          FROM     
					        (
				              SELECT TD.IdItem,
					                 TD.IdLocSourceProposal
				                FROM TaskDetail TD
                               WHERE TD.IdTask = T.IdTask
				                 AND TD.IsComplete = 0
					        ) PICK
					        JOIN 
					        (
						        SELECT TD.IdItem,
						               TD.IdLocSourceProposal
						          FROM Task T
						          JOIN TaskDetail TD
						            ON T.IdTask = TD.IdTask
						         WHERE T.TaskTypeCode IN ('REPL', 'CCNT', 'CCPC')
						           AND T.IsComplete = 0
						           AND T.IdTrackTaskType IN (2, 11)
						           AND TD.IsComplete = 0
					        ) PEND
					        ON PICK.IdItem = PEND.IdItem
				         AND PICK.IdLocSourceProposal = PEND.IdLocSourceProposal
		         )
               @SQLPart       
			   
			   UNION ALL
			   
			   SELECT  OO.IdOutboundOrder as IdDocumentBound,
                       OO.OutboundNumber,
	                   OT.OutboudTypeCode,
	                   OT.OutboundTypeName,
					   W.WhsCode,
	                   W.WhsName,
	                   O.OwnCode,
	                   O.OwnName,
					   OO.EmissionDate,
					   'PIKBT' as TaskTypeCode
                  FROM OutboundOrder OO
                  JOIN (
                    SELECT DISTINCT(TD.IdDocumentBound)
	                  FROM Task T
	                  JOIN TaskDetail TD
		                ON T.IdTask = TD.IdTask
	                 WHERE T.TaskTypeCode = 'PIKBT'
	                   AND T.IsComplete = 0
	                   AND T.IdTrackTaskType IN (11, 21)
                  ) PIKBT
                  ON PIKBT.IdDocumentBound = OO.IdOutboundOrder
                JOIN OutboundType OT
                  ON OT.IdOutboundType = OO.IdOutboundType
                JOIN Warehouse W
                  ON W.IdWhs = OO.IdWhs
                JOIN Owner O
                  ON O.IdOwn = OO.IdOwn
                AND EXISTS (
	                SELECT 1
		                FROM     
		                (
			                SELECT  TD.IdItem,
					                TD.IdLocSourceProposal
			                   FROM TaskDetail TD
			                  WHERE TD.IdDocumentBound = OO.IdOutboundOrder
				                AND TD.IsComplete = 0
		                ) PICK
		                JOIN 
		                (
			                SELECT   TD.IdItem,
					                 TD.IdLocSourceProposal
				                FROM Task T
				                JOIN TaskDetail TD
				                  ON T.IdTask = TD.IdTask
			                   WHERE T.TaskTypeCode IN ('REPL', 'CCNT', 'CCPC')
				                 AND T.IsComplete = 0
				                 AND T.IdTrackTaskType IN (2, 11)
				                 AND TD.IsComplete = 0
		                ) PEND
	                ON PICK.IdItem = PEND.IdItem
                   AND PICK.IdLocSourceProposal = PEND.IdLocSourceProposal
                )
				@SQLPart
				
				order by EmissionDate;
               
         SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
           FROM CfgEntityProperty qf
           JOIN CfgEntity q 
             ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="DateRange" type="textBetween">OO.EmissionDate</filter>
      <filter name="Warehouse" type="numericIn">OO.IdWhs</filter>
      <filter name="Owner" type="numericIn">OO.IdOwn</filter>
      <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
    </filters>
  </query>
  
  <query code="GetTasksDetailPendingReplenishmentByOutboundOrder">
    <sql>
         SELECT 
                DISTINCT
                REPL.IdTask,
		        REPL.IdTaskDetail,
		        REPL.ShortItemName,
		        REPL.ProposalQty,
		        REPL.IdLocSourceProposal,
		        REPL.IdLocTargetProposal,
		        REPL.CtgCode,
		        REPL.CtgName,
		        REPL.FifoDate,
		        REPL.FabricationDate,
		        REPL.ExpirationDate,
		        REPL.LotNumber,
			    REPL.NameTrackTaskType,
			    REPL.TaskTypeCode,
			    REPL.Description,
                REPL.IdItem,
                REPL.ItemCode
	            FROM 
	          (
			        SELECT
     				    TD.IdTask,
					    TD.IdTaskDetail,
				        I.ShortItemName,
					    TD.ProposalQty,
				        TD.IdLocSourceProposal,
					    TD.IdLocTargetProposal,
				        CI.CtgCode,
				        CI.CtgName,
						TD.FifoDate,
						TD.FabricationDate,
						TD.ExpirationDate,
						TD.LotNumber,
						TT.NameTrackTaskType,
						T.TaskTypeCode,
						T.Description,
                        TD.IdItem,
                        I.ItemCode
				   FROM TaskDetail TD
				   JOIN Task T
					 ON T.IdTask = TD.IdTask
				   JOIN Item I
					 ON I.IdItem = TD.IdItem
					AND I.IdOwn = T.IdOwn
				   JOIN TrackTaskType TT
					 ON TT.IdTrackTaskType = T.IdTrackTaskType
			  LEFT JOIN CategoryItem CI
				     ON CI.IdCtgItem = TD.IdCtgItem
				  WHERE T.IdDocumentBound = @idOutboundOrder
					AND TD.IsComplete = 0
					AND T.TaskTypeCode IN ('PIKOR', 'PIKWV', 'PIKIT', 'PIKPS', 'PIUNK', 'PIKVA', 'PKLPN')
					AND T.IdTrackTaskType IN (11, 21)
	        ) PICK
	        JOIN (
		          SELECT     
				        TD.IdTask,
		                TD.IdTaskDetail,
		                I.ShortItemName,
		                TD.ProposalQty,
		                TD.IdLocSourceProposal,
		                TD.IdLocTargetProposal,
		                CI.CtgCode,
		                CI.CtgName,
		                TD.FifoDate,
		                TD.FabricationDate,
		                TD.ExpirationDate,
		                TD.LotNumber,
					    TT.NameTrackTaskType,
					    T.TaskTypeCode,
					    T.Description,
                        TD.IdItem,
                        I.ItemCode
				   FROM TaskDetail TD
				   JOIN Task T
		             ON T.IdTask = TD.IdTask
	               JOIN Item I
		             ON I.IdItem = TD.IdItem
	                AND I.IdOwn = T.IdOwn
                    JOIN TrackTaskType TT
                      ON TT.IdTrackTaskType = T.IdTrackTaskType
               LEFT JOIN CategoryItem CI
                      ON CI.IdCtgItem = TD.IdCtgItem
	               WHERE T.TaskTypeCode IN ('REPL', 'CCNT', 'CCPC')
                     AND TD.IsComplete = 0
				     AND T.IdTrackTaskType IN (2, 11, 21)
                     AND T.IsComplete = 0

	        ) REPL
	        ON PICK.IdLocSourceProposal = REPL.IdLocSourceProposal
           AND PICK.IdItem = REPL.IdItem
      
       SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
         FROM CfgEntityProperty qf
         JOIN CfgEntity q 
           ON qf.IdCfgEntity = q.IdCfgEntity
        WHERE QueryName = @queryName
     ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="Int">idOutboundOrder</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
  </query>
	
  <query code="GetTasksDetailPendingReplenishmentByBatchOutboundOrder">
    <sql>
         SELECT 
                DISTINCT
                REPL.IdTask,
		        REPL.IdTaskDetail,
		        REPL.ShortItemName,
		        REPL.ProposalQty,
		        REPL.IdLocSourceProposal,
		        REPL.IdLocTargetProposal,
		        REPL.CtgCode,
		        REPL.CtgName,
		        REPL.FifoDate,
		        REPL.FabricationDate,
		        REPL.ExpirationDate,
		        REPL.LotNumber,
			    REPL.NameTrackTaskType,
			    REPL.TaskTypeCode,
			    REPL.Description,
                REPL.IdItem,
                REPL.ItemCode
	            FROM 
	          (
			        SELECT
     				    TD.IdTask,
					    TD.IdTaskDetail,
				        I.ShortItemName,
					    TD.ProposalQty,
				        TD.IdLocSourceProposal,
					    TD.IdLocTargetProposal,
				        CI.CtgCode,
				        CI.CtgName,
						TD.FifoDate,
						TD.FabricationDate,
						TD.ExpirationDate,
						TD.LotNumber,
						TT.NameTrackTaskType,
						T.TaskTypeCode,
						T.Description,
                        TD.IdItem,
                        I.ItemCode
				   FROM TaskDetail TD
				   JOIN Task T
					 ON T.IdTask = TD.IdTask
				   JOIN Item I
					 ON I.IdItem = TD.IdItem
					AND I.IdOwn = T.IdOwn
				   JOIN TrackTaskType TT
					 ON TT.IdTrackTaskType = T.IdTrackTaskType
			  LEFT JOIN CategoryItem CI
				     ON CI.IdCtgItem = TD.IdCtgItem
				  WHERE TD.IdDocumentBound = @idOutboundOrder
					AND TD.IsComplete = 0
					AND T.TaskTypeCode IN ('PIKBT')
					AND T.IdTrackTaskType IN (11, 21)
	        ) PICK
	        JOIN (
		          SELECT     
				        TD.IdTask,
		                TD.IdTaskDetail,
		                I.ShortItemName,
		                TD.ProposalQty,
		                TD.IdLocSourceProposal,
		                TD.IdLocTargetProposal,
		                CI.CtgCode,
		                CI.CtgName,
		                TD.FifoDate,
		                TD.FabricationDate,
		                TD.ExpirationDate,
		                TD.LotNumber,
					    TT.NameTrackTaskType,
					    T.TaskTypeCode,
					    T.Description,
                        TD.IdItem,
                        I.ItemCode
				   FROM TaskDetail TD
				   JOIN Task T
		             ON T.IdTask = TD.IdTask
	               JOIN Item I
		             ON I.IdItem = TD.IdItem
	                AND I.IdOwn = T.IdOwn
                    JOIN TrackTaskType TT
                      ON TT.IdTrackTaskType = T.IdTrackTaskType
               LEFT JOIN CategoryItem CI
                      ON CI.IdCtgItem = TD.IdCtgItem
	               WHERE T.TaskTypeCode IN ('REPL', 'CCNT', 'CCPC')
                     AND TD.IsComplete = 0
				     AND T.IdTrackTaskType IN (2, 11, 21)
                     AND T.IsComplete = 0

	        ) REPL
	        ON PICK.IdLocSourceProposal = REPL.IdLocSourceProposal
           AND PICK.IdItem = REPL.IdItem
      
       SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
         FROM CfgEntityProperty qf
         JOIN CfgEntity q 
           ON qf.IdCfgEntity = q.IdCfgEntity
        WHERE QueryName = @queryName
     ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="Int">idOutboundOrder</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
  </query>
  
  <query code="TaskStatistics_FindAll">
        <sql>
          SELECT   Q.IdLocCode,
                   Q.Description,
	                 Q.DocsToExecute,
	                 Q.QtyToExecute,
	                 Q.DocsExecuting,
	                 Q.QtyExecuting,
                   Q.LinesToExecute,
                   Q.LinesExecuting
              FROM
	              (
	                  SELECT 
                       L.IdLocCode,
		                   L.Description,
		                    (
			                    SELECT COUNT(Distinct(T.IdDocumentBound))
			                      FROM Task T
			                     WHERE T.IsComplete = 0
				                     AND (T.IdLocStageSource = L.IdLocCode OR T.IdLocStageTarget = L.IdLocCode)
				                     AND T.IdTrackTaskType = 11
		                    ) AS DocsToExecute,
		                    (
			                    SELECT COALESCE(SUM(TD.ProposalQty), 0)
			                      FROM Task T
			                      JOIN TaskDetail TD
				                      ON T.IdTask = TD.IdTask
			                     WHERE T.IsComplete = 0
				                     AND (T.IdLocStageSource = L.IdLocCode OR T.IdLocStageTarget = L.IdLocCode)
				                     AND T.IdTrackTaskType = 11
		                    ) AS QtyToExecute,
		                    (
			                   SELECT COUNT(Distinct(T.IdDocumentBound))
			                     FROM Task T
			                    WHERE T.IsComplete = 0
				                    AND (T.IdLocStageSource = L.IdLocCode OR T.IdLocStageTarget = L.IdLocCode)
				                    AND T.IdTrackTaskType = 21
		                    ) AS DocsExecuting,
		                    (
			                    SELECT COALESCE(SUM(TD.ProposalQty), 0)
			                      FROM Task T
			                      JOIN TaskDetail TD
				                      ON T.IdTask = TD.IdTask
			                     WHERE T.IsComplete = 0
				                     AND (T.IdLocStageSource = L.IdLocCode OR T.IdLocStageTarget = L.IdLocCode)
				                     AND T.IdTrackTaskType = 21
		                    ) AS QtyExecuting,
                        (
                          SELECT COUNT(OD.IdOutboundDetail)
                            FROM OutboundOrder OO
	                          JOIN OutboundDetail OD
	                            ON OO.IdOutboundOrder = OD.IdOutboundOrder
	                          JOIN 
	                            (SELECT DISTINCT(t.IdDocumentBound)
		                             FROM Task T
		                            WHERE T.IsComplete = 0
		                              AND (T.IdLocStageSource = L.IdLocCode OR T.IdLocStageTarget = L.IdLocCode)
		                              AND T.IdTrackTaskType = 11
	                            ) as DIT
	                          ON DIT.IdDocumentBound = OO.IdOutboundOrder
                        ) As LinesToExecute,
                        (
                          SELECT COUNT(OD.IdOutboundDetail)
                            FROM OutboundOrder OO
	                          JOIN OutboundDetail OD
	                            ON OO.IdOutboundOrder = OD.IdOutboundOrder
	                          JOIN 
	                            (SELECT DISTINCT(t.IdDocumentBound)
		                             FROM Task T
		                            WHERE T.IsComplete = 0
		                              AND (T.IdLocStageSource = L.IdLocCode OR T.IdLocStageTarget = L.IdLocCode)
		                              AND T.IdTrackTaskType = 21
	                            ) as DIT
	                          ON DIT.IdDocumentBound = OO.IdOutboundOrder
                        ) AS LinesExecuting
	                FROM Location L
	                JOIN LocationType LT
		                ON L.LocTypeCode = LT.LocTypeCode
	               WHERE LT.LocTypeCode IN ('DOCK', 'STGD') 
                       @SQLPart
	            ) Q
              ORDER BY Q.QtyExecuting DESC,
                       Q.QtyToExecute DESC,
		                   Q.DocsExecuting DESC,
		                   Q.DocsToExecute DESC,
                       Q.LinesExecuting DESC,
						           Q.LinesToExecute DESC;
                       
               SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
                 FROM CfgEntityProperty qf
                 JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
                WHERE QueryName = @queryName
                ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">L.IdLocCode</filter>
          <filter name="Warehouse" type="numericIn">L.IdWhs</filter>
        </filters>
      </query>
  
    <query code="Task_FindAllPendingTasksByTruck">
      <sql>
        SELECT
		              OO.OutboundNumber,
		              T.TaskTypeCode,
		              T.Description,
		              TD.IdTaskDetail,
		              TD.IdLpnSourceProposal,
		              TD.IdLpnTargetProposal,
		              TD.IdLocSourceProposal,
		              TD.IdLocTargetProposal,
                  O.OwnName,
                  W.ShortWhsName,
                  C.CustomerName,
                  OT.OutboundTypeName,
                  TK.LocCode
             FROM Task T
             JOIN OutboundOrder OO
	             ON T.IdDocumentBound = OO.IdOutboundOrder
             JOIN OutboundType OT
			         ON OT.IdOutboundType = OO.IdOutboundType
             JOIN Customer C
               ON C.CustomerCode = OO.CustomerCode
			        AND C.IdOwn = OO.IdOwn
             JOIN Warehouse W
			         ON W.IdWhs = T.IdWhs
			       JOIN Owner O
			         ON O.IdOwn = T.IdOwn
             JOIN TaskDetail TD
	             ON TD.IdTask = T.IdTask
             JOIN (
					          SELECT    
                        DISTINCT IdOutboundOrder,
									               L.LocCode
								            FROM Stock S
								            JOIN Location L
									            ON S.IdLocCode = L.IdLocCode
								           WHERE L.LocTypeCode = 'TRUCK'
			            ) TK
			         ON TK.IdOutboundOrder = OO.IdOutboundOrder
	          WHERE T.IsComplete = 0
                  @SQLPart
         ORDER BY TK.LocCode,
                  OO.OutboundNumber
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
        <filter name="Owner" type="numericIn">O.IdOwn</filter>
        <filter name="Name" type="textLike">TK.LocCode</filter>
      </filters>
    </query>

    <!--AskInfoProcess Begin-->

  <query code="AskInfoProcess_GetByAnyParameter">
    <sql>
      SELECT A.IdWmsProcessCode
      ,W.Name
      ,A.Object
      ,A.Property
      ,A.Sequence
      ,A.ParameterAsk
      ,A.DateCreated
      ,A.UserCreated
      FROM AskInfoProcess A INNER JOIN
      WmsProcess W ON A.IdWmsProcessCode = W.IdWmsProcessCode
      WHERE 1 = 1
      @SQLPart
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="IdWmsProcessCode" type="textEqual">A.IdWmsProcessCode</filter>
      <filter name="Object" type="textEqual">A.Object</filter>
      <filter name="Property" type="textEqual">A.Property</filter>
      <filter name="Sequence" type="numericEqual">A.Sequence</filter>
      <filter name="ParameterAsk" type="textEqual">A.ParameterAsk</filter>
    </filters>
  </query>

  <query code="AskInfoProcess_Insert">
    <sql>
      INSERT INTO AskInfoProcess
      (IdWmsProcessCode
      ,Object
      ,Property
      ,Sequence
      ,ParameterAsk
      ,DateCreated
      ,UserCreated)
      VALUES
      (@IdWmsProcessCode
      ,@Object
      ,@Property
      ,@Sequence
      ,@ParameterAsk
      ,@DateCreated
      ,@UserCreated)
    </sql>
    <parameters>
      <parameter type="String">IdWmsProcessCode</parameter>
      <parameter type="String">Object</parameter>
      <parameter type="String">Property</parameter>
      <parameter type="Int">Sequence</parameter>
      <parameter type="String">ParameterAsk</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
    </parameters>
  </query>

  <query code="AskInfoProcess_Update">
    <sql>
      UPDATE AskInfoProcess SET
      ParameterAsk = @ParameterAsk,
      DateModified = @DateModified,
      UserModified = @UserModified
      WHERE IdWmsProcessCode = @IdWmsProcessCode
      AND Object = @Object
      AND Property = @Property
      AND Sequence = @Sequence
    </sql>
    <parameters>
      <parameter type="String">ParameterAsk</parameter>
      <parameter type="DateTime">DateModified</parameter>
      <parameter type="String">UserModified</parameter>
      <parameter type="String">IdWmsProcessCode</parameter>
      <parameter type="String">Object</parameter>
      <parameter type="String">Property</parameter>
      <parameter type="Int">Sequence</parameter>
    </parameters>
  </query>

  <query code="AskInfoProcess_Delete">
    <sql>
      DELETE AskInfoProcess
      WHERE IdWmsProcessCode = @IdWmsProcessCode
      AND Object = @Object
      AND Property = @Property
      AND Sequence = @Sequence
    </sql>
    <parameters>
      <parameter type="String">IdWmsProcessCode</parameter>
      <parameter type="String">Object</parameter>
      <parameter type="String">Property</parameter>
      <parameter type="Int">Sequence</parameter>
    </parameters>
  </query>
  <!--AskInfoProcess End--> 
  <!-- Schedule Begin -->
  <query code="Schedule_FindAll">
    <sql>
      SELECT S.IdSchedule,
      S.ScheduledDateStart,
      S.ScheduledDateEnd,
      S.ReceivedDate,
      S.IdDocumentBound,
      S.IdDriver,
      S.IdLocCodeYard,
      S.IdLocCodeTruck,
      S.Title,
      S.Comment,
      S.DateCreated,
      S.UserCreated,
      S.DateModified,
      S.UserModified,
      S.LoadQty,
      S.LoadType,
      S.IdScheduleType,
      D.DriverCode,
      D.DriverName,
      I.InboundNumber as DocumentNumberBound,
      T.DateTrack,
      T.IdScheduleTrackType,
      T.NameScheduleTrackType
      FROM Schedule S
      JOIN Driver D
      ON D.IdDriver = S.IdDriver
      JOIN InboundOrder I
      ON I.IdInboundOrder = S.IdDocumentBound
      JOIN Vendor V
      ON V.IdVendor = I.IdVendor
      JOIN v_Schedule_LatestTrack T
      ON T.IdSchedule = S.IdSchedule
      JOIN Truck TK
      ON TK.IdTruckCode = S.IdLocCodeTruck
      @SQLPart
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="DateRange" type="textBetween">S.ScheduledDateStart</filter>
      <filter name="IdSchedule" type="numericIn">S.IdSchedule</filter>
      <filter name="IdVendor" type="numericIn">V.IdVendor</filter>
    </filters>
  </query>

  <query code="Schedule_Insert">
    <sql>
      INSERT INTO Schedule
      (IdSchedule
      ,IdScheduleType
      ,ScheduledDateStart
      ,ScheduledDateEnd
      ,IdDocumentBound
      ,IdDriver
      ,IdLocCodeYard
      ,IdLocCodeTruck
      ,Title
      ,Comment
      ,LoadQty
      ,LoadType
      ,DateCreated
      ,UserCreated)
      VALUES
      (@IdSchedule
      ,@IdScheduleType
      ,@ScheduledDateStart
      ,@ScheduledDateEnd
      ,@IdDocumentBound
      ,@IdDriver
      ,@IdLocCodeYard
      ,@IdLocCodeTruck
      ,@Title
      ,@Comment
      ,@LoadQty
      ,@LoadType
      ,@DateCreated
      ,@UserCreated)
    </sql>
    <parameters>
      <parameter type="Int">IdSchedule</parameter>
      <parameter type="Int">IdScheduleType</parameter>
      <parameter type="DateTime">ScheduledDateStart</parameter>
      <parameter type="DateTime">ScheduledDateEnd</parameter>
      <parameter type="Int">IdDocumentBound</parameter>
      <parameter type="Int">IdDriver</parameter>
      <parameter type="String">IdLocCodeYard</parameter>
      <parameter type="String">IdLocCodeTruck</parameter>
      <parameter type="String">Title</parameter>
      <parameter type="String">Comment</parameter>
      <parameter type="Decimal">LoadQty</parameter>
      <parameter type="Int">LoadType</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
    </parameters>
  </query>

  <query code="Schedule_GetAvailableYardLocation">
    <sql>
      SELECT
      TOP 1
      l.IdLocCode AS IdLocCodeYard
      FROM location l
      JOIN LocationType lt
      ON l.LocTypeCode = lt.LocTypeCode
      WHERE lt.LocTypeCode = 'YARDR'
      AND l.IdLocCode NOT IN (
      SELECT S.IdLocCodeYard
      FROM Schedule S
      JOIN v_Schedule_LatestTrack T
      ON T.IdSchedule = S.IdSchedule
      WHERE S.ScheduledDateStart &lt; = @ScheduledDateStart
      AND S.ScheduledDateEnd &gt; =  @ScheduledDateStart
      AND T.IdScheduleTrackType = 1
      )
    </sql>
    <parameters>
      <parameter type="DateTime">ScheduledDateStart</parameter>
    </parameters>
  </query>

  <query code="ScheduleTrack_Insert">
    <sql>
      INSERT INTO ScheduleTrack
      (IdSchedule
      ,IdScheduleTrackType
      ,DateTrack)
      VALUES
      (@IdSchedule
      ,@IdScheduleTrackType
      ,@DateTrack)
    </sql>
    <parameters>
      <parameter type="Int">IdSchedule</parameter>
      <parameter type="Int">IdScheduleTrackType</parameter>
      <parameter type="DateTime">DateTrack</parameter>
    </parameters>
  </query>

  <query code="Schedule_Update">
    <sql>
      UPDATE Schedule SET
      ScheduledDateStart = @ScheduledDateStart,
      ScheduledDateEnd = @ScheduledDateEnd,
      IdDocumentBound = @IdDocumentBound,
      IdDriver = @IdDriver,
      IdLocCodeYard = @IdLocCodeYard,
      IdLocCodeTruck = @IdLocCodeTruck,
      Title = @Title,
      Comment = @Comment,
      LoadQty = @LoadQty,
      LoadType = @LoadType,
      DateModified = @DateModified,
      UserModified = @UserModified
      WHERE IdSchedule = @IdSchedule
    </sql>
    <parameters>
      <parameter type="Int">IdSchedule</parameter>
      <parameter type="DateTime">ScheduledDateStart</parameter>
      <parameter type="DateTime">ScheduledDateEnd</parameter>
      <parameter type="Int">IdDocumentBound</parameter>
      <parameter type="Int">IdDriver</parameter>
      <parameter type="String">IdLocCodeYard</parameter>
      <parameter type="String">IdLocCodeTruck</parameter>
      <parameter type="String">Title</parameter>
      <parameter type="String">Comment</parameter>
      <parameter type="Decimal">LoadQty</parameter>
      <parameter type="Int">LoadType</parameter>
      <parameter type="DateTime">DateModified</parameter>
      <parameter type="String">UserModified</parameter>
    </parameters>
  </query>

  <query code="Schedule_Delete">
    <sql>
      DELETE FROM Schedule
      WHERE IdSchedule = @IdSchedule;
    </sql>
    <parameters>
      <parameter type="Int">IdSchedule</parameter>
    </parameters>
  </query>

  <query code="ScheduleTrack_Delete">
    <sql>
      DELETE FROM ScheduleTrack
      WHERE IdSchedule = @IdSchedule;
    </sql>
    <parameters>
      <parameter type="Int">IdSchedule</parameter>
    </parameters>
  </query>
  <!-- Schedule End -->
  
  <query code="User_findVendors">
      <sql>
        SELECT  U.IdUserWms,
			          V.IdVendor,
			          V.VendorName,
			          U.DateCreated,
			          U.UserCreated
           FROM UserVendor U
           JOIN Vendor V 
		         ON V.IdVendor = U.IdVendor
          WHERE U.IdUserWms = @IdUserWms
       ORDER BY V.VendorName
      </sql>
      <parameters>
        <parameter type="Int">IdUserWms</parameter>
      </parameters>
    </query>
  
    <query code="User_InsertVendors">
        <sql>
          INSERT INTO UserVendor
          (IdVendor
          ,IdUserWms
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdVendor
          ,@IdUserWms
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdVendor</parameter>
          <parameter type="Int">IdUserWms</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="User_DeleteOneVendor">
        <sql>
          DELETE FROM UserVendor
          WHERE IdUserWms = @IdUserWms
          AND IdVendor = @IdVendor
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
          <parameter type="Int">IdVendor</parameter>
        </parameters>
      </query>
  
      <query code="InsertOrdersInWave">
    <sql>
      INSERT INTO OrdersInWave
      (
        IdWave,
        IdOutboundOrder,
        Priority,
        TypeOrder
      )
      VALUES
      (
        @idWave,
        @idOutboundOrder,
        @priority,
        @typeOrder
      )
    </sql>
    <parameters>
      <parameter type="Int">idWave</parameter>
      <parameter type="Int">idOutboundOrder</parameter>
      <parameter type="Int">priority</parameter>
      <parameter type="String">typeOrder</parameter>
    </parameters>
  </query>

  <query code="GetOrdersInWave_GetByWave">
    <sql>
      SELECT IdWave,
             IdOutboundOrder,
             Priority
        FROM OrdersInWave
       WHERE IdWave = @idWave 
    ORDER BY Priority
    </sql>
    <parameters>
      <parameter type="Int">idWave</parameter>
    </parameters>
  </query>

  <query code="GetOrdersInWave_DeleteByWave">
    <sql>
      DELETE
        FROM OrdersInWave
       WHERE IdWave = @idWave
    </sql>
    <parameters>
      <parameter type="Int">idWave</parameter>
    </parameters>
  </query>

	<query code="ReferenceDoc_FindAll">
		<sql>
	     select rd.IdReferenceDoc,
                rd.ReferenceDocNumber,
                rd.IdReferenceDocType,
	            rdt.ReferenceDocTypeCode,
	            rdt.ReferenceDocTypeName,
	            rd.IdOutboundOrder,
	            oo.OutboundNumber,
	            rd.IdOwn,
	            rd.IdWhs,
	            rd.InvoiceDate,
	            o.OwnCode,
	            o.OwnName,
	            w.WhsName,
	            w.WhsCode,
				rd.IdOutboundType,
				ot.OutboudTypeCode,
				ot.OutboundTypeName
           from ReferenceDoc rd
           join ReferenceDocType rdt
             on rd.IdReferenceDocType = rdt.IdReferenceDocType
           join OutboundOrder oo
             on rd.IdOutboundOrder = oo.IdOutboundOrder
           join OutboundType ot
             on ot.IdOutboundType = rd.IdOutboundType
           join Owner o
             on rd.IdOwn = o.IdOwn
           join Warehouse w
             on w.IdWhs = rd.IdWhs
			    @SQLPart
	   order by rd.InvoiceDate desc
	   
	   
	    SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
         WHERE QueryName = @queryName
      ORDER BY FieldOrder
		</sql>
		<parameters>
			<parameter type="SQLPart">@SQLPart</parameter>
			<parameter type="String">queryName</parameter>
		</parameters>
		<filters>
			<filter name="DateRange" type="textBetween">rd.InvoiceDate</filter>
			<filter name="DocumentNbr" type="textLike">oo.OutboundNumber</filter>
			<filter name="Warehouse" type="numericIn">rd.IdWhs</filter>
			<filter name="Owner" type="numericIn">rd.IdOwn</filter>
			<filter name="ReferenceDocType" type="numericIn">rd.IdReferenceDocType</filter>
		</filters>
	</query>

	<query code="ReferenceDoc_Delete">
		<sql>
			DELETE
			FROM ReferenceDoc
			WHERE IdReferenceDoc = @idReferenceDoc
		</sql>
		<parameters>
			<parameter type="Int">idReferenceDoc</parameter>
		</parameters>
	</query>
	
	<query code="ReferenceDoc_Insert">
        <sql>
			INSERT INTO ReferenceDoc
			(IdReferenceDoc,
			IdWhs,
			IdOwn,
			IdOutboundOrder,
			IdOutboundType,
			IdReferenceDocType,
			ReferenceDocNumber,
			InvoiceDate,
			DateCreated,
			UserCreated)
			VALUES
			(@IdReferenceDoc,
			@IdWhs,
			@IdOwn,
			@IdOutboundOrder,
			@IdOutboundType,
			@IdReferenceDocType,
			@ReferenceDocNumber,
			@InvoiceDate,
			@DateCreated,
			@UserCreated)
		</sql>
        <parameters>
          <parameter type="Int">IdReferenceDoc</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="Int">IdOutboundType</parameter>
          <parameter type="Int">IdReferenceDocType</parameter>
          <parameter type="String">ReferenceDocNumber</parameter>
          <parameter type="DateTime">InvoiceDate</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
    </query>

	<query code="ReferenceDoc_Update">
		<sql>
			UPDATE ReferenceDoc 
			   SET IdWhs = @IdWhs,
			       IdOwn = @IdOwn,
				   IdOutboundOrder = @IdOutboundOrder,
				   IdOutboundType = @IdOutboundType,
				   IdReferenceDocType = @IdReferenceDocType,
				   ReferenceDocNumber = @ReferenceDocNumber,
				   InvoiceDate = @InvoiceDate,
				   DateModified = @dateModified,
				   UserModified = @userModified
			 WHERE IdReferenceDoc = @IdReferenceDoc
		</sql>
		<parameters>
			<parameter type="Int">IdReferenceDoc</parameter>
            <parameter type="Int">IdWhs</parameter>
            <parameter type="Int">IdOwn</parameter>
            <parameter type="Int">IdOutboundOrder</parameter>
            <parameter type="Int">IdOutboundType</parameter>
            <parameter type="Int">IdReferenceDocType</parameter>
            <parameter type="String">ReferenceDocNumber</parameter>
            <parameter type="DateTime">InvoiceDate</parameter>
            <parameter type="DateTime">dateModified</parameter>
            <parameter type="String">userModified</parameter>
		</parameters>
	</query>

	<query code="ReferenceDoc_GetByReferenceDocNumber">
		<sql>
			SELECT IdReferenceDoc
                  ,IdWhs
                  ,IdOwn
                  ,IdOutboundOrder
                  ,IdOutboundType
                  ,IdReferenceDocType
                  ,ReferenceDocNumber
                  ,InvoiceDate
                  ,DateCreated
                  ,UserCreated
                  ,DateModified
                  ,UserModified
              FROM ReferenceDoc
			 WHERE ReferenceDocNumber = @referenceDocNumber
		</sql>
		<parameters>
			<parameter type="String">referenceDocNumber</parameter>
		</parameters>
	</query>

	<query code="GetOutboundOrderByNumberForPickPack">
		<sql>
			SELECT
			OO.IdOutboundOrder,
			OO.IdWhs,
			OO.IdOwn,
			OO.OutboundNumber,
			OO.IdOutboundType,
			OT.OutboudTypeCode,
			OT.OutboundTypeName,
			OO.Status,
			OO.ReferenceNumber,
			OO.LoadCode,
			OO.LoadSeq,
			OO.Priority,
			OO.IdWhsTarget,
			O.OwnName,
			OT.IdOutboundType
			FROM OutboundOrder OO INNER JOIN
			Owner O ON OO.IdOwn = O.IdOwn INNER JOIN
			OutboundType OT ON OT.IdOutboundType = OO.IdOutboundType
			WHERE OO.OutboundNumber = @outboundNumber
		</sql>
		<parameters>
			<parameter type="String">outboundNumber</parameter>
		</parameters>
	</query>

	<query code="ReferenceDoc_GetByAnyParameter">
		<sql>
			SELECT
			RD.IdReferenceDoc,
			RD.IdWhs,
			RD.IdOwn,
			RD.IdOutboundOrder,
			RD.IdOutboundType,
			RD.IdReferenceDocType,
			RD.ReferenceDocNumber,
			RD.InvoiceDate,
			RD.DateCreated,
			RD.UserCreated,
			RD.DateModified,
			RD.UserModified
			FROM ReferenceDoc RD
			WHERE 1=1
			@SQLPart
		</sql>
		<parameters>
			<parameter type="SQLPart">@SQLPart</parameter>
		</parameters>
		<filters>
			<filter name="IdReferenceDoc" type="numericEqual">RD.IdReferenceDoc</filter>
			<filter name="IdWhs" type="numericEqual">RD.IdWhs</filter>
			<filter name="IdOwn" type="numericEqual">RD.IdOwn</filter>
			<filter name="IdOutboundOrder" type="numericEqual">RD.IdOutboundOrder</filter>
			<filter name="IdOutboundType" type="numericEqual">RD.IdOutboundType</filter>
			<filter name="IdReferenceDocType" type="numericEqual">RD.IdReferenceDocType</filter>
			<filter name="ReferenceDocNumber" type="textEqual">RD.ReferenceDocNumber</filter>
			<filter name="InvoiceDate" type="textEqual">RD.InvoiceDate</filter>
			<filter name="DateCreated" type="textEqual">RD.DateCreated</filter>
			<filter name="UserCreated" type="textEqual">RD.UserCreated</filter>
			<filter name="DateModified" type="textEqual">RD.DateModified</filter>
			<filter name="UserModified" type="textEqual">RD.UserModified</filter>
		</filters>
		<sub-querys>
			<sub-query code="OrderByIdReferenceDoc">
				<sql>
					ORDER BY RD.IdReferenceDoc
				</sql>
				<parameters>
				</parameters>
			</sub-query>
		</sub-querys>
	</query>
	
    <query code="GetLpnsForCourierByOutboundOrder">
		<sql>
			SELECT 
			       DD.IdLpnCode,
	               DD.IdItem,
	               DD.ItemQty,
	               DD.LotNumber,
	               DD.IdCtgItem,
	               DD.FifoDate,
	               DD.FabricationDate,
	               DD.ExpirationDate,
	               I.ItemCode,
	               I.ShortItemName,
	               CI.CtgCode,
	               CI.CtgName
              FROM DispatchDetail DD
              JOIN Dispatch D
                ON D.IdDispatch = DD.IdDispatch
              JOIN Item I
                ON I.IdItem = DD.IdItem
         LEFT JOIN CategoryItem CI
                ON CI.IdCtgItem = DD.IdCtgItem
             WHERE D.IdOutboundOrder = @idOuntboundOrder
               AND D.IdDispatchType = @idDispatchType
		</sql>
	    <parameters>
			<parameter type="Int">idOuntboundOrder</parameter>
		    <parameter type="Int">idDispatchType</parameter>
		</parameters>
	</query>

	<query code="DeleteTaskDetailAndTaskByDocumentBound">
		<sql>
			DELETE FROM TaskDetail
			WHERE IdDocumentBound = @idDocumentBound;

			DELETE FROM Task
			WHERE IdDocumentBound = @idDocumentBound;
		</sql>
		<parameters>
			<parameter type="Int">idDocumentBound</parameter>
		</parameters>
	</query>
	
	<query code="ItemUom_GetByItemCodeAndName">
		<sql>
         SELECT IU.IdUom,
                IU.IdItem,
                IU.UomCode,
                IU.ConversionFactor,
                IU.BarCode,
                IU.UomName,
                IU.Length,
                IU.Width,
                IU.Height,
                IU.Volume,
                IU.Weight,
                IU.Status,
                IU.LayoutUomQty,
                IU.LayoutUnitQty,
                IU.LayoutMaxWeightUpon,
                IU.PutawayZone,
                IU.PickArea,
                I.IdItem,
                I.ItemCode,
                I.Description,
                I.IdOwn,
                I.ShortItemName,
                I.Status,
                I.CtrlSerialInbound,
                I.CtrlSerialInternal,
                I.CtrlSerialOutbound,
                I.LotControlInbound,
                I.LotControlInternal,
                I.LotControlOutbound,
                I.Weight,
                I.Volume,
                I.Length,
                I.Width,
                I.Height,
                I.NestedVolume,
                I.IdPutawayZone,
                I.ReOrderPoint,
                I.ReOrderQty,
                I.PalletQty
           FROM ItemUom IU
           JOIN Item I
             ON IU.IdItem = I.IdItem
          WHERE IU.UomName = @uomName
            AND I.ItemCode = @itemCode
		</sql>
		<parameters>
			<parameter type="String">itemCode</parameter>
			<parameter type="String">uomName</parameter>
		</parameters>
	</query>
	
	<query code="GetDispatchSpecialHeaderForDispatchConfirm">
		<sql>
			SELECT 
			  DISTINCT
	          D.IdDispatch, 
	          D.IdOutboundOrder, 
	          OO.OutboundNumber, 
	          OO.ReferenceNumber, 
	          OO.DeliveryAddress1, 
	          OO.DeliveryAddress2, 
	          OT.IdOutboundType, 
	          OT.OutboudTypeCode, 
	          OT.OutboundTypeName, 
	          D.Status, 
	          D.IdTrackOutbound, 
	          D.TrackOutboundDate, 
	          D.IdDispatchType, 
	          D.ReferenceDoc, 
	          D.IdReferenceDocType,
	          D.IdCarrier, 
	          D.IdTruckCode, 
	          D.ShiftNumber, 
	          D.IdWhs, 
	          W.WhsName, 
			  W.WhsCode,
	          D.UserWms, 
	          D.IdLocationForLift, 
	          D.IdLocationStage, 
	          D.SpecialField1, 
	          D.SpecialField2, 
	          D.SpecialField3, 
	          D.SpecialField4, 
	          D.DateCreated, 
	          D.UserCreated, 
	          D.DateModified, 
	          D.UserModified, 
	          C.IdCustomer, 
	          C.CustomerCode, 
	          C.CustomerName, 
	          O.IdOwn, 
	          O.OwnCode, 
	          O.OwnName, 
			  DT.DispatchTypeCode,
			  DT.DispatchTypeName,
			  D.StateInterface
         FROM Dispatch D 
		 JOIN DispatchType DT
		   ON DT.IdDispatchType = D.IdDispatchType
         JOIN OutboundOrder OO 
           ON OO.IdOutboundOrder = D.IdOutboundOrder 
          AND OO.IdWhs = D.IdWhs 
         JOIN OutboundType OT 
           ON OO.IdOutboundType = OT.IdOutboundType 
         JOIN Customer C 
           ON OO.CustomerCode = C.CustomerCode 
          AND OO.IdOwn = C.IdOwn 
    LEFT JOIN ReferenceDoc RD 
           ON OO.IdOutboundOrder = RD.IdOutboundOrder 
          AND OO.IdWhs = RD.IdWhs 
          AND OO.IdOwn = RD.IdOwn 
         JOIN Owner O 
           ON OO.IdOwn = O.IdOwn 
         JOIN Warehouse W 
		   ON OO.IdWhs = W.IdWhs
		 JOIN DispatchDetail DD
           ON DD.IdDispatch = D.IdDispatch
		 JOIN Item I
           ON I.IdItem = DD.IdItem
		  AND I.IdOwn = OO.IdOwn
	    WHERE (D.StateInterface = 'C' OR D.StateInterface IS NULL)
		      @SQLPart
		 
		 SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
           FROM CfgEntityProperty qf
           JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
		</sql>
		<parameters>
			<parameter type="String">queryName</parameter>
			<parameter type="SQLPart">@SQLPart</parameter>
		</parameters>
		<filters>
			<filter name="Warehouse" type="numericIn">W.IdWhs</filter>
			<filter name="Owner" type="numericIn">O.IdOwn</filter>
			<filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
			<filter name="CodeAlt" type="textLike">RD.ReferenceDocNumber</filter>
			<filter name="DateRange" type="textBetween">OO.EmissionDate</filter>
		    <filter name="OutboundType" type="numericIn">OT.IdOutboundType</filter>
			<filter name="DispatchType" type="numericIn">DT.IdDispatchType</filter>
		    <filter name="Customer" type="textLike">C.CustomerName</filter>
		    <filter name="Route" type="textLike">OO.RouteCode</filter>
		    <filter name="PriorityRange" type="textBetween">OO.Priority</filter>
		    <filter name="Carrier" type="textLike">OO.CarrierCode</filter>
		    <filter name="Country" type="numericEqual">OO.IdCountryDelivery</filter>
            <filter name="State" type="numericEqual">OO.IdStateDelivery</filter>
            <filter name="City" type="numericEqual">OO.IdCityDelivery</filter>
		    <filter name="Item" type="textLike">I.ItemCode</filter>
			<filter name="Code" type="textLike">DD.IdLpnCode</filter>
		</filters>
	</query>
	
     <query code="DispatchType_FindAll">
        <sql>
          SELECT IdDispatchType
		  ,DispatchTypeCode
          ,DispatchTypeName
          FROM DispatchType
          @SQLPart
          ORDER BY IdDispatchType
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="DispatchType" type="textIn">DispatchTypeCode</filter>
        </filters>
      </query>
	
    <query code="CloseTaskDetail">
		<sql>
			UPDATE TaskDetail
			   SET IsComplete = @IsComplete,
			       DateModified = @DateModified,
				   UserModified = @UserModified
		     WHERE IdTaskDetail = @IdTaskDetail
		</sql>
	    <parameters>
			<parameter type="Boolean">IsComplete</parameter>
			<parameter type="DateTime">DateModified</parameter>
		    <parameter type="String">UserModified</parameter>
	        <parameter type="Int">IdTaskDetail</parameter>
		</parameters>
	</query>
	
    <query code="GetTasksDetailNotCompletedByTask">
		<sql>
			 SELECT TD.IdTaskDetail,
                    TD.IdWhs,
                    TD.IdTask,
                    TD.IsComplete,
                    TD.IdDocumentBound,
                    TD.IdDetailBound,
                    TD.LineNumber,
                    TD.IdItem,
                    TD.IdCtgItem,
                    TD.LotNumber,
                    TD.FifoDate,
                    TD.FabricationDate,
                    TD.ExpirationDate,
                    TD.Priority,
                    TD.IdLocSourceProposal,
                    TD.IdLocForkLiftProposal,
                    TD.IdLocTargetProposal,
                    TD.IdLocSourceUsed,
                    TD.IdLocForkLiftUsed,
                    TD.IdLocTargetUsed,
                    TD.IdLpnSourceProposal,
                    TD.IdLpnTargetProposal,
                    TD.IdLpnSourceUsed,
                    TD.IdLpnTargetUsed,
                    TD.Status,
                    TD.ProposalQty,
                    TD.RealQty,
                    TD.IdPlanedProcess,
                    TD.WaveCode,
                    TD.LabelCode,
                    TD.LoadCode,
                    TD.LoadSeq,
                    TD.UserAssigned,
                    TD.SerialNumber,
                    TD.StartDate,
                    TD.EndDate,
                    TD.MadeCrossDock,
                    TD.DateCreated,
                    TD.UserCreated,
                    TD.DateModified,
                    TD.UserModified
			   FROM TaskDetail TD
			  WHERE TD.IdTask = @IdTask
			    AND TD.IsComplete = 0
		</sql>
	    <parameters>
	        <parameter type="Int">IdTask</parameter>
		</parameters>
	</query>
	
    <query code="CloseTask">
		<sql>
			UPDATE Task
			   SET CloseDate = @CloseDate,
			       IdTrackTaskType = @IdTrackTaskType,
				   WorkersAssigned = @WorkersAssigned,
				   IsComplete = @IsComplete,
				   DateModified = @DateModified,
				   UserModified = @UserModified
		     WHERE IdTask = @IdTask
		</sql>
	    <parameters>
			<parameter type="DateTime">CloseDate</parameter>
			<parameter type="Int">IdTrackTaskType</parameter>
		    <parameter type="Int">WorkersAssigned</parameter>
			<parameter type="Boolean">IsComplete</parameter>
		    <parameter type="DateTime">DateModified</parameter>
	        <parameter type="String">UserModified</parameter>
	        <parameter type="Int">IdTask</parameter>
		</parameters>
	</query>
	
    <query code="HoldStockForCancelDispatch">
        <sql>
          UPDATE Stock
             SET ReasonCode = @reasonCode,
                 HoldCode = @holdCode,
				 IdOutboundOrder = NULL,
				 OutboundLineNumber = NULL,
                 DateModified = @dateModified,
                 UserModified = @userModified
           WHERE StockId = @stockId
        </sql>
        <parameters>
          <parameter type="String">reasonCode</parameter>
          <parameter type="String">holdCode</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="Int">stockId</parameter>
        </parameters>
      </query>
	
    <query code="Dispatch_UpdateITFZ">
        <sql>
          UPDATE Dispatch
             SET StateInterface = 'C',
                 DateModified = @DateModified,
                 UserModified = @UserModified
           WHERE IdDispatch = @IdDispatch
             AND StateInterface IS NULL   
        </sql>
        <parameters>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
          <parameter type="Int">IdDispatch</parameter>
        </parameters>
      </query>
	
    <query code="GetOtherDispatchesToDeleteByLpn">
		<sql>
			      SELECT D.IdDispatch,
                   D.IdOutboundOrder,
	                 D.IdDispatchType,
	                 D.IdWhs
              FROM Dispatch D
              JOIN DispatchType DT
                ON D.IdDispatchType = DT.IdDispatchType
              JOIN DispatchDetail DD
                ON D.IdDispatch = DD.IdDispatch
             WHERE D.IdOutboundOrder = @IdOutboundOrder
               AND D.IdDispatch &lt; &gt; @IdDispatch
               AND DT.IdDispatchType = @idDispatchType
               AND (D.StateInterface = 'C' OR D.StateInterface IS NULL)
               AND DD.IdLpnCode = @IdLpnCode
		</sql>
	    <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="Int">IdDispatch</parameter>
		      <parameter type="Int">idDispatchType</parameter>
		      <parameter type="String">IdLpnCode</parameter>
        </parameters>
	</query>
  
  <query code="GetOtherDispatchesToDeleteByLine">
		<sql>
			      SELECT D.IdDispatch,
                   D.IdOutboundOrder,
	                 D.IdDispatchType,
	                 D.IdWhs
              FROM Dispatch D
              JOIN DispatchType DT
                ON D.IdDispatchType = DT.IdDispatchType
              JOIN DispatchDetail DD
                ON D.IdDispatch = DD.IdDispatch
             WHERE D.IdOutboundOrder = @IdOutboundOrder
               AND D.IdDispatch &lt; &gt; @IdDispatch
               AND DT.IdDispatchType = @idDispatchType
               AND (D.StateInterface = 'C' OR D.StateInterface IS NULL)
               AND DD.IdLpnCode = @IdLpnCode
               AND DD.IdItem = @idItem
                   @SQLPart
		</sql>
	  <parameters>
      <parameter type="Int">IdOutboundOrder</parameter>
      <parameter type="Int">IdDispatch</parameter>
		  <parameter type="Int">idDispatchType</parameter>
		  <parameter type="String">IdLpnCode</parameter>
      <parameter type="Int">idItem</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="LotNumber" type="textEqual">DD.LotNumber</filter>
      <filter name="CategoryItem" type="numericEqual">DD.IdCtgItem</filter>
      <filter name="Fifo" type="textEqual">DD.FifoDate</filter>
      <filter name="Expiration" type="textEqual">DD.ExpirationDate</filter>
      <filter name="Fabrication" type="textEqual">DD.FabricationDate</filter>
    </filters>
	</query>

	<query code="Stock_FindAllStockAge">
		<sql>
			SELECT
	                S.IdWhs,
		            WHS.WhsCode,
		            WHS.WhsName,
		            WHS.ShortWhsName,
		            O.OwnCode,
		            O.OwnName,
		            S.IdLocCode,
		            L.LocTypeCode,
		            S.IdLpnCode,
		            LPNT.LpnTypeCode,
		            LPNT.LpnTypeName,
		            S.IdLpnCodeContainer,
		            S.LpnTypeCodeContainer,
		            I.ItemCode,
		            I.LongItemName,
		            I.ShortItemName,
		            I.Description,
		            SUM(s.ItemQty) AS ItemQty,
		            S.LotNumber as Lot,
		            s.IdCtgItem,
		            CI.CtgCode,
		            CI.CtgName,
		            S.FifoDate,
		            S.FabricationDate,
		            S.ExpirationDate,
		            OO.OutboundNumber,
		            OT.OutboudTypeCode,
		            OT.OutboundTypeName,
		            IO.InboundNumber,
		            IT.InboundTypeCode,
		            IT.InboundTypeName,
		            S.DateCreated
	           FROM Stock s
	           JOIN item I 
	             ON s.IdItem = I.IdItem
	           JOIN Owner O 
	             ON s.IdOwn = O.IdOwn
	           JOIN Warehouse WHS 
	             ON s.IdWhs = WHS.IdWhs
	           JOIN Location l 
	             ON s.idLocCode = l.idLocCode 
	            AND s.idWhs = l.idWhs
          LEFT JOIN CategoryItem CI 
	             ON s.IdCtgItem = ci.IdCtgItem
          LEFT JOIN InboundOrder IO 
	             ON s.IdInboundOrder = IO.IdInboundOrder 
	            AND IO.IdWhs = s.IdWhs 
	            AND IO.IdOwn = s.IdOwn
          LEFT JOIN OutboundOrder OO 
	             ON s.IdOutboundOrder = OO.IdOutboundOrder 
	            AND OO.IdWhs = s.IdWhs 
	            AND OO.IdOwn = s.IdOwn
         LEFT JOIN OutboundType OT
	            ON OO.IdOutboundType = OT.IdOutboundType 
         LEFT JOIN InboundType IT
                ON IT.IdInboundType = IO.IdInboundType
         LEFT JOIN LPN 
	            ON s.IdLpnCode = LPN.IdLpnCode
         LEFT JOIN LPNType LPNT
                ON LPN.IdLpnType = LPNT.IdLpnType
	         WHERE L.LocTypeCode IN ('STGD', 'DOCK')
			       @SQLPart
          GROUP BY S.IdWhs,
		           WHS.WhsCode,
		           WHS.WhsName,
		           WHS.ShortWhsName,
		           O.OwnCode,
		           O.OwnName,
		           S.IdLocCode,
		           L.LocTypeCode,
		           S.IdLpnCode,
		           LPNT.LpnTypeCode,
		           LPNT.LpnTypeName,
		           S.IdLpnCodeContainer,
		           S.LpnTypeCodeContainer,
	               I.ItemCode,
    	           I.LongItemName,
		           I.ShortItemName,
		           I.Description,
		           S.LotNumber,
		           s.IdCtgItem,
		           CI.CtgCode,
		           CI.CtgName,
		           S.FifoDate,
		           S.FabricationDate,
		           S.ExpirationDate,
		           OO.OutboundNumber,
		           OT.OutboudTypeCode,
		           OT.OutboundTypeName,
		           IO.InboundNumber,
		           IT.InboundTypeCode,
		           IT.InboundTypeName,
		           S.DateCreated
          ORDER BY S.DateCreated desc,
		           whs.ShortWhsName, 
                   O.OwnName, 
		           s.IdLocCode, 
		           s.IdLpnCode ,
		           IO.InboundNumber, 
		           OO.OutboundNumber, 
		           i.LongItemName;
		</sql>
		<parameters>
			<parameter type="String">queryName</parameter>
			<parameter type="SQLPart">@SQLPart</parameter>
		</parameters>
		<filters>
			<filter name="Warehouse" type="numericIn">s.IdWhs</filter>
			<filter name="DateRange" type="textBetween">s.DateCreated</filter>
			<filter name="Item" type="textLike">i.ItemCode</filter>
			<filter name="Owner" type="numericIn">s.IdOwn</filter>
			<filter name="DocumentNbr" type="textLikeOr">INO.InboundNumber,OUT.OutboundNumber</filter>
			<filter name="Code" type="textLike">s.idLocCode</filter>
			<filter name="Name" type="textLike">s.IdLpnCode</filter>
		</filters>
	</query>
	
	<!-- Slotting -->
  <query code="GetStockCurrentStateForSlottingByWhs">
    <sql>
       SELECT S.StockId,
              L.IdLocCode,
              L.LocTypeCode,
              L.OnlyLPN,
		          L.CapacityLPN,
		          L.CapacityUnit,
              S.IdItem,
              S.ItemQty,
              S.IdLpnCode,
              S.IdLpnCodeContainer,
              WZ.IdWorkZone,
		          WZ.WorkZoneName,
              I.IdItem,
              I.ShortItemName,
              I.ItemCode,
              L.IdWhs,
              W.WhsName,
			        O.OwnName,
              S.IdOwn,
              CI.CtgCode,
			        CI.CtgName,
              S.LotNumber,
              S.FifoDate,
              S.FabricationDate,
              S.ExpirationDate,
              S.IdCtgItem
         FROM Location L
         JOIN WorkZoneLocation WZL
	         ON WZL.IdLocCode =  L.IdLocCode
	       JOIN WorkZone WZ
	         ON WZ.IdWorkZone = WZL.IdWorkZone
         JOIN Warehouse W
	         ON W.IdWhs = L.IdWhs
    LEFT JOIN Stock S
           ON S.IdLocCode = L.IdLocCode
    LEFT JOIN Item I
	         ON I.IdItem = S.IdItem
          AND I.IdOwn = S.IdOwn
    LEFT JOIN Owner O
	         ON O.IdOwn = S.IdOwn
    LEFT JOIN CategoryItem CI
	         ON CI.IdCtgItem = S.IdCtgItem
        WHERE L.IdWhs = @IdWhs
          AND L.LocTypeCode in ('PICK', 'PUT')
          AND WZ.TypeZone in (1, 5)
    </sql>
    <parameters>
      <parameter type="Int">IdWhs</parameter>
    </parameters>
  </query>
  
  <query code="ItemsInEveryZoneByWhs">
    <sql>
      SELECT WZI.IdItem,
	           WZ.WorkZoneName,
		         WZ.IdWorkZone
	      FROM WorkZone WZ 
	      JOIN WorkZoneItem WZI
	        ON WZ.IdWorkZone = WZI.IdWorkZone
       WHERE WZ.IdWhs = @idWhs
    ORDER BY WZ.IdWorkZone 
    </sql>
    <parameters>
      <parameter type="Int">idWhs</parameter>
    </parameters>
  </query>

  <query code="ValidateSlottingNotFinished">
    <sql>
        SELECT T.IdTask,
               T.IdWhs,
	             T.IdOwn,
	             T.IsComplete,
	             T.TaskTypeCode
          FROM Task T
          JOIN TaskDetail TD
            ON T.IdTask = TD.IdTask
         WHERE T.IdWhs = @idWhs
           AND T.TaskTypeCode IN ('MDITM', 'MDLPN')
           AND T.IsComplete = 0
           AND TD.IsComplete = 0
           AND TD.WaveCode = 'SLOTTING'
    </sql>
    <parameters>
      <parameter type="Int">idWhs</parameter>
    </parameters>
  </query>
  <!-- End Slotting -->

 <!-- Begin Issues -->
 <query code="OrdersAndIssues">
		<sql>
			SELECT Q.TypeOrder,
	               Q.OutboundNumber,
				   Q.IdOutboundOrder,
                   Q.IdOutboundType,
	               Q.OutboudTypeCode,
	               Q.OutboundTypeName,
	               Q.EmissionDate,
				   Q.IdWhs,
	               Q.WhsCode,
	               Q.WhsName,
	               Q.ShortWhsName,
			       Q.IdOwn,
	               Q.OwnCode,
	               Q.OwnName
            FROM (
            SELECT 
	               'OUTBOUND' AS TypeOrder,
	               OO.OutboundNumber,
				   OO.IdOutboundOrder,
                   OO.IdOutboundType,
	               OT.OutboudTypeCode,
	               OT.OutboundTypeName,
	               OO.EmissionDate,
				   W.IdWhs,
	               W.WhsCode,
	               W.WhsName,
	               W.ShortWhsName,
			       O.IdOwn,
	               O.OwnCode,
	               O.OwnName
              FROM OutboundOrder OO
              JOIN OutboundType OT
                ON OO.IdOutboundType = OT.IdOutboundType
              JOIN Warehouse W
                ON W.IdWhs = OO.IdWhs
              JOIN Owner O
                ON O.IdOwn = OO.IdOwn

             UNION ALL

             SELECT 'INBOUND' AS TypeOrder,
	                IO.InboundNumber AS OutboundNumber,
					IO.IdInboundOrder AS IdOutboundOrder,
                    IO.IdInboundType AS IdOutboundType,
		            IT.InboundTypeCode AS OutboudTypeCode,
		            IT.InboundTypeName AS OutboundTypeName,
		            IO.EmissionDate,
					W.IdWhs,
		            W.WhsCode,
	                W.WhsName,
	                W.ShortWhsName,
			        O.IdOwn,
		            O.OwnCode,
	                O.OwnName
               FROM InboundOrder IO
               JOIN InboundType IT
                 ON IO.IdInboundType = IT.IdInboundType
               JOIN Warehouse W
                 ON W.IdWhs = IO.IdWhs
               JOIN Owner O
                 ON O.IdOwn = IO.IdOwn
            ) Q
       
	         @SQLPart
			 
    ORDER BY Q.EmissionDate DESC
	
	
	        SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
              FROM CfgEntityProperty qf
              JOIN CfgEntity q 
			    ON qf.IdCfgEntity = q.IdCfgEntity
             WHERE QueryName = @queryName
          ORDER BY FieldOrder
		  
		</sql>
		<parameters>
			<parameter type="SQLPart">@SQLPart</parameter>
			<parameter type="String">queryName</parameter>
		</parameters>
		<filters>
			<filter name="DateRange" type="textBetween">Q.EmissionDate</filter>
			<filter name="DocumentNbr" type="textLike">Q.OutboundNumber</filter>
			<filter name="Warehouse" type="numericIn">Q.IdWhs</filter>
			<filter name="Owner" type="numericIn">Q.IdOwn</filter>
		</filters>
	</query>

	<query code="Issue_Delete">
		<sql>
			DELETE FROM Issue
			 WHERE IdIssue = @IdIssue;
		</sql>
		<parameters>
			<parameter type="Long">IdIssue</parameter>
		</parameters>
	</query>
	
	<query code="Issue_Insert">
        <sql>
			INSERT INTO Issue
			(IdIssue,
			IdWhs,
			IdOwn,
			DateIssue,
			IdDocumentBound,
			DocumentTypeCode,
			MessageIssue,
			DateCreated,
			UserCreated)
			VALUES
			(@IdIssue,
			@IdWhs,
			@IdOwn,
			@DateIssue,
			@IdDocumentBound,
			@DocumentTypeCode,
			@MessageIssue,
			@DateCreated,
			@UserCreated)
		</sql>
        <parameters>
          <parameter type="Long">IdIssue</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="DateTime">DateIssue</parameter>
		  <parameter type="Int">IdDocumentBound</parameter>
		  <parameter type="String">DocumentTypeCode</parameter>
          <parameter type="String">MessageIssue</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
    </query>
	
	<query code="Issue_Update">
    <sql>
		UPDATE Issue SET
		IdWhs = @IdWhs,
		IdOwn = @IdOwn,
		IdDocumentBound = @IdDocumentBound,
		MessageIssue = @MessageIssue,
		DateModified = @DateModified,
		UserModified = @UserModified
		WHERE IdIssue = @IdIssue
	</sql>
    <parameters>
        <parameter type="Int">IdIssue</parameter>
		<parameter type="Int">IdWhs</parameter>
		<parameter type="Int">IdOwn</parameter>
		<parameter type="Int">IdDocumentBound</parameter>
		<parameter type="String">MessageIssue</parameter>
        <parameter type="DateTime">DateModified</parameter>
        <parameter type="String">UserModified</parameter>
    </parameters>
  </query>
	
	<query code="Issue_GetByOrderId">
		<sql>
			SELECT
			    I.IdIssue,
			    I.IdWhs,
			    I.IdOwn,
			    I.DateIssue,
			    I.IdDocumentBound,
				I.DocumentTypeCode,
			    I.MessageIssue,
			    I.DateCreated,
			    I.UserCreated,
			    I.DateModified,
			    I.UserModified
		   FROM Issue I
		  WHERE I.IdDocumentBound = @IdDocumentBound
		    AND I.DocumentTypeCode = @DocumentTypeCode
	   ORDER BY I.DateIssue DESC
		</sql>
		<parameters>
			<parameter type="Int">IdDocumentBound</parameter>
			<parameter type="String">DocumentTypeCode</parameter>
		</parameters>
	</query>

	<query code="IssueImage_Delete">
		<sql>
			DELETE FROM IssueImage
			 WHERE IdIssueImage = @IdIssueImage;
		</sql>
		<parameters>
			<parameter type="Long">IdIssueImage</parameter>
		</parameters>
	</query>
	
	<query code="IssueImage_Insert">
        <sql>
			INSERT INTO IssueImage
			(IdIssueImage,
			IdIssue,
			ImageIssueUrl,
			DateCreated,
			UserCreated)
			VALUES
			(@IdIssueImage,
			@IdIssue,
			@ImageIssueUrl,
			@DateCreated,
			@UserCreated)
		</sql>
        <parameters>
            <parameter type="Long">IdIssueImage</parameter>
		    <parameter type="Long">IdIssue</parameter>
            <parameter type="String">ImageIssueUrl</parameter>
            <parameter type="DateTime">DateCreated</parameter>
            <parameter type="String">UserCreated</parameter>
        </parameters>
    </query>
	
    <query code="IssueImage_DeleteByIssue">
		<sql>
			DELETE FROM IssueImage
			 WHERE IdIssue = @IdIssue;
		</sql>
		<parameters>
			<parameter type="Long">IdIssue</parameter>
		</parameters>
	</query>
	
    <query code="IssueImage_GetByIssue">
		<sql>
			SELECT
			    II.IdIssueImage,
			    II.IdIssue,
			    II.ImageIssueUrl,
				II.DateCreated,
				II.UserCreated
		   FROM IssueImage II
		  WHERE II.IdIssue = @idIssue
		</sql>
		<parameters>
			<parameter type="Long">idIssue</parameter>
		</parameters>
	</query>
 <!-- End Issues -->

  <!--Etiqueta Item GS1-->
  <query code="StockLabelGS1_FindAll">
    <sql>
      SELECT
      s.StockId
      ,whs.IdWhs
      ,whs.WhsCode
      ,whs.ShortWhsName
      ,whs.WhsName
      ,s.FifoDate
      ,s.LotNumber AS Lot
      ,s.FabricationDate
      ,s.ExpirationDate
      ,s.IdLocCode
      ,s.IdLpnCode
      ,s.IdLpnCodeContainer
      ,s.LpnTypeCodeContainer
      ,INO.InboundNumber
      ,OUT.OutboundNumber
      ,own.IdOwn
      ,own.OwnCode
      ,own.OwnName
      ,own.TradeName
      ,s.IdCtgItem
      ,ci.CtgCode
      ,ci.CtgName
      ,i.IdItem
      ,i.ItemCode
      ,i.LongItemName
      ,s.ItemQty
      ,s.TotalWeight
      ,s.TotalVolumen
      ,RS.ReasonName HoldCode
      ,OType.OutboundTypeName
      ,COALESCE(S.SealNumber,LPN.SealNumber) AS SealNumber
      ,h.IdHng
      ,h.HngName
      FROM Stock s
      INNER JOIN item i on s.IdItem = i.IdItem
      INNER JOIN Owner own ON s.IdOwn = own.IdOwn
      INNER JOIN Warehouse whs ON s.IdWhs = whs.IdWhs
      INNER JOIN Location l ON s.idLocCode = l.idLocCode AND s.idWhs = l.idWhs
      INNER JOIN Hangar h on h.IdHng = l.IdHng AND l.IdWhs = h.IdWhs
      LEFT JOIN CategoryItem ci ON s.IdCtgItem = ci.IdCtgItem
      LEFT JOIN InboundOrder INO ON s.IdInboundOrder = INO.IdInboundOrder AND INO.IdWhs = s.IdWhs AND INO.IdOwn = s.IdOwn
      LEFT JOIN OutboundOrder OUT ON s.IdOutboundOrder = OUT.IdOutboundOrder AND OUT.IdWhs = s.IdWhs AND OUT.IdOwn = s.IdOwn
      LEFT JOIN OutboundType OType ON OUT.IdOutboundType = OType.IdOutboundType AND OType.Status = 1
      LEFT JOIN Reason RS ON s.HoldCode = RS.ReasonCode
      LEFT JOIN LPN ON s.IdLpnCode = LPN.IdLpnCode
      LEFT JOIN ItemUom IU ON IU.IdItem = I.IdItem AND UPPER(IU.UomName) = 'UNIDAD'
      @SQLPart

      ORDER BY whs.ShortWhsName, own.OwnName, s.IdLocCode, s.IdLpnCode ,INO.InboundNumber, OUT.OutboundNumber, i.LongItemName,s.LotNumber;

      SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
      FROM CfgEntityProperty qf
      JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
      WHERE QueryName = @queryName
      ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="String">queryName</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="Warehouse" type="numericIn">whs.IdWhs</filter>
      <filter name="DateRange" type="textBetween">s.FifoDate</filter>
      <filter name="Item" type="textLike">i.ItemCode</filter>
      <filter name="Owner" type="numericIn">own.IdOwn</filter>
      <filter name="DocumentNbr" type="textLikeOr">INO.InboundNumber,OUT.OutboundNumber</filter>
      <filter name="Location" type="textEqual">s.idLocCode</filter>
      <filter name="LocationRange" type="textBetween">s.idLocCode</filter>
      <filter name="Hangar" type="numericIn">l.IdHng</filter>
      <filter name="LocationType" type="textIn">l.LocTypeCode</filter>
      <filter name="LocationRow" type="numericEqual">l.RowLoc</filter>
      <filter name="LocationColumn" type="numericEqual">l.ColumnLoc</filter>
      <filter name="LocationLevel" type="numericEqual">l.LevelLoc</filter>
      <filter name="LocationAisle" type="textEqual">l.Aisle</filter>
      <filter name="ExpirationDateRange" type="textBetween">s.ExpirationDate</filter>
      <filter name="FabricationDateRange" type="textBetween">s.FabricationDate</filter>
      <filter name="LotNumberRange" type="textBetween">s.LotNumber</filter>
      <filter name="GroupItem1" type="numericEqual">I.IdGrpItem1</filter>
      <filter name="GroupItem2" type="numericEqual">I.IdGrpItem2</filter>
      <filter name="GroupItem3" type="numericEqual">I.IdGrpItem3</filter>
      <filter name="GroupItem4" type="numericEqual">I.IdGrpItem4</filter>
      <filter name="DocumentType" type="numericIn">INO.IdInboundType</filter>
      <filter name="Vendor" type="numericIn">INO.IdVendor</filter>
      <filter name="OutboundType" type="numericIn">OUT.IdOutboundType</filter>
      <filter name="Code" type="textLike">LPN.IdLpnCode</filter>
    </filters>
  </query>
  <!--END Etiqueta Item GS1-->

  <!-- PTL Section  -->
  <!--BEGIN PtlType-->
    <query code="PtlType_GetByAnyParameter">
      <sql>
        SELECT P.IdPtlType
        ,P.PtlTypeCode
        ,P.PtlTypeName
        ,P.OutboudTypeCode
        ,OT.IdOutboundType
        ,OT.OutboundTypeName
        ,P.Status
        ,P.DateCreated
        ,P.UserCreated
        ,P.DateModified
        ,P.UserModified
        FROM PtlType P LEFT JOIN
        OutboundType OT ON P.OutboudTypeCode = OT.OutboudTypeCode
        WHERE 1=1
        @SQLPart
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="IdPtlType" type="numericEqual">P.IdPtlType</filter>
        <filter name="PtlTypeCode" type="textEqual">P.PtlTypeCode</filter>
        <filter name="PtlTypeName" type="textEqual">P.PtlTypeName</filter>
        <filter name="OutboudTypeCode" type="textEqual">P.OutboudTypeCode</filter>
      </filters>
    </query>
  
    <query code="PtlType_Insert">
        <sql>
          INSERT INTO PtlType
          (IdPtlType,
          PtlTypeCode,
          PtlTypeName,
          OutboudTypeCode,
          Status,
          DateCreated,
          UserCreated)
          VALUES
          (@IdPtlType,
          @PtlTypeCode,
          @PtlTypeName,
          @OutboudTypeCode,
          @Status,
          @DateCreated,
          @UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdPtlType</parameter>
          <parameter type="String">PtlTypeCode</parameter>
          <parameter type="String">PtlTypeName</parameter>
          <parameter type="String">OutboudTypeCode</parameter>          
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
    </query>

    <query code="PtlType_Update">
      <sql>
        UPDATE PtlType
        SET PtlTypeCode = @PtlTypeCode,
        PtlTypeName = @PtlTypeName,
        OutboudTypeCode = @OutboudTypeCode,
        Status = @Status,
        DateModified = @DateModified,
        UserModified = @UserModified
        WHERE IdPtlType = @IdPtlType
      </sql>
      <parameters>
        <parameter type="String">PtlTypeCode</parameter>
        <parameter type="String">PtlTypeName</parameter>
        <parameter type="String">OutboudTypeCode</parameter>
        <parameter type="Int">Status</parameter>
        <parameter type="DateTime">DateModified</parameter>
        <parameter type="String">UserModified</parameter>
        <parameter type="Int">IdPtlType</parameter>
      </parameters>
    </query>

    <query code="PtlType_Delete">
      <sql>
        DELETE
        FROM PtlType
        WHERE IdPtlType = @IdPtlType
      </sql>
      <parameters>
        <parameter type="Int">IdPtlType</parameter>
      </parameters>
    </query>

    <query code="PtlType_FindAll">
      <sql>
        SELECT IdPtlType
        ,PtlTypeCode
        ,PtlTypeName
        ,OutboudTypeCode
        ,Status
        ,DateCreated
        ,UserCreated
        ,DateModified
        ,UserModified
        FROM PtlType
        WHERE Status = 1;
      </sql>
    </query>
  <!--END PtlType-->

    <!--BEGIN WaveDispatch-->
    <query code="WaveDispatch_Insert">
      <sql>
        INSERT INTO WaveDispatch
        (IdWaveDispatch
        ,IdWhs
        ,IdOwn
        ,WaveNumber
        ,OutboundTypeCode
        ,QtyOutBoundOrder
        ,QtyOutboundDetail
        ,TotItemOutboundDetail
        ,QtyLinePickDetail
        ,TotItemPickDetail
        ,QtyLineSortDetail
        ,TotItemSortDetail
        ,Status
        ,IdTrackWaveType
        ,UserApproval
        ,DateCreated
        ,UserCreated
        ,StateInterface
        ,DateCreatedWMS)
        VALUES
        (@IdWaveDispatch
        ,@IdWhs
        ,@IdOwn
        ,@WaveNumber
        ,@OutboundTypeCode
        ,@QtyOutBoundOrder
        ,@QtyOutboundDetail
        ,@TotItemOutboundDetail
        ,@QtyLinePickDetail
        ,@TotItemPickDetail
        ,@QtyLineSortDetail
        ,@TotItemSortDetail
        ,@Status
        ,@IdTrackWaveType
        ,@UserApproval
        ,@DateCreated
        ,@UserCreated
        ,@StateInterface
        ,@DateCreatedWMS)
      </sql>
      <parameters>
        <parameter type="Int">IdWaveDispatch</parameter>
        <parameter type="Int">IdWhs</parameter>
        <parameter type="Int">IdOwn</parameter>
        <parameter type="Int">WaveNumber</parameter>
        <parameter type="String">OutboundTypeCode</parameter>
        <parameter type="Int">QtyOutBoundOrder</parameter>
        <parameter type="Int">QtyOutboundDetail</parameter>
        <parameter type="Int">TotItemOutboundDetail</parameter>
        <parameter type="Int">QtyLinePickDetail</parameter>
        <parameter type="Int">TotItemPickDetail</parameter>
        <parameter type="Int">QtyLineSortDetail</parameter>
        <parameter type="Int">TotItemSortDetail</parameter>
        <parameter type="Boolean">Status</parameter>
        <parameter type="Int">IdTrackWaveType</parameter>
        <parameter type="String">UserApproval</parameter>
        <parameter type="DateTime">DateCreated</parameter>
        <parameter type="String">UserCreated</parameter>
        <parameter type="String">StateInterface</parameter>
        <parameter type="DateTime">DateCreatedWMS</parameter>
      </parameters>
    </query>

    <query code="WaveDispatch_GetByAnyParameter">
      <sql>
        SELECT WD.IdWaveDispatch
        ,WD.IdWhs
        ,W.WhsCode
        ,W.WhsName
        ,WD.IdOwn
        ,O.OwnCode
        ,O.OwnName
        ,WD.WaveNumber
        ,WD.OutboundTypeCode
        ,OT.OutboundTypeName
        ,WD.QtyOutBoundOrder
        ,WD.QtyOutboundDetail
        ,WD.TotItemOutboundDetail
        ,WD.QtyLinePickDetail
        ,WD.TotItemPickDetail
        ,WD.QtyLineSortDetail
        ,WD.TotItemSortDetail
        ,WD.Status
        ,WD.IdTrackWaveType
        ,TW.NameTrackWaveType
        ,WD.UserApproval
        ,WD.DateCreated
        ,WD.UserCreated
        ,WD.DateModified
        ,WD.UserModified
        ,WD.StateInterface
        ,WD.DateCreatedWMS
        ,WD.DateReadIFZ
        FROM WaveDispatch WD INNER JOIN
        Warehouse W ON WD.IdWhs = W.IdWhs INNER JOIN
        Owner O ON WD.IdOwn = O.IdOwn INNER JOIN
        OutboundType OT ON WD.OutboundTypeCode = OT.OutboudTypeCode INNER JOIN
        TrackWaveType TW ON WD.IdTrackWaveType = TW.IdTrackWaveType
        WHERE 1=1
        @SQLPart
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="IdWaveDispatch" type="numericEqual">WD.IdWaveDispatch</filter>
        <filter name="IdOwn" type="textEqual">WD.IdOwn</filter>
        <filter name="WaveNumber" type="textEqual">WD.WaveNumber</filter>
        <filter name="OutboundTypeCode" type="textEqual">WD.OutboundTypeCode</filter>
        <filter name="IdTrackWaveType" type="numericEqual">WD.IdTrackWaveType</filter>
        <filter name="UserApproval" type="textEqual">WD.UserApproval</filter>
        <filter name="StateInterface" type="textEqual">WD.StateInterface</filter>
      </filters>
    </query>

    <query code="WaveDispatch_Delete">
      <sql>
        DELETE
        FROM WaveDispatch
        WHERE IdWaveDispatch = @IdWaveDispatch
      </sql>
      <parameters>
        <parameter type="Int">IdWaveDispatch</parameter>
      </parameters>
    </query>
    <!--END WaveDispatch-->
  
    <!--BEGIN WaveTrack-->
    <query code="WaveTrack_Insert">
        <sql>
          INSERT INTO WaveTrack
          (IdWave
          ,IdTrackWaveType
          ,DateTrack)
          VALUES
          (@IdWave
          ,@IdTrackWaveType
          ,@DateTrack)
        </sql>
        <parameters>
          <parameter type="Int">IdWave</parameter>
          <parameter type="Int">IdTrackWaveType</parameter>          
          <parameter type="DateTime">DateTrack</parameter>
        </parameters>
    </query>
  
    <query code="WaveTrack_GetByAnyParameter">
      <sql>
        SELECT WT.IdWave
        ,WT.IdTrackWaveType
	      ,TW.NameTrackWaveType
        ,WT.DateTrack
        FROM WaveTrack WT INNER JOIN
	      TrackWaveType TW ON WT.IdTrackWaveType = TW.IdTrackWaveType
        WHERE 1=1
        @SQLPart
      </sql>
      <parameters>
        <parameter type="SQLPart">@SQLPart</parameter>
      </parameters>
      <filters>
        <filter name="IdWave" type="numericEqual">WT.IdWave</filter>
        <filter name="IdTrackWaveType" type="numericEqual">WT.IdTrackWaveType</filter>
      </filters>
    </query>
    <!--END WaveTrack-->
  
  <!-- END PTL Section-->

  <query code="UpdateWasCountedLocationsByInventory">
    <sql>
      UPDATE InventoryLocation
         SET WasCounted = @wasCounted,
             DateModified = @DateModified,
             UserModified = @UserModified
       WHERE IdInventory = @idInventory
    </sql>
    <parameters>
      <parameter type="Boolean">wasCounted</parameter>
      <parameter type="DateTime">dateModified</parameter>
      <parameter type="String">userModified</parameter>
      <parameter type="Int">idInventory</parameter>
    </parameters>
  </query>
  
  <query code="TaskMgrKpi_FindAll">
      <sql>
          SELECT 
			    T.IdTask, 
			    T.IdWhs, 
			    W.WhsName, 
			    W.ShortWhsName, 
			    T.IdOwn, 
			    O.OwnName, 
			    T.IdTrackTaskType, 
			    TTT.NameTrackTasktype, 
			    T.CreateDate, 
			    T.TaskTypeCode, 
			    TT.TaskTypeName, 
			    T.Description TaskDescription, 
			    T.Priority, 
			    T.IdLocStageSource, 
			    T.IdLocStageTarget, 
			    T.WorkersRequired, 
			    T.AllowCrossDock, 
			    T.UserCreated, 
			    T.UserModified, 
			    T.DateModified, 
			    T.DateCreated, 
			    T.IsComplete, 
			    T.RealStartDate, 
			    T.DateTrackTask, 
			    T.Status, 
			    (
				  CASE WHEN T.TaskTypeCode IN ('PUT', 'RCPA') THEN (
				    SELECT 
					  InboundNumber 
				    FROM 
					  InboundOrder IO 
				    WHERE 
					  IO.IdInboundOrder = T.IdDocumentBound
				  ) ELSE (
				    SELECT 
					  OutboundNumber 
				    FROM 
					  OutboundOrder OO 
				    WHERE 
					  OO.IdOutboundOrder = T.IdDocumentBound
				  ) END
			    ) AS OutboundNumber
			  FROM Task T 
			    INNER JOIN TaskType TT ON TT.TaskTypeCode = T.TaskTypeCode 
			    AND TT.Status = 1 
			    INNER JOIN TrackTaskType TTT ON TTT.IdTrackTaskType = T.IdTrackTaskType 
			    INNER JOIN Warehouse W ON W.IdWhs = T.IdWhs 
			    LEFT JOIN Owner O ON O.IdOwn = T.IdOwn 
			    LEFT JOIN OutboundOrder OO ON OO.IdOutboundOrder = T.IdDocumentBound 
			    @SQLPart 
			  ORDER BY 
			    W.ShortWhsName, 
			    O.OwnName, 
			    T.IdTask;


          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
          <filter name="TaskType" type="textIn">T.TaskTypeCode</filter>
          <filter name="DateRange" type="textBetween">T.CreateDate</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Description" type="textLike">I.LongItemName</filter>
          <filter name="DocumentNbr" type="textEqual">OO.OutboundNumber</filter>
          <filter name="PriorityTask" type="textEqual">T.Priority</filter>
          <filter name="TrackTaskType" type="numericIn">T.IdTrackTaskType</filter>
          <filter name="OutboundType" type="numericEqual">OO.IdOutboundType</filter>
          <filter name="Name" type="textLike">I.Description</filter>
          <filter name="Completed" type="numericIn">T.IsComplete</filter>
          <filter name="CodeNumeric" type="numericEqual">T.IdTask</filter>
        </filters>
      </query>
  
      <query code="OutboundOrder_FindAllJoinTask">
        <sql>
          SELECT DISTINCT
          (
          select SUM(Volume) from
          (
          SELECT max(IU.Volume) as Volume, iu.IdItem
          FROM OutboundDetail OD
          INNER JOIN ItemUom IU
          ON OD.IdItem = IU.IdItem
          WHERE OD.IdOutboundOrder = Out.IdOutboundOrder
          AND IU.ConversionFactor = 1
          group by iu.IdItem
          ) as  TotalVolume
          ) as TotalVolumeUom,
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs1.WhsCode,
          Whs1.ShortWhsName,
          Whs1.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          tra.IdTrackOutboundType,
          tra.NameTrackOutboundType,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Co1.CountryName	as CountryDeliveryName,
          Out.IdStateDelivery,
          St1.StateName as StateDeliveryName,
          Out.IdCityDelivery,
          Ci1.CityName as CityDeliveryName,
          Ci1.IdCity as IdCityDelivery,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          whs2.WhsCode as WhsTargetCode,
          whs2.ShortWhsName as WhsTargetShortName,
          whs2.WhsName as WhsTargetName,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          CO2.CountryName	as CountryFactName,
          Out.IdStateFact,
          St2.StateName as StateFactName,
          Out.IdCityFact,
          Ci2.CityName as CityFactName,
          Out.FactPhone,
          Out.FactEmail,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified,
          Cus.CustomerName as CustomerCustomerName,
          Cus.Address1Delv as CustomerAddress1Delv,
          Cus.Address2Delv as CustomerAddress2Delv,
          Co3.CountryName	as CustomerCountryDeliveryName,
          St3.StateName as CustomerStateDeliveryName,
          Ci3.CityName as CustomerCityDeliveryName,
          Cus.PhoneDelv as CustomerDeliveryPhone,
          Cus.FaxDelv as CustomerDeliveryFax,
          Cus.Address1Fact as CustomerAddress1Fact,
          Cus.Address2Fact as CustomerAddress2Fact,
          Co4.CountryName	as CustomerCountryFactName,
          St4.StateName as CustomerStateFactName,
          Ci4.CityName as CustomerCityFactName,
          Cus.PhoneFact as CustomerFactPhone,
          Cus.FaxFact as CustomerFactFax,
          Cus.IdCustomer as CustomerId,
          Bra.BranchName,
          Bra.BranchAddress,
          Bra.IdBranch,
          Co5.CountryName	as BranchCountryName,
          St5.StateName as BranchStateName,
          Ci5.CityName as BranchCityName,
          (SELECT    TrackOutboundDate
          FROM Dispatch D
          WHERE D.IdOutboundOrder = Out.IdOutboundOrder
          AND D.IdDispatchType IN (6, 23)
          AND D.TrackOutboundDate = ( SELECT MIN(D.TrackOutboundDate)
          FROM Dispatch D
          WHERE D.IdOutboundOrder = Out.IdOutboundOrder
          AND D.IdDispatchType IN (6, 23))
          ) as ShippedDate,
          out.SpecialField1,
          out.SpecialField2,
          out.SpecialField3,
          out.SpecialField4,
          OC.Percentage,
          OC.SimulationDate
          FROM OutboundOrder Out
          JOIN Task T ON T.IdDocumentBound = Out.IdOutboundOrder
          LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType AND OutType.Status = 1
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
          LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs
          LEFT JOIN Customer Cus ON Out.CustomerCode = Cus.CustomerCode AND Out.IdOwn = Cus.IdOwn
          LEFT JOIN Branch Bra ON Out.IdBranch = Bra.IdBranch AND Out.IdOwn = Bra.IdOwn AND Cus.IdCustomer = Bra.IdCustomer

          LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
          LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
          LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity

          LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
          LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
          LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity

          LEFT JOIN Country Co3 ON Cus.IdCountryDelv = Co3.IdCountry
          LEFT JOIN State St3 ON Cus.IdStateDelv = St3.IdState
          LEFT JOIN City Ci3 ON Cus.IdCityDelv = Ci3.IdCity

          LEFT JOIN Country Co4 ON Cus.IdCountryFact = Co4.IdCountry
          LEFT JOIN State St4 ON Cus.IdStateFact = St4.IdState
          LEFT JOIN City Ci4 ON Cus.IdCityFact = Ci4.IdCity

          LEFT JOIN Country Co5 ON Bra.IdCountry = Co5.IdCountry
          LEFT JOIN State St5 ON Bra.IdState = St5.IdState
          LEFT JOIN City Ci5 ON Bra.IdCity = Ci5.IdCity

          LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
          JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
          LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
          LEFT JOIN OutboundOrderCompliance OC ON OC.IdOutboundOrder = Out.IdOutboundOrder
          
          WHERE T.TaskTypeCode @taskTypeCodeList
          
          @SQLPart
          
          ORDER BY Whs1.ShortWhsName,Own.OwnName,OutType.OutboundTypeName,Out.OutboundNumber;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth, GridWidth, GridWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="StringIn">taskTypeCodeList</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">Whs1.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">Out.OutboundNumber</filter>
          <filter name="DateRange" type="textBetween">Out.EmissionDate</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">Own.IdOwn</filter>
          <filter name="Name" type="textLike">Out.CustomerCode</filter>
          <filter name="Description" type="textLike">Out.CustomerName</filter>
          <filter name="TrackOutboundType" type="numericIn">tra.IdTrackOutboundType</filter>
          <filter name="OutboundType" type="numericIn">OutType.IdOutboundType</filter>
          <filter name="ExpectedDateRange" type="textBetween">Out.ExpectedDate</filter>
          <filter name="ExpirationDateRange" type="textBetween">Out.ExpirationDate</filter>
          <filter name="PriorityRange" type="textBetween">Out.Priority</filter>
          <filter name="Customer" type="textLike">Out.CustomerName</filter>
          <filter name="Carrier" type="textLike">Car.CarrierCode</filter>
          <filter name="Route" type="textLike">Out.RouteCode</filter>
          <filter name="Country" type="numericEqual">Out.IdCountryDelivery</filter>
          <filter name="State" type="numericEqual">Out.IdStateDelivery</filter>
          <filter name="City" type="numericEqual">Out.IdCityDelivery</filter>
        </filters>
      </query>
  
    <query code="DispatchAdvanced_FindAllBatch">
      <sql>
        SELECT 
              tot.BatchId as IdOutboundOrder,
	            tot.IdOwn,
	            tot.IdWhs,
              W.ShortWhsName,
				      O.OwnName,
              tot.CreateDate as EmissionDate,
              tot.QtyRequest as QtySolicitado,
              tot.QtyRelease,
              CAST(((tot.QtyRelease / tot.QtyRequest) * 100) AS INT) AS PctRelease,
              tot.QtyPicking,
              CAST(((tot.QtyPicking / tot.QtyRequest) * 100) AS INT) AS PctPicking,
	            tot.QtyPacking,
              CAST(((tot.QtyPacking / tot.QtyRequest) * 100) AS INT) AS PctPacking,
	            tot.QtyRouting,
              CAST(((tot.QtyRouting / tot.QtyRequest) * 100) AS INT) AS PctRouting,
	            tot.QtyLoading,
              CAST(((tot.QtyLoading / tot.QtyRequest) * 100) AS INT) AS PctLoading,
	            tot.QtyShipping,
              CAST(((tot.QtyShipping / tot.QtyRequest) * 100) AS INT) AS PctShipping
        FROM 
        (
		        SELECT
			        req.BatchId,
			        req.QtyRequest,
			        req.IdOwn,
			        req.IdWhs,
              req.CreateDate,
			        (
				          SELECT
						         COALESCE(SUM(DD.ItemQty), 0) AS QtyPicking
					              FROM Dispatch D
					              JOIN DispatchDetail DD 
					                ON D.IdDispatch = DD.IdDispatch
				               WHERE D.IdOutboundOrder IN (
							          SELECT DISTINCT(TD.IdDocumentBound)
								            FROM Task T 
								            JOIN TaskDetail TD
								              ON T.IdTask = TD.IdTask
							               WHERE T.TaskTypeCode = 'PIKBT'
								             AND T.IdOwn = req.IdOwn
								             AND T.IdWhs = req.IdWhs
								             AND T.IdTask = req.BatchId
					          )
					          AND DD.IdWmsProcessCode = 'RLEAS'
			        ) AS QtyRelease,
			        (
				          SELECT
						         COALESCE(SUM(DD.ItemQty), 0) AS QtyPicking
					        FROM Dispatch D
					        JOIN DispatchDetail DD 
					          ON D.IdDispatch = DD.IdDispatch
				           WHERE D.IdOutboundOrder IN (
							          SELECT DISTINCT(TD.IdDocumentBound)
								        FROM Task T 
								        JOIN TaskDetail TD
								          ON T.IdTask = TD.IdTask
							           WHERE T.TaskTypeCode = 'PIKBT'
								         AND T.IdOwn = req.IdOwn
								         AND T.IdWhs = req.IdWhs
								         AND T.IdTask = req.BatchId
					          )
					          AND DD.IdWmsProcessCode = 'PKBAT'
			        ) AS QtyPicking,
			        (
				          SELECT
						         COALESCE(SUM(DD.ItemQty), 0) AS QtyPacking
					        FROM Dispatch D
					        JOIN DispatchDetail DD 
					          ON D.IdDispatch = DD.IdDispatch
				           WHERE D.IdOutboundOrder IN (
							          SELECT DISTINCT(TD.IdDocumentBound)
								        FROM Task T 
								        JOIN TaskDetail TD
								          ON T.IdTask = TD.IdTask
							           WHERE T.TaskTypeCode = 'PIKBT'
								         AND T.IdOwn = req.IdOwn
								         AND T.IdWhs = req.IdWhs
								         AND T.IdTask = req.BatchId
					          )
					          AND DD.IdWmsProcessCode = 'PACK'
			        ) AS QtyPacking,
			        (
				          SELECT
						         COALESCE(SUM(DD.ItemQty), 0) AS QtyRouting
					        FROM Dispatch D
					        JOIN DispatchDetail DD 
					          ON D.IdDispatch = DD.IdDispatch
				           WHERE D.IdOutboundOrder IN (
							          SELECT DISTINCT(TD.IdDocumentBound)
								        FROM Task T 
								        JOIN TaskDetail TD
								          ON T.IdTask = TD.IdTask
							           WHERE T.TaskTypeCode = 'PIKBT'
								         AND T.IdOwn = req.IdOwn
								         AND T.IdWhs = req.IdWhs
								         AND T.IdTask = req.BatchId
					          )
					          AND DD.IdWmsProcessCode = 'RUTEO'
			        ) AS QtyRouting,
			        (
				          SELECT
						         COALESCE(SUM(DD.ItemQty), 0) AS QtyLoading
					        FROM Dispatch D
					        JOIN DispatchDetail DD 
					          ON D.IdDispatch = DD.IdDispatch
				           WHERE D.IdOutboundOrder IN (
							          SELECT DISTINCT(TD.IdDocumentBound)
								        FROM Task T 
								        JOIN TaskDetail TD
								          ON T.IdTask = TD.IdTask
							           WHERE T.TaskTypeCode = 'PIKBT'
								         AND T.IdOwn = req.IdOwn
								         AND T.IdWhs = req.IdWhs
								         AND T.IdTask = req.BatchId
					          )
					          AND DD.IdWmsProcessCode = 'LOAD'
			        ) AS QtyLoading,
			        (
				          SELECT
						               COALESCE(SUM(DD.ItemQty), 0) AS QtyShipping
					            FROM Dispatch D
					            JOIN DispatchDetail DD 
					              ON D.IdDispatch = DD.IdDispatch
				           WHERE D.IdOutboundOrder IN (
							          SELECT DISTINCT(TD.IdDocumentBound)
								          FROM Task T 
								          JOIN TaskDetail TD
								            ON T.IdTask = TD.IdTask
							           WHERE T.TaskTypeCode = 'PIKBT'
								           AND T.IdOwn = req.IdOwn
								           AND T.IdWhs = req.IdWhs
								           AND T.IdTask = req.BatchId
					          )
					          AND DD.IdWmsProcessCode = 'SHIPP'
			        ) AS QtyShipping
			        FROM	
			        (
					        SELECT
						           SUM(OD.ItemQty) AS QtyRequest,
						           data.BatchId,
						           data.IdOwn,
						           data.IdWhs,
                       data.CreateDate
					        FROM OutboundDetail OD
					        JOIN OutboundOrder OO 
					          ON OO.IdOutboundOrder = OD.IdOutboundOrder
					        JOIN (
					         SELECT
						            batch.IdOutboundOrder,
						            orders.IdOwn,
						            orders.IdWhs,
						            orders.IdTask as BatchId,
                        orders.CreateDate
						        FROM (
							        SELECT
								                DISTINCT(TD.IdDocumentBound),
								                T.IdOwn,
								                T.IdWhs,
								                T.IdTask,
                                T.CreateDate
						               FROM Task T
						               JOIN TaskDetail TD 
							               ON T.IdTask = TD.IdTask
						              WHERE T.TaskTypeCode = 'PIKBT'
						                    @SQLPart
						        ) orders
						        JOIN (
							        SELECT
								               OO.IdOutboundOrder,
								               OO.IdOwn,
								               OO.IdWhs
							            FROM OutboundOrder OO
							            JOIN OutboundType OT 
							              ON OO.IdOutboundType = OT.IdOutboundType
							            JOIN v_Oub_LatestTrack tra 
							              ON OO.IdOutboundOrder = tra.IdOutboundOrder
						        ) batch
						        ON orders.IdDocumentBound = batch.IdOutboundOrder
					         AND orders.IdOwn = batch.IdOwn
					         AND orders.IdWhs = batch.IdWhs
					         ) data 
					         ON data.IdOutboundOrder = OO.IdOutboundOrder
			       GROUP BY data.BatchId,
						          data.IdOwn,
						          data.IdWhs,
                      data.CreateDate
			        ) req
        ) tot
    JOIN Warehouse W
		  ON W.IdWhs = TOT.IdWhs
		JOIN Owner O
		  ON O.IdOwn = TOT.IdOwn
        ;
        
          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth, GridWidth, GridWidth, GridWidth
            FROM CfgEntityProperty qf
            JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
           WHERE QueryName = @queryName
        ORDER BY FieldOrder
      </sql>
      <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
      </parameters>
      <filters>
        <filter name="CodeNumeric" type="numericIn">T.IdTask</filter>
        <filter name="DateRange" type="textBetween">T.CreateDate</filter>
        <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
        <filter name="Owner" type="numericIn">T.IdOwn</filter>
      </filters>
    </query>
  
    <query code="DispatchAdvanced_GetByBatchId">
      <sql>
        SELECT
              tot.BatchId,
	            tot.IdOwn,
	            tot.IdWhs,
              tot.IdItem,
	            I.ShortItemName,
	            I.ItemCode,
	            tot.IdCtgItem,
	            CI.CtgCode,
	            CI.CtgName,
              tot.LotNumber, 
				      tot.FifoDate, 
				      tot.ExpirationDate, 
				      tot.FabricationDate,
              tot.QtyRequest,
              tot.QtyRelease,
              CAST(((tot.QtyRelease / tot.QtyRequest) * 100) AS INT) AS PctRelease,
              tot.QtyPicking,
              CAST(((tot.QtyPicking / tot.QtyRequest) * 100) AS INT) AS PctPicking,
	            tot.QtyPacking,
              CAST(((tot.QtyPacking / tot.QtyRequest) * 100) AS INT) AS PctPacking,
	            tot.QtyRouting,
              CAST(((tot.QtyRouting / tot.QtyRequest) * 100) AS INT) AS PctRouting,
	            tot.QtyLoading,
              CAST(((tot.QtyLoading / tot.QtyRequest) * 100) AS INT) AS PctLoading,
	            tot.QtyShipping,
              CAST(((tot.QtyShipping / tot.QtyRequest) * 100) AS INT) AS PctShipping
        FROM
        (		
		        SELECT
					        req.BatchId,
					        req.QtyRequest,
					        req.IdOwn,
					        req.IdWhs,
					        req.IdItem,
					        req.IdCtgItem,
                  req.LotNumber, 
							    req.FifoDate, 
							    req.ExpirationDate, 
							    req.FabricationDate,
					        (
						          SELECT
								         COALESCE(SUM(DD.ItemQty), 0) AS QtyPicking
							        FROM Dispatch D
							        JOIN DispatchDetail DD 
							          ON D.IdDispatch = DD.IdDispatch
						           WHERE D.IdOutboundOrder IN (
									          SELECT DISTINCT(TD.IdDocumentBound)
										        FROM Task T 
										        JOIN TaskDetail TD
										          ON T.IdTask = TD.IdTask
									           WHERE T.TaskTypeCode = 'PIKBT'
										         AND T.IdOwn = req.IdOwn
										         AND T.IdWhs = req.IdWhs
										         AND T.IdTask = req.BatchId
							          )
							          AND DD.IdWmsProcessCode = 'RLEAS'
							          AND DD.IdItem = req.IdItem
							          AND COALESCE(DD.IdCtgItem,'') = COALESCE(req.IdCtgItem,'') 
					        ) AS QtyRelease,
					        (
						          SELECT
								         COALESCE(SUM(DD.ItemQty), 0) AS QtyPicking
							        FROM Dispatch D
							        JOIN DispatchDetail DD 
							          ON D.IdDispatch = DD.IdDispatch
						           WHERE D.IdOutboundOrder IN (
									          SELECT DISTINCT(TD.IdDocumentBound)
										        FROM Task T 
										        JOIN TaskDetail TD
										          ON T.IdTask = TD.IdTask
									           WHERE T.TaskTypeCode = 'PIKBT'
										         AND T.IdOwn = req.IdOwn
										         AND T.IdWhs = req.IdWhs
										         AND T.IdTask = req.BatchId
							          )
							          AND DD.IdWmsProcessCode = 'PKBAT'
							          AND DD.IdItem = req.IdItem
							          AND COALESCE(DD.IdCtgItem,'') = COALESCE(req.IdCtgItem,'') 
					        ) AS QtyPicking,
					        (
						          SELECT
								         COALESCE(SUM(DD.ItemQty), 0) AS QtyPacking
							        FROM Dispatch D
							        JOIN DispatchDetail DD 
							          ON D.IdDispatch = DD.IdDispatch
						           WHERE D.IdOutboundOrder IN (
									          SELECT DISTINCT(TD.IdDocumentBound)
										        FROM Task T 
										        JOIN TaskDetail TD
										          ON T.IdTask = TD.IdTask
									           WHERE T.TaskTypeCode = 'PIKBT'
										         AND T.IdOwn = req.IdOwn
										         AND T.IdWhs = req.IdWhs
										         AND T.IdTask = req.BatchId
							          )
							          AND DD.IdWmsProcessCode = 'PACK'
							          AND DD.IdItem = req.IdItem
							          AND COALESCE(DD.IdCtgItem,'') = COALESCE(req.IdCtgItem,'') 
					        ) AS QtyPacking,
					        (
						          SELECT
								         COALESCE(SUM(DD.ItemQty), 0) AS QtyRouting
							        FROM Dispatch D
							        JOIN DispatchDetail DD 
							          ON D.IdDispatch = DD.IdDispatch
						           WHERE D.IdOutboundOrder IN (
									          SELECT DISTINCT(TD.IdDocumentBound)
										        FROM Task T 
										        JOIN TaskDetail TD
										          ON T.IdTask = TD.IdTask
									           WHERE T.TaskTypeCode = 'PIKBT'
										         AND T.IdOwn = req.IdOwn
										         AND T.IdWhs = req.IdWhs
										         AND T.IdTask = req.BatchId
							          )
							          AND DD.IdWmsProcessCode = 'RUTEO'
							          AND DD.IdItem = req.IdItem
							          AND COALESCE(DD.IdCtgItem,'') = COALESCE(req.IdCtgItem,'') 
					        ) AS QtyRouting,
					        (
						          SELECT
								         COALESCE(SUM(DD.ItemQty), 0) AS QtyLoading
							        FROM Dispatch D
							        JOIN DispatchDetail DD 
							          ON D.IdDispatch = DD.IdDispatch
						           WHERE D.IdOutboundOrder IN (
									          SELECT DISTINCT(TD.IdDocumentBound)
										        FROM Task T 
										        JOIN TaskDetail TD
										          ON T.IdTask = TD.IdTask
									           WHERE T.TaskTypeCode = 'PIKBT'
										         AND T.IdOwn = req.IdOwn
										         AND T.IdWhs = req.IdWhs
										         AND T.IdTask = req.BatchId
							          )
							          AND DD.IdWmsProcessCode = 'LOAD'
							          AND DD.IdItem = req.IdItem
							          AND COALESCE(DD.IdCtgItem,'') = COALESCE(req.IdCtgItem,'') 
					        ) AS QtyLoading,
					        (
						          SELECT
								         COALESCE(SUM(DD.ItemQty), 0) AS QtyShipping
							        FROM Dispatch D
							        JOIN DispatchDetail DD 
							          ON D.IdDispatch = DD.IdDispatch
						           WHERE D.IdOutboundOrder IN (
									          SELECT DISTINCT(TD.IdDocumentBound)
										        FROM Task T 
										        JOIN TaskDetail TD
										          ON T.IdTask = TD.IdTask
									           WHERE T.TaskTypeCode = 'PIKBT'
										         AND T.IdOwn = req.IdOwn
										         AND T.IdWhs = req.IdWhs
										         AND T.IdTask = req.BatchId
							          )
							          AND DD.IdWmsProcessCode = 'SHIPP'
							          AND DD.IdItem = req.IdItem
							          AND COALESCE(DD.IdCtgItem,'') = COALESCE(req.IdCtgItem,'') 
					        ) AS QtyShipping
					        FROM	
					        (
						        SELECT
								           SUM(OD.ItemQty) AS QtyRequest,
								           OD.IdItem,
								           OD.IdCtgItem,
								           data.BatchId,
								           data.IdOwn,
								           data.IdWhs,
                           OD.LotNumber, 
										       OD.FifoDate, 
										       OD.ExpirationDate, 
										       OD.FabricationDate
							        FROM OutboundDetail OD
							        JOIN OutboundOrder OO 
							          ON OO.IdOutboundOrder = OD.IdOutboundOrder
							        JOIN (
							         SELECT
								          batch.IdOutboundOrder,
								          orders.IdOwn,
								          orders.IdWhs,
								          orders.IdTask as BatchId
								        FROM (
									        SELECT
										            DISTINCT(TD.IdDocumentBound),
										            T.IdOwn,
										            T.IdWhs,
										            T.IdTask
								           FROM Task T
								           JOIN TaskDetail TD 
									           ON T.IdTask = TD.IdTask
								          WHERE T.TaskTypeCode = 'PIKBT'
									          AND T.idtask = @idBatch
								        ) orders
								        JOIN (
									        SELECT
										             OO.IdOutboundOrder,
										             OO.IdOwn,
										             OO.IdWhs
									            FROM OutboundOrder OO
									            JOIN OutboundType OT 
									              ON OO.IdOutboundType = OT.IdOutboundType
									            JOIN v_Oub_LatestTrack tra 
									              ON OO.IdOutboundOrder = tra.IdOutboundOrder
								        ) batch
								        ON orders.IdDocumentBound = batch.IdOutboundOrder
							         AND orders.IdOwn = batch.IdOwn
							         AND orders.IdWhs = batch.IdWhs
							         ) data 
							         ON data.IdOutboundOrder = OO.IdOutboundOrder
					       GROUP BY data.BatchId,
								          data.IdOwn,
								          data.IdWhs,
								          OD.IdItem,
								          OD.IdCtgItem,
                          OD.LotNumber, 
										      OD.FifoDate, 
										      OD.ExpirationDate, 
										      OD.FabricationDate
					        ) req
        ) tot
        JOIN Item I
          ON I.IdItem = tot.IdItem
         AND I.IdOwn = tot.IdOwn
   LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = tot.IdCtgItem;

        SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
      </sql>
      <parameters>
          <parameter type="Int">idBatch</parameter>
          <parameter type="String">queryName</parameter>
      </parameters>
    </query>
  
    <query code="PropertyDTO_GetByQueryName">
      <sql>
         SELECT FieldName, 
                Enabled,
                VisibleGrid, 
                VisibleEditNew, 
                VisibleView,
                VisibleReport, 
                Required, 
                DefaultValue, 
                FieldOrder,
                FieldWidth
           FROM CfgEntityProperty qf
           JOIN CfgEntity q 
             ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
      </sql>
      <parameters>
          <parameter type="String">queryName</parameter>
      </parameters>
    </query>
  
    <query code="GetDispatchById">
      <sql>
        SELECT
        d.IdDispatch,
        d.IdOutboundOrder,
        d.Status,
        d.IdTrackOutbound,
        d.TrackOutboundDate,
        d.IdDispatchType,
        d.ReferenceDoc,
        d.IdReferenceDocType,
        d.IdCarrier,
        d.IdTruckCode,
        d.DriveCode,
        d.ShiftNumber,
        d.IdWhs,
        d.UserWms,
        d.IdLocationForLift,
        d.IdLocationStage,
        d.StateInterface
        FROM Dispatch d
        WHERE d.IdDispatch = @IdDispatch
      </sql>
      <parameters>
        <parameter type="Int">IdDispatch</parameter>
      </parameters>
  </query>
  
    <query code="HoldStockByReceipt">
        <sql>
          UPDATE Stock
             SET ReasonCode = @reasonCode,
                 HoldCode = @holdCode,
                 DateModified = @dateModified,
                 UserModified = @userModified
           WHERE IdReceipt = @IdReceipt
        </sql>
        <parameters>
          <parameter type="String">reasonCode</parameter>
          <parameter type="String">holdCode</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="Int">IdReceipt</parameter>
        </parameters>
    </query>
	
	<query code="UpdateStockConfirmReceipt">
        <sql>
          UPDATE Stock
             SET ReasonCode = CASE ReasonCode WHEN 'IOHIS' THEN NULL ELSE ReasonCode END,
				 HoldCode = CASE HoldCode WHEN 'IOHIS' THEN NULL ELSE HoldCode END,
                 DateModified = @dateModified,
                 UserModified = @userModified
           WHERE IdReceipt = @IdReceipt
        </sql>
        <parameters>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="Int">IdReceipt</parameter>
        </parameters>
    </query>

   <query code="GetDispatchByTypeAndOutboundOrder">
      <sql>
        SELECT
        D.IdDispatch,
        D.IdOutboundOrder,
        D.Status,
        D.IdTrackOutbound,
        D.TrackOutboundDate,
        D.IdDispatchType,
        D.ReferenceDoc,
        D.IdReferenceDocType,
        D.IdCarrier,
        D.IdTruckCode,
        D.DriveCode,
        D.ShiftNumber,
        D.IdWhs,
        D.UserWms,
        D.IdLocationForLift,
        D.IdLocationStage
        FROM Dispatch D
        WHERE D.IdOutboundOrder = @IdOutboundOrder
        AND D.IdDispatchType = @IdDispatchType
      </sql>
      <parameters>
        <parameter type="Int">IdOutboundOrder</parameter>
        <parameter type="Int">IdDispatchType</parameter>
      </parameters>
    </query>
  
    <query code="TaskQueue_GetBatchesInQueue">
    <sql>
      SELECT 
            TQ.IdTaskQueue,
            TQ.IdDocumentBound,
            TQ.IdTypeTask,
	          TTQ.NameTrackTaskQueue,
	          O.OwnName,
            O.IdOwn,
			      W.IdWhs,
	          W.WhsName,
            TQ.IdTrackTaskQueue,
            T.IdTask as NumberDocumentBound,
            TQ.PercCompletion,
			      TQ.SpecialField1,
			      TQ.SpecialField2,
			      TQ.SpecialField3,
			      TQ.SpecialField4
       FROM TaskQueue TQ
       JOIN TrackTaskQueue TTQ
         ON TQ.IdTrackTaskQueue = TTQ.IdTrackTaskQueue
       JOIN Task T
         ON T.IdTask = TQ.IdDocumentBound
       JOIN Owner O
         ON O.IdOwn = TQ.IdOwn
       JOIN Warehouse W
         ON W.IdWhs = TQ.IdWhs
            @SQLPart
   ORDER BY TQ.DateCreated

      SELECT q.IdCfgEntity,
             FieldName, 
             Enabled, 
             VisibleGrid, 
             VisibleEditNew, 
             VisibleView, 
             VisibleReport, 
             Required, 
             DefaultValue, 
             FieldOrder, 
             FieldWidth
        FROM CfgEntityProperty qf
        JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
       WHERE QueryName = @queryName
    ORDER BY FieldOrder
    </sql>
    <parameters>
      <parameter type="SQLPart">@SQLPart</parameter>
      <parameter type="String">queryName</parameter>
    </parameters>
    <filters>
      <filter name="Owner" type="numericIn">TQ.IdOwn</filter>
      <filter name="Warehouse" type="numericIn">TQ.IdWhs</filter>
      <filter name="IdTypeTask" type="numericIn">TQ.IdTypeTask</filter>
      <filter name="DocumentNbr" type="textLike">T.IdTask</filter>
      <filter name="IdTrackTaskQueue" type="numericIn">TQ.IdTrackTaskQueue</filter>
      <filter name="DateRange" type="textBetween">TQ.DateCreated</filter>
    </filters>
  </query>

  <query code="GetLpnByCode">
    <sql>
      SELECT
      L.IdLpnCode,
      L.IdLpnType,
      L.Status,
      L.FifoDate,
      L.IdOwn,
      L.SealNumber,
      LT.LpnTypeCode,
      LT.LpnTypeName,
      LT.Tare,
      LT.Volume,
      LT.Length,
      LT.Width,
      LT.Height,
      LT.NextAvailableNumber,
      LT.WeightCapacity,
      LT.VolumeCapacity,
      LT.Status,
      L.IsClosed,
      L.IsClosed,
      L.IsParent,
      L.LpnParent,
      O.OwnCode
      FROM LPN L
      INNER JOIN LPNType LT on L.IdLpnType = LT.IdLpnType
      JOIN Owner O
	      ON O.IdOwn = L.IdOwn
      WHERE l.IdLpnCode = @lpnCode
    </sql>
    <parameters>
      <parameter type="String">lpnCode</parameter>
    </parameters>
  </query>

  <query code="WorkZone_GetByIdWhs">
    <sql>
      SELECT WZ.IdWhs,
             WZ.IdWorkZone,
             WZ.Description,
             WZ.WorkZoneName,
			       W.WhsCode,
			       W.ShortWhsName,
			       W.WhsName
        FROM WorkZone WZ
        JOIN Warehouse W
          ON W.IdWhs = WZ.IdWhs
       WHERE WZ.IdWhs = @IdWhs
	   AND (WZ.TypeZone = 1 OR WZ.TypeZone = 5);
    </sql>
    <parameters>
      <parameter type="Int">IdWhs</parameter>
    </parameters>
  </query>
  
  <query code="WorkZone_GetByIdWhsAndIdOwn">
    <sql>
            SELECT WZ.IdWhs,
                   WZ.IdWorkZone,
                   WZ.Description,
                   WZ.WorkZoneName,
			             W.WhsCode,
			             W.ShortWhsName,
			             W.WhsName,
			             ISNULL(T.Valid, 0) AS IsAssignedZoneItem 
              FROM WorkZone WZ
              JOIN Warehouse W
                ON W.IdWhs = WZ.IdWhs
        LEFT JOIN (
				              SELECT 
					                  I.IdOwn, 
					                  WZI.IdWorkZone,
					                  1 AS Valid 
				               FROM WorkZoneItem WZI 
				               JOIN Item I 
				                 ON WZI.IdItem = I.IdItem 
			             GROUP BY I.IdOwn, 
					                  WZI.IdWorkZone
		              ) 
		            T ON WZ.IdWorkZone = T.IdWorkZone 
	               AND T.IdOwn = @IdOwn 
               WHERE WZ.IdWhs = @IdWhs
			   AND (WZ.TypeZone = 1 OR WZ.TypeZone = 5)
    </sql>
    <parameters>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdOwn</parameter>
    </parameters>
  </query>
  
  <query code="WorkZone_GetByIdWhsAndIdGrpItem1">
    <sql>
            SELECT WZ.IdWhs,
                   WZ.IdWorkZone,
                   WZ.Description,
                   WZ.WorkZoneName,
			             W.WhsCode,
			             W.ShortWhsName,
			             W.WhsName,
			             ISNULL(T.Valid, 0) AS IsAssignedZoneItem 
              FROM WorkZone WZ
              JOIN Warehouse W
                ON W.IdWhs = WZ.IdWhs
        LEFT JOIN (
				              SELECT 
					                  I.IdGrpItem1,
					                  WZI.IdWorkZone,
					                  1 AS Valid 
				               FROM WorkZoneItem WZI 
				               JOIN Item I 
				                 ON WZI.IdItem = I.IdItem 
			             GROUP BY I.IdGrpItem1, 
					                  WZI.IdWorkZone
		              ) 
		            T ON WZ.IdWorkZone = T.IdWorkZone 
	               AND T.IdGrpItem1 = @IdGrpItem1 
               WHERE WZ.IdWhs = @IdWhs
			   AND (WZ.TypeZone = 1 OR WZ.TypeZone = 5);
    </sql>
    <parameters>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdGrpItem1</parameter>
    </parameters>
  </query>
  
  <query code="WorkZone_GetByIdWhsAndIdGrpItem2">
    <sql>
            SELECT WZ.IdWhs,
                   WZ.IdWorkZone,
                   WZ.Description,
                   WZ.WorkZoneName,
			             W.WhsCode,
			             W.ShortWhsName,
			             W.WhsName,
			             ISNULL(T.Valid, 0) AS IsAssignedZoneItem 
              FROM WorkZone WZ
              JOIN Warehouse W
                ON W.IdWhs = WZ.IdWhs
        LEFT JOIN (
				              SELECT 
					                  I.IdGrpItem1,
                            I.IdGrpItem2,
					                  WZI.IdWorkZone,
					                  1 AS Valid 
				               FROM WorkZoneItem WZI 
				               JOIN Item I 
				                 ON WZI.IdItem = I.IdItem 
			             GROUP BY I.IdGrpItem1, 
                            I.IdGrpItem2,
					                  WZI.IdWorkZone
		              ) 
		            T ON WZ.IdWorkZone = T.IdWorkZone 
	               AND T.IdGrpItem1 = @IdGrpItem1 
                 AND T.IdGrpItem2 = @IdGrpItem2
               WHERE WZ.IdWhs = @IdWhs
			   AND (WZ.TypeZone = 1 OR WZ.TypeZone = 5);
    </sql>
    <parameters>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdGrpItem1</parameter>
      <parameter type="Int">IdGrpItem2</parameter>
    </parameters>
  </query>
  
  <query code="WorkZone_GetByIdWhsAndIdGrpItem3">
    <sql>
            SELECT WZ.IdWhs,
                   WZ.IdWorkZone,
                   WZ.WorkZoneName,
                   WZ.Description,
			             W.WhsCode,
			             W.ShortWhsName,
			             W.WhsName,
			             ISNULL(T.Valid, 0) AS IsAssignedZoneItem 
              FROM WorkZone WZ
              JOIN Warehouse W
                ON W.IdWhs = WZ.IdWhs
        LEFT JOIN (
				              SELECT 
					                  I.IdGrpItem1,
                            I.IdGrpItem2,
                            I.IdGrpItem3, 
					                  WZI.IdWorkZone,
					                  1 AS Valid 
				               FROM WorkZoneItem WZI 
				               JOIN Item I 
				                 ON WZI.IdItem = I.IdItem 
			             GROUP BY I.IdGrpItem1, 
                            I.IdGrpItem2,
                            I.IdGrpItem3, 
					                  WZI.IdWorkZone
		              ) 
		            T ON WZ.IdWorkZone = T.IdWorkZone 
	               AND T.IdGrpItem1 = @IdGrpItem1 
                 AND T.IdGrpItem2 = @IdGrpItem2
                 AND T.IdGrpItem3 = @IdGrpItem3
               WHERE WZ.IdWhs = @IdWhs
			   AND (WZ.TypeZone = 1 OR WZ.TypeZone = 5);
    </sql>
    <parameters>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdGrpItem1</parameter>
      <parameter type="Int">IdGrpItem2</parameter>
      <parameter type="Int">IdGrpItem3</parameter>
    </parameters>
  </query>
  
  <query code="WorkZone_GetByIdWhsAndIdGrpItem4">
    <sql>
            SELECT WZ.IdWhs,
                   WZ.IdWorkZone,
                   WZ.WorkZoneName,
                   WZ.Description,
			             W.WhsCode,
			             W.ShortWhsName,
			             W.WhsName,
			             ISNULL(T.Valid, 0) AS IsAssignedZoneItem 
              FROM WorkZone WZ
              JOIN Warehouse W
                ON W.IdWhs = WZ.IdWhs
        LEFT JOIN (
				              SELECT 
					                  I.IdGrpItem1,
                            I.IdGrpItem2,
                            I.IdGrpItem3, 
                            I.IdGrpItem4, 
					                  WZI.IdWorkZone,
					                  1 AS Valid 
				               FROM WorkZoneItem WZI 
				               JOIN Item I 
				                 ON WZI.IdItem = I.IdItem 
			             GROUP BY I.IdGrpItem1, 
                            I.IdGrpItem2,
                            I.IdGrpItem3, 
                            I.IdGrpItem4, 
					                  WZI.IdWorkZone
		              ) 
		            T ON WZ.IdWorkZone = T.IdWorkZone 
	               AND T.IdGrpItem1 = @IdGrpItem1 
                 AND T.IdGrpItem2 = @IdGrpItem2
                 AND T.IdGrpItem3 = @IdGrpItem3
                 AND T.IdGrpItem4 = @IdGrpItem4
               WHERE WZ.IdWhs = @IdWhs
			   AND (WZ.TypeZone = 1 OR WZ.TypeZone = 5);
    </sql>
    <parameters>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdGrpItem1</parameter>
      <parameter type="Int">IdGrpItem2</parameter>
      <parameter type="Int">IdGrpItem3</parameter>
      <parameter type="Int">IdGrpItem4</parameter>
    </parameters>
  </query>

  <query code="WorkZoneItem_DeleteByIgGroups">
    <sql>
      DELETE FROM WorkZoneItem
            WHERE IdWorkZone = @idWorkZone
              AND EXISTS (
                           SELECT 1
                             FROM Item I
                            WHERE I.IdItem = WorkZoneItem.IdItem
                              AND ((I.IdGrpItem1 = @idGrpItem1 AND @idGrpItem1 &lt;&gt; -2) OR (@idGrpItem1 = -2))
                              AND ((I.IdGrpItem2 = @idGrpItem2 AND @idGrpItem2 &lt;&gt; -2) OR (@idGrpItem2 = -2))
                              AND ((I.IdGrpItem3 = @idGrpItem3 AND @idGrpItem3 &lt;&gt; -2) OR (@idGrpItem3 = -2))
                              AND ((I.IdGrpItem4 = @idGrpItem4 AND @idGrpItem4 &lt;&gt; -2) OR (@idGrpItem4 = -2))
                              AND ((I.IdOwn = @idOwn AND @idOwn &lt;&gt; -2) OR (@idOwn = -2))
                        )
    </sql>
    <parameters>
      <parameter type="Int">idWorkZone</parameter>
      <parameter type="Int">idGrpItem1</parameter>
      <parameter type="Int">idGrpItem2</parameter>
      <parameter type="Int">idGrpItem3</parameter>
      <parameter type="Int">idGrpItem4</parameter>
      <parameter type="Int">idOwn</parameter>
    </parameters>
  </query>
  
  <query code="WorkZoneItem_InsertByIgGroups">
    <sql>
      INSERT INTO WorkZoneItem (IdWorkZone, IdItem, DateCreated, UserCreated)
              SELECT @idWorkZone, 
                     IdItem,
                     GETDATE(),
                     @userCreated
                FROM Item I
               WHERE ((I.IdGrpItem1 = @idGrpItem1 AND @idGrpItem1 &lt;&gt; -2) OR (@idGrpItem1 = -2))
                 AND ((I.IdGrpItem2 = @idGrpItem2 AND @idGrpItem2 &lt;&gt; -2) OR (@idGrpItem2 = -2))
                 AND ((I.IdGrpItem3 = @idGrpItem3 AND @idGrpItem3 &lt;&gt; -2) OR (@idGrpItem3 = -2))
                 AND ((I.IdGrpItem4 = @idGrpItem4 AND @idGrpItem4 &lt;&gt; -2) OR (@idGrpItem4 = -2))
                 AND ((I.IdOwn = @idOwn AND @idOwn &lt;&gt; -2) OR (@idOwn = -2))
    </sql>
    <parameters>
      <parameter type="Int">idWorkZone</parameter>
      <parameter type="Int">idGrpItem1</parameter>
      <parameter type="Int">idGrpItem2</parameter>
      <parameter type="Int">idGrpItem3</parameter>
      <parameter type="Int">idGrpItem4</parameter>
      <parameter type="Int">idOwn</parameter>
      <parameter type="String">userCreated</parameter>
    </parameters>
  </query>

  <query code="WorkZoneItem_DeleteAll">
    <sql>
      DELETE FROM WorkZoneItem
            WHERE IdWorkZone = @idWorkZone
    </sql>
    <parameters>
      <parameter type="Int">idWorkZone</parameter>
    </parameters>
  </query>

  <query code="WorkZoneItem_InsertAll">
    <sql>
      INSERT INTO WorkZoneItem (IdWorkZone, IdItem)
           SELECT @idWorkZone, IdItem
             FROM Item I
    </sql>
    <parameters>
      <parameter type="Int">idWorkZone</parameter>
    </parameters>
  </query>
  
  <query code="Vas_GetByIdOwn">
    <sql>
            SELECT V.IdOwn,
                   V.IdVas,
                   V.VasDescription,
                   V.VasName,
			             O.OwnCode,
			             O.OwnName,
                   C.CustomerCode,
				           C.CustomerName,
			             ISNULL(T.Valid, 0) AS IsAssignedVasItem 
              FROM Vas V
              JOIN Owner O
                ON V.IdOwn = O.IdOwn
         LEFT JOIN Customer C
                ON C.IdCustomer = V.IdCustomer
        LEFT JOIN (
				              SELECT 
					                  IV.IdVas,
					                  1 AS Valid 
				               FROM ItemVas IV 
				               JOIN Item I 
				                 ON IV.IdItem = I.IdItem 
			             GROUP BY IV.IdVas
		              ) 
		            T ON V.IdVas = T.IdVas 
               WHERE V.IdOwn = @IdOwn
    </sql>
    <parameters>
      <parameter type="Int">IdOwn</parameter>
    </parameters>
  </query>
  
  <query code="Vas_GetByIdOwnAndIdGrpItem1">
    <sql>
            SELECT V.IdOwn,
                   V.IdVas,
                   V.VasDescription,
                   V.VasName,
			             O.OwnCode,
			             O.OwnName,
                   C.CustomerCode,
				           C.CustomerName,
			             ISNULL(T.Valid, 0) AS IsAssignedVasItem 
              FROM Vas V
              JOIN Owner O
                ON V.IdOwn = O.IdOwn
         LEFT JOIN Customer C
                ON C.IdCustomer = V.IdCustomer
        LEFT JOIN (
				              SELECT 
					                  I.IdGrpItem1,
					                  IV.IdVas,
					                  1 AS Valid 
				               FROM ItemVas IV 
				               JOIN Item I 
				                 ON IV.IdItem = I.IdItem 
			             GROUP BY I.IdGrpItem1, 
					                  IV.IdVas
		              ) 
		            T ON V.IdVas = T.IdVas 
	               AND T.IdGrpItem1 = @IdGrpItem1 
               WHERE V.IdOwn = @IdOwn
    </sql>
    <parameters>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="Int">IdGrpItem1</parameter>
    </parameters>
  </query>
  
  <query code="Vas_GetByIdOwnAndIdGrpItem2">
    <sql>
            SELECT V.IdOwn,
                   V.IdVas,
                   V.VasDescription,
                   V.VasName,
			             O.OwnCode,
			             O.OwnName,
                   C.CustomerCode,
				           C.CustomerName,
			             ISNULL(T.Valid, 0) AS IsAssignedVasItem 
              FROM Vas V
              JOIN Owner O
                ON V.IdOwn = O.IdOwn
         LEFT JOIN Customer C
                ON C.IdCustomer = V.IdCustomer
        LEFT JOIN (
				              SELECT 
					                  I.IdGrpItem1,
                            I.IdGrpItem2,
					                  IV.IdVas,
					                  1 AS Valid 
				               FROM ItemVas IV 
				               JOIN Item I 
				                 ON IV.IdItem = I.IdItem 
			             GROUP BY I.IdGrpItem1, 
                            I.IdGrpItem2,
					                  IV.IdVas
		              ) 
		            T ON V.IdVas = T.IdVas 
	               AND T.IdGrpItem1 = @IdGrpItem1 
                 AND T.IdGrpItem2 = @IdGrpItem2
               WHERE V.IdOwn = @IdOwn
    </sql>
    <parameters>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="Int">IdGrpItem1</parameter>
      <parameter type="Int">IdGrpItem2</parameter>
    </parameters>
  </query>
  
  <query code="Vas_GetByIdOwnAndIdGrpItem3">
    <sql>
            SELECT V.IdOwn,
                   V.IdVas,
                   V.VasDescription,
                   V.VasName,
			             O.OwnCode,
			             O.OwnName,
                   C.CustomerCode,
				           C.CustomerName,
			             ISNULL(T.Valid, 0) AS IsAssignedVasItem 
              FROM Vas V
              JOIN Owner O
                ON V.IdOwn = O.IdOwn
         LEFT JOIN Customer C
                ON C.IdCustomer = V.IdCustomer
        LEFT JOIN (
				              SELECT 
					                  I.IdGrpItem1,
                            I.IdGrpItem2,
                            I.IdGrpItem3, 
					                  IV.IdVas,
					                  1 AS Valid 
				               FROM ItemVas IV 
				               JOIN Item I 
				                 ON IV.IdItem = I.IdItem 
			             GROUP BY I.IdGrpItem1, 
                            I.IdGrpItem2,
                            I.IdGrpItem3, 
					                  IV.IdVas
		              ) 
		            T ON V.IdVas = T.IdVas 
	               AND T.IdGrpItem1 = @IdGrpItem1 
                 AND T.IdGrpItem2 = @IdGrpItem2
                 AND T.IdGrpItem3 = @IdGrpItem3
               WHERE V.IdOwn = @IdOwn
    </sql>
    <parameters>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="Int">IdGrpItem1</parameter>
      <parameter type="Int">IdGrpItem2</parameter>
      <parameter type="Int">IdGrpItem3</parameter>
    </parameters>
  </query>
  
  <query code="Vas_GetByIdOwnAndIdGrpItem4">
    <sql>
            SELECT V.IdOwn,
                   V.IdVas,
                   V.VasDescription,
                   V.VasName,
			             O.OwnCode,
			             O.OwnName,
                   C.CustomerCode,
				           C.CustomerName,
			             ISNULL(T.Valid, 0) AS IsAssignedVasItem 
              FROM Vas V
              JOIN Owner O
                ON V.IdOwn = O.IdOwn
         LEFT JOIN Customer C
                ON C.IdCustomer = V.IdCustomer
        LEFT JOIN (
				              SELECT 
					                  I.IdGrpItem1,
                            I.IdGrpItem2,
                            I.IdGrpItem3, 
                            I.IdGrpItem4, 
					                  IV.IdVas,
					                  1 AS Valid 
				               FROM ItemVas IV 
				               JOIN Item I 
				                 ON IV.IdItem = I.IdItem 
			             GROUP BY I.IdGrpItem1, 
                            I.IdGrpItem2,
                            I.IdGrpItem3, 
                            I.IdGrpItem4,
					                  IV.IdVas
		              ) 
		            T ON V.IdVas = T.IdVas 
	               AND T.IdGrpItem1 = @IdGrpItem1 
                 AND T.IdGrpItem2 = @IdGrpItem2
                 AND T.IdGrpItem3 = @IdGrpItem3
                 AND T.IdGrpItem4 = @IdGrpItem4
               WHERE V.IdOwn = @IdOwn
    </sql>
    <parameters>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="Int">IdGrpItem1</parameter>
      <parameter type="Int">IdGrpItem2</parameter>
      <parameter type="Int">IdGrpItem3</parameter>
      <parameter type="Int">IdGrpItem4</parameter>
    </parameters>
  </query>
  
  <query code="Vas_DeleteByIgGroups">
    <sql>
      DELETE FROM ItemVas
            WHERE IdVas = @idVas
              AND EXISTS (
                           SELECT 1
                             FROM Item I
                            WHERE I.IdItem = ItemVas.IdItem
                              AND ((I.IdGrpItem1 = @idGrpItem1 AND @idGrpItem1 &lt;&gt; -2) OR (@idGrpItem1 = -2))
                              AND ((I.IdGrpItem2 = @idGrpItem2 AND @idGrpItem2 &lt;&gt; -2) OR (@idGrpItem2 = -2))
                              AND ((I.IdGrpItem3 = @idGrpItem3 AND @idGrpItem3 &lt;&gt; -2) OR (@idGrpItem3 = -2))
                              AND ((I.IdGrpItem4 = @idGrpItem4 AND @idGrpItem4 &lt;&gt; -2) OR (@idGrpItem4 = -2))
                              AND ((I.IdOwn = @idOwn AND @idOwn &lt;&gt; -2) OR (@idOwn = -2))
                        )
    </sql>
    <parameters>
      <parameter type="Int">idVas</parameter>
      <parameter type="Int">idGrpItem1</parameter>
      <parameter type="Int">idGrpItem2</parameter>
      <parameter type="Int">idGrpItem3</parameter>
      <parameter type="Int">idGrpItem4</parameter>
      <parameter type="Int">idOwn</parameter>
    </parameters>
  </query>
  
  <query code="Vas_InsertByIgGroups">
    <sql>
      INSERT INTO ItemVas (IdVas, IdItem, Secuence, DateCreated, UserCreated)
              SELECT @idVas, 
                     IdItem,
                     ROW_NUMBER() OVER(Partition by IdItem ORDER BY IdItem) AS Secuence,
                     GETDATE(),
                     @userCreated
                FROM Item I
               WHERE ((I.IdGrpItem1 = @idGrpItem1 AND @idGrpItem1 &lt;&gt; -2) OR (@idGrpItem1 = -2))
                 AND ((I.IdGrpItem2 = @idGrpItem2 AND @idGrpItem2 &lt;&gt; -2) OR (@idGrpItem2 = -2))
                 AND ((I.IdGrpItem3 = @idGrpItem3 AND @idGrpItem3 &lt;&gt; -2) OR (@idGrpItem3 = -2))
                 AND ((I.IdGrpItem4 = @idGrpItem4 AND @idGrpItem4 &lt;&gt; -2) OR (@idGrpItem4 = -2))
                 AND ((I.IdOwn = @idOwn AND @idOwn &lt;&gt; -2) OR (@idOwn = -2))
    </sql>
    <parameters>
      <parameter type="Int">idVas</parameter>
      <parameter type="Int">idGrpItem1</parameter>
      <parameter type="Int">idGrpItem2</parameter>
      <parameter type="Int">idGrpItem3</parameter>
      <parameter type="Int">idGrpItem4</parameter>
      <parameter type="Int">idOwn</parameter>
      <parameter type="String">userCreated</parameter>
    </parameters>
  </query>

  <query code="Item_DeleteCustomRulesByWhs">
    <sql>
      DELETE cri 
        FROM CustomRuleItem cri
        JOIN CustomRule cr
          ON cri.IdCustomRule = cr.IdCustomRule
       WHERE cri.IdItem = @idItem
         AND cr.IdWhs = @idWhs
    </sql>
    <parameters>
      <parameter type="Int">idItem</parameter>
      <parameter type="Int">idWhs</parameter>
    </parameters>
  </query>
  
  <query code="User_GetByUserName">
      <sql>
        SELECT  IdUserWms,
                UserName,
                Password,
                FirstName,
                LastName,
                WorkPhone,
                Email,
                IsBaseUser,
                CodStatus,
                l.IdLanguage,
                l.Name AS Language,
                l.CodeBase,
                FailedAttempts
        FROM CfgUserWms u
        LEFT JOIN CfgLanguage l ON u.IdLanguage = l.idLanguage
        WHERE UserName = @username
      </sql>
      <parameters>
        <parameter type="String">username</parameter>
      </parameters>
    </query>
  
    <query code="User_AddOneFailedAttemptToUser">
        <sql>
          UPDATE CfgUserWms 
             SET
                FailedAttempts = FailedAttempts + 1
          WHERE IdUserWms = @idUserWms
        </sql>
        <parameters>
          <parameter type="Int">idUserWms</parameter>
        </parameters>
      </query>
  
      <query code="User_BlockUser">
        <sql>
          UPDATE CfgUserWms 
             SET
                CodStatus = @enableUser
          WHERE IdUserWms = @idUserWms
        </sql>
        <parameters>
          <parameter type="Int">idUserWms</parameter>
          <parameter type="Boolean">enableUser</parameter>
        </parameters>
      </query>
  
      <query code="User_ResetFailedAttemptToUser">
        <sql>
          UPDATE CfgUserWms 
             SET
                FailedAttempts = 0
          WHERE IdUserWms = @idUserWms
        </sql>
        <parameters>
          <parameter type="Int">idUserWms</parameter>
        </parameters>
      </query>
  
    <query code="SerialHeader_FindAll">
        <sql>
        SELECT  S.IdSerial,
		            S.IdOwn,
		            S.IdWhs,
		            S.SerialNumber,
		            S.IdTrackSerialType,
		            S.IdInboundOrderLast,
		            S.IdReceiptLast,
		            S.IdOutboundOrderLast,
		            S.IdDispatchLast,
		            W.WhsCode,
		            W.ShortWhsName,
		            O.OwnCode,
		            O.OwnName,
		            TS.NameTrackSerialType,
		            IO.InboundNumber,
		            IOT.InboundTypeCode,
		            IOT.InboundTypeName,
		            R.ReceiptDate,
		            RT.ReceiptTypeCode,
		            RT.ReceiptTypeName,
		            OO.OutboundNumber,
		            OOT.OutboudTypeCode,
		            OOT.OutboundTypeName,
		            D.TrackOutboundDate,
		            DT.DispatchTypeCode,
		            DT.DispatchTypeName,
                S.DateCreated,
		            I.ItemCode,
		            I.Description,
                ST.IdLpnCode,
		            ST.ItemQty,
		            ST.IdLocCode
	         FROM Serial S
           JOIN Item I
	           ON S.IdItem = I.IdItem
            AND S.IdOwn = I.IdOwn 
	         JOIN Warehouse W
		         ON S.IdWhs = W.IdWhs 
	         JOIN Owner O
		         ON O.IdOwn = S.IdOwn
	         JOIN TrackSerialType TS
		         ON TS.IdTrackSerialType = S.IdTrackSerialType
      LEFT JOIN InboundOrder IO
             ON IO.IdInboundOrder = S.IdInboundOrderLast
      LEFT JOIN InboundType IOT
             ON IOT.IdInboundType = IO.IdInboundType
      LEFT JOIN Receipt R
             ON R.IdReceipt = S.IdReceiptLast
      LEFT JOIN ReceiptType RT
             ON RT.IdReceiptType = R.IdReceiptType
      LEFT JOIN OutboundOrder OO
             ON OO.IdOutboundOrder = S.IdOutboundOrderLast
      LEFT JOIN OutboundType OOT
             ON OOT.IdOutboundType = OO.IdOutboundType
      LEFT JOIN Dispatch D
             ON D.IdDispatch = S.IdDispatchLast
      LEFT JOIN DispatchType DT
             ON DT.IdDispatchType = D.IdDispatchType
      LEFT JOIN Stock ST
             ON ST.StockId = S.IdStockLast

          @SQLPart

          ORDER BY S.DateCreated DESC;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>

        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>

        <filters>
          <filter name="Warehouse" type="numericIn">S.IdWhs</filter>
          <filter name="Item" type="textLike">i.ItemCode</filter>
          <filter name="Owner" type="numericIn">S.IdOwn</filter>
          <filter name="DocumentNbr" type="textLikeOr">IO.InboundNumber,OO.OutboundNumber</filter>
          <filter name="CodeAlt" type="textLike">s.SerialNumber</filter>
          <filter name="DateRange" type="textBetween">S.DateCreated</filter>
        </filters>
      </query>
  
      <query code="SerialTrack_GetBySerial">
        <sql>
          SELECT
                 ST.IdMovementType,
                 ST.MovementDate,
	               MT.MovementName,
	               ST.IdLpnCodeSource,
	               ST.IdLpnCodeTarget,
	               ST.IdLocCodeSource,
	               ST.IdLocCodeTarget,
                 ST.UserName
            FROM SerialTrack ST
            JOIN MovementType MT
              ON MT.IdMovementType = ST.IdMovementType   
           WHERE ST.IdSerial = @IdSerial
        ORDER BY ST.MovementDate DESC
        </sql>
        <parameters>
          <parameter type="Int">IdSerial</parameter>
        </parameters>
      </query>

  <query code="InsertReceiptWithStateInterface">
    <sql>
      INSERT INTO Receipt
      (IdReceipt,
      ReceiptDate,
      Status,
      IdInboundOrder,
      ReferenceDoc,
      IdReceiptType,
      IdReferenceDocType,
      IdLocationForkLift,
      IdLocationStage,
      IdTruckCode,
      UserWms,
      IdWhs,
      SpecialField1,
      SpecialField2,
      SpecialField3,
      SpecialField4,
      DateCreated,
      UserCreated,
      StateInterface)
      VALUES
      (@IdReceipt,
      @ReceiptDate,
      @Status,
      @IdInboundOrder,
      @ReferenceDoc,
      @IdReceiptType,
      @IdReferenceDocType,
      @IdLocationForkLift,
      @IdLocationStage,
      @IdTruckCode,
      @UserWms,
      @IdWhs,
      @SpecialField1,
      @SpecialField2,
      @SpecialField3,
      @SpecialField4,
      @DateCreated,
      @UserCreated,
      @StateInterface)
    </sql>
    <parameters>
      <parameter type="Int">IdReceipt</parameter>
      <parameter type="DateTime">ReceiptDate</parameter>
      <parameter type="Boolean">Status</parameter>
      <parameter type="Int">IdInboundOrder</parameter>
      <parameter type="String">ReferenceDoc</parameter>
      <parameter type="Int">IdReceiptType</parameter>
      <parameter type="Int">IdReferenceDocType</parameter>
      <parameter type="String">IdLocationForkLift</parameter>
      <parameter type="String">IdLocationStage</parameter>
      <parameter type="String">IdTruckCode</parameter>
      <parameter type="String">UserWms</parameter>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="String">SpecialField1</parameter>
      <parameter type="String">SpecialField2</parameter>
      <parameter type="String">SpecialField3</parameter>
      <parameter type="String">SpecialField4</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
      <parameter type="String">StateInterface</parameter>
    </parameters>
  </query>

  <query code="InsertReceiptDetail">
    <sql>
      INSERT INTO ReceiptDetail
      (IdReceiptDetail,
      IdReceipt,
      LineNumber,
      IdItem,
      IdCtgItem,
      ItemQty,
      FifoDate,
      ExpirationDate,
      FabricationDate,
      LotNumber,
      IdLpnCode,
      Price,
      GrpClass1,
      GrpClass2,
      GrpClass3,
      GrpClass4,
      GrpClass5,
      GrpClass6,
      GrpClass7,
      GrpClass8,
      SpecialField1,
      SpecialField2,
      SpecialField3,
      SpecialField4,
      DateCreated,
      UserCreated,
      LpnWeightTotal,
      LpnVolumeTotal)
      VALUES
      (@IdReceiptDetail,
      @IdReceipt,
      @LineNumber,
      @IdItem,
      @IdCtgItem,
      @ItemQty,
      @FifoDate,
      @ExpirationDate,
      @FabricationDate,
      @LotNumber,
      @IdLpnCode,
      @Price,
      @GrpClass1,
      @GrpClass2,
      @GrpClass3,
      @GrpClass4,
      @GrpClass5,
      @GrpClass6,
      @GrpClass7,
      @GrpClass8,
      @SpecialField1,
      @SpecialField2,
      @SpecialField3,
      @SpecialField4,
      @DateCreated,
      @UserCreated,
      @LpnWeightTotal,
      @LpnVolumeTotal)
    </sql>
    <parameters>
      <parameter type="Int">IdReceiptDetail</parameter>
      <parameter type="Int">IdReceipt</parameter>
      <parameter type="Int">LineNumber</parameter>
      <parameter type="Int">IdItem</parameter>
      <parameter type="Int">IdCtgItem</parameter>
      <parameter type="Decimal">ItemQty</parameter>
      <parameter type="DateTime">FifoDate</parameter>
      <parameter type="DateTime">ExpirationDate</parameter>
      <parameter type="DateTime">FabricationDate</parameter>
      <parameter type="String">LotNumber</parameter>
      <parameter type="String">IdLpnCode</parameter>
      <parameter type="Decimal">Price</parameter>
      <parameter type="String">GrpClass1</parameter>
      <parameter type="String">GrpClass2</parameter>
      <parameter type="String">GrpClass3</parameter>
      <parameter type="String">GrpClass4</parameter>
      <parameter type="String">GrpClass5</parameter>
      <parameter type="String">GrpClass6</parameter>
      <parameter type="String">GrpClass7</parameter>
      <parameter type="String">GrpClass8</parameter>
      <parameter type="String">SpecialField1</parameter>
      <parameter type="String">SpecialField2</parameter>
      <parameter type="String">SpecialField3</parameter>
      <parameter type="String">SpecialField4</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
      <parameter type="Decimal">LpnWeightTotal</parameter>
      <parameter type="Decimal">LpnVolumeTotal</parameter>
    </parameters>
  </query>

  <query code="CfgParameterOwner_ByOwner">
    <sql>
      SELECT     
             Wo.IdOwn
            ,Wo.OwnName
            ,Wo.IdParameter
            ,Wo.IdModule
            ,m.Name AS ModuleName
            ,Wo.ParameterCode
            ,Wo.Description
            ,Wo.ParameterValue
            ,Wo.Type
            ,Wo.MinValue
            ,Wo.MaxValue
            ,Wo.DefaultValue
            ,Wo.AllowEdit
            ,Wo.AllowDisplay
            ,Wo.Scope
            ,Wo.DateCreated
            ,Wo.UserCreated
            ,Wo.DateModified
            ,Wo.UserModified
       FROM v_Cfg_WmsOwnerParamByOwn Wo
       JOIN CfgModule m 
         ON Wo.IdModule = m.IdModule
      WHERE IdOwn = @IdOwn
        AND Wo.ParameterCode = @ParameterCode 
    </sql>
    <parameters>
      <parameter type="Int">IdOwn</parameter>
      <parameter type="String">ParameterCode</parameter>
    </parameters>
  </query>

  <query code="CustomRule_GetByWhsAndProcess">
    <sql>
      SELECT  
            CR.IdCustomRule, 
            CR.Name
       FROM CustomRule CR
      WHERE CR.IdWhs = @IdWhs
        AND CR.IdWmsProcessCode = @IdWmsProcessCode
    </sql>
    <parameters>
      <parameter type="String">IdWmsProcessCode</parameter>
      <parameter type="Int">IdWhs</parameter>
    </parameters>
  </query>

  <query code="RulesByOrder_DeleteByOrder">
    <sql>
      DELETE FROM RulesByOrder
            WHERE IdOutboundOrder = @IdOutboundOrder
              AND IdItem IS NULL
    </sql>
    <parameters>
      <parameter type="Int">IdOutboundOrder</parameter>
    </parameters>
  </query>

  <query code="RulesByOrder_Insert">
    <sql>
      INSERT INTO RulesByOrder
      (IdOutboundOrder,
      IdCustomRule,
      IdItem)
      VALUES
      (@IdOutboundOrder,
      @IdCustomRule,
      @IdItem)
    </sql>
    <parameters>
      <parameter type="Int">IdOutboundOrder</parameter>
      <parameter type="Int">IdCustomRule</parameter>
      <parameter type="Int">IdItem</parameter>
    </parameters>
  </query>

  <query code="RulesByOrder_DeleteByOrderAndItem">
    <sql>
      DELETE FROM RulesByOrder
       WHERE IdOutboundOrder = @IdOutboundOrder
         AND IdItem = @IdItem
    </sql>
    <parameters>
      <parameter type="Int">IdOutboundOrder</parameter>
      <parameter type="Int">IdItem</parameter>
    </parameters>
  </query>

  <query code="GetRulesByOutboundOrder">
    <sql>
      SELECT R.IdRule,
		         R.RuleCode,
		         R.Status,
		         R.[Name],
		         R.NameSpace
	      FROM RulesByOrder RO
	      JOIN GroupRule GR
		      ON RO.IdCustomRule = GR.IdCustomRule
	      JOIN [Rule] R 
		      ON GR.IdRule = R.IdRule
	      JOIN CustomRule CR
          ON RO.IdCustomRule = CR.IdCustomRule
       WHERE CR.IdWmsProcessCode = @IdWmsProcessCode
         AND CR.Idwhs = @IdWhs
	       AND RO.IdOutboundOrder = @IdOutboundOrder
	       AND RO.IdItem IS NULL
    ORDER BY GR.SequenceExecution ASC
    </sql>
    <parameters>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdOutboundOrder</parameter>
      <parameter type="String">IdWmsProcessCode</parameter>
    </parameters>
  </query>
  
  <query code="GetRulesByOutboundOrderAndItem">
    <sql>
      SELECT R.IdRule,
		         R.RuleCode,
		         R.Status,
		         R.[Name],
		         R.NameSpace
	      FROM RulesByOrder RO
	      JOIN GroupRule GR
		      ON RO.IdCustomRule = GR.IdCustomRule
	      JOIN [Rule] R 
		      ON GR.IdRule = R.IdRule
	      JOIN CustomRule CR
          ON RO.IdCustomRule = CR.IdCustomRule
       WHERE CR.IdWmsProcessCode = @IdWmsProcessCode
         AND CR.Idwhs = @IdWhs
	       AND RO.IdOutboundOrder = @IdOutboundOrder
	       AND RO.IdItem = @IdItem
    ORDER BY GR.SequenceExecution ASC
    </sql>
    <parameters>
      <parameter type="Int">IdWhs</parameter>
      <parameter type="Int">IdOutboundOrder</parameter>
      <parameter type="Int">IdItem</parameter>
      <parameter type="String">IdWmsProcessCode</parameter>
    </parameters>
  </query>

  <query code="RulesByOrder_DeleteAllByOrder">
    <sql>
      DELETE FROM RulesByOrder
      WHERE IdOutboundOrder = @IdOutboundOrder
    </sql>
    <parameters>
      <parameter type="Int">IdOutboundOrder</parameter>
    </parameters>
  </query>

  <query code="RulesByOrder_DeleteAllByWave">
    <sql>
      DELETE FROM RulesByOrder
            WHERE IdOutboundOrder IN (
							      SELECT   
									         DISTINCT(IdOutboundOrder)
								      FROM Task T 
								      JOIN TaskOutboundOrder TOO 
								        ON T.IdTask = TOO.IdTask
							       WHERE T.TaskTypeCode = 'PIKWV'
								       AND T.IdOwn = @idOwn
								       AND T.IdWhs = @idWhs
								       AND T.IdDocumentBound = @idWave
            )
    </sql>
    <parameters>
      <parameter type="Int">idWave</parameter>
      <parameter type="Int">idOwn</parameter>
      <parameter type="Int">idWhs</parameter>
    </parameters>
  </query>
  
  <query code="ReasonLogicalWarehouse_GetByWarehouseCode">
    <sql>
      SELECT Id,
             WarehouseCode,
             ReasonCode,
             DateCreated,
             UserCreated,
             DateModified,
             UserModified
        FROM ReasonLogicalWarehouse
       WHERE WarehouseCode = @WarehouseCode
    </sql>
    <parameters>
      <parameter type="String">WarehouseCode</parameter>
    </parameters>
  </query>

  <query code="LogicalWarehouse_GetAllLogicalWarehousesHaveReasonsAssociated">
    <sql>
     SELECT Id,
            WarehouseCode,
            Description,
            HasReasonsAssociated,
            DateCreated,
            UserCreated,
            DateModified,
            UserModified
      FROM LogicalWarehouse
      WHERE HasReasonsAssociated = @HasReasonsAssociated
            @SQLPart
    </sql>
    <parameters>
      <parameter type="Boolean">HasReasonsAssociated</parameter>
      <parameter type="SQLPart">@SQLPart</parameter>
    </parameters>
    <filters>
      <filter name="LogicalWarehouse" type="textEqual">WarehouseCode</filter>
    </filters>
  </query>

  <query code="LogicalWarehouse_GetAllLogicalWarehouses">
    <sql>
      SELECT Id,
             WarehouseCode,
             Description,
             HasReasonsAssociated,
             DateCreated,
             UserCreated,
             DateModified,
             UserModified
        FROM LogicalWarehouse
    </sql>
    <parameters>
    </parameters>
  </query>
  
  <query code="ReasonLogicalWarehouse_Delete">
    <sql>
      DELETE FROM ReasonLogicalWarehouse WHERE Id = @Id;
    </sql>
    <parameters>
      <parameter type="Int">Id</parameter>
    </parameters>
  </query>

  <query code="ReasonLogicalWarehouse_GetByDistinctWarehouseCode">
    <sql>
      SELECT Id,
             WarehouseCode,
             ReasonCode,
             DateCreated,
             UserCreated,
             DateModified,
             UserModified
        FROM ReasonLogicalWarehouse
       WHERE WarehouseCode &lt; &gt; @WarehouseCode
         AND ReasonCode = @ReasonCode
    </sql>
    <parameters>
      <parameter type="String">WarehouseCode</parameter>
      <parameter type="String">ReasonCode</parameter>
    </parameters>
  </query>

  <query code="ReasonLogicalWarehouse_DeleteByLogicalWarehouse">
    <sql>
      DELETE FROM ReasonLogicalWarehouse WHERE WarehouseCode = @WarehouseCode;
    </sql>
    <parameters>
      <parameter type="String">WarehouseCode</parameter>
    </parameters>
  </query>

  <query code="ReasonLogicalWarehouse_Insert">
    <sql>
      INSERT INTO ReasonLogicalWarehouse
      (Id
      ,WarehouseCode
      ,ReasonCode
      ,DateCreated
      ,UserCreated)
      VALUES
      (@Id
      ,@WarehouseCode
      ,@ReasonCode
      ,@DateCreated
      ,@UserCreated)
    </sql>
    <parameters>
      <parameter type="Int">Id</parameter>
      <parameter type="String">WarehouseCode</parameter>
      <parameter type="String">ReasonCode</parameter>
      <parameter type="DateTime">DateCreated</parameter>
      <parameter type="String">UserCreated</parameter>
    </parameters>
  </query>

</querys>
