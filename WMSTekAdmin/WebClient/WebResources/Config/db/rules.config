<?xml version="1.0"?>

 <querys>

   <query code="LOCPUTGenericRule">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       WHERE L.IdWhs = 1
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND NOT EXISTS(SELECT S.IdLocCode
       FROM Stock S
       WHERE S.IdLocCode = L.IdLocCode)
       GROUP BY  L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       HAVING L.CapacityLPN > (SELECT COUNT(DISTINCT S.IdLpnCode) FROM Stock S WHERE IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Int">idOwn</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Decimal">totalWeight</parameter>
       <parameter type="Decimal">totalVolumen</parameter>
       <parameter type="DateTime">fifoDate</parameter>
       <parameter type="DateTime">expirationDate</parameter>
       <parameter type="DateTime">fabricationDate</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="String">idLpnCode</parameter>
       <parameter type="String">idLpnCodeContainer</parameter>
       <parameter type="Int">idInboundOrder</parameter>
       <parameter type="Int">idOutboundOrder</parameter>
       <parameter type="String">outboundType</parameter>
       <parameter type="String">holdCode</parameter>
       <parameter type="String">idForklift</parameter>
       <parameter type="String">idUser</parameter>
     </parameters>
   </query>
   
   
   <!-- PUTAWAY RULES section  -->   
   <query code="LOCPUTEmptyNoZone">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND NOT EXISTS(SELECT S.IdLocCode
       FROM Stock S
       WHERE S.IdLocCode = L.IdLocCode)
       GROUP BY  L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       HAVING L.CapacityLPN > (SELECT COUNT(DISTINCT S.IdLpnCode) FROM Stock S WHERE IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
     </parameters>
   </query>

   <query code="LOCPUTEmptyZone">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
       WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND WZI.IdItem = @idItem
       AND NOT EXISTS(SELECT S.IdLocCode
       FROM Stock S
       WHERE S.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
       FROM WorkZoneForkLift WZF INNER JOIN
       WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE WZF.IdLocCode = @idForkLift
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY  L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       HAVING L.CapacityLPN > (SELECT COUNT(DISTINCT S.IdLpnCode) FROM Stock S WHERE IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPUTItemNoZone">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Stock S ON L.IdLocCode = S.IdLocCode
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND S.IdItem = @idItem
       AND S.HoldCode IS NULL
       GROUP BY  L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       HAVING L.CapacityLPN > (SELECT COUNT(DISTINCT S.IdLpnCode) FROM Stock S WHERE IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
     </parameters>
   </query>

   <query code="LOCPUTItemZone">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
       WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
       Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND S.IdItem = @idItem
       AND S.HoldCode IS NULL
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
       FROM WorkZoneForkLift WZF INNER JOIN
       WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE WZF.IdLocCode = @idForkLift
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY  L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       HAVING L.CapacityLPN > (SELECT COUNT(DISTINCT S.IdLpnCode) FROM Stock S WHERE IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPUTItemLoteNoZone">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Stock S ON L.IdLocCode = S.IdLocCode
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND S.IdItem = @idItem
       AND S.LotNumber = @lotNumber
       AND S.HoldCode IS NULL
       GROUP BY  L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       HAVING L.CapacityLPN > (SELECT COUNT(DISTINCT S.IdLpnCode) FROM Stock S WHERE IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="String">lotNumber</parameter>
     </parameters>
   </query>

   <query code="LOCPUTItemLoteZone">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
       WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
       Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND S.IdItem = @idItem
       AND S.LotNumber = @lotNumber
       AND S.HoldCode IS NULL
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
       FROM WorkZoneForkLift WZF INNER JOIN
       WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE WZF.IdLocCode = @idForkLift
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY  L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       HAVING L.CapacityLPN > (SELECT COUNT(DISTINCT S.IdLpnCode) FROM Stock S WHERE IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPICKEmptyNoZone">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PICK'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND NOT EXISTS(SELECT S.IdLocCode 
                        FROM Stock S 
                        WHERE S.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
     </parameters>
   </query>

   <query code="LOCPICKEmptyZone">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PICK'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND WZI.IdItem = @idItem
         AND NOT EXISTS(SELECT S.IdLocCode FROM Stock S WHERE S.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT WZF.IdLocCode
                    FROM WorkZoneForkLift WZF INNER JOIN
                         WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE WZF.IdLocCode = @idForkLift
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPICKEmptyZoneByLpn">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       WZI.IdItem
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PICK'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND EXISTS(SELECT S.IdItem 
                    FROM Stock S 
                    WHERE S.IdLpnCode = @idLpnCode 
                      AND S.IdWhs = L.IdWhs 
                      AND WZI.IdItem = S.IdItem)
         AND NOT EXISTS(SELECT S.IdLocCode 
                        FROM Stock S 
                        WHERE S.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT WZF.IdLocCode
                    FROM WorkZoneForkLift WZF INNER JOIN
                         WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE WZF.IdLocCode = @idForkLift
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="String">idLpnCode</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPICKItemNoZone">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PICK'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND S.IdItem = @idItem
         AND S.HoldCode IS NULL
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
     </parameters>
   </query>

   <query code="LOCPICKItemZone">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PICK'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND S.IdItem = @idItem
         AND S.HoldCode IS NULL
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT WZF.IdLocCode
                    FROM WorkZoneForkLift WZF INNER JOIN
                         WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE WZF.IdLocCode = @idForkLift
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPICKItemZoneByLpn">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       S.IdItem
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PICK'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND EXISTS(SELECT S1.IdItem 
                    FROM Stock S1 
                    WHERE S1.IdLpnCode = @idLpnCode 
                      AND S1.IdWhs = S.IdWhs 
                      AND S1.IdItem = S.IdItem)
         AND S.HoldCode IS NULL
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT WZF.IdLocCode
                    FROM WorkZoneForkLift WZF INNER JOIN
                         WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE WZF.IdLocCode = @idForkLift
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="String">idLpnCode</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPICKItemLoteNoZone">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PICK'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND S.IdItem = @idItem
         AND S.LotNumber = @lotNumber
         AND S.HoldCode IS NULL
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="String">lotNumber</parameter>
     </parameters>
   </query>

   <query code="LOCPICKItemLoteZone">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PICK'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND S.IdItem = @idItem
         AND S.LotNumber = @lotNumber
         AND S.HoldCode IS NULL
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT WZF.IdLocCode
                    FROM WorkZoneForkLift WZF INNER JOIN
                         WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE WZF.IdLocCode = @idForkLift
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <!--NUEVAS-->
   <query code="LOCPUTEmptyShared">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1
         AND NOT EXISTS(SELECT S.IdLocCode 
                        FROM Stock S 
                        WHERE S.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
     </parameters>
   </query>
   
   <query code="LOCPUTEmptyNotShared">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND NOT EXISTS(SELECT S.IdLocCode 
                        FROM Stock S 
                        WHERE S.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
     </parameters>
   </query>   
   
   <query code="LOCPUTEmptySharedCapVol">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1
         AND L.Volume > 0
         AND L.Volume >= @Volume
         AND NOT EXISTS(SELECT S.IdLocCode 
                        FROM Stock S 
                        WHERE S.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Decimal">volume</parameter>
     </parameters>
   </query>

   <query code="LOCPUTEmptyNotSharedCapVol">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND L.Volume > 0
         AND L.Volume >= @Volume
         AND NOT EXISTS(SELECT S.IdLocCode 
                        FROM Stock S 
                        WHERE S.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Decimal">volume</parameter>
     </parameters>
   </query>

   <query code="LOCPUTEmptySharedZoneItem">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1
         AND WZI.IdItem = @idItem
         AND NOT EXISTS(SELECT S.IdLocCode 
                        FROM Stock S 
                        WHERE S.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
     </parameters>
   </query>

   <query code="LOCPUTEmptyNotSharedZoneItem">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND WZI.IdItem = @idItem
         AND NOT EXISTS(SELECT S.IdLocCode 
                        FROM Stock S 
                        WHERE S.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
     </parameters>
   </query>

   <query code="LOCPUTEmptySharedCapVolZoneItem">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1        
         AND WZI.IdItem = @idItem
         AND L.Volume > 0
         AND L.Volume >= @Volume          
         AND NOT EXISTS(SELECT S.IdLocCode 
                        FROM Stock S 
                        WHERE S.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Decimal">volume</parameter>
     </parameters>
   </query>

   <query code="LOCPUTEmptyNotSharedCapVolZoneItem">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND WZI.IdItem = @idItem
         AND L.Volume > 0
         AND L.Volume >= @Volume          
         AND NOT EXISTS(SELECT S.IdLocCode 
                        FROM Stock S 
                        WHERE S.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Decimal">volume</parameter>
     </parameters>
   </query>   
   
   <query code="LOCPUTEmptySharedZoneMaqUser">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1
         AND NOT EXISTS(SELECT S.IdLocCode 
                        FROM Stock S 
                        WHERE S.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
        AND EXISTS(SELECT WZF.IdLocCode
                   FROM WorkZoneForkLift WZF INNER JOIN
                        WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                        WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                   WHERE WZF.IdLocCode = @idForkLift
                     AND WZ.IdWhs = L.IdWhs
                     AND WZL.IdLocCode = L.IdLocCode)                            
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>
   
   <query code="LOCPUTEmptyNotSharedZoneMaqUser">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND NOT EXISTS(SELECT S.IdLocCode 
                        FROM Stock S 
                        WHERE S.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
        AND EXISTS(SELECT WZF.IdLocCode
                   FROM WorkZoneForkLift WZF INNER JOIN
                        WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                        WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                   WHERE WZF.IdLocCode = @idForkLift
                     AND WZ.IdWhs = L.IdWhs
                     AND WZL.IdLocCode = L.IdLocCode)                            
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>   
   
   <query code="LOCPUTEmptySharedCapVolZoneMaqUser">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1
         AND L.Volume > 0
         AND L.Volume >= @Volume
         AND NOT EXISTS(SELECT S.IdLocCode 
                        FROM Stock S 
                        WHERE S.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
        AND EXISTS(SELECT WZF.IdLocCode
                   FROM WorkZoneForkLift WZF INNER JOIN
                        WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                        WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                   WHERE WZF.IdLocCode = @idForkLift
                     AND WZ.IdWhs = L.IdWhs
                     AND WZL.IdLocCode = L.IdLocCode)                            
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Decimal">volume</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPUTEmptyNotSharedCapVolZoneMaqUser">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND L.Volume > 0
         AND L.Volume >= @Volume
         AND NOT EXISTS(SELECT S.IdLocCode 
                        FROM Stock S 
                        WHERE S.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
        AND EXISTS(SELECT WZF.IdLocCode
                   FROM WorkZoneForkLift WZF INNER JOIN
                        WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                        WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                   WHERE WZF.IdLocCode = @idForkLift
                     AND WZ.IdWhs = L.IdWhs
                     AND WZL.IdLocCode = L.IdLocCode)                            
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Decimal">volume</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPUTEmptySharedZoneItemMaqUser">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1
         AND WZI.IdItem = @idItem
         AND NOT EXISTS(SELECT S.IdLocCode 
                        FROM Stock S 
                        WHERE S.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
        AND EXISTS(SELECT WZF.IdLocCode
                   FROM WorkZoneForkLift WZF INNER JOIN
                        WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                        WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                   WHERE WZF.IdLocCode = @idForkLift
                     AND WZ.IdWhs = L.IdWhs
                     AND WZL.IdLocCode = L.IdLocCode)                         
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPUTEmptyNotSharedZoneItemMaqUser">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND WZI.IdItem = @idItem
         AND NOT EXISTS(SELECT S.IdLocCode 
                        FROM Stock S 
                        WHERE S.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
        AND EXISTS(SELECT WZF.IdLocCode
                   FROM WorkZoneForkLift WZF INNER JOIN
                        WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                        WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                   WHERE WZF.IdLocCode = @idForkLift
                     AND WZ.IdWhs = L.IdWhs
                     AND WZL.IdLocCode = L.IdLocCode)                         
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPUTEmptySharedCapVolZoneItemMaqUser">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1        
         AND WZI.IdItem = @idItem
         AND L.Volume > 0
         AND L.Volume >= @Volume          
         AND NOT EXISTS(SELECT S.IdLocCode 
                        FROM Stock S 
                        WHERE S.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
        AND EXISTS(SELECT WZF.IdLocCode
                   FROM WorkZoneForkLift WZF INNER JOIN
                        WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                        WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                   WHERE WZF.IdLocCode = @idForkLift
                     AND WZ.IdWhs = L.IdWhs
                     AND WZL.IdLocCode = L.IdLocCode)                        
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Decimal">volume</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPUTEmptyNotSharedCapVolZoneItemMaqUser">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND WZI.IdItem = @idItem
         AND L.Volume > 0
         AND L.Volume >= @Volume          
         AND NOT EXISTS(SELECT S.IdLocCode 
                        FROM Stock S 
                        WHERE S.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
        AND EXISTS(SELECT WZF.IdLocCode
                   FROM WorkZoneForkLift WZF INNER JOIN
                        WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                        WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                   WHERE WZF.IdLocCode = @idForkLift
                     AND WZ.IdWhs = L.IdWhs
                     AND WZL.IdLocCode = L.IdLocCode)                        
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Decimal">volume</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPUTItmShared">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1 
         AND S.IdItem = @idItem
         AND S.HoldCode IS NULL
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
     </parameters>
   </query>
   
   <query code="LOCPUTItmNotShared">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND S.IdItem = @idItem
         AND S.HoldCode IS NULL
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
     </parameters>
   </query> 
   
   <query code="LOCPUTItmSharedCapVol">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN            
            Stock S ON L.IdLocCode = S.IdLocCode INNER JOIN
            (SELECT SV.IdWhs, SV.IdLocCode, SUM(SV.TotalVolumen) TotalVolumen
             FROM Stock SV
             GROUP BY SV.IdWhs, SV.IdLocCode) SV ON L.IdLocCode = SV.IdLocCode 
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1 
         AND S.IdItem = @idItem
         AND L.Volume > 0
         AND L.Volume >= (SV.TotalVolumen + @Volume) 
         AND S.HoldCode IS NULL
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Decimal">volume</parameter>
     </parameters>
   </query>
   
   <query code="LOCPUTItmNotSharedCapVol">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode INNER JOIN
	         (SELECT S.IdWhs, S.IdLocCode, SUM(TotalVolumen) TotalVolumen
	          FROM Stock S 
	          GROUP BY S.IdWhs, S.IdLocCode) SV ON L.IdLocCode = SV.IdLocCode            
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND L.Volume > 0
         AND L.Volume >= (SV.TotalVolumen + @Volume)  
         AND S.IdItem = @idItem
         AND S.HoldCode IS NULL
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Decimal">volume</parameter>
     </parameters>
   </query>
   
    <query code="LOCPUTItmSharedZoneItem">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1          
         AND S.IdItem = @idItem         
         AND S.HoldCode IS NULL
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
     </parameters>
   </query>
   
   <query code="LOCPUTItmNotSharedZoneItem">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND S.IdItem = @idItem
         AND S.HoldCode IS NULL
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
     </parameters>
   </query> 
   
   <query code="LOCPUTItmSharedCapVolZoneItem">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN            
            Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem INNER JOIN
            (SELECT SV.IdWhs, SV.IdLocCode, SUM(SV.TotalVolumen) TotalVolumen
             FROM Stock SV
             GROUP BY SV.IdWhs, SV.IdLocCode) SV ON L.IdLocCode = SV.IdLocCode 
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1 
         AND S.IdItem = @idItem
         AND L.Volume > 0
         AND L.Volume >= (SV.TotalVolumen + @Volume) 
         AND S.HoldCode IS NULL
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Decimal">volume</parameter>
     </parameters>
   </query>
   
   <query code="LOCPUTItmNotSharedCapVolZoneItem">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem INNER JOIN
            (SELECT S.IdWhs, S.IdLocCode, S.IdItem, SUM(TotalVolumen) TotalVolumen
             FROM Stock S
             GROUP BY S.IdWhs, S.IdLocCode, S.IdItem) SV ON L.IdLocCode = SV.IdLocCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND S.IdItem = @idItem
         AND L.Volume > 0
         AND L.Volume >= (SV.TotalVolumen + @Volume)
         AND S.HoldCode IS NULL
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Decimal">volume</parameter>
     </parameters>
   </query>  
   
   <query code="LOCPUTItmSharedZoneMaqUser">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1 
         AND S.IdItem = @idItem
         AND S.HoldCode IS NULL
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT WZF.IdLocCode
                    FROM WorkZoneForkLift WZF INNER JOIN
                         WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE WZF.IdLocCode = @idForkLift
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)            
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>
   
   <query code="LOCPUTItmNotSharedZoneMaqUser">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND S.IdItem = @idItem
         AND S.HoldCode IS NULL
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT WZF.IdLocCode
                    FROM WorkZoneForkLift WZF INNER JOIN
                         WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE WZF.IdLocCode = @idForkLift
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)            
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query> 
   
   <query code="LOCPUTItmSharedCapVolZoneMaqUser">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN            
            Stock S ON L.IdLocCode = S.IdLocCode INNER JOIN
            (SELECT SV.IdWhs, SV.IdLocCode, SUM(SV.TotalVolumen) TotalVolumen
             FROM Stock SV
             GROUP BY SV.IdWhs, SV.IdLocCode) SV ON L.IdLocCode = SV.IdLocCode 
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1 
         AND S.IdItem = @idItem
         AND L.Volume > 0
         AND L.Volume >= (SV.TotalVolumen + @Volume) 
         AND S.HoldCode IS NULL
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
        AND EXISTS(SELECT WZF.IdLocCode
                   FROM WorkZoneForkLift WZF INNER JOIN
                        WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                        WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                   WHERE WZF.IdLocCode = @idForkLift
                     AND WZ.IdWhs = L.IdWhs
                     AND WZL.IdLocCode = L.IdLocCode)            
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Decimal">volume</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>
   
   <query code="LOCPUTItmNotSharedCapVolZoneMaqUser">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode INNER JOIN
	         (SELECT S.IdWhs, S.IdLocCode, S.IdItem, SUM(TotalVolumen) TotalVolumen
	          FROM Stock S 
	          GROUP BY S.IdWhs, S.IdLocCode, S.IdItem) SV ON L.IdLocCode = SV.IdLocCode            
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND S.IdItem = @idItem
         AND L.Volume > 0
         AND L.Volume >= (SV.TotalVolumen + @Volume)  
         AND S.HoldCode IS NULL
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT WZF.IdLocCode
                    FROM WorkZoneForkLift WZF INNER JOIN
                         WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE WZF.IdLocCode = @idForkLift
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)            
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Decimal">volume</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>
   
    <query code="LOCPUTItmSharedZoneItemMaqUser">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1          
         AND S.IdItem = @idItem         
         AND S.HoldCode IS NULL
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT WZF.IdLocCode
                    FROM WorkZoneForkLift WZF INNER JOIN
                         WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE WZF.IdLocCode = @idForkLift
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)              
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>
   
   <query code="LOCPUTItmNotSharedZoneItemMaqUser">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND S.IdItem = @idItem
         AND S.HoldCode IS NULL
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT WZF.IdLocCode
                    FROM WorkZoneForkLift WZF INNER JOIN
                         WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE WZF.IdLocCode = @idForkLift
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)              
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query> 
   
   <query code="LOCPUTItmSharedCapVolZoneItemMaqUser">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN            
            Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem INNER JOIN
            (SELECT SV.IdWhs, SV.IdLocCode, SUM(SV.TotalVolumen) TotalVolumen
             FROM Stock SV
             GROUP BY SV.IdWhs, SV.IdLocCode) SV ON L.IdLocCode = SV.IdLocCode 
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1 
         AND S.IdItem = @idItem
         AND L.Volume > 0
         AND L.Volume >= (SV.TotalVolumen + @Volume) 
         AND S.HoldCode IS NULL
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT WZF.IdLocCode
                    FROM WorkZoneForkLift WZF INNER JOIN
                         WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE WZF.IdLocCode = @idForkLift
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)              
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Decimal">volume</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>
   
   <query code="LOCPUTItmNotSharedCapVolZoneItemMaqUser">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem INNER JOIN
	          (SELECT S.IdWhs, S.IdLocCode, S.IdItem, SUM(TotalVolumen) TotalVolumen
	           FROM Stock S 
	           GROUP BY S.IdWhs, S.IdLocCode, S.IdItem) SV ON L.IdLocCode = SV.IdLocCode 
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND S.IdItem = @idItem
         AND L.Volume > 0
         AND L.Volume >= (SV.TotalVolumen + @Volume)  
         AND S.HoldCode IS NULL
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT WZF.IdLocCode
                    FROM WorkZoneForkLift WZF INNER JOIN
                         WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE WZF.IdLocCode = @idForkLift
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)              
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Decimal">volume</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>  
   
   <query code="LOCPUTWithStockShared">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1 
         AND S.HoldCode IS NULL
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
     </parameters>
   </query>
   
   <query code="LOCPUTWithStockSharedCapVol">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN            
            Stock S ON L.IdLocCode = S.IdLocCode INNER JOIN
            (SELECT SV.IdWhs, SV.IdLocCode, SUM(SV.TotalVolumen) TotalVolumen
             FROM Stock SV
             GROUP BY SV.IdWhs, SV.IdLocCode) SV ON L.IdLocCode = SV.IdLocCode 
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1 
         AND L.Volume > 0
         AND L.Volume >= (SV.TotalVolumen + @Volume) 
         AND S.HoldCode IS NULL
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Decimal">volume</parameter>
     </parameters>
   </query>   
   
    <query code="LOCPUTWithStockSharedZoneItem">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1          
         AND S.HoldCode IS NULL
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
     </parameters>
   </query>   
   
   <query code="LOCPUTWithStockSharedCapVolZoneItem">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN            
            Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem INNER JOIN
            (SELECT SV.IdWhs, SV.IdLocCode, SUM(SV.TotalVolumen) TotalVolumen
             FROM Stock SV
             GROUP BY SV.IdWhs, SV.IdLocCode) SV ON L.IdLocCode = SV.IdLocCode 
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1 
         AND L.Volume > 0
         AND L.Volume >= (SV.TotalVolumen + @Volume) 
         AND S.HoldCode IS NULL
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Decimal">volume</parameter>
     </parameters>
   </query>   
   
   <query code="LOCPUTWithStockSharedZoneMaqUser">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1 
         AND S.HoldCode IS NULL
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT WZF.IdLocCode
                    FROM WorkZoneForkLift WZF INNER JOIN
                         WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE WZF.IdLocCode = @idForkLift
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)            
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query> 
   
   <query code="LOCPUTWithStockSharedCapVolZoneMaqUser">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN            
            Stock S ON L.IdLocCode = S.IdLocCode INNER JOIN
            (SELECT SV.IdWhs, SV.IdLocCode, SUM(SV.TotalVolumen) TotalVolumen
             FROM Stock SV
             GROUP BY SV.IdWhs, SV.IdLocCode) SV ON L.IdLocCode = SV.IdLocCode 
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1 
         AND L.Volume > 0
         AND L.Volume >= (SV.TotalVolumen + @Volume) 
         AND S.HoldCode IS NULL
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
        AND EXISTS(SELECT WZF.IdLocCode
                   FROM WorkZoneForkLift WZF INNER JOIN
                        WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                        WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                   WHERE WZF.IdLocCode = @idForkLift
                     AND WZ.IdWhs = L.IdWhs
                     AND WZL.IdLocCode = L.IdLocCode)            
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Decimal">volume</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>   
   
    <query code="LOCPUTWithStockSharedZoneItemMaqUser">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
            Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1          
         AND S.HoldCode IS NULL
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT WZF.IdLocCode
                    FROM WorkZoneForkLift WZF INNER JOIN
                         WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE WZF.IdLocCode = @idForkLift
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)              
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>   
   
   <query code="LOCPUTWithStockSharedCapVolZoneItemMaqUser">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN            
            Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem INNER JOIN
            (SELECT SV.IdWhs, SV.IdLocCode, SUM(SV.TotalVolumen) TotalVolumen
             FROM Stock SV
             GROUP BY SV.IdWhs, SV.IdLocCode) SV ON L.IdLocCode = SV.IdLocCode 
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1 
         AND L.Volume > 0
         AND L.Volume >= (SV.TotalVolumen + @Volume) 
         AND S.HoldCode IS NULL
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT WZF.IdLocCode
                    FROM WorkZoneForkLift WZF INNER JOIN
                         WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE WZF.IdLocCode = @idForkLift
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)              
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Decimal">volume</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>
   
   <query code="LOCPUTEmptySharedCapLPN">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.CapacityLPN > 0
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1
         AND L.CapacityLPN > (SELECT COUNT(DISTINCT IdLpnCode) 
		                          FROM Stock S
		                          WHERE S.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
     </parameters>
   </query>

   <query code="LOCPUTEmptyNotSharedCapLPN">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.CapacityLPN > 0
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND L.CapacityLPN > (SELECT COUNT(DISTINCT IdLpnCode) 
		                          FROM Stock S
		                          WHERE S.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
     </parameters>
   </query>   
   
   <query code="LOCPUTEmptySharedCapLPNZoneItem">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.CapacityLPN > 0
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1        
         AND WZI.IdItem = @idItem
		     AND WZI.IdItem = @idItem
         AND L.CapacityLPN > (SELECT COUNT(DISTINCT IdLpnCode) 
		                          FROM Stock S
		                          WHERE S.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
     </parameters>
   </query>

   <query code="LOCPUTEmptyNotSharedCapLPNZoneItem">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.CapacityLPN > 0
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND WZI.IdItem = @idItem
         AND L.CapacityLPN > (SELECT COUNT(DISTINCT IdLpnCode) 
		                          FROM Stock S
		                          WHERE S.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
     </parameters>
   </query>
   
   <query code="LOCPUTEmptySharedCapLPNZoneMaqUser">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.CapacityLPN > 0
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1
         AND L.CapacityLPN > (SELECT COUNT(DISTINCT IdLpnCode) 
		                          FROM Stock S
		                          WHERE S.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
        AND EXISTS(SELECT WZF.IdLocCode
                   FROM WorkZoneForkLift WZF INNER JOIN
                        WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                        WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                   WHERE WZF.IdLocCode = @idForkLift
                     AND WZ.IdWhs = L.IdWhs
                     AND WZL.IdLocCode = L.IdLocCode)                            
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPUTEmptyNotSharedCapLPNZoneMaqUser">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.CapacityLPN > 0
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND L.CapacityLPN > (SELECT COUNT(DISTINCT IdLpnCode) 
		                          FROM Stock S
		                          WHERE S.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
        AND EXISTS(SELECT WZF.IdLocCode
                   FROM WorkZoneForkLift WZF INNER JOIN
                        WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                        WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                   WHERE WZF.IdLocCode = @idForkLift
                     AND WZ.IdWhs = L.IdWhs
                     AND WZL.IdLocCode = L.IdLocCode)                            
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>  
 
   <query code="LOCPUTEmptySharedCapLPNZoneItemMaqUser">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.CapacityLPN > 0
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 1        
         AND WZI.IdItem = @idItem
         AND L.CapacityLPN > (SELECT COUNT(DISTINCT IdLpnCode) 
		                          FROM Stock S
		                          WHERE S.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
        AND EXISTS(SELECT WZF.IdLocCode
                   FROM WorkZoneForkLift WZF INNER JOIN
                        WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                        WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                   WHERE WZF.IdLocCode = @idForkLift
                     AND WZ.IdWhs = L.IdWhs
                     AND WZL.IdLocCode = L.IdLocCode)                        
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPUTEmptyNotSharedCapLPNZoneItemMaqUser">
     <sql>
       SELECT TOP 1 
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN 
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN 
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.CapacityLPN > 0
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.SharedItem = 0
         AND WZI.IdItem = @idItem
         AND L.CapacityLPN > (SELECT COUNT(DISTINCT IdLpnCode) 
		                          FROM Stock S
		                          WHERE S.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
        AND EXISTS(SELECT WZF.IdLocCode
                   FROM WorkZoneForkLift WZF INNER JOIN
                        WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                        WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                   WHERE WZF.IdLocCode = @idForkLift
                     AND WZ.IdWhs = L.IdWhs
                     AND WZL.IdLocCode = L.IdLocCode)                        
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPICKItemOnlyLPNNoZone">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Stock S ON L.IdLocCode = S.IdLocCode
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PICK'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND S.IdItem = @idItem
       AND S.HoldCode IS NULL
       AND L.OnlyLPN = @onlyLPN
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">onlyLPN</parameter>
     </parameters>
   </query>

   <query code="LOCPICKItemOnlyLPNZone">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Stock S ON L.IdLocCode = S.IdLocCode
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PICK'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND S.IdItem = @idItem
       AND S.HoldCode IS NULL
       AND L.OnlyLPN = @onlyLPN
       AND EXISTS(SELECT IDUserWms
                  FROM UserWorkZone UWZ INNER JOIN
                  WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                  WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                  WHERE UWZ.IdUserWms = @idUser
                    AND WZ.IdWhs = L.IdWhs
                    AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
                  FROM WorkZoneForkLift WZF INNER JOIN
                  WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                  WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                  WHERE WZF.IdLocCode = @idForkLift
                    AND WZ.IdWhs = L.IdWhs
                    AND WZL.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">onlyLPN</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPICKItemOnlyLPNVolNoZone">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Stock S ON L.IdLocCode = S.IdLocCode
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PICK'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND S.IdItem = @idItem
       AND S.HoldCode IS NULL
       AND L.OnlyLPN = @onlyLPN
       AND L.Volume > 0
       AND L.Volume >= (@volume + (SELECT SUM(TotalVolumen)
                                  FROM Stock
                                  WHERE IdLocCode = L.IdLocCode))
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">onlyLPN</parameter>
       <parameter type="Decimal">volume</parameter>
     </parameters>
   </query>

   <query code="LOCPICKItemOnlyLPNVolZone">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Stock S ON L.IdLocCode = S.IdLocCode
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PICK'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND S.IdItem = @idItem
       AND S.HoldCode IS NULL
       AND L.OnlyLPN = @onlyLPN
       AND L.Volume >= (@volume + (SELECT SUM(TotalVolumen)
                                  FROM Stock
                                  WHERE IdLocCode = L.IdLocCode))
       AND EXISTS(SELECT IDUserWms
                  FROM UserWorkZone UWZ INNER JOIN
                  WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                  WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                  WHERE UWZ.IdUserWms = @idUser
                    AND WZ.IdWhs = L.IdWhs
                    AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
                  FROM WorkZoneForkLift WZF INNER JOIN
                  WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                  WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                  WHERE WZF.IdLocCode = @idForkLift
                    AND WZ.IdWhs = L.IdWhs
                    AND WZL.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">onlyLPN</parameter>
       <parameter type="Decimal">volume</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPICKItemLocation">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       ItemLocation IL ON L.IdLocCode = IL.IdLocCode
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PICK'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND IL.IdItem = @idItem
       AND IL.ReOrderQty >= (@itemQty + (SELECT SUM(ItemQty)
       FROM Stock
       WHERE IdLocCode = L.IdLocCode
       AND IdItem = IL.IdItem))
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
       FROM WorkZoneForkLift WZF INNER JOIN
       WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE WZF.IdLocCode = @idForkLift
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       ORDER BY Ruta
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>
   
   <!--LOREAL-->
   <query code="LOCSTGHoldCodeNoZone">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       WHERE L.IdWhs = @idWarehouse
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.LocTypeCode = 'STG'
         AND L.IdLocCode = @holdCode
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="String">holdCode</parameter>
     </parameters>
     <sub-querys>
       <sub-query code="ORDERBYRutaASC">
         <sql>
           ORDER BY Ruta ASC
         </sql>
         <parameters>
         </parameters>
       </sub-query>
     </sub-querys>
   </query>
   
   <query code="LOCSTGHoldCodeZone">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.LocTypeCode = 'STG'
         AND WZI.IdItem = @idItem
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT WZF.IdLocCode
                    FROM WorkZoneForkLift WZF INNER JOIN
                         WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE WZF.IdLocCode = @idForkLift
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND L.IdLocCode = @holdCode
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
       <parameter type="String">holdCode</parameter>
     </parameters>
     <sub-querys>
       <sub-query code="ORDERBYRutaASC">
         <sql>
           ORDER BY Ruta ASC
         </sql>
         <parameters>
         </parameters>
       </sub-query>
     </sub-querys>
   </query>   
   

   <!-- PICKING RULES section  -->
   <!--Regla Picking BDD-->
   <query code="STKPICKItemNoZoneLessQty">
     <sql>
		 SELECT TOP 1
		 ABS(L.PickingFlow - @pickingFlow) AS Ruta,
		 S.IdWhs,
		 S.IdOwn,
		 (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) AS ItemQty,
		 S.IdItem,
		 CASE
		 WHEN @idCtgItem IS NOT NULL THEN @idCtgItem
		 WHEN @idCtgItem IS NULL THEN S.IdCtgItem
		 END AS IdCategoryItem,
		 CASE
		 WHEN @lotNumber IS NOT NULL THEN @lotNumber
		 WHEN @lotNumber IS NULL THEN S.LotNumber
		 END AS LotNumber,
		 CASE
		 WHEN  @fifoDate IS NOT NULL THEN @fifoDate
		 WHEN  @fifoDate IS NULL THEN S.FifoDate
		 END AS FifoDate,
		 CASE
		 WHEN @fabricationDate IS NOT NULL THEN @fabricationDate
		 WHEN @fabricationDate IS NULL THEN S.FabricationDate
		 END AS FabricationDate,
		 CASE
		 WHEN @expirationDate IS NOT NULL THEN @expirationDate
		 WHEN @expirationDate IS NULL THEN S.ExpirationDate
		 END AS ExpirationDate,
		 S.IdLpnCode,
		 S.LpnTypeCode,
		 S.IdLpnCodeContainer,
		 S.LpnTypeCodeContainer,
		 L.IdLocCode,
		 L.LocCode,
		 L.RowLoc,
		 L.ColumnLoc,
		 L.LevelLoc,
		 L.Aisle,L.Status,
		 L.Description,
		 L.SharedItem,
		 L.OnlyLPN,
		 L.PickingFlow,
		 L.PutawayFlow,
		 L.CapacityLPN,
		 L.CapacityUnit,
		 L.Length,
		 L.Width,
		 L.Height,
		 L.Volume,
		 L.Weight,
		 L.LockInventory,
		 LT.IdLocType,
		 LT.LocTypeCode,
		 LT.LocTypeName,
		 LT.Status
		 FROM Stock S
		 INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
		 INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		 INNER JOIN Item I ON I.IdItem = S.IdItem
		 -- Stock Reserve by Customer
		 LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
		 AND S.IdWhs = OQRC.IdWhs
		 AND S.IdOwn = OQRC.IdOwn
		 AND OQRC.CustomerCode &lt;&gt; @customerCode
		 WHERE S.IdWhs = L.IdWhs
		 AND S.IdItem = @idItem
		 AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
		 AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
		 AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
		 AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
		 AND ((S.ExpirationDate = @expirationDate AND @expirationDate IS NOT NULL)OR(@expirationDate IS NULL))
		 AND S.IdWhs = @idWhs
		 AND L.LocTypeCode = 'PICK'
		 AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
		 AND L.Status = 1
		 AND L.LockInventory = 0
		 AND S.HoldCode IS NULL
		 GROUP BY
		 S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		 L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		 L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		 L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		 LT.LocTypeName, LT.Status, IdCtgItem, LotNumber, FifoDate,FabricationDate, ExpirationDate
		 HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) &gt; 0
		 AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) &lt;= @itemQty
		 ORDER BY ItemQty ASC, Ruta ASC
	 </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="DateTime">fifoDate</parameter>
       <parameter type="DateTime">fabricationDate</parameter>
       <parameter type="DateTime">expirationDate</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>
   
   <query code="STKPICKItemNoZoneLessQtyLot">
     <sql>
		 SELECT TOP 1
		 ABS(L.PickingFlow - @pickingFlow) AS Ruta,
		 S.IdWhs,
		 S.IdOwn,
		 (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) AS ItemQty,
		 S.IdItem,
		 --CASE WHEN @idCtgItem IS NULL then S.IdCtgItem else @idCtgItem end IdCategoryItem,
		 --CASE WHEN @lotNumber IS NULL then S.LotNumber else @lotNumber end LotNumber,
		 --CASE WHEN @fifoDate IS NULL then S.FifoDate else @fifoDate end FifoDate,
		 --CASE WHEN @fabricationDate IS NULL then S.FabricationDate else @fabricationDate end FabricationDate,
		 --CASE WHEN @expirationDate IS NULL then S.ExpirationDate else @expirationDate end ExpirationDate,
		 S.idCtgItem,
		 S.LotNumber,
		 S.FifoDate,
		 S.FabricationDate,
		 S.ExpirationDate,
		 S.IdLpnCode,
		 S.LpnTypeCode,
		 S.IdLpnCodeContainer,
		 S.LpnTypeCodeContainer,
		 L.IdLocCode,
		 L.LocCode,
		 L.RowLoc,
		 L.ColumnLoc,
		 L.LevelLoc,
		 L.Aisle,L.Status,
		 L.Description,
		 L.SharedItem,
		 L.OnlyLPN,
		 L.PickingFlow,
		 L.PutawayFlow,
		 L.CapacityLPN,
		 L.CapacityUnit,
		 L.Length,
		 L.Width,
		 L.Height,
		 L.Volume,
		 L.Weight,
		 L.LockInventory,
		 LT.IdLocType,
		 LT.LocTypeCode,
		 LT.LocTypeName,
		 LT.Status,
		 s.lotNumber,
		 s.fabricationDate,
		 s.expirationDate
		 FROM Stock S
		 INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
		 INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		 INNER JOIN Item I ON I.IdItem = S.IdItem
		 -- Stock Reserve by Customer
		 LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
		 AND S.IdWhs = OQRC.IdWhs
		 AND S.IdOwn = OQRC.IdOwn
		 AND OQRC.CustomerCode &lt;&gt; @customerCode
		 WHERE S.IdWhs = L.IdWhs
		 AND S.IdItem = @idItem
		 --AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
		 --AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
		 AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
		 AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
		 AND ((@expirationDate &lt;= S.ExpirationDate AND S.ExpirationDate IS NOT NULL )OR (@expirationDate IS NULL))
		 AND S.IdWhs = @idWhs
		 AND L.LocTypeCode = 'PICK'
		 AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
		 AND L.Status = 1
		 AND L.LockInventory = 0
		 AND S.HoldCode IS NULL
		 AND S.lotNumber IS NOT NULL
		 GROUP BY
		 S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		 L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		 L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		 L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		 LT.LocTypeName, LT.Status,S.IdCtgItem, s.lotNumber, S.FifoDate, s.fabricationDate,s.expirationDate
		 HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) &gt; 0
		 AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) &lt;= @itemQty
		 ORDER BY  s.expirationDate ASC, ItemQty ASC, Ruta ASC
	 </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="DateTime">fifoDate</parameter>
       <parameter type="DateTime">fabricationDate</parameter>
       <parameter type="DateTime">expirationDate</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>
   
   <query code="STKPICKItemZoneLessQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                    FROM v_Other_LocationPicking AS OLP
                                    WHERE S.IdItem = OLP.IdItem
									  AND S.IdWhs = OLP.IdWhs
                                      AND L.IdLocCode = OLP.IdLocSourceProposal
                                      AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                         OR(OLP.IdLpnSourceProposal IS NULL))),0)
                       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                    FROM v_Other_LocationPicking_Sim AS OLPS
                                    WHERE S.IdItem = OLPS.IdItem
									 AND S.IdWhs = OLPS.IdWhs
                                     AND L.IdLocCode = OLPS.IdLocSourceProposal
                                     AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                        OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
                                                         AND S.IdWhs = OQRC.IdWhs
                                                         AND S.IdOwn = OQRC.IdOwn
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PICK'
         AND L.HoldCode IS NULL
         AND L.Status = 1
         AND L.LockInventory = 0
         AND S.HoldCode IS NULL
         AND WZL.IdWorkZone = @idWorkZone
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode, 
       LT.LocTypeName, LT.Status
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLP.IdLpnSourceProposal IS NULL))),0)
                             + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                          FROM v_Other_LocationPicking_Sim AS OLPS
                                          WHERE S.IdItem = OLPS.IdItem
										    AND S.IdWhs = OLPS.IdWhs
                                            AND L.IdLocCode = OLPS.IdLocSourceProposal
                                            AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                               OR(OLPS.IdLpnSourceProposal IS NULL))
               ),0)))) &gt; 0
          AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLP.IdLpnSourceProposal IS NULL))),0)
                              + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										     AND S.IdWhs = OLPS.IdWhs
                                             AND L.IdLocCode = OLPS.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLPS.IdLpnSourceProposal IS NULL))
              ),0)))) &lt;= @itemQty       
       ORDER BY ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idWorkZone</parameter>
     </parameters>
   </query>

   <query code="STKPICKItemTypeZoneLessQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                   FROM v_Other_LocationPicking AS OLP
                                   WHERE S.IdItem = OLP.IdItem
								     AND S.IdWhs = OLP.IdWhs
                                     AND L.IdLocCode = OLP.IdLocSourceProposal),0)
                       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                   FROM v_Other_LocationPicking_Sim AS OLPS
                                   WHERE S.IdItem = OLPS.IdItem
								     AND S.IdWhs = OLPS.IdWhs
                                     AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       ) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
                                                         AND S.IdWhs = OQRC.IdWhs
                                                         AND S.IdOwn = OQRC.IdOwn
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PICK'
         AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND S.HoldCode IS NULL
     AND EXISTS (SELECT WZ.IdWorkZone
     FROM WorkZone WZ
     INNER JOIN WorkZoneLocation WZL ON WZL.IdWorkZone = WZ.IdWorkZone
     WHERE L.IdLocCode = WZL.IdLocCode
     AND WZ.TypeZone = @typeZone
     AND WZ.IdWhs = S.IdWhs)
     GROUP BY
     S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
     L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
     L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
     L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
     LT.LocTypeName, LT.Status
     HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
     FROM v_Other_LocationPicking AS OLP
     WHERE S.IdItem = OLP.IdItem
     AND S.IdWhs = OLP.IdWhs
     AND L.IdLocCode = OLP.IdLocSourceProposal),0)
     - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
     FROM v_Other_LocationPicking_Sim AS OLPS
     WHERE S.IdItem = OLPS.IdItem
     AND S.IdWhs = OLPS.IdWhs
     AND L.IdLocCode = OLPS.IdLocSourceProposal),0)))) &gt; 0
          AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal),0)
                              - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										     AND S.IdWhs = OLPS.IdWhs
                                             AND L.IdLocCode = OLPS.IdLocSourceProposal),0)))) &lt;= @itemQty
       ORDER BY ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">typeZone</parameter>
     </parameters>
   </query>

   <query code="STKPICKItemNoZoneGreaterQty">
     <sql>
		 SELECT TOP 1
		 ABS(L.PickingFlow - @pickingFlow) AS Ruta,
		 S.IdWhs,
		 S.IdOwn,
		 (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) AS ItemQty,
		 S.IdItem,
		 CASE
		 WHEN @idCtgItem is not null THEN @idCtgItem
		 WHEN @idCtgItem is null THEN s.IdCtgItem
		 END As IdCtgItem,
		 CASE
		 WHEN @lotNumber is not null THEN @lotNumber
		 WHEN @lotNumber is null THEN s.lotnumber
		 END As LotNumber,
		 CASE
		 WHEN @fifoDate is not null THEN @fifoDate
		 WHEN @fifoDate is null THEN S.FifoDate
		 END As FifoDate,
		 CASE
		 WHEN @fabricationDate is not null THEN @fabricationDate
		 WHEN @fabricationDate is null THEN s.FabricationDate
		 END As FabricationDate,
		 CASE
		 WHEN @expirationDate is not null THEN @expirationDate
		 WHEN @expirationDate is null THEN s.ExpirationDate
		 END As ExpirationDate,
		 S.IdLpnCode,
		 S.LpnTypeCode,
		 S.IdLpnCodeContainer,
		 S.LpnTypeCodeContainer,
		 L.IdLocCode,
		 L.LocCode,
		 L.RowLoc,
		 L.ColumnLoc,
		 L.LevelLoc,
		 L.Aisle,L.Status,
		 L.Description,
		 L.SharedItem,
		 L.OnlyLPN,
		 L.PickingFlow,
		 L.PutawayFlow,
		 L.CapacityLPN,
		 L.CapacityUnit,
		 L.Length,
		 L.Width,
		 L.Height,
		 L.Volume,
		 L.Weight,
		 L.LockInventory,
		 LT.IdLocType,
		 LT.LocTypeCode,
		 LT.LocTypeName,
		 LT.Status
		 FROM Stock S
		 INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
		 INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		 INNER JOIN Item I ON I.IdItem = S.IdItem
		 -- Stock Reserve by Customer
		 LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
		 AND S.IdWhs = OQRC.IdWhs
		 AND S.IdOwn = OQRC.IdOwn
		 AND OQRC.CustomerCode &lt;&gt; @customerCode
		 WHERE S.IdWhs = L.IdWhs
		 AND S.IdItem = @idItem
		 AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
		 AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
		 AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
		 AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
		 AND ((S.ExpirationDate = @expirationDate AND @expirationDate IS NOT NULL)OR(@expirationDate IS NULL))
		 AND S.IdWhs = @idWhs
		 AND L.LocTypeCode = 'PICK'
		 AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
		 AND L.Status = 1
		 AND L.LockInventory = 0
		 AND S.HoldCode IS NULL
		 GROUP BY
		 S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		 L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		 L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		 L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		 LT.LocTypeName, LT.Status, IdCtgItem, LotNumber, FifoDate, FabricationDate, ExpirationDate
		 HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) &gt;= @itemQty
       ORDER BY ItemQty DESC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="DateTime">fifoDate</parameter>
       <parameter type="DateTime">fabricationDate</parameter>
       <parameter type="DateTime">expirationDate</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>
   
   <query code="STKPICKItemNoZoneGreaterQtyLot">
     <sql>
		 SELECT TOP 1
		 ABS(L.PickingFlow - @pickingFlow) AS Ruta,
		 S.IdWhs,
		 S.IdOwn,
		 (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL) OR (OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL) OR (OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL) OR (OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL) OR (OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL) OR (OLP.ExpirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL) OR (OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL) OR (OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL) OR (OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL) OR (OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL) OR (OLPS.expirationDate IS NULL))
		 ),0)))) AS ItemQty,
		 S.IdItem,
		 --CASE WHEN @idCtgItem IS NULL then S.IdCtgItem else @idCtgItem end IdCategoryItem,
		 --CASE WHEN @lotNumber IS NULL then S.LotNumber else @lotNumber end LotNumber,
		 --CASE WHEN @fifoDate IS NULL then S.FifoDate else @fifoDate end FifoDate,
		 --CASE WHEN @fabricationDate IS NULL then S.FabricationDate else @fabricationDate end FabricationDate,
		 --CASE WHEN @expirationDate IS NULL then S.ExpirationDate else @expirationDate end ExpirationDate,
		 S.idCtgItem,
		 S.LotNumber,
		 S.FifoDate,
		 S.FabricationDate,
		 S.ExpirationDate,
		 S.IdLpnCode,
		 S.LpnTypeCode,
		 S.IdLpnCodeContainer,
		 S.LpnTypeCodeContainer,
		 L.IdLocCode,
		 L.LocCode,
		 L.RowLoc,
		 L.ColumnLoc,
		 L.LevelLoc,
		 L.Aisle,L.Status,
		 L.Description,
		 L.SharedItem,
		 L.OnlyLPN,
		 L.PickingFlow,
		 L.PutawayFlow,
		 L.CapacityLPN,
		 L.CapacityUnit,
		 L.Length,
		 L.Width,
		 L.Height,
		 L.Volume,
		 L.Weight,
		 L.LockInventory,
		 LT.IdLocType,
		 LT.LocTypeCode,
		 LT.LocTypeName,
		 LT.Status,
		 s.lotNumber,
		 s.fabricationDate,
		 s.expirationDate
		 FROM Stock S
		 INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
		 INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		 INNER JOIN Item I ON I.IdItem = S.IdItem
		 -- Stock Reserve by Customer
		 LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
		 AND S.IdWhs = OQRC.IdWhs
		 AND S.IdOwn = OQRC.IdOwn
		 AND OQRC.CustomerCode &lt;&gt; @customerCode
		 WHERE S.IdWhs = L.IdWhs
		 AND S.IdItem = @idItem
		 AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
		 --AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
		 AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
		 AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
		 AND ((@expirationDate &lt;= S.ExpirationDate AND S.ExpirationDate IS NOT NULL )OR(@expirationDate IS NULL))
		 AND S.IdWhs = @idWhs
		 AND L.LocTypeCode = 'PICK'
		 AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
		 AND L.Status = 1
		 AND L.LockInventory = 0
		 AND S.HoldCode IS NULL
		 AND S.lotNumber IS NOT NULL
		 GROUP BY
		 S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		 L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		 L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		 L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		 LT.LocTypeName, LT.Status, S.IdCtgItem, s.lotNumber, S.FifoDate, s.fabricationDate,s.expirationDate
		 HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL )
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL )
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) &gt;= @itemQty
		 ORDER BY    s.expirationDate ASC,ItemQty DESC, Ruta ASC
	 </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="DateTime">fifoDate</parameter>
       <parameter type="DateTime">fabricationDate</parameter>
       <parameter type="DateTime">expirationDate</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>
   
   <query code="STKPICKItemZoneGreaterQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                    FROM v_Other_LocationPicking AS OLP
                                    WHERE S.IdItem = OLP.IdItem
									  AND S.IdWhs = OLP.IdWhs
                                      AND L.IdLocCode = OLP.IdLocSourceProposal
                                      AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                         OR(OLP.IdLpnSourceProposal IS NULL))),0)
                       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                    FROM v_Other_LocationPicking_Sim AS OLPS
                                    WHERE S.IdItem = OLPS.IdItem
									  AND S.IdWhs = OLPS.IdWhs
                                      AND L.IdLocCode = OLPS.IdLocSourceProposal
                                      AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                         OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem 
                                                         AND S.IdWhs = OQRC.IdWhs 
                                                         AND S.IdOwn = OQRC.IdOwn 
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PICK'
         AND L.HoldCode IS NULL
         AND L.Status = 1
         AND L.LockInventory = 0
         AND S.HoldCode IS NULL
         AND WZL.IdWorkZone = @idWorkZone
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode, 
       LT.LocTypeName, LT.Status
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLP.IdLpnSourceProposal IS NULL))),0)
                              + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										     AND S.IdWhs = OLPS.IdWhs
                                             AND L.IdLocCode = OLPS.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLPS.IdLpnSourceProposal IS NULL))
              ),0)))) &gt;= @itemQty
       ORDER BY ItemQty DESC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idWorkZone</parameter>
     </parameters>
   </query>

   <query code="STKPICKItemTypeZoneGreaterQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                   FROM v_Other_LocationPicking AS OLP
                                   WHERE S.IdItem = OLP.IdItem
								     AND S.IdWhs = OLP.IdWhs
                                     AND L.IdLocCode = OLP.IdLocSourceProposal),0)
                       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                   FROM v_Other_LocationPicking_Sim AS OLPS
                                   WHERE S.IdItem = OLPS.IdItem
								     AND S.IdWhs = OLPS.IdWhs
                                     AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       ) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem 
                                                         AND S.IdWhs = OQRC.IdWhs 
                                                         AND S.IdOwn = OQRC.IdOwn 
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND S.HoldCode IS NULL
     AND EXISTS (SELECT WZ.IdWorkZone
     FROM WorkZone WZ
     INNER JOIN WorkZoneLocation WZL ON WZL.IdWorkZone = WZ.IdWorkZone
     WHERE L.IdLocCode = WZL.IdLocCode
     AND WZ.TypeZone = @typeZone
     AND WZ.IdWhs = S.IdWhs)
     GROUP BY
     S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
     L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
     L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
     L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
     LT.LocTypeName, LT.Status
     HAVING (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
     FROM v_Other_LocationPicking AS OLP
     WHERE S.IdItem = OLP.IdItem
     AND S.IdWhs = OLP.IdWhs
     AND L.IdLocCode = OLP.IdLocSourceProposal),0)
     - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
     FROM v_Other_LocationPicking_Sim AS OLPS
     WHERE S.IdItem = OLPS.IdItem
     AND S.IdWhs = OLPS.IdWhs
     AND L.IdLocCode = OLPS.IdLocSourceProposal),0))) &gt;= @itemQty
       ORDER BY ItemQty DESC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">typeZone</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemNoZoneLessQtyUomSacoLotExp">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (IU.ConversionFactor * ROUND(((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
       AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLP.ExpirationDate IS NULL))
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))),0)
       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
       AND S.IdWhs = OLPS.IdWhs
       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLPS.ExpirationDate IS NULL))
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR (OLPS.IdLpnSourceProposal IS NULL))),0)
       -- AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       )/IU.ConversionFactor),0,1)) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       S.FifoDate,
       s.LotNumber,
       S.ExpirationDate,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
       AND (S.ExpirationDate > GETDATE() + I.ExpirationDays OR S.ExpirationDate IS NULL) -- se agrega linea para que no reponga producto vencido
       AND IU.uomname = 'SACO'
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, IU.ConversionFactor,S.FifoDate,s.LotNumber,S.ExpirationDate
       HAVING ((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
       AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLP.ExpirationDate IS NULL))
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))),0)
       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
       AND S.IdWhs = OLPS.IdWhs
       -- AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLPS.ExpirationDate IS NULL))
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR (OLPS.IdLpnSourceProposal IS NULL))),0)
       ) &gt;= IU.ConversionFactor
       AND (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
       AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLP.ExpirationDate IS NULL))
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))),0)
       --AND L.IdLocCode = OLP.IdLocSourceProposal),0)
       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
       AND S.IdWhs = OLPS.IdWhs
       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLPS.ExpirationDate IS NULL))
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR (OLPS.IdLpnSourceProposal IS NULL))),0)
       -- AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       ) &lt;= CASE WHEN (@itemQty/IU.ConversionFactor) &lt;= 0
       THEN 0
       ELSE IU.ConversionFactor * (@itemQty/IU.ConversionFactor)
       END
       )
       ORDER BY S.ExpirationDate ASC, S.FifoDate ASC, ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemNoZoneGreaterQtyUomSacoLotExp">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (IU.ConversionFactor * ROUND((@itemQty/IU.ConversionFactor),0,1)) AS ItemQty,
       S.IdItem,
       S.FifoDate,
       s.LotNumber,
       S.ExpirationDate,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
       AND (S.ExpirationDate > GETDATE() + I.ExpirationDays OR S.ExpirationDate IS NULL) -- se agrega linea para que no reponga producto vencido
       AND IU.uomname = 'SACO'
       AND @itemQty >= IU.ConversionFactor
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, IU.ConversionFactor,S.FifoDate,s.LotNumber,S.ExpirationDate
       HAVING ((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
       AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLP.ExpirationDate IS NULL))
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))),0)

       --),0)
       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
       AND S.IdWhs = OLPS.IdWhs
       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLPS.ExpirationDate IS NULL))
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR (OLPS.IdLpnSourceProposal IS NULL))),0)
       --AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       ) &gt;= IU.ConversionFactor
       AND (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
       AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLP.ExpirationDate IS NULL))
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))),0)

       --),0)
       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
       AND S.IdWhs = OLPS.IdWhs
       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLPS.ExpirationDate IS NULL))
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR (OLPS.IdLpnSourceProposal IS NULL))),0)
       --AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       ) &gt;= CASE WHEN (@itemQty/IU.ConversionFactor) &lt;= 0
       THEN 0
       ELSE IU.ConversionFactor * (@itemQty/IU.ConversionFactor)
       END
       )
       ORDER BY S.ExpirationDate ASC, S.FifoDate ASC, ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemNoZoneLessQtyUomCaja">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (IU.ConversionFactor * ROUND(((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
       AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal),0)
       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
       AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       )/IU.ConversionFactor),0,1)) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       S.FifoDate, S.ExpirationDate, S.FabricationDate, S.LotNumber, S.IdCtgItem,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND S.HoldCode IS NULL
     AND IU.SpecialField1 = 'Caja'
     GROUP BY
     S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
     S.FifoDate, S.ExpirationDate, S.FabricationDate, S.LotNumber, S.IdCtgItem,
     L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
     L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
     L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
     LT.LocTypeName, LT.Status, IU.ConversionFactor
     HAVING ((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
     FROM v_Other_LocationPicking AS OLP
     WHERE S.IdItem = OLP.IdItem
     AND S.IdWhs = OLP.IdWhs
     AND L.IdLocCode = OLP.IdLocSourceProposal),0)
     - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
     FROM v_Other_LocationPicking_Sim AS OLPS
     WHERE S.IdItem = OLPS.IdItem
     AND S.IdWhs = OLPS.IdWhs
     AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
     ) &gt;= IU.ConversionFactor
           AND (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal),0)
                               - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										     AND S.IdWhs = OLPS.IdWhs
                                             AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
                ) &lt;= CASE WHEN (@itemQty/IU.ConversionFactor) &lt;= 0 
                             THEN 0 
                             ELSE IU.ConversionFactor * (@itemQty/IU.ConversionFactor) 
                             END
              )
       ORDER BY ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemNoZoneGreaterQtyUomCaja">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (IU.ConversionFactor * ROUND((@itemQty/IU.ConversionFactor),0,1)) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       S.FifoDate, 
       S.ExpirationDate, 
       S.FabricationDate, 
       S.LotNumber, 
       S.IdCtgItem,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND S.HoldCode IS NULL
     AND IU.SpecialField1 = 'Caja'
     AND @itemQty >= IU.ConversionFactor
     GROUP BY
     S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
     S.FifoDate, S.ExpirationDate, S.FabricationDate, S.LotNumber, S.IdCtgItem,
     L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
     L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
     L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
     LT.LocTypeName, LT.Status, IU.ConversionFactor
     HAVING ((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
     FROM v_Other_LocationPicking AS OLP
     WHERE S.IdItem = OLP.IdItem
     AND S.IdWhs = OLP.IdWhs
     AND L.IdLocCode = OLP.IdLocSourceProposal),0)
     - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
     FROM v_Other_LocationPicking_Sim AS OLPS
     WHERE S.IdItem = OLPS.IdItem
     AND S.IdWhs = OLPS.IdWhs
     AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
     ) &gt;= IU.ConversionFactor
           AND (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal),0)
                               - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										     AND S.IdWhs = OLPS.IdWhs
                                             AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
                ) &gt;= CASE WHEN (@itemQty/IU.ConversionFactor) &lt;= 0 
                             THEN 0 
                             ELSE IU.ConversionFactor * (@itemQty/IU.ConversionFactor) 
                             END
       )
       ORDER BY ItemQty DESC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>
   
   <query code="STKPUTItemNoZoneLessQtyUomPack">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (IU.ConversionFactor * ROUND(((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                                                 FROM v_Other_LocationPicking AS OLP
                                                                 WHERE S.IdItem = OLP.IdItem
																   AND S.IdWhs = OLP.IdWhs
                                                                   AND L.IdLocCode = OLP.IdLocSourceProposal),0)
                                                     - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                                                 FROM v_Other_LocationPicking_Sim AS OLPS
                                                                 WHERE S.IdItem = OLPS.IdItem
																   AND S.IdWhs = OLPS.IdWhs
                                                                   AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       )/IU.ConversionFactor),0,1)) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
                                                         AND S.IdWhs = OQRC.IdWhs
                                                         AND S.IdOwn = OQRC.IdOwn
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND S.HoldCode IS NULL
     AND IU.SpecialField1 = 'Pack'
     GROUP BY
     S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
     L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
     L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
     L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
     LT.LocTypeName, LT.Status, IU.ConversionFactor
     HAVING ((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
     FROM v_Other_LocationPicking AS OLP
     WHERE S.IdItem = OLP.IdItem
     AND S.IdWhs = OLP.IdWhs
     AND L.IdLocCode = OLP.IdLocSourceProposal),0)
     - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
     FROM v_Other_LocationPicking_Sim AS OLPS
     WHERE S.IdItem = OLPS.IdItem
     AND S.IdWhs = OLPS.IdWhs
     AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
     ) &gt;= IU.ConversionFactor
           AND (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal),0)
                               - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										     AND S.IdWhs = OLPS.IdWhs
                                             AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
                ) &lt;= CASE WHEN (@itemQty/IU.ConversionFactor) &lt;= 0
                             THEN 0
                             ELSE IU.ConversionFactor * (@itemQty/IU.ConversionFactor)
                             END
              )
       ORDER BY ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemNoZoneGreaterQtyUomPack">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (IU.ConversionFactor * ROUND((@itemQty/IU.ConversionFactor),0,1)) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
                                                         AND S.IdWhs = OQRC.IdWhs
                                                         AND S.IdOwn = OQRC.IdOwn
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND S.HoldCode IS NULL
     AND IU.SpecialField1 = 'Pack'
     AND @itemQty >= IU.ConversionFactor
     GROUP BY
     S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
     L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
     L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
     L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
     LT.LocTypeName, LT.Status, IU.ConversionFactor
     HAVING ((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
     FROM v_Other_LocationPicking AS OLP
     WHERE S.IdItem = OLP.IdItem
     AND S.IdWhs = OLP.IdWhs
     AND L.IdLocCode = OLP.IdLocSourceProposal),0)
     - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
     FROM v_Other_LocationPicking_Sim AS OLPS
     WHERE S.IdItem = OLPS.IdItem
     AND S.IdWhs = OLPS.IdWhs
     AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
     ) &gt;= IU.ConversionFactor
                                           AND (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal),0)
                                - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										     AND S.IdWhs = OLPS.IdWhs
                                             AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
                ) &gt;= CASE WHEN (@itemQty/IU.ConversionFactor) &lt;= 0
                             THEN 0
                             ELSE IU.ConversionFactor * (@itemQty/IU.ConversionFactor)
                             END
              )
       ORDER BY ItemQty DESC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemNoZoneLessQty">
     <sql>
		 SELECT TOP 1
		 ABS(L.PickingFlow - @pickingFlow) AS Ruta,
		 S.IdWhs,
		 S.IdOwn,
		 (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND OLP.IDWHS= @idwhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND OLPS.IDWHS= @idwhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) AS ItemQty,
		 S.IdItem,
		 CASE
		 WHEN @idCtgItem IS NOT NULL THEN @idCtgItem
		 WHEN @idCtgItem IS NULL THEN S.IdCtgItem
		 END AS IdCtgItem,
		 CASE
		 WHEN @lotNumber IS NOT NULL THEN @lotNumber
		 WHEN @lotNumber IS NULL THEN S.Lotnumber
		 END AS LotNumber,
		 CASE
		 WHEN  @fifoDate IS NOT NULL THEN @fifoDate
		 WHEN  @fifoDate IS NULL THEN S.FifoDate
		 END AS FifoDate,
		 CASE
		 WHEN @fabricationDate IS NOT NULL THEN @fabricationDate
		 WHEN @fabricationDate IS NULL THEN S.FabricationDate
		 END AS FabricationDate,
		 CASE
		 WHEN @expirationDate IS NOT NULL THEN @expirationDate
		 WHEN @expirationDate IS NULL THEN S.ExpirationDate
		 END AS ExpirationDate,
		 S.IdLpnCode,
		 S.LpnTypeCode,
		 S.IdLpnCodeContainer,
		 S.LpnTypeCodeContainer,
		 L.IdLocCode,
		 L.LocCode,
		 L.RowLoc,
		 L.ColumnLoc,
		 L.LevelLoc,
		 L.Aisle,L.Status,
		 L.Description,
		 L.SharedItem,
		 L.OnlyLPN,
		 L.PickingFlow,
		 L.PutawayFlow,
		 L.CapacityLPN,
		 L.CapacityUnit,
		 L.Length,
		 L.Width,
		 L.Height,
		 L.Volume,
		 L.Weight,
		 L.LockInventory,
		 LT.IdLocType,
		 LT.LocTypeCode,
		 LT.LocTypeName,
		 LT.Status
		 FROM Stock S
		 INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
		 INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		 INNER JOIN Item I ON I.IdItem = S.IdItem
		 -- Stock Reserve by Customer
		 LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
		 AND S.IdWhs = OQRC.IdWhs
		 AND S.IdOwn = OQRC.IdOwn
		 AND OQRC.CustomerCode &lt;&gt; @customerCode
		 WHERE Not Exists (Select IdITem From ItemLocation Where IdItem = @idItem)
		 AND S.IdWhs = L.IdWhs
		 AND S.IdItem = @idItem
		 AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
		 AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
		 AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
		 AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
		 AND ((S.ExpirationDate = @expirationDate AND @expirationDate IS NOT NULL)OR(@expirationDate IS NULL))
		 AND S.IdWhs = @idWhs
		 AND L.LocTypeCode = 'PUT'
		 AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
		 AND L.Status = 1
		 AND L.LockInventory = 0
		 AND S.HoldCode IS NULL
		 GROUP BY
		 S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		 L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		 L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		 L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		 LT.LocTypeName, LT.Status,IdCtgItem, LotNumber, FifoDate, FabricationDate, ExpirationDate
		 HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) &gt; 0
		 AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) &lt;= @itemQty
		 ORDER BY ItemQty ASC, Ruta ASC
	 </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="DateTime">fifoDate</parameter>
       <parameter type="DateTime">fabricationDate</parameter>
       <parameter type="DateTime">expirationDate</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>
 


 <query code="STKPUTItemZoneLessQty">
     <sql>
       SELECT TOP 1 
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.StockId,
       S.IdWhs,
       S.IdOwn,
       SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) AS ItemQty,
       S.IdCtgItem,
       S.IdItem,
       S.Status,
       S.FifoDate,
       S.ExpirationDate,
       S.FabricationDate,
       S.LotNumber,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       S.Price,
       S.IdReceipt,
       S.IdInboundOrder,
       S.InboundLineNumber,
       S.IdOutboundOrder,
       S.OutboundLineNumber,
       S.SealNumber,
       S.ReasonCode,
       S.HoldCode,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       --INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
       -- Stock en Tareas Pendientes
       LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem 
                                                     AND S.IdLocCode = OLP.IdLocSourceProposal
													 AND S.IdWhs = OLP.IdWhs
                                                     AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                                        OR(OLP.IdLpnSourceProposal IS NULL))                                                     
       -- Stock en Tareas Simuladas
       LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem 
													      AND S.IdWhs = OLPS.IdWhs
                                                          AND S.IdLocCode = OLPS.IdLocSourceProposal
                                                          AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                                             OR(OLPS.IdLpnSourceProposal IS NULL))
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
                                                         AND S.IdWhs = OQRC.IdWhs
                                                         AND S.IdOwn = OQRC.IdOwn
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt; 0
         AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &lt;= @itemQty
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND S.HoldCode IS NULL
     AND EXISTS(SELECT IDUserWms
     FROM UserWorkZone UWZ INNER JOIN
     WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
     WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
     WHERE UWZ.IdUserWms = @idUser
     AND WZ.IdWhs = L.IdWhs
     AND WZL.IdLocCode = L.IdLocCode)
     AND EXISTS(SELECT WZF.IdLocCode
     FROM WorkZoneForkLift WZF INNER JOIN
     WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
     WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
     WHERE WZF.IdLocCode = @idForkLift
     AND WZ.IdWhs = L.IdWhs
     AND WZL.IdLocCode = L.IdLocCode)
     GROUP BY
     S.StockId, S.IdWhs, S.IdOwn, S.IdCtgItem, S.IdItem, S.Status, S.FifoDate, S.ExpirationDate, S.FabricationDate,
     S.LotNumber, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer, S.Price, S.IdReceipt,
     S.IdInboundOrder, S.InboundLineNumber, S.IdOutboundOrder, S.OutboundLineNumber, S.SealNumber, S.ReasonCode,
     S.HoldCode, L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle,
     L.Status, L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
     L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
     LT.LocTypeName, LT.Status
     ORDER BY ItemQty ASC, Ruta ASC
   </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemNoZoneGreaterQty">
     <sql>
		 SELECT TOP 1
		 ABS(L.PickingFlow - @pickingFlow) AS Ruta,
		 S.IdWhs,
		 S.IdOwn,
		 (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) AS ItemQty,
		 S.IdItem,
		 CASE
		 WHEN @idCtgItem IS NOT NULL THEN @idCtgItem
		 WHEN @idCtgItem IS NULL THEN S.IdCtgItem
		 END AS IdCtgItem,
		 CASE
		 WHEN @lotNumber IS NOT NULL THEN @lotNumber
		 WHEN @lotNumber IS NULL THEN S.Lotnumber
		 END AS LotNumber,
		 CASE
		 WHEN  @fifoDate IS NOT NULL THEN @fifoDate
		 WHEN  @fifoDate IS NULL THEN S.FifoDate
		 END AS FifoDate,
		 CASE
		 WHEN @fabricationDate IS NOT NULL THEN @fabricationDate
		 WHEN @fabricationDate IS NULL THEN S.FabricationDate
		 END AS FabricationDate,
		 CASE
		 WHEN @expirationDate IS NOT NULL THEN @expirationDate
		 WHEN @expirationDate IS NULL THEN S.ExpirationDate
		 END AS ExpirationDate,
		 S.IdLpnCode,
		 S.LpnTypeCode,
		 S.IdLpnCodeContainer,
		 S.LpnTypeCodeContainer,
		 L.IdLocCode,
		 L.LocCode,
		 L.RowLoc,
		 L.ColumnLoc,
		 L.LevelLoc,
		 L.Aisle,L.Status,
		 L.Description,
		 L.SharedItem,
		 L.OnlyLPN,
		 L.PickingFlow,
		 L.PutawayFlow,
		 L.CapacityLPN,
		 L.CapacityUnit,
		 L.Length,
		 L.Width,
		 L.Height,
		 L.Volume,
		 L.Weight,
		 L.LockInventory,
		 LT.IdLocType,
		 LT.LocTypeCode,
		 LT.LocTypeName,
		 LT.Status
		 FROM Stock S
		 INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
		 INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		 INNER JOIN Item I ON I.IdItem = S.IdItem
		 -- Stock Reserve by Customer
		 LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
		 AND S.IdWhs = OQRC.IdWhs
		 AND S.IdOwn = OQRC.IdOwn
		 AND OQRC.CustomerCode &lt;&gt; @customerCode
		 WHERE Not Exists (Select IdITem From ItemLocation Where IdItem = @idItem)
		 AND S.IdWhs = L.IdWhs
		 AND S.IdItem = @idItem
		 AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
		 AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
		 AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
		 AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
		 AND ((S.ExpirationDate = @expirationDate AND @expirationDate IS NOT NULL)OR(@expirationDate IS NULL))
		 AND S.IdWhs = @idWhs
		 AND L.LocTypeCode = 'PUT'
		 AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
		 AND L.Status = 1
		 AND L.LockInventory = 0
		 AND S.HoldCode IS NULL
		 GROUP BY
		 S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		 L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		 L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		 L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		 LT.LocTypeName, LT.Status,IdCtgItem, LotNumber, FifoDate, FabricationDate, ExpirationDate
		 HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) &gt;= @itemQty
		 ORDER BY ItemQty DESC, Ruta ASC
	 </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="DateTime">fifoDate</parameter>
       <parameter type="DateTime">fabricationDate</parameter>
       <parameter type="DateTime">expirationDate</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>
   
   <query code="STKPUTItemZoneGreaterQty">
     <sql>
       SELECT TOP 1 
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.StockId,
       S.IdWhs,
       S.IdOwn,
       SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) AS ItemQty,
       S.IdCtgItem,
       S.IdItem,
       S.Status,
       S.FifoDate,
       S.ExpirationDate,
       S.FabricationDate,
       S.LotNumber,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       S.Price,
       S.IdReceipt,
       S.IdInboundOrder,
       S.InboundLineNumber,
       S.IdOutboundOrder,
       S.OutboundLineNumber,
       S.SealNumber,
       S.ReasonCode,
       S.HoldCode,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       --INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
       -- Stock en Tareas Pendientes
       LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem 
												     AND S.IdWhs = OLP.IdWhs
                                                     AND S.IdLocCode = OLP.IdLocSourceProposal
                                                     AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                                        OR(OLP.IdLpnSourceProposal IS NULL))                                                        
       -- Stock en Tareas Simuladas
       LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem 
														  AND S.IdWhs = OLPS.IdWhs
                                                          AND S.IdLocCode = OLPS.IdLocSourceProposal
                                                          AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                                             OR(OLPS.IdLpnSourceProposal IS NULL))                                                          
       -- Stock Reserve by Customer
       --LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem AND
       --S.IdWhs = OQRC.IdWhs AND S.IdOwn = OQRC.IdOwn AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt;= @itemQty
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND S.HoldCode IS NULL
     AND EXISTS(SELECT IDUserWms
     FROM UserWorkZone UWZ INNER JOIN
     WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
     WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
     WHERE UWZ.IdUserWms = @idUser
     AND WZ.IdWhs = L.IdWhs
     AND WZL.IdLocCode = L.IdLocCode)
     AND EXISTS(SELECT WZF.IdLocCode
     FROM WorkZoneForkLift WZF INNER JOIN
     WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
     WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
     WHERE WZF.IdLocCode = @idForkLift
     AND WZ.IdWhs = L.IdWhs
     AND WZL.IdLocCode = L.IdLocCode)
     GROUP BY
     S.StockId, S.IdWhs, S.IdOwn, S.IdCtgItem, S.IdItem, S.Status, S.FifoDate, S.ExpirationDate, S.FabricationDate,
     S.LotNumber, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer, S.Price, S.IdReceipt,
     S.IdInboundOrder, S.InboundLineNumber, S.IdOutboundOrder, S.OutboundLineNumber, S.SealNumber, S.ReasonCode,
     S.HoldCode, L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle,
     L.Status, L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
     L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
     LT.LocTypeName, LT.Status
     ORDER BY ItemQty DESC, Ruta ASC
   </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemLoteNoZoneLessQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.StockId,
       S.IdWhs,
       S.IdOwn,
       SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) AS ItemQty,
       S.IdCtgItem,
       S.IdItem,
       S.Status,
       S.FifoDate,
       S.ExpirationDate,
       S.FabricationDate,
       S.LotNumber,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       S.Price,
       S.IdReceipt,
       S.IdInboundOrder,
       S.InboundLineNumber,
       S.IdOutboundOrder,
       S.OutboundLineNumber,
       S.SealNumber,
       S.ReasonCode,
       S.HoldCode,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       -- Stock en Tareas Pendientes
       LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem 
													 AND S.IdWhs = OLP.IdWhs
                                                     AND S.IdLocCode = OLP.IdLocSourceProposal
       -- Stock en Tareas Simuladas
       LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem 
														  AND S.IdWhs = OLPS.IdWhs
                                                          AND S.IdLocCode = OLPS.IdLocSourceProposal
       WHERE S.IdWhs = L.IdWhs
         AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt; 0
         AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &lt;= @itemQty
         AND S.IdItem = @idItem
         AND S.LotNumber = @lotNumber
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND S.HoldCode IS NULL
     GROUP BY
     S.StockId, S.IdWhs, S.IdOwn, S.IdCtgItem, S.IdItem, S.Status, S.FifoDate, S.ExpirationDate, S.FabricationDate,
     S.LotNumber, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer, S.Price, S.IdReceipt,
     S.IdInboundOrder, S.InboundLineNumber, S.IdOutboundOrder, S.OutboundLineNumber, S.SealNumber, S.ReasonCode,
     S.HoldCode, L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle,
     L.Status, L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
     L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
     LT.LocTypeName, LT.Status
     ORDER BY ItemQty ASC, Ruta ASC
   </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemLoteZoneLessQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.StockId,
       S.IdWhs,
       S.IdOwn,
       SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) AS ItemQty,
       S.IdCtgItem,
       S.IdItem,
       S.Status,
       S.FifoDate,
       S.ExpirationDate,
       S.FabricationDate,
       S.LotNumber,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       S.Price,
       S.IdReceipt,
       S.IdInboundOrder,
       S.InboundLineNumber,
       S.IdOutboundOrder,
       S.OutboundLineNumber,
       S.SealNumber,
       S.ReasonCode,
       S.HoldCode,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
       -- Stock en Tareas Pendientes
       LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem 
													 AND S.IdWhs = OLP.IdWhs
                                                     AND S.IdLocCode = OLP.IdLocSourceProposal
       -- Stock en Tareas Simuladas
       LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem 
														  AND S.IdWhs = OLPS.IdWhs
                                                          AND S.IdLocCode = OLPS.IdLocSourceProposal
       WHERE S.IdWhs = L.IdWhs
         AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt; 0
         AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &lt;= @itemQty
         AND S.IdItem = @idItem
         -- AND S.LotNumber = @lotNumber
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND S.HoldCode IS NULL
     AND EXISTS(SELECT IDUserWms
     FROM UserWorkZone UWZ INNER JOIN
     WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
     WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
     WHERE UWZ.IdUserWms = @idUser
     AND WZ.IdWhs = L.IdWhs
     AND WZL.IdLocCode = L.IdLocCode)
     AND EXISTS(SELECT WZF.IdLocCode
     FROM WorkZoneForkLift WZF INNER JOIN
     WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
     WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
     WHERE WZF.IdLocCode = @idForkLift
     AND WZ.IdWhs = L.IdWhs
     AND WZL.IdLocCode = L.IdLocCode)
     GROUP BY
     S.StockId, S.IdWhs, S.IdOwn, S.IdCtgItem, S.IdItem, S.Status, S.FifoDate, S.ExpirationDate, S.FabricationDate,
     S.LotNumber, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer, S.Price, S.IdReceipt,
     S.IdInboundOrder, S.InboundLineNumber, S.IdOutboundOrder, S.OutboundLineNumber, S.SealNumber, S.ReasonCode,
     S.HoldCode, L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle,
     L.Status, L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
     L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
     LT.LocTypeName, LT.Status
     ORDER BY S.ExpirationDate ASC, ItemQty ASC, Ruta ASC
   </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemLoteZoneLessQtyUsefulLife">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.StockId,
       S.IdWhs,
       S.IdOwn,
       SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) AS ItemQty,
       S.IdCtgItem,
       S.IdItem,
       S.Status,
       S.FifoDate,
       S.ExpirationDate,
       S.FabricationDate,
       S.LotNumber,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       S.Price,
       S.IdReceipt,
       S.IdInboundOrder,
       S.InboundLineNumber,
       S.IdOutboundOrder,
       S.OutboundLineNumber,
       S.SealNumber,
       S.ReasonCode,
       S.HoldCode,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       S.lotNumber,
       S.FabricationDate,
       S.ExpirationDate

       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
       -- Stock en Tareas Pendientes
       LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND S.IdLocCode = OLP.IdLocSourceProposal
       AND S.lotNumber = OLP.lotNumber
       AND S.ExpirationDate = OLP.ExpirationDate
       AND S.FabricationDate = OLP.FabricationDate
       -- Stock en Tareas Simuladas
       LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND S.IdLocCode = OLPS.IdLocSourceProposal
       AND S.lotNumber = OLPS.lotNumber
       AND S.ExpirationDate = OLPS.ExpirationDate
       AND S.FabricationDate = OLPS.FabricationDate
       WHERE S.IdWhs = L.IdWhs
       AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt; 0
       AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &lt;= @itemQty
       AND S.IdItem = @idItem
       AND S.LotNumber = @lotNumber
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
       FROM WorkZoneForkLift WZF INNER JOIN
       WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE WZF.IdLocCode = @idForkLift
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY
       S.StockId, S.IdWhs, S.IdOwn, S.IdCtgItem, S.IdItem, S.Status, S.FifoDate, S.ExpirationDate, S.FabricationDate,
       S.LotNumber, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer, S.Price, S.IdReceipt,
       S.IdInboundOrder, S.InboundLineNumber, S.IdOutboundOrder, S.OutboundLineNumber, S.SealNumber, S.ReasonCode,
       S.HoldCode, L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle,
       L.Status, L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, S.lotNumber, S.FabricationDate, S.ExpirationDate
       ORDER BY ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
       <parameter type="DateTime">expirationDate</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemLoteNoZoneGreaterQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.StockId,
       S.IdWhs,
       S.IdOwn,
       SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) AS ItemQty,
       S.IdCtgItem,
       S.IdItem,
       S.Status,
       S.FifoDate,
       S.ExpirationDate,
       S.FabricationDate,
       S.LotNumber,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       S.Price,
       S.IdReceipt,
       S.IdInboundOrder,
       S.InboundLineNumber,
       S.IdOutboundOrder,
       S.OutboundLineNumber,
       S.SealNumber,
       S.ReasonCode,
       S.HoldCode,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       -- Stock en Tareas Pendientes
       LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem 
													 AND S.IdWhs = OLP.IdWhs
                                                     AND S.IdLocCode = OLP.IdLocSourceProposal
       -- Stock en Tareas Simuladas
       LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem 
														  AND S.IdWhs = OLPS.IdWhs
                                                          AND S.IdLocCode = OLPS.IdLocSourceProposal
       -- Stock Reserve by Customer
       --LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem AND
       --S.IdWhs = OQRC.IdWhs AND S.IdOwn = OQRC.IdOwn AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt;= @itemQty
         AND S.IdItem = @idItem
         AND S.LotNumber = @lotNumber
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND S.HoldCode IS NULL
     GROUP BY
     S.StockId, S.IdWhs, S.IdOwn, S.IdCtgItem, S.IdItem, S.Status, S.FifoDate, S.ExpirationDate, S.FabricationDate,
     S.LotNumber, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer, S.Price, S.IdReceipt,
     S.IdInboundOrder, S.InboundLineNumber, S.IdOutboundOrder, S.OutboundLineNumber, S.SealNumber, S.ReasonCode,
     S.HoldCode, L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle,
     L.Status, L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
     L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
     LT.LocTypeName, LT.Status
     ORDER BY ItemQty DESC, Ruta ASC
   </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemLoteZoneGreaterQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.StockId,
       S.IdWhs,
       S.IdOwn,
       SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) AS ItemQty,
       S.IdCtgItem,
       S.IdItem,
       S.Status,
       S.FifoDate,
       S.ExpirationDate,
       S.FabricationDate,
       S.LotNumber,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       S.Price,
       S.IdReceipt,
       S.IdInboundOrder,
       S.InboundLineNumber,
       S.IdOutboundOrder,
       S.OutboundLineNumber,
       S.SealNumber,
       S.ReasonCode,
       S.HoldCode,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
       -- Stock en Tareas Pendientes
       LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem 
													 AND S.IdWhs = OLP.IdWhs
                                                     AND S.IdLocCode = OLP.IdLocSourceProposal
       -- Stock en Tareas Simuladas
       LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem 
													      AND S.IdWhs = OLPS.IdWhs
                                                          AND S.IdLocCode = OLPS.IdLocSourceProposal
       -- Stock Reserve by Customer
       --LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem AND
       --S.IdWhs = OQRC.IdWhs AND S.IdOwn = OQRC.IdOwn AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt;= @itemQty
         AND S.IdItem = @idItem
         -- AND S.LotNumber = @lotNumber
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND S.HoldCode IS NULL
     AND EXISTS(SELECT IDUserWms
     FROM UserWorkZone UWZ INNER JOIN
     WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
     WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
     WHERE UWZ.IdUserWms = @idUser
     AND WZ.IdWhs = L.IdWhs
     AND WZL.IdLocCode = L.IdLocCode)
     AND EXISTS(SELECT WZF.IdLocCode
     FROM WorkZoneForkLift WZF INNER JOIN
     WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
     WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
     WHERE WZF.IdLocCode = @idForkLift
     AND WZ.IdWhs = L.IdWhs
     AND WZL.IdLocCode = L.IdLocCode)
     GROUP BY
     S.StockId, S.IdWhs, S.IdOwn, S.IdCtgItem, S.IdItem, S.Status, S.FifoDate, S.ExpirationDate, S.FabricationDate,
     S.LotNumber, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer, S.Price, S.IdReceipt,
     S.IdInboundOrder, S.InboundLineNumber, S.IdOutboundOrder, S.OutboundLineNumber, S.SealNumber, S.ReasonCode,
     S.HoldCode, L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle,
     L.Status, L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
     L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
     LT.LocTypeName, LT.Status
     ORDER BY S.ExpirationDate ASC, ItemQty ASC, Ruta ASC
   </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemLoteZoneGreaterQtyUsefulLife">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.StockId,
       S.IdWhs,
       S.IdOwn,
       SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) AS ItemQty,
       S.IdCtgItem,
       S.IdItem,
       S.Status,
       S.FifoDate,
       S.ExpirationDate,
       S.FabricationDate,
       S.LotNumber,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       S.Price,
       S.IdReceipt,
       S.IdInboundOrder,
       S.InboundLineNumber,
       S.IdOutboundOrder,
       S.OutboundLineNumber,
       S.SealNumber,
       S.ReasonCode,
       S.HoldCode,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       S.lotNumber,
       S.FabricationDate,
       S.ExpirationDate

       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
       -- Stock en Tareas Pendientes
       LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND S.IdLocCode = OLP.IdLocSourceProposal
       AND S.lotNumber = OLP.lotNumber
       AND S.ExpirationDate = OLP.ExpirationDate
       AND S.FabricationDate = OLP.FabricationDate
       -- Stock en Tareas Simuladas
       LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND S.IdLocCode = OLPS.IdLocSourceProposal
       AND S.lotNumber = OLPS.lotNumber
       AND S.ExpirationDate = OLPS.ExpirationDate
       AND S.FabricationDate = OLPS.FabricationDate
       -- Stock Reserve by Customer
       --LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem AND
       --S.IdWhs = OQRC.IdWhs AND S.IdOwn = OQRC.IdOwn AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt;= @itemQty
       AND S.IdItem = @idItem
       AND S.LotNumber = @lotNumber
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
       FROM WorkZoneForkLift WZF INNER JOIN
       WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE WZF.IdLocCode = @idForkLift
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY
       S.StockId, S.IdWhs, S.IdOwn, S.IdCtgItem, S.IdItem, S.Status, S.FifoDate, S.ExpirationDate, S.FabricationDate,
       S.LotNumber, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer, S.Price, S.IdReceipt,
       S.IdInboundOrder, S.InboundLineNumber, S.IdOutboundOrder, S.OutboundLineNumber, S.SealNumber, S.ReasonCode,
       S.HoldCode, L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle,
       L.Status, L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, S.lotNumber, S.FabricationDate, S.ExpirationDate
       ORDER BY ItemQty DESC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
       <parameter type="DateTime">expirationDate</parameter>
     </parameters>
   </query>
   
   <query code="STKPUTItemNoZoneGreaterQtyGroupByLotExpDateFab">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       CASE WHEN
	     (SUM(S.ItemQty) -
	         (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
             FROM v_Other_LocationPicking_Sim AS OLPS
             WHERE S.IdItem = OLPS.IdItem
			 AND S.IdWhs = OLPS.IdWhs
             AND L.IdLocCode = OLPS.IdLocSourceProposal
             AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
             OR(OLPS.IdLpnSourceProposal IS NULL))
             AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
             OR(S.lotNumber IS NULL)
             OR(OLPS.LotNumber IS NULL))
	         AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
             OR(S.ExpirationDate IS NULL)
             OR(OLPS.ExpirationDate IS NULL))
	         AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
             OR(S.FabricationDate IS NULL)
             OR(OLPS.FabricationDate IS NULL))
             ),0) +  
	         (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
             FROM v_Other_LocationPicking AS OLP
             WHERE S.IdItem = OLP.IdItem
			 AND S.IdWhs = OLP.IdWhs
             AND L.IdLocCode = OLP.IdLocSourceProposal
             AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
             OR(OLP.IdLpnSourceProposal IS NULL))
             AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
             OR(S.lotNumber IS NULL)
             OR(OLP.LotNumber IS NULL))
	         AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
             OR(S.ExpirationDate IS NULL)
             OR(OLP.ExpirationDate IS NULL))
	         AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
             OR(S.FabricationDate IS NULL)
             OR(OLP.FabricationDate IS NULL))
	         ),0)
	        )))
          > @itemQty THEN @itemQty ELSE
          
          (SUM(S.ItemQty) -
	       (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
           FROM v_Other_LocationPicking_Sim AS OLPS
           WHERE S.IdItem = OLPS.IdItem
		   AND S.IdWhs = OLPS.IdWhs
           AND L.IdLocCode = OLPS.IdLocSourceProposal
           AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
           OR(OLPS.IdLpnSourceProposal IS NULL))
           AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
           OR(S.lotNumber IS NULL)
           OR(OLPS.LotNumber IS NULL))
	         AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
           OR(S.ExpirationDate IS NULL)
           OR(OLPS.ExpirationDate IS NULL))
	         AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
           OR(S.FabricationDate IS NULL)
           OR(OLPS.FabricationDate IS NULL))
           ),0) +  
	       
           (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
           FROM v_Other_LocationPicking AS OLP
           WHERE S.IdItem = OLP.IdItem
		   AND S.IdWhs = OLP.IdWhs
           AND L.IdLocCode = OLP.IdLocSourceProposal
           AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
           OR(OLP.IdLpnSourceProposal IS NULL))
           AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
           OR(S.lotNumber IS NULL)
           OR(OLP.LotNumber IS NULL))
	         AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
           OR(S.ExpirationDate IS NULL)
           OR(OLP.ExpirationDate IS NULL))
	         AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
           OR(S.FabricationDate IS NULL)
           OR(OLP.FabricationDate IS NULL))
	       ),0)
	       ))) end ItemQty,
       S.IdItem,
       S.LotNumber,
       S.fabricationDate,
       S.ExpirationDate,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       s.lotNumber,
       s.fabricationDate,
       s.expirationDate

       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
	     LEFT JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem 
													 AND S.IdWhs = OLPS.IdWhs
                                                     AND S.IdLocCode = OLPS.IdLocSourceProposal
													 AND S.ExpirationDate = OLPS.ExpirationDate
													 AND S.FabricationDate = OLPS.FabricationDate
													 AND S.LotNumber = OLPS.LotNumber
	     LEFT JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem 
													 AND S.IdWhs = OLP.IdWhs
                                                     AND S.IdLocCode = OLP.IdLocSourceProposal
													 AND S.ExpirationDate = OLP.ExpirationDate
													 AND S.FabricationDate = OLP.FabricationDate
													 AND S.LotNumber = OLP.LotNumber
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       GROUP BY
       S.ItemQty,
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, s.lotNumber, s.fabricationDate,s.expirationDate
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
       AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLPS.ExpirationDate IS NULL))
       AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
       OR(S.FabricationDate IS NULL)
       OR(OLPS.FabricationDate IS NULL))
       ),0) +
       (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
       AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))
       AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLP.ExpirationDate IS NULL))
       AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
       OR(S.FabricationDate IS NULL)
       OR(OLP.FabricationDate IS NULL))
       ),0)
       ))
       ) &gt;= @itemQty
	   order by S.ExpirationDate asc, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>       
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>

   <query code="STKPICKItemNoZoneLessQtyPlanUnid">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       L.IdWhs,
       I.IdOwn,
       (SUM(SP.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE I.IdItem = OLP.IdItem
       AND L.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal),0)
       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE I.IdItem = OLPS.IdItem
       AND L.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       ) AS ItemQty,
       I.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       S.FifoDate, 
       S.ExpirationDate, 
       S.FabricationDate, 
       S.LotNumber, 
       S.IdCtgItem,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM ItemLocation IL LEFT JOIN
       (SELECT S.IdWhs, S.IdOwn, S.IdItem, SUM(ItemQty) ItemQty
       FROM Stock S INNER JOIN
       Location L ON S.IdLocCode = L.IdLocCode
       WHERE ((L.LocTypeCode = 'PICK'  AND L.OnlyLPN = 0) OR
       (L.LocTypeCode = 'PUT'  AND L.OnlyLPN = 1))
       AND S.IdWhs = @idWhs
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND S.HoldCode IS NULL
     GROUP BY S.IdWhs, S.IdOwn, S.IdItem) SP ON IL.IdItem = SP.IdItem INNER JOIN
     Location L ON L.IdLocCode = IL.IdLocCode INNER JOIN
     LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
     Item I ON I.IdItem = IL.IdItem LEFT JOIN
     Stock S ON S.IdWhs = L.IdWhs
     AND S.IdOwn = I.IdOwn
     AND S.IdItem = I.IdItem
     AND S.IdLocCode = IL.IdLocCode LEFT OUTER JOIN
     -- Stock Reserve by Customer
     v_Other_QtyReserveCustomer AS OQRC ON I.IdItem = OQRC.IdItem
     AND L.IdWhs = OQRC.IdWhs
     AND I.IdOwn = OQRC.IdOwn
     AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE IL.IdItem = @idItem
       AND L.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND L.OnlyLPN = 0
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
     GROUP BY
     L.IdWhs, I.IdOwn, I.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
     S.FifoDate, S.ExpirationDate, S.FabricationDate, S.LotNumber, S.IdCtgItem,
     L.PickingFlow, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
     L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
     L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
     LT.LocTypeName, LT.Status, SP.ItemQty
     HAVING (
     (SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
     FROM v_Other_LocationPicking AS OLP
     WHERE I.IdItem = OLP.IdItem
     AND L.IdWhs = OLP.IdWhs
     AND L.IdLocCode = OLP.IdLocSourceProposal),0))
     - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
     FROM v_Other_LocationPicking_Sim AS OLPS
     WHERE I.IdItem = OLPS.IdItem
     AND L.IdWhs = OLPS.IdWhs
     AND L.IdLocCode = OLPS.IdLocSourceProposal),0)) &gt; 0)
       AND (SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE I.IdItem = OLP.IdItem
	   AND L.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal),0))
       - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE I.IdItem = OLPS.IdItem
	   AND L.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)) &lt;= @itemQty)
       )
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="String">customerCode</parameter>       
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Decimal">itemQty</parameter>       
     </parameters>
   </query>     
  
   <query code="STKPICKItemNoZoneGreaterQtyPlanUnid">
     <sql>
		 SELECT TOP 1
		 ABS(L.PickingFlow - @pickingFlow) AS Ruta,
		 L.IdWhs,
		 I.IdOwn,
		 @itemQty1 AS ItemQty,
		 I.IdItem,
		 S.IdLpnCode,
		 S.LpnTypeCode,
		 S.IdLpnCodeContainer,
		 S.LpnTypeCodeContainer,
		 CASE
		 WHEN @idCtgItem IS NOT NULL THEN CAST(@idCtgItem AS SMALLINT)
		 WHEN @idCtgItem IS NULL THEN S.IdCtgItem
		 END AS IdCtgItem,
		 CASE
		 WHEN @lotNumber IS NOT NULL THEN @lotNumber
		 WHEN @lotNumber IS NULL THEN S.Lotnumber
		 END AS LotNumber,
		 CASE
		 WHEN  @fifoDate IS NOT NULL THEN @fifoDate
		 WHEN  @fifoDate IS NULL THEN S.FifoDate
		 END AS FifoDate,
		 CASE
		 WHEN @fabricationDate IS NOT NULL THEN @fabricationDate
		 WHEN @fabricationDate IS NULL THEN S.FabricationDate
		 END AS FabricationDate,
		 CASE
		 WHEN @expirationDate IS NOT NULL THEN @expirationDate
		 WHEN @expirationDate IS NULL THEN S.ExpirationDate
		 END AS ExpirationDate,
		 L.IdLocCode,
		 L.LocCode,
		 L.RowLoc,
		 L.ColumnLoc,
		 L.LevelLoc,
		 L.Aisle,L.Status,
		 L.Description,
		 L.SharedItem,
		 L.OnlyLPN,
		 L.PickingFlow,
		 L.PutawayFlow,
		 L.CapacityLPN,
		 L.CapacityUnit,
		 L.Length,
		 L.Width,
		 L.Height,
		 L.Volume,
		 L.Weight,
		 L.LockInventory,
		 LT.IdLocType,
		 LT.LocTypeCode,
		 LT.LocTypeName,
		 LT.Status
		 FROM ItemLocation IL LEFT JOIN
		 (SELECT S.IdWhs, S.IdOwn, S.IdItem, SUM(ItemQty) ItemQty
		 FROM Stock S INNER JOIN
		 Location L ON S.IdLocCode = L.IdLocCode
		 WHERE ((L.LocTypeCode = 'PICK'  AND L.OnlyLPN = 0) OR
		 (L.LocTypeCode = 'PUT'  AND L.OnlyLPN = 1))
		 AND ((@idCtgItem = S.IdCtgItem AND S.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL)
		 OR(@idCtgItem IS NULL)
		 OR(S.IdCtgItem IS NULL))
		 AND ((@lotNumber = S.LotNumber AND S.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL)
		 OR(@lotNumber IS NULL)
		 OR(S.LotNumber IS NULL))
		 AND ((@fifoDate = S.FifoDate AND S.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL)
		 OR(@fifoDate IS NULL)
		 OR(S.FifoDate IS NULL))
		 AND ((@fabricationDate = S.FabricationDate AND S.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL)
		 OR(@fabricationDate IS NULL)
		 OR(S.FabricationDate IS NULL))
		 AND ((@expirationDate = S.ExpirationDate AND S.ExpirationDate IS NOT NULL AND @expirationDate IS NOT NULL)
		 OR(@expirationDate IS NULL)
		 OR(S.expirationDate IS NULL))
		 AND S.IdWhs = @idWhs
		 AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
		 AND L.Status = 1
		 AND L.LockInventory = 0
		 AND S.HoldCode IS NULL
		 GROUP BY S.IdWhs, S.IdOwn, S.IdItem) SP ON IL.IdItem = SP.IdItem INNER JOIN
		 Location L ON L.IdLocCode = IL.IdLocCode INNER JOIN
		 LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
		 Item I ON I.IdItem = IL.IdItem LEFT JOIN
		 Stock S ON S.IdWhs = L.IdWhs
		 AND S.IdOwn = I.IdOwn
		 AND S.IdItem = I.IdItem
		 AND S.IdLocCode = IL.IdLocCode LEFT OUTER JOIN
		 -- Stock Reserve by Customer
		 v_Other_QtyReserveCustomer AS OQRC ON I.IdItem = OQRC.IdItem
		 AND L.IdWhs = OQRC.IdWhs
		 AND I.IdOwn = OQRC.IdOwn
		 AND OQRC.CustomerCode &lt;&gt; @customerCode LEFT JOIN
		 (SELECT IdItem, IdLocSourceProposal, SUM(COALESCE(ItemQty,0)) ItemQty, IdWhs
		 FROM v_Other_LocationPicking
		 GROUP BY IdItem, IdLocSourceProposal, IdWhs) VOLP ON I.IdItem = VOLP.IdItem
		 AND VOLP.idwhs = L.IdWhs
		 AND L.IdLocCode = VOLP.IdLocSourceProposal LEFT JOIN
		 (SELECT IdItem, IdLocSourceProposal, SUM(COALESCE(ItemQty,0)) ItemQty, IdWhs
		 FROM v_Other_LocationPicking_Sim
		 GROUP BY IdItem, IdLocSourceProposal, IdWhs) VOLPS ON I.IdItem = VOLPS.IdItem
		 AND VOLPS.idwhs = L.IdWhs
		 AND L.IdLocCode = VOLPS.IdLocSourceProposal
		 WHERE IL.IdItem = @idItem
		 AND L.IdWhs = @idWhs
		 AND L.LocTypeCode = 'PICK'
		 AND L.OnlyLPN = 0
		 AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
		 AND L.Status = 1
		 AND L.LockInventory = 0
		 AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
		 GROUP BY
		 L.IdWhs, I.IdOwn, I.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		 S.FifoDate, S.ExpirationDate, S.FabricationDate, S.LotNumber, S.IdCtgItem,
		 L.PickingFlow, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		 L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		 L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		 LT.LocTypeName, LT.Status
		 HAVING (SUM(SP.ItemQty) - COALESCE(SUM(VOLP.ItemQty),0) - COALESCE(SUM(VOLPS.ItemQty),0)) &gt;= @itemQty2
		 ORDER BY Ruta ASC
	 </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty1</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Decimal">itemQty2</parameter>      
	   <parameter type="Int">idCtgItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="DateTime">fifoDate</parameter>
       <parameter type="DateTime">fabricationDate</parameter>
       <parameter type="DateTime">expirationDate</parameter>
     </parameters>
   </query>     
   
   <query code="STKPICKItemNoZoneLessQtyPlanCaja">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       L.IdWhs,
       I.IdOwn,
       (IU.ConversionFactor * ROUND(((SUM(SP.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                                                  FROM v_Other_LocationPicking AS OLP
                                                                  WHERE I.IdItem = OLP.IdItem
																    AND L.IdWhs = OLP.IdWhs
                                                                    AND L.IdLocCode = OLP.IdLocSourceProposal),0)
                                                      - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                                                  FROM v_Other_LocationPicking_Sim AS OLPS
                                                                  WHERE I.IdItem = OLPS.IdItem
																    AND L.IdWhs = OLPS.IdWhs
                                                                    AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       )/IU.ConversionFactor),0,1)) AS ItemQty,
       I.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM ItemLocation IL LEFT JOIN
            (SELECT S.IdWhs, S.IdOwn, S.IdItem, SUM(ItemQty) ItemQty
			       FROM Stock S INNER JOIN
				          Location L ON S.IdLocCode = L.IdLocCode
			       WHERE ((L.LocTypeCode = 'PICK'  AND L.OnlyLPN = 1) OR 
					          (L.LocTypeCode = 'PUT'  AND L.OnlyLPN = 1))
				     AND S.IdWhs = @idWhs
			         AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     GROUP BY S.IdWhs, S.IdOwn, S.IdItem) SP ON IL.IdItem = SP.IdItem INNER JOIN
     Location L ON L.IdLocCode = IL.IdLocCode INNER JOIN
     LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
     Item I ON I.IdItem = IL.IdItem INNER JOIN
     ItemUom IU ON I.IdItem = IU.IdItem
     AND IU.UomName = 'Caja' LEFT JOIN
     Stock S ON S.IdWhs = L.IdWhs
     AND S.IdOwn = I.IdOwn
     AND S.IdItem = I.IdItem
     AND S.IdLocCode = IL.IdLocCode LEFT OUTER JOIN
     -- Stock Reserve by Customer
     v_Other_QtyReserveCustomer AS OQRC ON I.IdItem = OQRC.IdItem
     AND L.IdWhs = OQRC.IdWhs
     AND I.IdOwn = OQRC.IdOwn
     AND OQRC.CustomerCode &lt;&gt; @customerCode        
       WHERE IL.IdItem = @idItem
         AND L.IdWhs = @idWhs
         AND L.LocTypeCode = 'PICK'
	       AND L.OnlyLPN = 1
         AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND S.HoldCode IS NULL
     AND (ROUND(@itemQty1/IU.ConversionFactor,0,1)) > 0
     GROUP BY
     L.IdWhs, I.IdOwn, I.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
     L.PickingFlow, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
     L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
     L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
     LT.LocTypeName, LT.Status, SP.ItemQty, IU.ConversionFactor
     HAVING (SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
     FROM v_Other_LocationPicking AS OLP
     WHERE I.IdItem = OLP.IdItem
     AND L.IdWhs = OLP.IdWhs
     AND L.IdLocCode = OLP.IdLocSourceProposal),0)
     - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
     FROM v_Other_LocationPicking_Sim AS OLPS
     WHERE I.IdItem = OLPS.IdItem
     AND L.IdWhs = OLPS.IdWhs
     AND L.IdLocCode = OLPS.IdLocSourceProposal),0)))
     ) &gt;= IU.ConversionFactor
          AND (SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                            FROM v_Other_LocationPicking AS OLP
                                            WHERE I.IdItem = OLP.IdItem
											  AND L.IdWhs = OLP.IdWhs
                                              AND L.IdLocCode = OLP.IdLocSourceProposal),0) 
                               - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                            FROM v_Other_LocationPicking_Sim AS OLPS
                                            WHERE I.IdItem = OLPS.IdItem
											  AND L.IdWhs = OLPS.IdWhs
                                              AND L.IdLocCode = OLPS.IdLocSourceProposal),0)))
               ) &lt;= CASE WHEN (@itemQty2/IU.ConversionFactor) &lt;= 0
												    THEN 0
												    ELSE IU.ConversionFactor * (@itemQty3/IU.ConversionFactor)
											 END
	   ORDER BY Ruta ASC
   </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="String">customerCode</parameter>       
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Decimal">itemQty1</parameter>
       <parameter type="Decimal">itemQty2</parameter>
       <parameter type="Decimal">itemQty3</parameter>
     </parameters>
   </query>   
   
   <query code="STKPICKItemNoZoneGreaterQtyPlanCaja">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       L.IdWhs,
       I.IdOwn,
       (IU.ConversionFactor * ROUND(@itemQty1/IU.ConversionFactor,0,1)) AS ItemQty,
       I.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM ItemLocation IL LEFT JOIN
            (SELECT S.IdWhs, S.IdOwn, S.IdItem, SUM(ItemQty) ItemQty
			       FROM Stock S INNER JOIN
				        Location L ON S.IdLocCode = L.IdLocCode
			       WHERE ((L.LocTypeCode = 'PICK'  AND L.OnlyLPN = 1) OR 
					          (L.LocTypeCode = 'PUT'  AND L.OnlyLPN = 1))
				     AND S.IdWhs = @idWhs
			         AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     GROUP BY S.IdWhs, S.IdOwn, S.IdItem) SP ON IL.IdItem = SP.IdItem INNER JOIN
     Location L ON L.IdLocCode = IL.IdLocCode INNER JOIN
     LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
     Item I ON I.IdItem = IL.IdItem INNER JOIN
     ItemUom IU ON I.IdItem = IU.IdItem
     AND IU.UomName = 'Caja' LEFT JOIN
     Stock S ON S.IdWhs = L.IdWhs
     AND S.IdOwn = I.IdOwn
     AND S.IdItem = I.IdItem
     AND S.IdLocCode = IL.IdLocCode LEFT OUTER JOIN
     -- Stock Reserve by Customer
     v_Other_QtyReserveCustomer AS OQRC ON I.IdItem = OQRC.IdItem
     AND L.IdWhs = OQRC.IdWhs
     AND I.IdOwn = OQRC.IdOwn
     AND OQRC.CustomerCode &lt;&gt; @customerCode       
       WHERE I.IdItem = @idItem
         AND L.IdWhs = @idWhs
         AND L.LocTypeCode = 'PICK'
		     AND L.OnlyLPN = 1
         AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND S.HoldCode IS NULL
     AND (ROUND(@itemQty2/IU.ConversionFactor,0,1)) > 0
     GROUP BY
     L.IdWhs, I.IdOwn, I.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
     L.PickingFlow, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
     L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
     L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
     LT.LocTypeName, LT.Status, SP.ItemQty, IU.ConversionFactor
     HAVING (SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
     FROM v_Other_LocationPicking AS OLP
     WHERE I.IdItem = OLP.IdItem
     AND L.IdWhs = OLP.IdWhs
     AND L.IdLocCode = OLP.IdLocSourceProposal),0)
     - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
     FROM v_Other_LocationPicking_Sim AS OLPS
     WHERE I.IdItem = OLPS.IdItem
     AND L.IdWhs = OLPS.IdWhs
     AND L.IdLocCode = OLPS.IdLocSourceProposal),0)))) &gt;= (IU.ConversionFactor * ROUND(@itemQty3/IU.ConversionFactor,0,1))
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty1</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>       
       <parameter type="Decimal">itemQty2</parameter>
       <parameter type="Decimal">itemQty3</parameter>       
     </parameters>
   </query>
   
   <!--MOSAICO-->
   <query code="STKPUTItemNoZoneHoldCodeRejectedLessQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                    FROM v_Other_LocationPicking AS OLP
                                    WHERE S.IdItem = OLP.IdItem
									  AND S.IdWhs = OLP.IdWhs
                                      AND L.IdLocCode = OLP.IdLocSourceProposal
                                      AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                         OR(OLP.IdLpnSourceProposal IS NULL))),0)
                       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                    FROM v_Other_LocationPicking_Sim AS OLPS
                                    WHERE S.IdItem = OLPS.IdItem
									 AND S.IdWhs = OLPS.IdWhs
                                     AND L.IdLocCode = OLPS.IdLocSourceProposal
                                     AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                        OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
                                                         AND S.IdWhs = OQRC.IdWhs
                                                         AND S.IdOwn = OQRC.IdOwn
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND S.HoldCode = 'REC'
     GROUP BY
     S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
     L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
     L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
     L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
     LT.LocTypeName, LT.Status
     HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
     FROM v_Other_LocationPicking AS OLP
     WHERE S.IdItem = OLP.IdItem
     AND S.IdWhs = OLP.IdWhs
     AND L.IdLocCode = OLP.IdLocSourceProposal
     AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
     OR(OLP.IdLpnSourceProposal IS NULL))),0)
     + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
     FROM v_Other_LocationPicking_Sim AS OLPS
     WHERE S.IdItem = OLPS.IdItem
     AND S.IdWhs = OLPS.IdWhs
     AND L.IdLocCode = OLPS.IdLocSourceProposal
     AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
     OR(OLPS.IdLpnSourceProposal IS NULL))
     ),0)))) &gt; 0
          AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLP.IdLpnSourceProposal IS NULL))),0)
                              + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										     AND S.IdWhs = OLPS.IdWhs
                                             AND L.IdLocCode = OLPS.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLPS.IdLpnSourceProposal IS NULL))
              ),0)))) &lt;= @itemQty
       ORDER BY ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>
   
   <query code="STKPUTItemZoneHoldCodeRejectedLessQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                    FROM v_Other_LocationPicking AS OLP
                                    WHERE S.IdItem = OLP.IdItem
									  AND S.IdWhs = OLP.IdWhs
                                      AND L.IdLocCode = OLP.IdLocSourceProposal
                                      AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                         OR(OLP.IdLpnSourceProposal IS NULL))),0)
                       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                    FROM v_Other_LocationPicking_Sim AS OLPS
                                    WHERE S.IdItem = OLPS.IdItem
									 AND S.IdWhs = OLPS.IdWhs
                                     AND L.IdLocCode = OLPS.IdLocSourceProposal
                                     AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                        OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
                                                         AND S.IdWhs = OQRC.IdWhs
                                                         AND S.IdOwn = OQRC.IdOwn
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND S.HoldCode = 'REC'
     AND EXISTS(SELECT IDUserWms
     FROM UserWorkZone UWZ INNER JOIN
     WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
     WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
     WHERE UWZ.IdUserWms = @idUser
     AND WZ.IdWhs = L.IdWhs
     AND WZL.IdLocCode = L.IdLocCode)
     AND EXISTS(SELECT WZF.IdLocCode
     FROM WorkZoneForkLift WZF INNER JOIN
     WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
     WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
     WHERE WZF.IdLocCode = @idForkLift
     AND WZ.IdWhs = L.IdWhs
     AND WZL.IdLocCode = L.IdLocCode)
     GROUP BY
     S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
     L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
     L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
     L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
     LT.LocTypeName, LT.Status
     HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
     FROM v_Other_LocationPicking AS OLP
     WHERE S.IdItem = OLP.IdItem
     AND S.IdWhs = OLP.IdWhs
     AND L.IdLocCode = OLP.IdLocSourceProposal
     AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
     OR(OLP.IdLpnSourceProposal IS NULL))),0)
     + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
     FROM v_Other_LocationPicking_Sim AS OLPS
     WHERE S.IdItem = OLPS.IdItem
     AND S.IdWhs = OLPS.IdWhs
     AND L.IdLocCode = OLPS.IdLocSourceProposal
     AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
     OR(OLPS.IdLpnSourceProposal IS NULL))
     ),0)))) &gt; 0
          AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLP.IdLpnSourceProposal IS NULL))),0)
                              + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										     AND S.IdWhs = OLPS.IdWhs
                                             AND L.IdLocCode = OLPS.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLPS.IdLpnSourceProposal IS NULL))
              ),0)))) &lt;= @itemQty
       ORDER BY ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemNoZoneHoldCodeRejectedGreaterQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                    FROM v_Other_LocationPicking AS OLP
                                    WHERE S.IdItem = OLP.IdItem
									  AND S.IdWhs = OLP.IdWhs
                                      AND L.IdLocCode = OLP.IdLocSourceProposal
                                      AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                         OR(OLP.IdLpnSourceProposal IS NULL))),0)
                       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                    FROM v_Other_LocationPicking_Sim AS OLPS
                                    WHERE S.IdItem = OLPS.IdItem
									  AND S.IdWhs = OLPS.IdWhs
                                      AND L.IdLocCode = OLPS.IdLocSourceProposal
                                      AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                         OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
                                                         AND S.IdWhs = OQRC.IdWhs
                                                         AND S.IdOwn = OQRC.IdOwn
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND S.HoldCode = 'REC'
     GROUP BY
     S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
     L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
     L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
     L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
     LT.LocTypeName, LT.Status
     HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
     FROM v_Other_LocationPicking AS OLP
     WHERE S.IdItem = OLP.IdItem
     AND S.IdWhs = OLP.IdWhs
     AND L.IdLocCode = OLP.IdLocSourceProposal
     AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
     OR(OLP.IdLpnSourceProposal IS NULL))),0)
     + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
     FROM v_Other_LocationPicking_Sim AS OLPS
     WHERE S.IdItem = OLPS.IdItem
     AND S.IdWhs = OLPS.IdWhs
     AND L.IdLocCode = OLPS.IdLocSourceProposal
     AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
     OR(OLPS.IdLpnSourceProposal IS NULL))
     ),0)))) &gt;= @itemQty
       ORDER BY ItemQty DESC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>
   
   <query code="STKPUTItemZoneHoldCodeRejectedGreaterQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                    FROM v_Other_LocationPicking AS OLP
                                    WHERE S.IdItem = OLP.IdItem
									  AND S.IdWhs = OLP.IdWhs
                                      AND L.IdLocCode = OLP.IdLocSourceProposal
                                      AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                         OR(OLP.IdLpnSourceProposal IS NULL))),0)
                       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                    FROM v_Other_LocationPicking_Sim AS OLPS
                                    WHERE S.IdItem = OLPS.IdItem
									  AND S.IdWhs = OLPS.IdWhs
                                      AND L.IdLocCode = OLPS.IdLocSourceProposal
                                      AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                         OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
                                                         AND S.IdWhs = OQRC.IdWhs
                                                         AND S.IdOwn = OQRC.IdOwn
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
     AND L.Status = 1
     AND L.LockInventory = 0
     AND S.HoldCode = 'REC'
     AND EXISTS(SELECT IDUserWms
     FROM UserWorkZone UWZ INNER JOIN
     WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
     WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
     WHERE UWZ.IdUserWms = @idUser
     AND WZ.IdWhs = L.IdWhs
     AND WZL.IdLocCode = L.IdLocCode)
     AND EXISTS(SELECT WZF.IdLocCode
     FROM WorkZoneForkLift WZF INNER JOIN
     WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
     WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
     WHERE WZF.IdLocCode = @idForkLift
     AND WZ.IdWhs = L.IdWhs
     AND WZL.IdLocCode = L.IdLocCode)
     GROUP BY
     S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
     L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
     L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
     L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
     LT.LocTypeName, LT.Status
     HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
     FROM v_Other_LocationPicking AS OLP
     WHERE S.IdItem = OLP.IdItem
     AND S.IdWhs = OLP.IdWhs
     AND L.IdLocCode = OLP.IdLocSourceProposal
     AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
     OR(OLP.IdLpnSourceProposal IS NULL))),0)
     + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
     FROM v_Other_LocationPicking_Sim AS OLPS
     WHERE S.IdItem = OLPS.IdItem
     AND S.IdWhs = OLPS.IdWhs
     AND L.IdLocCode = OLPS.IdLocSourceProposal
     AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
     OR(OLPS.IdLpnSourceProposal IS NULL))
     ),0)))) &gt;= @itemQty
       ORDER BY ItemQty DESC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>
   
   <query code="STKPUTItemNoZoneQtyGreaterThanMaxPriLocLessQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       S.FifoDate,
	   s.lotNumber,
       s.fabricationDate,
	   S.ExpirationDate
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN (SELECT TOP 1 IdItem, ReOrderPoint, ReOrderQty
       FROM ItemLocation
       WHERE IdItem = @idItem) IL ON IL.IdItem = I.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND IL.ReOrderQty &lt;= @itemQty
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status,S.FifoDate,s.lotNumber,s.fabricationDate,S.ExpirationDate
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) &gt; 0
       AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) &lt;= @itemQty
       ORDER BY S.expirationDate ASC, ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>
   
   <query code="STKPUTItemZoneQtyGreaterThanMaxPrimaryLocLessQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                    FROM v_Other_LocationPicking AS OLP
                                    WHERE S.IdItem = OLP.IdItem
									  AND S.IdWhs = OLP.IdWhs
                                      AND L.IdLocCode = OLP.IdLocSourceProposal
                                      AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                         OR(OLP.IdLpnSourceProposal IS NULL))),0)
                       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                    FROM v_Other_LocationPicking_Sim AS OLPS
                                    WHERE S.IdItem = OLPS.IdItem
									 AND S.IdWhs = OLPS.IdWhs
                                     AND L.IdLocCode = OLPS.IdLocSourceProposal
                                     AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                        OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN (SELECT TOP 1 IdItem, ReOrderPoint, ReOrderQty 
	                 FROM ItemLocation 
				           WHERE IdItem = @idItem) IL ON IL.IdItem = I.IdItem   
       INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
                                                         AND S.IdWhs = OQRC.IdWhs
                                                         AND S.IdOwn = OQRC.IdOwn
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.Status = 1
         AND L.LockInventory = 0
         AND S.HoldCode IS NULL
         AND WZL.IdWorkZone = @idWorkZone
         AND IL.ReOrderQty &lt;= @itemQty
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode, 
       LT.LocTypeName, LT.Status
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLP.IdLpnSourceProposal IS NULL))),0)
                             + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                          FROM v_Other_LocationPicking_Sim AS OLPS
                                          WHERE S.IdItem = OLPS.IdItem
										    AND S.IdWhs = OLPS.IdWhs
                                            AND L.IdLocCode = OLPS.IdLocSourceProposal
                                            AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                               OR(OLPS.IdLpnSourceProposal IS NULL))
               ),0)))) &gt; 0
          AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLP.IdLpnSourceProposal IS NULL))),0)
                              + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										     AND S.IdWhs = OLPS.IdWhs
                                             AND L.IdLocCode = OLPS.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLPS.IdLpnSourceProposal IS NULL))
              ),0)))) &lt;= @itemQty       
       ORDER BY ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idWorkZone</parameter>
     </parameters>
   </query>   
   
   <query code="STKPUTItemNoZoneQtyGreaterThanMaxPrimaryLocGreaterQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       S.FifoDate,
	   s.lotNumber,
       s.fabricationDate,
	   S.expirationDate
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN (SELECT TOP 1 IdItem, ReOrderPoint, ReOrderQty
       FROM ItemLocation
       WHERE IdItem = @idItem) IL ON IL.IdItem = I.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND IL.ReOrderQty &lt;= @itemQty
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status ,S.FifoDate,s.lotNumber, s.fabricationDate,S.expirationDate
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) &gt;= @itemQty
       ORDER BY S.expirationDate ASC, ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>
   
   <query code="STKPUTItemZoneQtyGreaterThanMaxPrimaryLocGreaterQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                    FROM v_Other_LocationPicking AS OLP
                                    WHERE S.IdItem = OLP.IdItem
									  AND S.IdWhs = OLP.IdWhs
                                      AND L.IdLocCode = OLP.IdLocSourceProposal
                                      AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                         OR(OLP.IdLpnSourceProposal IS NULL))),0)
                       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                    FROM v_Other_LocationPicking_Sim AS OLPS
                                    WHERE S.IdItem = OLPS.IdItem
									  AND S.IdWhs = OLPS.IdWhs
                                      AND L.IdLocCode = OLPS.IdLocSourceProposal
                                      AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                         OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN (SELECT TOP 1 IdItem, ReOrderPoint, ReOrderQty 
	                 FROM ItemLocation 
				           WHERE IdItem = @idItem) IL ON IL.IdItem = I.IdItem   
       INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem 
                                                         AND S.IdWhs = OQRC.IdWhs 
                                                         AND S.IdOwn = OQRC.IdOwn 
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.Status = 1
         AND L.LockInventory = 0
         AND S.HoldCode IS NULL
         AND WZL.IdWorkZone = @idWorkZone
         AND IL.ReOrderQty &lt;= @itemQty
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode, 
       LT.LocTypeName, LT.Status
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLP.IdLpnSourceProposal IS NULL))),0)
                              + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										     AND S.IdWhs = OLPS.IdWhs
                                             AND L.IdLocCode = OLPS.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLPS.IdLpnSourceProposal IS NULL))
              ),0)))) &gt;= @itemQty
       ORDER BY ItemQty DESC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idWorkZone</parameter>
     </parameters>
   </query>
   
   <query code="STKPUTItemNoZoneWithoutItemLocLessQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                    FROM v_Other_LocationPicking AS OLP
                                    WHERE S.IdItem = OLP.IdItem
									  AND S.IdWhs = OLP.IdWhs
                                      AND L.IdLocCode = OLP.IdLocSourceProposal
                                      AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                         OR(OLP.IdLpnSourceProposal IS NULL))),0)
                       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                    FROM v_Other_LocationPicking_Sim AS OLPS
                                    WHERE S.IdItem = OLPS.IdItem
									 AND S.IdWhs = OLPS.IdWhs
                                     AND L.IdLocCode = OLPS.IdLocSourceProposal
                                     AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                        OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
                                                         AND S.IdWhs = OQRC.IdWhs
                                                         AND S.IdOwn = OQRC.IdOwn
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.Status = 1
         AND L.LockInventory = 0
         AND S.HoldCode IS NULL
         AND NOT EXISTS(SELECT IdItem FROM ItemLocation IL WHERE IL.IdItem = S.IdItem)
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLP.IdLpnSourceProposal IS NULL))),0)
                             + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                          FROM v_Other_LocationPicking_Sim AS OLPS
                                          WHERE S.IdItem = OLPS.IdItem
										    AND S.IdWhs = OLPS.IdWhs
                                            AND L.IdLocCode = OLPS.IdLocSourceProposal
                                            AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                               OR(OLPS.IdLpnSourceProposal IS NULL))
               ),0)))) &gt; 0
          AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLP.IdLpnSourceProposal IS NULL))),0)
                              + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										     AND S.IdWhs = OLPS.IdWhs
                                             AND L.IdLocCode = OLPS.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLPS.IdLpnSourceProposal IS NULL))
              ),0)))) &lt;= @itemQty
       ORDER BY ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemNoZoneWithoutItemLocGreaterQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                    FROM v_Other_LocationPicking AS OLP
                                    WHERE S.IdItem = OLP.IdItem
									  AND S.IdWhs = OLP.IdWhs
                                      AND L.IdLocCode = OLP.IdLocSourceProposal
                                      AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                         OR(OLP.IdLpnSourceProposal IS NULL))),0)
                       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                    FROM v_Other_LocationPicking_Sim AS OLPS
                                    WHERE S.IdItem = OLPS.IdItem
									 AND S.IdWhs = OLPS.IdWhs
                                     AND L.IdLocCode = OLPS.IdLocSourceProposal
                                     AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                        OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
                                                         AND S.IdWhs = OQRC.IdWhs
                                                         AND S.IdOwn = OQRC.IdOwn
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.Status = 1
         AND L.LockInventory = 0
         AND S.HoldCode IS NULL
         AND NOT EXISTS(SELECT IdItem FROM ItemLocation IL WHERE IL.IdItem = S.IdItem)
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLP.IdLpnSourceProposal IS NULL))),0)
                              + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										     AND S.IdWhs = OLPS.IdWhs
                                             AND L.IdLocCode = OLPS.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLPS.IdLpnSourceProposal IS NULL))
              ),0)))) &gt;= @itemQty
       ORDER BY ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemZoneWithoutItemLocLessQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                    FROM v_Other_LocationPicking AS OLP
                                    WHERE S.IdItem = OLP.IdItem
									  AND S.IdWhs = OLP.IdWhs
                                      AND L.IdLocCode = OLP.IdLocSourceProposal
                                      AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                         OR(OLP.IdLpnSourceProposal IS NULL))),0)
                       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                    FROM v_Other_LocationPicking_Sim AS OLPS
                                    WHERE S.IdItem = OLPS.IdItem
									 AND S.IdWhs = OLPS.IdWhs
                                     AND L.IdLocCode = OLPS.IdLocSourceProposal
                                     AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                        OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
	   INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
                                                         AND S.IdWhs = OQRC.IdWhs
                                                         AND S.IdOwn = OQRC.IdOwn
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.Status = 1
         AND L.LockInventory = 0
         AND S.HoldCode IS NULL
		 AND WZL.IdWorkZone = @idWorkZone
         AND NOT EXISTS(SELECT IdItem FROM ItemLocation IL WHERE IL.IdItem = S.IdItem)
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLP.IdLpnSourceProposal IS NULL))),0)
                             + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                          FROM v_Other_LocationPicking_Sim AS OLPS
                                          WHERE S.IdItem = OLPS.IdItem
										    AND S.IdWhs = OLPS.IdWhs
                                            AND L.IdLocCode = OLPS.IdLocSourceProposal
                                            AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                               OR(OLPS.IdLpnSourceProposal IS NULL))
               ),0)))) &gt; 0
          AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLP.IdLpnSourceProposal IS NULL))),0)
                              + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										     AND S.IdWhs = OLPS.IdWhs
                                             AND L.IdLocCode = OLPS.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLPS.IdLpnSourceProposal IS NULL))
              ),0)))) &lt;= @itemQty
       ORDER BY ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
	   <parameter type="Int">idWorkZone</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemZoneWithoutItemLocGreaterQty">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                    FROM v_Other_LocationPicking AS OLP
                                    WHERE S.IdItem = OLP.IdItem
									  AND S.IdWhs = OLP.IdWhs
                                      AND L.IdLocCode = OLP.IdLocSourceProposal
                                      AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                         OR(OLP.IdLpnSourceProposal IS NULL))),0)
                       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                    FROM v_Other_LocationPicking_Sim AS OLPS
                                    WHERE S.IdItem = OLPS.IdItem
									 AND S.IdWhs = OLPS.IdWhs
                                     AND L.IdLocCode = OLPS.IdLocSourceProposal
                                     AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                        OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
	   INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
                                                         AND S.IdWhs = OQRC.IdWhs
                                                         AND S.IdOwn = OQRC.IdOwn
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.Status = 1
         AND L.LockInventory = 0
         AND S.HoldCode IS NULL
		 AND WZL.IdWorkZone = @idWorkZone
         AND NOT EXISTS(SELECT IdItem FROM ItemLocation IL WHERE IL.IdItem = S.IdItem)
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLP.IdLpnSourceProposal IS NULL))),0)
                              + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										     AND S.IdWhs = OLPS.IdWhs
                                             AND L.IdLocCode = OLPS.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLPS.IdLpnSourceProposal IS NULL))
              ),0)))) &gt;= @itemQty
       ORDER BY ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
	   <parameter type="Int">idWorkZone</parameter>
     </parameters>
   </query>

   <!-- ORDER BY OUTBOUNDTYPECODE section  -->
   <query code="STKPICKItemNoZoneGreaterQtyByOutboundTypeCode">
     <sql>
		 SELECT TOP 1
		 ABS(L.PickingFlow - @pickingFlow) AS Ruta,
		 S.IdWhs,
		 S.IdOwn,
		 (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) AS ItemQty,
		 S.IdItem,
		 CASE
		 WHEN @idCtgItem IS NOT NULL THEN @idCtgItem
		 WHEN @idCtgItem IS NULL THEN S.IdCtgItem
		 END AS IdCategoryItem,
		 CASE
		 WHEN @lotNumber IS NOT NULL THEN @lotNumber
		 WHEN @lotNumber IS NULL THEN S.Lotnumber
		 END AS LotNumber,
		 CASE
		 WHEN  @fifoDate IS NOT NULL THEN @fifoDate
		 WHEN  @fifoDate IS NULL THEN S.FifoDate
		 END AS FifoDate,
		 CASE
		 WHEN @fabricationDate IS NOT NULL THEN @fabricationDate
		 WHEN @fabricationDate IS NULL THEN S.FabricationDate
		 END AS FabricationDate,
		 CASE
		 WHEN @expirationDate IS NOT NULL THEN @expirationDate
		 WHEN @expirationDate IS NULL THEN S.ExpirationDate
		 END AS ExpirationDate,
		 S.IdLpnCode,
		 S.LpnTypeCode,
		 S.IdLpnCodeContainer,
		 S.LpnTypeCodeContainer,
		 L.IdLocCode,
		 L.LocCode,
		 L.RowLoc,
		 L.ColumnLoc,
		 L.LevelLoc,
		 L.Aisle,L.Status,
		 L.Description,
		 L.SharedItem,
		 L.OnlyLPN,
		 L.PickingFlow,
		 L.PutawayFlow,
		 L.CapacityLPN,
		 L.CapacityUnit,
		 L.Length,
		 L.Width,
		 L.Height,
		 L.Volume,
		 L.Weight,
		 L.LockInventory,
		 LT.IdLocType,
		 LT.LocTypeCode,
		 LT.LocTypeName,
		 LT.Status
		 FROM Stock S
		 INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
		 INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		 INNER JOIN Item I ON I.IdItem = S.IdItem
		 -- Stock Reserve by Customer
		 LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
		 AND S.IdWhs = OQRC.IdWhs
		 AND S.IdOwn = OQRC.IdOwn
		 AND OQRC.CustomerCode &lt;&gt; @customerCode
		 WHERE S.IdWhs = L.IdWhs
		 AND S.IdItem = @idItem
		 AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
		 AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
		 AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
		 AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
		 AND ((S.ExpirationDate = @expirationDate AND @expirationDate IS NOT NULL)OR(@expirationDate IS NULL))
		 AND S.IdWhs = @idWhs
		 AND L.LocTypeCode = 'PICK'
		 AND L.HoldCode IS NULL
		 AND L.Status = 1
		 AND L.LockInventory = 0
		 AND S.HoldCode IS NULL
		 GROUP BY
		 S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		 L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		 L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		 L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		 LT.LocTypeName, LT.Status, L.IdHng, IdCtgItem, LotNumber, FifoDate, FabricationDate, ExpirationDate
		 HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) &gt;= @itemQty
		 --ORDER BY ItemQty DESC, Ruta ASC
		 ORDER BY CASE WHEN @outboundTypeCodeDoc = @outboundTypeCode THEN L.IdHng END DESC,
		 ItemQty,Ruta
	 </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="DateTime">fifoDate</parameter>
       <parameter type="DateTime">fabricationDate</parameter>
       <parameter type="DateTime">expirationDate</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="String">outboundTypeCode</parameter>
       <parameter type="String">outboundTypeCodeDoc</parameter>
     </parameters>
   </query>
   <query code="STKPUTItemNoZoneGreaterQtyByOutboundTypeCode">
     <sql>
		 SELECT TOP 1
		 ABS(L.PickingFlow - @pickingFlow) AS Ruta,
		 S.IdWhs,
		 S.IdOwn,
		 (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) AS ItemQty,
		 S.IdItem,
		 CASE
		 WHEN @idCtgItem IS NOT NULL THEN @idCtgItem
		 WHEN @idCtgItem IS NULL THEN S.IdCtgItem
		 END AS IdCategoryItem,
		 CASE
		 WHEN @lotNumber IS NOT NULL THEN @lotNumber
		 WHEN @lotNumber IS NULL THEN S.Lotnumber
		 END AS LotNumber,
		 CASE
		 WHEN  @fifoDate IS NOT NULL THEN @fifoDate
		 WHEN  @fifoDate IS NULL THEN S.FifoDate
		 END AS FifoDate,
		 CASE
		 WHEN @fabricationDate IS NOT NULL THEN @fabricationDate
		 WHEN @fabricationDate IS NULL THEN S.FabricationDate
		 END AS FabricationDate,
		 CASE
		 WHEN @expirationDate IS NOT NULL THEN @expirationDate
		 WHEN @expirationDate IS NULL THEN S.ExpirationDate
		 END AS ExpirationDate,
		 S.IdLpnCode,
		 S.LpnTypeCode,
		 S.IdLpnCodeContainer,
		 S.LpnTypeCodeContainer,
		 L.IdLocCode,
		 L.LocCode,
		 L.RowLoc,
		 L.ColumnLoc,
		 L.LevelLoc,
		 L.Aisle,L.Status,
		 L.Description,
		 L.SharedItem,
		 L.OnlyLPN,
		 L.PickingFlow,
		 L.PutawayFlow,
		 L.CapacityLPN,
		 L.CapacityUnit,
		 L.Length,
		 L.Width,
		 L.Height,
		 L.Volume,
		 L.Weight,
		 L.LockInventory,
		 LT.IdLocType,
		 LT.LocTypeCode,
		 LT.LocTypeName,
		 LT.Status
		 FROM Stock S
		 INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
		 INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		 INNER JOIN Item I ON I.IdItem = S.IdItem
		 -- Stock Reserve by Customer
		 LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
		 AND S.IdWhs = OQRC.IdWhs
		 AND S.IdOwn = OQRC.IdOwn
		 AND OQRC.CustomerCode &lt;&gt; @customerCode
		 WHERE S.IdWhs = L.IdWhs
		 AND S.IdItem = @idItem
		 AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
		 AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
		 AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
		 AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
		 AND ((S.ExpirationDate = @expirationDate AND @expirationDate IS NOT NULL)OR(@expirationDate IS NULL))
		 AND S.IdWhs = @idWhs
		 AND L.LocTypeCode = 'PUT'
		 AND L.HoldCode IS NULL
		 AND L.Status = 1
		 AND L.LockInventory = 0
		 AND S.HoldCode IS NULL
		 GROUP BY
		 S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		 L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		 L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		 L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		 LT.LocTypeName, LT.Status, L.IdHng, IdCtgItem, LotNumber, FifoDate, FabricationDate, ExpirationDate
		 HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) &gt;= @itemQty
		 --ORDER BY ItemQty DESC, Ruta ASC
		 ORDER BY CASE WHEN @outboundTypeCodeDoc = @outboundTypeCode THEN L.IdHng END DESC,
		 ItemQty,Ruta
	 </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="DateTime">fifoDate</parameter>
       <parameter type="DateTime">fabricationDate</parameter>
       <parameter type="DateTime">expirationDate</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="String">outboundTypeCode</parameter>
       <parameter type="String">outboundTypeCodeDoc</parameter>
     </parameters>
   </query>
   <query code="STKPUTItemNoZoneLessQtyByOutboundTypeCode">
     <sql>
		 SELECT TOP 1
		 ABS(L.PickingFlow - @pickingFlow) AS Ruta,
		 S.IdWhs,
		 S.IdOwn,
		 (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) AS ItemQty,
		 S.IdItem,
		 CASE
		 WHEN @idCtgItem IS NOT NULL THEN @idCtgItem
		 WHEN @idCtgItem IS NULL THEN S.IdCtgItem
		 END AS IdCategoryItem,
		 CASE
		 WHEN @lotNumber IS NOT NULL THEN @lotNumber
		 WHEN @lotNumber IS NULL THEN S.Lotnumber
		 END AS LotNumber,
		 CASE
		 WHEN  @fifoDate IS NOT NULL THEN @fifoDate
		 WHEN  @fifoDate IS NULL THEN S.FifoDate
		 END AS FifoDate,
		 CASE
		 WHEN @fabricationDate IS NOT NULL THEN @fabricationDate
		 WHEN @fabricationDate IS NULL THEN S.FabricationDate
		 END AS FabricationDate,
		 CASE
		 WHEN @expirationDate IS NOT NULL THEN @expirationDate
		 WHEN @expirationDate IS NULL THEN S.ExpirationDate
		 END AS ExpirationDate,
		 S.IdLpnCode,
		 S.LpnTypeCode,
		 S.IdLpnCodeContainer,
		 S.LpnTypeCodeContainer,
		 L.IdLocCode,
		 L.LocCode,
		 L.RowLoc,
		 L.ColumnLoc,
		 L.LevelLoc,
		 L.Aisle,L.Status,
		 L.Description,
		 L.SharedItem,
		 L.OnlyLPN,
		 L.PickingFlow,
		 L.PutawayFlow,
		 L.CapacityLPN,
		 L.CapacityUnit,
		 L.Length,
		 L.Width,
		 L.Height,
		 L.Volume,
		 L.Weight,
		 L.LockInventory,
		 LT.IdLocType,
		 LT.LocTypeCode,
		 LT.LocTypeName,
		 LT.Status
		 FROM Stock S
		 INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
		 INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		 INNER JOIN Item I ON I.IdItem = S.IdItem
		 -- Stock Reserve by Customer
		 LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
		 AND S.IdWhs = OQRC.IdWhs
		 AND S.IdOwn = OQRC.IdOwn
		 AND OQRC.CustomerCode &lt;&gt; @customerCode
		 WHERE S.IdWhs = L.IdWhs
		 AND S.IdItem = @idItem
		 AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
		 AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
		 AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
		 AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
		 AND ((S.ExpirationDate = @expirationDate AND @expirationDate IS NOT NULL)OR(@expirationDate IS NULL))
		 AND S.IdWhs = @idWhs
		 AND L.LocTypeCode = 'PUT'
		 AND L.HoldCode IS NULL
		 AND L.Status = 1
		 AND L.LockInventory = 0
		 AND S.HoldCode IS NULL
		 GROUP BY
		 S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		 L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		 L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		 L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		 LT.LocTypeName, LT.Status, L.IdHng, IdCtgItem, LotNumber, FifoDate, FabricationDate, ExpirationDate
		 HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) &gt; 0
		 AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) &lt;= @itemQty
		 --ORDER BY ItemQty ASC, Ruta ASC
		 ORDER BY CASE WHEN @outboundTypeCodeDoc = @outboundTypeCode THEN L.IdHng END DESC,
		 ItemQty,Ruta
	 </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="DateTime">fifoDate</parameter>
       <parameter type="DateTime">fabricationDate</parameter>
       <parameter type="DateTime">expirationDate</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="String">outboundTypeCode</parameter>
       <parameter type="String">outboundTypeCodeDoc</parameter>
     </parameters>
   </query>
   <query code="STKPUTItemZoneGreaterQtyByOutboundTypeCode">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN (SELECT TOP 1 IdItem, ReOrderPoint, ReOrderQty
       FROM ItemLocation
       WHERE IdItem = @idItem) IL ON IL.IdItem = I.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND @outboundTypeCode = @outboundTypeCodeDoc
       AND S.HoldCode IS NULL
       --AND IL.ReOrderQty &lt;= @itemQty
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, L.IdHng
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) &gt;= @itemQty
       ORDER BY ItemQty DESC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
       <parameter type="String">outboundTypeCode</parameter>
       <parameter type="String">outboundTypeCodeDoc</parameter>
     </parameters>
   </query>
   <query code="STKPUTItemZoneLessQtyByOutboundTypeCode">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN (SELECT TOP 1 IdItem, ReOrderPoint, ReOrderQty
       FROM ItemLocation
       WHERE IdItem = @idItem) IL ON IL.IdItem = I.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       --AND IL.ReOrderQty &lt;= @itemQty
       AND @outboundTypeCode = @outboundTypeCodeDoc
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, L.IdHng
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) &lt;= @itemQty
       ORDER BY ItemQty DESC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
       <parameter type="String">outboundTypeCode</parameter>
       <parameter type="String">outboundTypeCodeDoc</parameter>
     </parameters>
   </query>
   <query code="STKPICKItemNoZoneLessQtyPlanUnidByOutboundTypeCode">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       L.IdWhs,
       I.IdOwn,
       (SUM(SP.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE I.IdItem = OLP.IdItem
	   AND L.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal),0)
       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE I.IdItem = OLPS.IdItem
	   AND L.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       ) AS ItemQty,
       I.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM ItemLocation IL LEFT JOIN
       (SELECT S.IdWhs, S.IdOwn, S.IdItem, SUM(ItemQty) ItemQty
       FROM Stock S INNER JOIN
       Location L ON S.IdLocCode = L.IdLocCode
       WHERE ((L.LocTypeCode = 'PICK'  AND L.OnlyLPN = 0) OR
       (L.LocTypeCode = 'PUT'  AND L.OnlyLPN = 1))
	   AND S.IdWhs = @idWhs
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       GROUP BY S.IdWhs, S.IdOwn, S.IdItem) SP ON IL.IdItem = SP.IdItem INNER JOIN
       Location L ON L.IdLocCode = IL.IdLocCode INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Item I ON I.IdItem = IL.IdItem LEFT JOIN
       Stock S ON S.IdWhs = L.IdWhs
       AND S.IdOwn = I.IdOwn
       AND S.IdItem = I.IdItem
       AND S.IdLocCode = IL.IdLocCode LEFT OUTER JOIN
       -- Stock Reserve by Customer
       v_Other_QtyReserveCustomer AS OQRC ON I.IdItem = OQRC.IdItem
       AND L.IdWhs = OQRC.IdWhs
       AND I.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE IL.IdItem = @idItem
       AND L.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND L.OnlyLPN = 0
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       GROUP BY
       L.IdWhs, I.IdOwn, I.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, SP.ItemQty, L.IdHng
       HAVING (
       (SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE I.IdItem = OLP.IdItem
	   AND L.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal),0))
       - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE I.IdItem = OLPS.IdItem
	   AND L.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)) &gt; 0)
       AND (SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE I.IdItem = OLP.IdItem
	   AND L.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal),0))
       - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE I.IdItem = OLPS.IdItem
	   AND L.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)) &lt;= @itemQty)
       )
       --ORDER BY Ruta ASC
       ORDER BY CASE WHEN @outboundTypeCode = @outboundTypeCodeDoc THEN L.IdHng END DESC,
       ItemQty,Ruta
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="String">outboundTypeCode</parameter>
       <parameter type="String">outboundTypeCodeDoc</parameter>
     </parameters>
   </query>
   <query code="STKPICKItemNoZoneGreaterQtyPlanUnidByOutboundTypeCode">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       L.IdWhs,
       I.IdOwn,
       @itemQty1 AS ItemQty,
       I.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM ItemLocation IL LEFT JOIN
       (SELECT S.IdWhs, S.IdOwn, S.IdItem, SUM(ItemQty) ItemQty
       FROM Stock S INNER JOIN
       Location L ON S.IdLocCode = L.IdLocCode
       WHERE ((L.LocTypeCode = 'PICK'  AND L.OnlyLPN = 0) OR
       (L.LocTypeCode = 'PUT'  AND L.OnlyLPN = 1))
	   AND S.IdWhs = @idWhs
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       GROUP BY S.IdWhs, S.IdOwn, S.IdItem) SP ON IL.IdItem = SP.IdItem INNER JOIN
       Location L ON L.IdLocCode = IL.IdLocCode INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Item I ON I.IdItem = IL.IdItem LEFT JOIN
       Stock S ON S.IdWhs = L.IdWhs
       AND S.IdOwn = I.IdOwn
       AND S.IdItem = I.IdItem
       AND S.IdLocCode = IL.IdLocCode LEFT OUTER JOIN
       -- Stock Reserve by Customer
       v_Other_QtyReserveCustomer AS OQRC ON I.IdItem = OQRC.IdItem
       AND L.IdWhs = OQRC.IdWhs
       AND I.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode LEFT JOIN
       (SELECT IdItem, IdLocSourceProposal, SUM(COALESCE(ItemQty,0)) ItemQty, IdWhs
       FROM v_Other_LocationPicking
       GROUP BY IdItem, IdLocSourceProposal, IdWhs) VOLP ON I.IdItem = VOLP.IdItem
	   AND VOLP.idwhs = L.IdWhs 
       AND L.IdLocCode = VOLP.IdLocSourceProposal LEFT JOIN
       (SELECT IdItem, IdLocSourceProposal, SUM(COALESCE(ItemQty,0)) ItemQty, IdWhs
       FROM v_Other_LocationPicking_Sim
       GROUP BY IdItem, IdLocSourceProposal, IdWhs) VOLPS ON I.IdItem = VOLPS.IdItem
	   AND VOLPS.idwhs = L.IdWhs
       AND L.IdLocCode = VOLPS.IdLocSourceProposal
       WHERE IL.IdItem = @idItem
       AND L.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND L.OnlyLPN = 0
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       GROUP BY
       L.IdWhs, I.IdOwn, I.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, L.IdHng
       HAVING (SUM(SP.ItemQty) - COALESCE(SUM(VOLP.ItemQty),0) - COALESCE(SUM(VOLPS.ItemQty),0)) &gt;= @itemQty2
       --ORDER BY Ruta ASC
       ORDER BY CASE WHEN  @outboundTypeCode = @outboundTypeCodeDoc  THEN L.IdHng END DESC,
       ItemQty,Ruta
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty1</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Decimal">itemQty2</parameter>
       <parameter type="String">outboundTypeCode</parameter>
       <parameter type="String">outboundTypeCodeDoc</parameter>
     </parameters>
   </query>
   <query code="STKPUTItemNoZoneQtyGreaterThanMaxPrimaryLocLessQtyByOutboundTypeCode">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN (SELECT TOP 1 IdItem, ReOrderPoint, ReOrderQty
       FROM ItemLocation
       WHERE IdItem = @idItem) IL ON IL.IdItem = I.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND IL.ReOrderQty &lt;= @itemQty
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, L.IdHng
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) &gt; 0
       AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) &lt;= @itemQty
       --ORDER BY ItemQty ASC, Ruta ASC
       ORDER BY CASE WHEN  @outboundTypeCode = @outboundTypeCodeDoc THEN L.IdHng END DESC,
       ItemQty,Ruta
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="String">outboundTypeCode</parameter>
       <parameter type="String">outboundTypeCodeDoc</parameter>
     </parameters>
   </query>
   <query code="STKPUTItemNoZoneQtyGreaterThanMaxPrimaryLocGreaterQtyByOutboundTypeCode">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN (SELECT TOP 1 IdItem, ReOrderPoint, ReOrderQty
       FROM ItemLocation
       WHERE IdItem = @idItem) IL ON IL.IdItem = I.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND IL.ReOrderQty &lt;= @itemQty
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, L.IdHng
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) &gt;= @itemQty
       --ORDER BY ItemQty DESC, Ruta ASC
       ORDER BY CASE WHEN  @outboundTypeCode = @outboundTypeCodeDoc  THEN L.IdHng END DESC,
       ItemQty,Ruta
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="String">outboundTypeCode</parameter>
       <parameter type="String">outboundTypeCodeDoc</parameter>
     </parameters>
   </query>

   <query code="STKPICKPRimaryItemZoneWithREPLByLpn">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       S.IdItem
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
       WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
       Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem INNER JOIN
       ItemLocation IL On IL.IdLocCode = S.IdLocCode And IL.IdItem = S.IdItem
       WHERE L.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.LockInventory = 0
       AND EXISTS(SELECT S1.IdItem
       FROM Stock S1
       WHERE S1.IdLpnCode = @idLpnCode
       AND S1.IdWhs = S.IdWhs
       AND S1.IdItem = S.IdItem
       And (S1.ItemQty + S.ItemQty) &lt;= IL.ReOrderQty)
       AND S.HoldCode IS NULL
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
       FROM WorkZoneForkLift WZF INNER JOIN
       WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE WZF.IdLocCode = @idForkLift
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">idLpnCode</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="STKPICKPrimaryItemZoneWhitoutREPLByLpn">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       SFKL.IdItem
       FROM Location L
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
       INNER JOIN WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       -- Relaciona el stock de FKL con zona del ítem
       INNER JOIN (SELECT top 1 IdWhs, IdOwn, IdItem, IdLpnCode, IdLocCode, ItemQty FROM STOCK WHERE IdLpnCode = @idLpnCode and IdItem = @iditem) SFKL ON WZI.IDITEM = SFKL.IDITEM
       INNER JOIN ItemLocation IL On IL.IdItem = SFKL.IdItem AND IL.IdLocCode = L.IdLocCode
       WHERE L.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       -- Filtra la capacidad de la ubicación primaria
       AND ((SFKL.ItemQty + COALESCE((SELECT SUM(ItemQty) FROM Stock WHERE IdItem = IL.IdItem AND IdLocCode = IL.IdLocCode),0)) &lt;= IL.ReOrderQty)
       AND L.LockInventory = 0
       -- FILTRA SI EXISTE UNA TAREA DE REPOSICION
       AND NOT EXISTS(SELECT TD.IdItem
       FROM TaskDetail TD
       WHERE TD.IdLocTargetProposal = SFKL.IdLocCode
       AND TD.IdWhs = SFKL.IdWhs
       AND TD.IdItem = SFKL.IdItem
       AND TD.IsComplete = 0
       AND TD.Status = 1
       AND IdTask IN (Select IdTask From Task Where TaskTypeCode = 'REPL' and IdTrackTaskType IN (11,21) and IsComplete = 0)
       )
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
       FROM WorkZoneForkLift WZF INNER JOIN
       WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE WZF.IdLocCode = @idForkLift
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">idLpnCode</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>


   <query code="STKPICKPrimaryItemNoZoneWithREPL">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       S.IdItem
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Stock S ON L.IdLocCode = S.IdLocCode INNER JOIN
       ItemLocation IL On IL.IdLocCode = S.IdLocCode And IL.IdItem = S.IdItem
       WHERE L.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.LockInventory = 0
       AND EXISTS(SELECT S1.IdItem
       FROM Stock S1
       WHERE S1.IdLpnCode = @idLpnCode
       AND S1.IdWhs = S.IdWhs
       AND S1.IdItem = S.IdItem
       And (S1.ItemQty + S.ItemQty) &lt;= IL.ReOrderQty)
       AND S.HoldCode IS NULL
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">idLpnCode</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="STKPICKPrimaryItemNoZoneWithoutREPL">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       S.IdItem
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Stock S ON L.IdLocCode = S.IdLocCode INNER JOIN
       ItemLocation IL On IL.IdLocCode = S.IdLocCode And IL.IdItem = S.IdItem
       WHERE L.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.LockInventory = 0
       AND NOT EXISTS(SELECT TD.IdItem
       FROM TaskDetail TD
       WHERE TD.IdLocTargetProposal = S.IdLocCode
       AND TD.IdWhs = S.IdWhs
       AND TD.IdItem = S.IdItem
       AND TD.IsComplete = 0
       AND TD.Status = 1
       AND IdTask IN (Select IdTask From Task Where TaskTypeCode = 'REPL' and IdTrackTaskType IN (11,21) and IsComplete = 0)
       )
       AND EXISTS(SELECT S1.IdItem
       FROM Stock S1
       WHERE S1.IdLpnCode = @idLpnCode
       AND S1.IdWhs = S.IdWhs
       AND S1.IdItem = S.IdItem
       And (S1.ItemQty + S.ItemQty) &lt;= IL.ReOrderQty)
       AND S.HoldCode IS NULL
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">idLpnCode</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="STKPUTNearbyPrimaryLocItemZoneLessQty">
     <sql>
       SELECT TOP 1
       --ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       ABS(L.PickingFlow - (select PickingFlow from Location where IdLocCode in (select top 1 IdLocCode from ItemLocation where IdItem = @idItem))) AS Ruta,
       S.StockId,
       S.IdWhs,
       S.IdOwn,
       SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) AS ItemQty,
       S.IdCtgItem,
       S.IdItem,
       S.Status,
       S.FifoDate,
       S.ExpirationDate,
       S.FabricationDate,
       S.LotNumber,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       S.Price,
       S.IdReceipt,
       S.IdInboundOrder,
       S.InboundLineNumber,
       S.IdOutboundOrder,
       S.OutboundLineNumber,
       S.SealNumber,
       S.ReasonCode,
       S.HoldCode,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
       -- Stock en Tareas Pendientes
       LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND S.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))
       -- Stock en Tareas Simuladas
       LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND S.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt; 0
       AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &lt;= @itemQty
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
       FROM WorkZoneForkLift WZF INNER JOIN
       WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE WZF.IdLocCode = @idForkLift
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY
       S.StockId, S.IdWhs, S.IdOwn, S.IdCtgItem, S.IdItem, S.Status, S.FifoDate, S.ExpirationDate, S.FabricationDate,
       S.LotNumber, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer, S.Price, S.IdReceipt,
       S.IdInboundOrder, S.InboundLineNumber, S.IdOutboundOrder, S.OutboundLineNumber, S.SealNumber, S.ReasonCode,
       S.HoldCode, L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle,
       L.Status, L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status
       ORDER BY Ruta ASC, ItemQty ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="STKPUTNearbyPrimaryLocItemZoneGreaterQty">
     <sql>
       SELECT TOP 1
       -- ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       ABS(L.PickingFlow - (select PickingFlow from Location where IdLocCode in (select top 1 IdLocCode from ItemLocation where IdItem = @idItem))) AS Ruta,
       S.StockId,
       S.IdWhs,
       S.IdOwn,
       SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) AS ItemQty,
       S.IdCtgItem,
       S.IdItem,
       S.Status,
       S.FifoDate,
       S.ExpirationDate,
       S.FabricationDate,
       S.LotNumber,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       S.Price,
       S.IdReceipt,
       S.IdInboundOrder,
       S.InboundLineNumber,
       S.IdOutboundOrder,
       S.OutboundLineNumber,
       S.SealNumber,
       S.ReasonCode,
       S.HoldCode,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
       -- Stock en Tareas Pendientes
       LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND S.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))
       -- Stock en Tareas Simuladas
       LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND S.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       -- Stock Reserve by Customer
       --LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem AND
       --S.IdWhs = OQRC.IdWhs AND S.IdOwn = OQRC.IdOwn AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt;= @itemQty
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
       FROM WorkZoneForkLift WZF INNER JOIN
       WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE WZF.IdLocCode = @idForkLift
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY
       S.StockId, S.IdWhs, S.IdOwn, S.IdCtgItem, S.IdItem, S.Status, S.FifoDate, S.ExpirationDate, S.FabricationDate,
       S.LotNumber, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer, S.Price, S.IdReceipt,
       S.IdInboundOrder, S.InboundLineNumber, S.IdOutboundOrder, S.OutboundLineNumber, S.SealNumber, S.ReasonCode,
       S.HoldCode, L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle,
       L.Status, L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status
       ORDER BY Ruta ASC, ItemQty DESC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemNoZoneQtyGreaterThanMaxPrimaryLocLessQtyUomInnerPack">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.FifoDate,
       S.IdWhs,
       S.IdOwn,
       (IU.ConversionFactor * ROUND(((SUM(S.ItemQty)
       - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR (OLPS.IdLpnSourceProposal IS NULL))),0)
       )/IU.ConversionFactor),0,1)) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem AND IU.UomName = 'InnerPack'
       INNER JOIN (SELECT TOP 1 IdItem, ReOrderPoint, ReOrderQty
       FROM ItemLocation
       WHERE IdItem = @idItem) IL ON IL.IdItem = I.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND IL.ReOrderQty &lt;= @itemQty
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status,IU.ConversionFactor,S.FifoDate
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) &gt; IU.ConversionFactor
       AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0))))  &lt;= CASE WHEN (@itemQty/IU.ConversionFactor) &lt;= 0
       THEN 0
       ELSE IU.ConversionFactor * (@itemQty/IU.ConversionFactor)
       END
       ORDER BY S.FifoDate ASC, ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemNoZoneQtyGreaterThanMaxPrimaryLocGreaterQtyUomInnerPack">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.FifoDate,
       S.IdWhs,
       S.IdOwn,
       (IU.ConversionFactor * ROUND(((SUM(S.ItemQty)
       - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR (OLPS.IdLpnSourceProposal IS NULL))),0)
       )/IU.ConversionFactor),0,1)) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem AND IU.UomName = 'InnerPack'
       INNER JOIN (SELECT TOP 1 IdItem, ReOrderPoint, ReOrderQty
       FROM ItemLocation
       WHERE IdItem = @idItem) IL ON IL.IdItem = I.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND IL.ReOrderQty &lt;= @itemQty
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status,IU.ConversionFactor,S.FifoDate
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) &gt; IU.ConversionFactor
       AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0))))  &lt;= CASE WHEN (@itemQty/IU.ConversionFactor) &lt;= 0
       THEN 0
       ELSE IU.ConversionFactor * (@itemQty/IU.ConversionFactor)
       END
       ORDER BY S.FifoDate ASC, ItemQty DESC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>
   
   <!-- PUTAWAY RULES section  -->

   <!-- UsefulLife RULES section  -->
   <query code="STKPUTItemNoZoneLessQtyGroupByLotExpDateFabriDate">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) -
       (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLPS.ExpirationDate IS NULL))
       AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
       OR(S.FabricationDate IS NULL)
       OR(OLPS.FabricationDate IS NULL))
       ),0) +
       (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))
       AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLP.ExpirationDate IS NULL))
       AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
       OR(S.FabricationDate IS NULL)
       OR(OLP.FabricationDate IS NULL))
       ),0)
       ))) AS ItemQty,
       S.IdItem,
       S.LotNumber,
       S.fabricationDate,
       S.ExpirationDate,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       s.lotNumber,
       s.fabricationDate,
       s.expirationDate

       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       LEFT JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND S.IdLocCode = OLPS.IdLocSourceProposal
       AND S.ExpirationDate = OLPS.ExpirationDate
       AND S.FabricationDate = OLPS.FabricationDate
       AND S.LotNumber = OLPS.LotNumber
       LEFT JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND S.IdLocCode = OLP.IdLocSourceProposal
       AND S.ExpirationDate = OLP.ExpirationDate
       AND S.FabricationDate = OLP.FabricationDate
       AND S.LotNumber = OLP.LotNumber
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND S.ExpirationDate &gt;= @expirationDate
       GROUP BY
       S.ItemQty,
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, s.lotNumber, s.fabricationDate,s.expirationDate
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLPS.ExpirationDate IS NULL))
       AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
       OR(S.FabricationDate IS NULL)
       OR(OLPS.FabricationDate IS NULL))
       ),0) +
       (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))
       AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLP.ExpirationDate IS NULL))
       AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
       OR(S.FabricationDate IS NULL)
       OR(OLP.FabricationDate IS NULL))
       ),0)
       ))
       ) &lt;= @itemQty
       and
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLPS.ExpirationDate IS NULL))
       AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
       OR(S.FabricationDate IS NULL)
       OR(OLPS.FabricationDate IS NULL))
       ),0) +
       (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))
       AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLP.ExpirationDate IS NULL))
       AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
       OR(S.FabricationDate IS NULL)
       OR(OLP.FabricationDate IS NULL))
       ),0)
       ))
       ) &gt; 0
       order by S.ExpirationDate asc, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="DateTime">expirationDate</parameter>
     </parameters>
   </query>

 

   <query code="STKPICKItemNoZoneLessQtyLot">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))
       AND ((@idCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL)
       OR(@idCtgItem IS NULL)
       OR(OLP.IdCtgItem IS NULL))
       AND ((@lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL)
       OR(@lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((@fifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL)
       OR(@fifoDate IS NULL)
       OR(OLP.FifoDate IS NULL))
       AND ((@fabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL)
       OR(@fabricationDate IS NULL)
       OR(OLP.FabricationDate IS NULL))
       AND ((@expirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND @expirationDate IS NOT NULL)
       OR(@expirationDate IS NULL)
       OR(OLP.expirationDate IS NULL))
       ),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       AND ((@idCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL)
       OR(@idCtgItem IS NULL)
       OR(OLPS.IdCtgItem IS NULL))
       AND ((@lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL)
       OR(@lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((@fifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL)
       OR(@fifoDate IS NULL)
       OR(OLPS.FifoDate IS NULL))
       AND ((@fabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL)
       OR(@fabricationDate IS NULL)
       OR(OLPS.FabricationDate IS NULL))
       AND ((@expirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND @expirationDate IS NOT NULL)
       OR(@expirationDate IS NULL)
       OR(OLPS.expirationDate IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       --CASE WHEN @idCtgItem IS NULL then S.IdCtgItem else @idCtgItem end IdCategoryItem,
       --CASE WHEN @lotNumber IS NULL then S.LotNumber else @lotNumber end LotNumber,
       --CASE WHEN @fifoDate IS NULL then S.FifoDate else @fifoDate end FifoDate,
       --CASE WHEN @fabricationDate IS NULL then S.FabricationDate else @fabricationDate end FabricationDate,
       --CASE WHEN @expirationDate IS NULL then S.ExpirationDate else @expirationDate end ExpirationDate,
       S.LotNumber,
       --S.FifoDate,
       S.FabricationDate,
       S.ExpirationDate,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       s.lotNumber,
       s.fabricationDate,
       s.expirationDate
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       --AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
       --AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
       AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
       AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
       --AND ((@expirationDate &lt;= S.ExpirationDate AND S.ExpirationDate IS NOT NULL )OR (@expirationDate IS NULL))
       AND S.ExpirationDate &gt;= @expirationDate
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND S.lotNumber IS NOT NULL
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, s.lotNumber,s.fabricationDate,s.expirationDate
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
       AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))
       AND ((@idCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL)
       OR(@idCtgItem IS NULL)
       OR(OLP.IdCtgItem IS NULL))
       AND ((@lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL)
       OR(@lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((@fifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL)
       OR(@fifoDate IS NULL)
       OR(OLP.FifoDate IS NULL))
       AND ((@fabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL)
       OR(@fabricationDate IS NULL)
       OR(OLP.FabricationDate IS NULL))
       AND ((@expirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND @expirationDate IS NOT NULL)
       OR(@expirationDate IS NULL)
       OR(OLP.expirationDate IS NULL))
       ),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
       AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       AND ((@idCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL)
       OR(@idCtgItem IS NULL)
       OR(OLPS.IdCtgItem IS NULL))
       AND ((@lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL)
       OR(@lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((@fifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL)
       OR(@fifoDate IS NULL)
       OR(OLPS.FifoDate IS NULL))
       AND ((@fabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL)
       OR(@fabricationDate IS NULL)
       OR(OLPS.FabricationDate IS NULL))
       AND ((@expirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND @expirationDate IS NOT NULL)
       OR(@expirationDate IS NULL)
       OR(OLPS.expirationDate IS NULL))
       ),0)))) &gt; 0
       AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))
       AND ((@idCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL)
       OR(@idCtgItem IS NULL)
       OR(OLP.IdCtgItem IS NULL))
       AND ((@lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL)
       OR(@lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((@fifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL)
       OR(@fifoDate IS NULL)
       OR(OLP.FifoDate IS NULL))
       AND ((@fabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL)
       OR(@fabricationDate IS NULL)
       OR(OLP.FabricationDate IS NULL))
       AND ((@expirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND @expirationDate IS NOT NULL)
       OR(@expirationDate IS NULL)
       OR(OLP.expirationDate IS NULL))
       ),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       AND ((@idCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL)
       OR(@idCtgItem IS NULL)
       OR(OLPS.IdCtgItem IS NULL))
       AND ((@lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL)
       OR(@lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((@fifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL)
       OR(@fifoDate IS NULL)
       OR(OLPS.FifoDate IS NULL))
       AND ((@fabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL)
       OR(@fabricationDate IS NULL)
       OR(OLPS.FabricationDate IS NULL))
       AND ((@expirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND @expirationDate IS NOT NULL)
       OR(@expirationDate IS NULL)
       OR(OLPS.expirationDate IS NULL))
       ),0)))) &lt;= @itemQty
       ORDER BY  s.expirationDate ASC, ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="DateTime">fifoDate</parameter>
       <parameter type="DateTime">fabricationDate</parameter>
       <parameter type="DateTime">expirationDate</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>

   <query code="STKPICKItemNoZoneGreaterQtyLot">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))
       AND ((@idCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL)
       OR(@idCtgItem IS NULL)
       OR(OLP.IdCtgItem IS NULL))
       AND ((@lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL)
       OR(@lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((@fifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL)
       OR(@fifoDate IS NULL)
       OR(OLP.FifoDate IS NULL))
       AND ((@fabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL)
       OR(@fabricationDate IS NULL)
       OR(OLP.FabricationDate IS NULL))
       AND ((@expirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL )
       OR(@expirationDate IS NULL)
       OR(OLP.expirationDate IS NULL))
       ),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       AND ((@idCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL)
       OR(@idCtgItem IS NULL)
       OR(OLPS.IdCtgItem IS NULL))
       AND ((@lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL)
       OR(@lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((@fifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL)
       OR(@fifoDate IS NULL)
       OR(OLPS.FifoDate IS NULL))
       AND ((@fabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL)
       OR(@fabricationDate IS NULL)
       OR(OLPS.FabricationDate IS NULL))
       AND ((@expirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL )
       OR(@expirationDate IS NULL)
       OR(OLPS.expirationDate IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       --CASE WHEN @idCtgItem IS NULL then S.IdCtgItem else @idCtgItem end IdCategoryItem,
       --CASE WHEN @lotNumber IS NULL then S.LotNumber else @lotNumber end LotNumber,
       --CASE WHEN @fifoDate IS NULL then S.FifoDate else @fifoDate end FifoDate,
       --CASE WHEN @fabricationDate IS NULL then S.FabricationDate else @fabricationDate end FabricationDate,
       --CASE WHEN @expirationDate IS NULL then S.ExpirationDate else @expirationDate end ExpirationDate,
       S.LotNumber,
       S.fabricationDate,
       S.ExpirationDate,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       s.lotNumber,
       s.fabricationDate,
       s.expirationDate

       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
       --AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
       AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
       AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
       --AND ((@expirationDate &lt;= S.ExpirationDate AND S.ExpirationDate IS NOT NULL )OR(@expirationDate IS NULL))
       AND S.ExpirationDate &gt;= @expirationDate
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND S.lotNumber IS NOT NULL
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, s.lotNumber, s.fabricationDate,s.expirationDate
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
       AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))
       AND ((@idCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL)
       OR(@idCtgItem IS NULL)
       OR(OLP.IdCtgItem IS NULL))
       AND ((@lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL)
       OR(@lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((@fifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL)
       OR(@fifoDate IS NULL)
       OR(OLP.FifoDate IS NULL))
       AND ((@fabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL)
       OR(@fabricationDate IS NULL)
       OR(OLP.FabricationDate IS NULL))
       AND ((@expirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL )
       OR(@expirationDate IS NULL)
       OR(OLP.expirationDate IS NULL))
       ),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
       AND S.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       AND ((@idCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL)
       OR(@idCtgItem IS NULL)
       OR(OLPS.IdCtgItem IS NULL))
       AND ((@lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL)
       OR(@lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((@fifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL)
       OR(@fifoDate IS NULL)
       OR(OLPS.FifoDate IS NULL))
       AND ((@fabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL)
       OR(@fabricationDate IS NULL)
       OR(OLPS.FabricationDate IS NULL))
       AND ((@expirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL )
       OR(@expirationDate IS NULL)
       OR(OLPS.expirationDate IS NULL))
       ),0)))) &gt;= @itemQty
       ORDER BY    s.expirationDate ASC,ItemQty DESC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="DateTime">fifoDate</parameter>
       <parameter type="DateTime">fabricationDate</parameter>
       <parameter type="DateTime">expirationDate</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>

   <query code="STKPICKItemNoZoneLessQtyPlanUnidLot">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       L.IdWhs,
       I.IdOwn,
       (SUM(SP.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE I.IdItem = OLP.IdItem
       AND L.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal),0)
       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE I.IdItem = OLPS.IdItem
       AND L.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       ) AS ItemQty,
       I.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       s.lotNumber,
       s.fabricationDate,
       s.expirationDate
       FROM ItemLocation IL LEFT JOIN
       (SELECT S.IdWhs, S.IdOwn, S.IdItem, SUM(ItemQty) ItemQty, S.LotNumber
       FROM Stock S INNER JOIN
       Location L ON S.IdLocCode = L.IdLocCode
       WHERE ((L.LocTypeCode = 'PICK'  AND L.OnlyLPN = 0) OR
       (L.LocTypeCode = 'PUT'  AND L.OnlyLPN = 1))
       AND S.IdWhs = @idWhs
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       GROUP BY S.IdWhs, S.IdOwn, S.IdItem, S.LotNumber) SP ON IL.IdItem = SP.IdItem INNER JOIN
       Location L ON L.IdLocCode = IL.IdLocCode INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Item I ON I.IdItem = IL.IdItem LEFT JOIN
       Stock S ON S.IdWhs = L.IdWhs
       AND S.IdOwn = I.IdOwn
       AND S.IdItem = I.IdItem
       AND S.IdLocCode = IL.IdLocCode LEFT OUTER JOIN
       -- Stock Reserve by Customer
       v_Other_QtyReserveCustomer AS OQRC ON I.IdItem = OQRC.IdItem
       AND L.IdWhs = OQRC.IdWhs
       AND I.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE IL.IdItem = @idItem
       AND L.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND L.OnlyLPN = 0
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.LotNumber IS NOT NULL
       AND S.ExpirationDate &gt;= @expirationDate
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
       GROUP BY
       L.IdWhs, I.IdOwn, I.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status,s.lotNumber,s.fabricationDate, s.expirationDate,SP.ItemQty
       HAVING (
       (SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE I.IdItem = OLP.IdItem
	   AND L.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal),0))
       - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE I.IdItem = OLPS.IdItem
	   AND L.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)) &gt; 0)
       AND (SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE I.IdItem = OLP.IdItem
	   AND L.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal),0))
       - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE I.IdItem = OLPS.IdItem
	   AND L.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)) &lt;= @itemQty)
       )
       ORDER BY expirationdate asc,Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="DateTime">expirationDate</parameter>
     </parameters>
   </query>

   <query code="STKPICKItemNoZoneGreaterQtyPlanUnidLot">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       L.IdWhs,
       I.IdOwn,
       @itemQty1 AS ItemQty,
       I.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       S.LotNumber,
       S.FabricationDate,
       S.ExpirationDate
       FROM ItemLocation IL LEFT JOIN
       (SELECT S.IdWhs, S.IdOwn, S.IdItem, SUM(ItemQty) ItemQty
       FROM Stock S INNER JOIN
       Location L ON S.IdLocCode = L.IdLocCode
       WHERE ((L.LocTypeCode = 'PICK'  AND L.OnlyLPN = 0) OR
       (L.LocTypeCode = 'PUT'  AND L.OnlyLPN = 1))
       AND S.IdWhs = @idWhs
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       GROUP BY S.IdWhs, S.IdOwn, S.IdItem) SP ON IL.IdItem = SP.IdItem INNER JOIN
       Location L ON L.IdLocCode = IL.IdLocCode INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Item I ON I.IdItem = IL.IdItem LEFT JOIN
       Stock S ON S.IdWhs = L.IdWhs
       AND S.IdOwn = I.IdOwn
       AND S.IdItem = I.IdItem
       AND S.IdLocCode = IL.IdLocCode LEFT OUTER JOIN
       -- Stock Reserve by Customer
       v_Other_QtyReserveCustomer AS OQRC ON I.IdItem = OQRC.IdItem
       AND L.IdWhs = OQRC.IdWhs
       AND I.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode LEFT JOIN
       (SELECT IdItem, IdLocSourceProposal, SUM(COALESCE(ItemQty,0)) ItemQty, IdWhs
       FROM v_Other_LocationPicking
       GROUP BY IdItem, IdLocSourceProposal, IdWhs) VOLP ON I.IdItem = VOLP.IdItem
	   AND VOLP.idwhs = L.IdWhs 
       AND L.IdLocCode = VOLP.IdLocSourceProposal LEFT JOIN
       (SELECT IdItem, IdLocSourceProposal, SUM(COALESCE(ItemQty,0)) ItemQty,LotNumber, IdWhs
       FROM v_Other_LocationPicking_Sim
       GROUP BY IdItem, IdLocSourceProposal,LotNumber, IdWhs) VOLPS ON I.IdItem = VOLPS.IdItem
	   AND VOLPS.idwhs = L.IdWhs
       AND L.IdLocCode = VOLPS.IdLocSourceProposal AND S.ExpirationDate &gt;= @expirationDate
       WHERE IL.IdItem = @idItem
       AND L.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND L.OnlyLPN = 0
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND S.LotNumber IS NOT NULL
       -- AND S.LotNumber &lt;&gt; VOLPS.LotNumber
       AND S.ExpirationDate &gt;= @expirationDate
       AND L.LockInventory = 0
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
       GROUP BY
       L.IdWhs, I.IdOwn, I.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status,S.LotNumber,S.FabricationDate,S.ExpirationDate
       HAVING (SUM(SP.ItemQty) - COALESCE(SUM(VOLP.ItemQty),0) - COALESCE(SUM(VOLPS.ItemQty),0)) &gt;= @itemQty2
       ORDER BY s.expirationDate ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty1</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Decimal">itemQty2</parameter>
       <parameter type="DateTime">expirationDate</parameter>
     </parameters>
   </query>
   
   <query code="STKPUTItemNoZoneQtyGreaterThanMaxPrimaryLocGreaterQtyUomInnerPackLotExp">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       --S.FifoDate,
       S.IdWhs,
       S.IdOwn,
       (IU.ConversionFactor * ROUND(((SUM(S.ItemQty)
       - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP WHERE S.IdItem = OLP.IdItem
       AND L.IdLocCode = OLP.IdLocSourceProposal
	   AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		OR(S.lotNumber IS NULL)
		OR(OLP.LotNumber IS NULL))
		AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		OR(S.ExpirationDate IS NULL)
		OR(OLP.ExpirationDate IS NULL))
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS WHERE S.IdItem = OLPS.IdItem
	   	AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		OR(S.lotNumber IS NULL)
		OR(OLPS.LotNumber IS NULL))
		AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		OR(S.ExpirationDate IS NULL)
		OR(OLPS.ExpirationDate IS NULL))
       AND L.IdLocCode = OLPS.IdLocSourceProposal
	   
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR (OLPS.IdLpnSourceProposal IS NULL))),0)
       )/IU.ConversionFactor),0,1)) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem AND IU.UomName = 'CAJA'
       INNER JOIN (SELECT TOP 1 IdItem, ReOrderPoint, ReOrderQty
       FROM ItemLocation
       WHERE IdItem = @idItem) IL ON IL.IdItem = I.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND (S.ExpirationDate > GETDATE() + I.ShelfLife OR S.ExpirationDate IS NULL) -- se agrega linea para que no reponga producto vencido
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL) -- Agregado a solicitud de Felipe Salinas BASE-477
       AND COALESCE((IL.ReOrderQty - IL.ReOrderPoint),0) &lt;= @itemQty
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status,IU.ConversionFactor,S.FifoDate,s.LotNumber,S.ExpirationDate,s.fabricationDate
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
       AND L.IdLocCode = OLP.IdLocSourceProposal
	   AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		OR(S.lotNumber IS NULL)
		OR(OLP.LotNumber IS NULL))
		AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		OR(S.ExpirationDate IS NULL)
		OR(OLP.ExpirationDate IS NULL))
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
       AND L.IdLocCode = OLPS.IdLocSourceProposal
	   	AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		OR(S.lotNumber IS NULL)
		OR(OLPS.LotNumber IS NULL))
		AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		OR(S.ExpirationDate IS NULL)
		OR(OLPS.ExpirationDate IS NULL))
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) &gt; IU.ConversionFactor
       AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
	   	   AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		OR(S.lotNumber IS NULL)
		OR(OLP.LotNumber IS NULL))
		AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		OR(S.ExpirationDate IS NULL)
		OR(OLP.ExpirationDate IS NULL))
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL)))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
       AND L.IdLocCode = OLPS.IdLocSourceProposal
	   	AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		OR(S.lotNumber IS NULL)
		OR(OLPS.LotNumber IS NULL))
		AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		OR(S.ExpirationDate IS NULL)
		OR(OLPS.ExpirationDate IS NULL))
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0))))  &lt;= CASE WHEN (@itemQty/IU.ConversionFactor) &lt;= 0
       THEN 0
       ELSE IU.ConversionFactor * (@itemQty/IU.ConversionFactor)
       END       
	   ORDER BY S.ExpirationDate ASC, S.FifoDate ASC, ItemQty ASC, Ruta ASC --Agregado a solicitud de Felipe Salinas BASE-477
     </sql>
     <parameters>     
	   <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
	   <parameter type="String">lotNumber</parameter>
	   <parameter type="DateTime">expirationDate</parameter>
	   <parameter type="DateTime">fifoDate</parameter> 	   
     </parameters>
   </query>
   
   <query code="STKPUTItemNoZoneLessQtyUomCajaLotExp">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (IU.ConversionFactor * ROUND(((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                                                 FROM v_Other_LocationPicking AS OLP
                                                                 WHERE S.IdItem = OLP.IdItem
																   AND S.IdWhs = OLP.IdWhs
                                                                   AND L.IdLocCode = OLP.IdLocSourceProposal
																    AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
																	OR(S.lotNumber IS NULL)
																	OR(OLP.LotNumber IS NULL))
																	AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
																	OR(S.ExpirationDate IS NULL)
																	OR(OLP.ExpirationDate IS NULL))
																   AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))),0)
                                                     - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                                                 FROM v_Other_LocationPicking_Sim AS OLPS
                                                                 WHERE S.IdItem = OLPS.IdItem
																   AND S.IdWhs = OLPS.IdWhs
																   AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
																   OR(S.lotNumber IS NULL)
																   OR(OLPS.LotNumber IS NULL))
																   AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
																   OR(S.ExpirationDate IS NULL)
																   OR(OLPS.ExpirationDate IS NULL))
																   AND L.IdLocCode = OLPS.IdLocSourceProposal																   
																   AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR (OLPS.IdLpnSourceProposal IS NULL))),0)
                                                                  -- AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       )/IU.ConversionFactor),0,1)) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       S.FifoDate, 
       S.LotNumber, 
       S.ExpirationDate, 
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
                                                         AND S.IdWhs = OQRC.IdWhs
                                                         AND S.IdOwn = OQRC.IdOwn
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND IU.uomname = 'Caja'
       AND (S.ExpirationDate > GETDATE() + I.ShelfLife OR S.ExpirationDate IS NULL) -- se agrega linea para que no reponga producto vencido
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL) -- Agregado a solicitud de Felipe Salinas BASE-477
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, IU.ConversionFactor,S.FifoDate,s.LotNumber,S.ExpirationDate
       HAVING ((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
       AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLP.ExpirationDate IS NULL))
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))),0)
       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
       AND S.IdWhs = OLPS.IdWhs
       -- AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLPS.ExpirationDate IS NULL))
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR (OLPS.IdLpnSourceProposal IS NULL))),0)
       ) &gt;= IU.ConversionFactor
           AND (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
											  AND L.IdLocCode = OLP.IdLocSourceProposal
											 AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
											OR(S.lotNumber IS NULL)
											OR(OLP.LotNumber IS NULL))
											AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
											OR(S.ExpirationDate IS NULL)
											OR(OLP.ExpirationDate IS NULL))
											AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))),0)
                                             --AND L.IdLocCode = OLP.IdLocSourceProposal),0)
                               - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										       AND S.IdWhs = OLPS.IdWhs
											   AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
											   OR(S.lotNumber IS NULL)
											   OR(OLPS.LotNumber IS NULL))
											   AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
											   OR(S.ExpirationDate IS NULL)
											   OR(OLPS.ExpirationDate IS NULL))
											   AND L.IdLocCode = OLPS.IdLocSourceProposal																   
											   AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR (OLPS.IdLpnSourceProposal IS NULL))),0)
                                            -- AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
                ) &lt;= CASE WHEN (@itemQty/IU.ConversionFactor) &lt;= 0 
                             THEN 0 
                             ELSE IU.ConversionFactor * (@itemQty/IU.ConversionFactor) 
                             END
              )       
	   ORDER BY S.ExpirationDate ASC, S.FifoDate ASC, ItemQty ASC, Ruta ASC --Agregado a solicitud de Felipe Salinas BASE-477
     </sql>
     <parameters>	 
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
	   <parameter type="String">lotNumber</parameter>
	   <parameter type="DateTime">expirationDate</parameter>
	   <parameter type="DateTime">fifoDate</parameter>	 	       
     </parameters>
   </query>
   
   <query code="STKPUTItemNoZoneGreaterQtyUomCajaLotExp">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (IU.ConversionFactor * ROUND((@itemQty/IU.ConversionFactor),0,1)) AS ItemQty,
       S.IdItem,
       S.FifoDate,
       S.LotNumber,
       S.ExpirationDate,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
                                                         AND S.IdWhs = OQRC.IdWhs
                                                         AND S.IdOwn = OQRC.IdOwn
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND IU.uomname = 'Caja'
       AND @itemQty >= IU.ConversionFactor
       AND (S.ExpirationDate > GETDATE() + I.ShelfLife OR S.ExpirationDate IS NULL) -- se agrega linea para que no reponga producto vencido
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL) -- Agregado a solicitud de Felipe Salinas BASE-477
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, IU.ConversionFactor,S.FifoDate,s.LotNumber,S.ExpirationDate
       HAVING ((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
       AND S.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLP.ExpirationDate IS NULL))
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))),0)

       --),0)
       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
       AND S.IdWhs = OLPS.IdWhs
       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLPS.ExpirationDate IS NULL))
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR (OLPS.IdLpnSourceProposal IS NULL))),0)
       --AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       ) &gt;= IU.ConversionFactor
           AND (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal
											AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
											OR(S.lotNumber IS NULL)
											OR(OLP.LotNumber IS NULL))
											AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
											OR(S.ExpirationDate IS NULL)
											OR(OLP.ExpirationDate IS NULL))
											AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))),0) 
											 
											 --),0)
                               - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										     AND S.IdWhs = OLPS.IdWhs
											 AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
											   OR(S.lotNumber IS NULL)
											   OR(OLPS.LotNumber IS NULL))
											   AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
											   OR(S.ExpirationDate IS NULL)
											   OR(OLPS.ExpirationDate IS NULL))
											   AND L.IdLocCode = OLPS.IdLocSourceProposal																   
											   AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR (OLPS.IdLpnSourceProposal IS NULL))),0)
                                             --AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
                ) &gt;= CASE WHEN (@itemQty/IU.ConversionFactor) &lt;= 0 
                             THEN 0 
                             ELSE IU.ConversionFactor * (@itemQty/IU.ConversionFactor) 
                             END
       )      
	  ORDER BY S.ExpirationDate ASC, S.FifoDate ASC, ItemQty ASC, Ruta ASC --Agregado a solicitud de Felipe Salinas BASE-477
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
	   <parameter type="String">lotNumber</parameter>
	   <parameter type="DateTime">expirationDate</parameter>
	   <parameter type="DateTime">fifoDate</parameter>
     </parameters>
   </query>
      
   <query code="STKPICKItemNoZoneLessQtyPlanUnidLotExp">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       L.IdWhs,
       I.IdOwn,
       (SUM(SP.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE I.IdItem = OLP.IdItem
       AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLP.ExpirationDate IS NULL))
       AND L.IdLocCode = OLP.IdLocSourceProposal),0)
       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE I.IdItem = OLPS.IdItem
       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLPS.ExpirationDate IS NULL))
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       ) AS ItemQty,
       I.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM ItemLocation IL LEFT JOIN
       (SELECT S.IdWhs, S.IdOwn, S.IdItem, SUM(ItemQty) ItemQty
       FROM Stock S INNER JOIN
       Location L ON S.IdLocCode = L.IdLocCode
       WHERE ((L.LocTypeCode = 'PICK'  AND L.OnlyLPN = 0) OR (L.LocTypeCode = 'PUT'  AND L.OnlyLPN = 1))
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
       GROUP BY S.IdWhs, S.IdOwn, S.IdItem) SP ON IL.IdItem = SP.IdItem INNER JOIN
       Location L ON L.IdLocCode = IL.IdLocCode INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Item I ON I.IdItem = IL.IdItem LEFT JOIN
       Stock S ON S.IdWhs = L.IdWhs
       AND S.IdOwn = I.IdOwn
       AND S.IdItem = I.IdItem
       AND S.IdLocCode = IL.IdLocCode LEFT OUTER JOIN
       -- Stock Reserve by Customer
       v_Other_QtyReserveCustomer AS OQRC ON I.IdItem = OQRC.IdItem
       AND L.IdWhs = OQRC.IdWhs
       AND I.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE IL.IdItem = @idItem
       AND L.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND L.OnlyLPN = 0
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND (S.ExpirationDate > GETDATE() + I.ShelfLife OR S.ExpirationDate IS NULL) -- se agrega linea para que no reponga producto vencido
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
       GROUP BY
       L.IdWhs, I.IdOwn, I.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, S.FifoDate,S.expirationDate,s.LotNumber
       HAVING ((SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE I.IdItem = OLP.IdItem
       AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLP.ExpirationDate IS NULL))
       AND L.IdLocCode = OLP.IdLocSourceProposal),0))
       - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE I.IdItem = OLPS.IdItem
       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLPS.ExpirationDate IS NULL))
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)) &gt; 0)
			AND (SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
											   FROM v_Other_LocationPicking AS OLP
											   WHERE I.IdItem = OLP.IdItem
											   AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
											   OR(S.lotNumber IS NULL)
											   OR(OLP.LotNumber IS NULL))
											   AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
											   OR(S.ExpirationDate IS NULL)
											   OR(OLP.ExpirationDate IS NULL))
											   AND L.IdLocCode = OLP.IdLocSourceProposal),0))
								- (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
											   FROM v_Other_LocationPicking_Sim AS OLPS
											   WHERE I.IdItem = OLPS.IdItem
											   AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
											   OR(S.lotNumber IS NULL)
											   OR(OLPS.LotNumber IS NULL))
											   AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
											   OR(S.ExpirationDate IS NULL)
											   OR(OLPS.ExpirationDate IS NULL))
											   AND L.IdLocCode = OLPS.IdLocSourceProposal),0)) &lt;= @itemQty)
		)       
	   ORDER BY S.ExpirationDate ASC, S.FifoDate ASC, ItemQty ASC, Ruta ASC --Agregado a solicitud de Felipe Salinas BASE-477
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="String">customerCode</parameter>       
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Decimal">itemQty</parameter>    
       <parameter type="String">lotNumber</parameter>
	   <parameter type="DateTime">expirationDate</parameter>
	   <parameter type="DateTime">fifoDate</parameter>	   
     </parameters>
   </query>
       
   <query code="STKPICKItemNoZoneGreaterQtyPlanUnidLotExp">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       L.IdWhs,
       I.IdOwn,
       @itemQty1 AS ItemQty,
       I.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       s.expirationDate
       FROM ItemLocation IL LEFT JOIN
       (SELECT S.IdWhs, S.IdOwn, S.IdItem, SUM(ItemQty) ItemQty
       FROM Stock S INNER JOIN
       Location L ON S.IdLocCode = L.IdLocCode
       WHERE ((L.LocTypeCode = 'PICK'  AND L.OnlyLPN = 0) OR
       (L.LocTypeCode = 'PUT'  AND L.OnlyLPN = 1))
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
       GROUP BY S.IdWhs, S.IdOwn, S.IdItem) SP ON IL.IdItem = SP.IdItem INNER JOIN
       Location L ON L.IdLocCode = IL.IdLocCode INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Item I ON I.IdItem = IL.IdItem LEFT JOIN
       Stock S ON S.IdWhs = L.IdWhs
       AND S.IdOwn = I.IdOwn
       AND S.IdItem = I.IdItem
       AND S.IdLocCode = IL.IdLocCode LEFT OUTER JOIN
       -- Stock Reserve by Customer
       v_Other_QtyReserveCustomer AS OQRC ON I.IdItem = OQRC.IdItem
       AND L.IdWhs = OQRC.IdWhs
       AND I.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode

       LEFT JOIN (SELECT IdItem,expirationDate,lotNumber, IdLocSourceProposal, SUM(COALESCE(ItemQty,0)) ItemQty
       FROM v_Other_LocationPicking
       GROUP BY IdItem, IdLocSourceProposal,expirationDate,lotNumber) VOLP ON I.IdItem = VOLP.IdItem
       AND ((S.lotNumber = VOLP.LotNumber AND VOLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(VOLP.LotNumber IS NULL))
       AND ((S.ExpirationDate = VOLP.ExpirationDate AND VOLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(VOLP.ExpirationDate IS NULL))
       AND L.IdLocCode = VOLP.IdLocSourceProposal LEFT JOIN
       (SELECT IdItem,expirationDate,lotNumber, IdLocSourceProposal, SUM(COALESCE(ItemQty,0)) ItemQty
       FROM v_Other_LocationPicking_Sim

       GROUP BY IdItem, IdLocSourceProposal,expirationDate,lotNumber) VOLPS

       ON I.IdItem = VOLPS.IdItem
       AND L.IdLocCode = VOLPS.IdLocSourceProposal
       AND ((S.lotNumber = VOLPS.LotNumber AND VOLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(VOLPS.LotNumber IS NULL))
       AND ((S.ExpirationDate = VOLPS.ExpirationDate AND VOLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(VOLPS.ExpirationDate IS NULL))
       WHERE IL.IdItem = @idItem
       AND L.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND L.OnlyLPN = 0
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND (S.ExpirationDate > GETDATE() + I.ShelfLife OR S.ExpirationDate IS NULL) -- se agrega linea para que no reponga producto vencido
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
       GROUP BY
       L.IdWhs, I.IdOwn, I.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status,S.FifoDate,s.expirationDate,s.LotNumber
       HAVING (SUM(SP.ItemQty) - COALESCE(SUM(VOLP.ItemQty),0) - COALESCE(SUM(VOLPS.ItemQty),0)) &gt;= @itemQty2       
	   ORDER BY S.ExpirationDate ASC, S.FifoDate ASC, ItemQty ASC, Ruta ASC --Agregado a solicitud de Felipe Salinas BASE-477
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty1</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Decimal">itemQty2</parameter>  
       <parameter type="String">lotNumber</parameter>
	   <parameter type="DateTime">expirationDate</parameter>
	   <parameter type="DateTime">fifoDate</parameter>	   
     </parameters>
   </query>



   <query code="GetStockLocationPutawayLessQtyUsefullLife">
     <sql>
       SELECT  ABS(L.PutawayFlow - @putawayFlow) as Ruta,
       S.StockId,
       S.IdWhs,
       S.IdOwn,
       S.IdLocCode,
       S.IdItem,
       S.IdCtgItem,
       S.ItemQty,
       S.TotalWeight,
       S.TotalVolumen,
       S.Status,
       S.FifoDate,
       S.ExpirationDate,
       S.FabricationDate,
       S.LotNumber,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       S.Price,
       S.IdReceipt,
       S.IdInboundOrder,
       S.InboundLineNumber,
       S.IdOutboundOrder,
       S.OutboundLineNumber,
       S.SealNumber,
       S.ReasonCode,
       S.HoldCode,
       S.IdInboundOrder,
       S.InboundLineNumber,
       S.IdOutboundOrder,
       S.OutboundLineNumber,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status

       FROM Location L
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
       INNER JOIN WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND S.IdItem = @idItem
       AND S.ExpirationDate &gt;= @fefo
       AND WZI.IdItem = S.IdItem
       AND S.HoldCode IS NULL
       AND S.ItemQty &lt;= @itemQty
       ORDER BY Ruta , S.ExpirationDate ASC,S.ItemQty ASC;
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">itemQty</parameter>
       <parameter type="DateTime">fefo</parameter>
     </parameters>
   </query>

   <query code="GetStockLocationPutawayGreaterQtyUsefullLife">
     <sql>
       SELECT  ABS(L.PutawayFlow - @putawayFlow) as Ruta,
       S.StockId,
       S.IdWhs,
       S.IdOwn,
       S.IdLocCode,
       S.IdItem,
       S.IdCtgItem,
       case when (S.ItemQty &gt;= 30) then 30 else s.ItemQty end as ItemQty,
       S.TotalWeight,
       S.TotalVolumen,
       S.Status,
       S.FifoDate,
       S.ExpirationDate,
       S.FabricationDate,
       S.LotNumber,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       S.Price,
       S.IdReceipt,
       S.IdInboundOrder,
       S.InboundLineNumber,
       S.IdOutboundOrder,
       S.OutboundLineNumber,
       S.SealNumber,
       S.ReasonCode,
       S.HoldCode,
       S.IdInboundOrder,
       S.InboundLineNumber,
       S.IdOutboundOrder,
       S.OutboundLineNumber,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status

       FROM Location L
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
       INNER JOIN WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND S.IdItem = @idItem
       AND S.ExpirationDate &gt;= @fefo
       AND WZI.IdItem = S.IdItem
       AND S.HoldCode IS NULL
       AND S.ItemQty &gt;= @itemQty
       ORDER BY Ruta , S.ExpirationDate ASC,S.ItemQty ASC;
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">itemQty</parameter>
       <parameter type="DateTime">fefo</parameter>
     </parameters>
   </query>

   <!--PutAway Capacity Unit-->
   <query code="LOCPUTEmptyNoZoneCapacityUnit">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND NOT EXISTS(SELECT S.IdLocCode
       FROM Stock S
       WHERE S.IdLocCode = L.IdLocCode)
       GROUP BY  L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       HAVING L.CapacityUnit >= COALESCE((SELECT SUM(S.ItemQty) FROM Stock S WHERE IdLocCode = @idForkLift),0)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPUTEmptyZoneCapacityUnit">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
       WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND WZI.IdItem = @idItem
       AND NOT EXISTS(SELECT S.IdLocCode
       FROM Stock S
       WHERE S.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
       FROM WorkZoneForkLift WZF INNER JOIN
       WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE WZF.IdLocCode = @idForkLift
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY  L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       HAVING L.CapacityUnit >= COALESCE((SELECT SUM(S.ItemQty) FROM Stock S WHERE IdLocCode = @idForkLift),0)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPUTItemNoZoneCapacityUnit">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Stock S ON L.IdLocCode = S.IdLocCode
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND S.IdItem = @idItem
       AND S.HoldCode IS NULL
       GROUP BY  L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       HAVING L.CapacityUnit >= COALESCE((SELECT SUM(S.ItemQty) FROM Stock S WHERE IdLocCode = @idForkLift AND IdItem = @idItem),0) + COALESCE((SELECT SUM(S.ItemQty) FROM Stock S WHERE IdLocCode = L.IdLocCode),0)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPUTItemZoneCapacityUnit">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
       WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
       Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND S.IdItem = @idItem
       AND S.HoldCode IS NULL
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
       FROM WorkZoneForkLift WZF INNER JOIN
       WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE WZF.IdLocCode = @idForkLift
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY  L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       HAVING L.CapacityUnit >= COALESCE((SELECT SUM(S.ItemQty) FROM Stock S WHERE IdLocCode = @idForkLift AND IdItem = @idItem),0) + COALESCE((SELECT SUM(S.ItemQty) FROM Stock S WHERE IdLocCode = L.IdLocCode),0)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPUTItemLoteNoZoneCapacityUnit">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Stock S ON L.IdLocCode = S.IdLocCode
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND S.IdItem = @idItem
       AND S.LotNumber = @lotNumber
       AND S.HoldCode IS NULL
       GROUP BY  L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       HAVING L.CapacityUnit >= COALESCE((SELECT SUM(S.ItemQty) FROM Stock S WHERE IdLocCode = @idForkLift AND IdItem = @idItem),0) + COALESCE((SELECT SUM(S.ItemQty) FROM Stock S WHERE IdLocCode = L.IdLocCode),0)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPUTItemLoteZoneCapacityUnit">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
       WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
       Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND S.IdItem = @idItem
       AND S.LotNumber = @lotNumber
       AND S.HoldCode IS NULL
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
       FROM WorkZoneForkLift WZF INNER JOIN
       WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE WZF.IdLocCode = @idForkLift
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY  L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       HAVING L.CapacityUnit >= COALESCE((SELECT SUM(S.ItemQty) FROM Stock S WHERE IdLocCode = @idForkLift AND IdItem = @idItem),0) + COALESCE((SELECT SUM(S.ItemQty) FROM Stock S WHERE IdLocCode = L.IdLocCode),0)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>
   <!--End PutAway Capacity Unit-->


   <query code="LOCPUTEmptyZone2Step">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
       WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND WZI.IdItem = @idItem
       AND NOT EXISTS(SELECT S.IdLocCode
       FROM Stock S
       WHERE S.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       -- Comentado para que no filtre la zona de máquina, PUT en 2 pasos luego la filtra
       -- AND EXISTS(SELECT WZF.IdLocCode
       -- FROM WorkZoneForkLift WZF INNER JOIN
       -- WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       -- WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       -- WHERE WZF.IdLocCode = @idForkLift
       -- AND WZ.IdWhs = L.IdWhs
       --AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY  L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       HAVING L.CapacityLPN > (SELECT COUNT(DISTINCT S.IdLpnCode) FROM Stock S WHERE IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPUTItemZone2Step">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
       WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
       Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND S.IdItem = @idItem
       AND S.HoldCode IS NULL
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       -- Comentado para que no filtre la zona de máquina, PUT en 2 pasos luego la filtra
       -- AND EXISTS(SELECT WZF.IdLocCode
       -- FROM WorkZoneForkLift WZF INNER JOIN
       -- WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       -- WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       -- WHERE WZF.IdLocCode = @idForkLift
       -- AND WZ.IdWhs = L.IdWhs
       -- AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY  L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       HAVING L.CapacityLPN > (SELECT COUNT(DISTINCT S.IdLpnCode) FROM Stock S WHERE IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCPICKEmptyZone2Step">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
       WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PICK'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND WZI.IdItem = @idItem
       AND NOT EXISTS(SELECT S.IdLocCode FROM Stock S WHERE S.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       -- Comentado para que no filtre la zona de máquina, PUT en 2 pasos luego la filtra
       -- AND EXISTS(SELECT WZF.IdLocCode
       --            FROM WorkZoneForkLift WZF INNER JOIN
       --                 WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       --                 WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       --            WHERE WZF.IdLocCode = @idForkLift
       --              AND WZ.IdWhs = L.IdWhs
       --              AND WZL.IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

   <query code="LOCSTGItemZone">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
       WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'STG'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND WZI.IdItem = @idItem
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
       FROM WorkZoneForkLift WZF INNER JOIN
       WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE WZF.IdLocCode = @idForkLift
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY  L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>

  <query code="STKPUTItemNoZoneLessQtyUomCajaNcal">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (IU.ConversionFactor * ROUND(((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                                                   FROM v_Other_LocationPicking AS OLP
                                                                  WHERE S.IdItem = OLP.IdItem
																                                    AND S.IdWhs = OLP.IdWhs
                                                                    AND L.IdLocCode = OLP.IdLocSourceProposal
																                                    AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
																	                                  OR(OLP.IdLpnSourceProposal IS NULL))
																	                                  AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
																	                                  OR(S.lotNumber IS NULL)
																	                                  OR(OLP.LotNumber IS NULL))
																	                                  AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
																	                                  OR(S.ExpirationDate IS NULL)
																	                                  OR(OLP.ExpirationDate IS NULL))
																	                                  AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
																	                                  OR(S.FabricationDate IS NULL)
																	                                  OR(OLP.FabricationDate IS NULL)) 
                                                                  ),0)
                                                     - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                                                 FROM v_Other_LocationPicking_Sim AS OLPS
                                                                 WHERE S.IdItem = OLPS.IdItem
																                                   AND S.IdWhs = OLPS.IdWhs
															                                     AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
															                                     OR(OLPS.IdLpnSourceProposal IS NULL))
																	                                 AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
																	                                 OR(S.lotNumber IS NULL)
																	                                 OR(OLPS.LotNumber IS NULL))
																	                                   AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
																	                                 OR(S.ExpirationDate IS NULL)
																	                                 OR(OLPS.ExpirationDate IS NULL))
																	                                   AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
																	                                 OR(S.FabricationDate IS NULL)
																	                                 OR(OLPS.FabricationDate IS NULL))
                                                                   AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       )/IU.ConversionFactor),0,1)) AS ItemQty,
	     S.IdItem,
       S.LotNumber,
       S.fabricationDate,
       S.ExpirationDate,
	     S.FifoDate,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem
       -- Stock Reserve by Customer
      -- LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
      --                                                   AND S.IdWhs = OQRC.IdWhs
      --                                                   AND S.IdOwn = OQRC.IdOwn
      --                                                   AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND IU.UomName = 'PAL'
       AND (S.ExpirationDate > GETDATE() + I.ExpirationDays OR S.ExpirationDate IS NULL) -- se agrega linea para que no reponga producto vencido
       AND ((S.IdInboundOrder IS NULL) OR ((S.IdInboundOrder IS NOT NULL) AND EXISTS (SELECT IO.IdInboundOrder FROM InboundOrder IO
       WHERE IO.IdInboundOrder = S.IdInboundOrder
       AND (IO.IdInboundType in (11,12)
       OR IO.IdOutboundOrderSource IS NULL))))--no calzada
       GROUP BY
       S.IdWhs, S.IdOwn,  S.IdItem, S.LotNumber,s.FabricationDate,S.ExpirationDate, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, IU.ConversionFactor, S.FifoDate
       HAVING ((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
       AND S.IdWhs = OLP.IdWhs
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))
       AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLP.ExpirationDate IS NULL))
       AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
       OR(S.FabricationDate IS NULL)
       OR(OLP.FabricationDate IS NULL))
       AND L.IdLocCode = OLP.IdLocSourceProposal),0)

       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
       AND S.IdWhs = OLPS.IdWhs
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLPS.ExpirationDate IS NULL))
       AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
       OR(S.FabricationDate IS NULL)
       OR(OLPS.FabricationDate IS NULL))
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       ) &gt;= IU.ConversionFactor
           AND (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										                         AND S.IdWhs = OLP.IdWhs
										                         AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
											                       OR(OLP.IdLpnSourceProposal IS NULL))
											                       AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
											                       OR(S.lotNumber IS NULL)
											                       OR(OLP.LotNumber IS NULL))
											                       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
											                       OR(S.ExpirationDate IS NULL)
											                       OR(OLP.ExpirationDate IS NULL))
											                       AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
											                       OR(S.FabricationDate IS NULL)
											                       OR(OLP.FabricationDate IS NULL))
                                             AND L.IdLocCode = OLP.IdLocSourceProposal),0)
                               - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										                         AND S.IdWhs = OLPS.IdWhs
										                         AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
											                       OR(OLPS.IdLpnSourceProposal IS NULL))
											                       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
											                       OR(S.lotNumber IS NULL)
											                       OR(OLPS.LotNumber IS NULL))
											                       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
											                       OR(S.ExpirationDate IS NULL)
											                       OR(OLPS.ExpirationDate IS NULL))
											                       AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
											                       OR(S.FabricationDate IS NULL)
											                       OR(OLPS.FabricationDate IS NULL))
                                             AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
                ) &lt;= CASE WHEN (@itemQty/IU.ConversionFactor) &lt;= 0 
                             THEN 0 
                             ELSE IU.ConversionFactor * (@itemQty/IU.ConversionFactor) 
                             END
              )
	   ORDER BY S.ExpirationDate ASC, S.FifoDate ASC, ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemNoZoneGreaterQtyUomCajaNCal">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (IU.ConversionFactor * ROUND((@itemQty/IU.ConversionFactor),0,1)) AS ItemQty,
       S.IdItem,
	     S.LotNumber,
       S.fabricationDate,
       S.ExpirationDate,
	     S.FifoDate,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem
       -- Stock Reserve by Customer
       --LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       --                                                  AND S.IdWhs = OQRC.IdWhs
       --                                                  AND S.IdOwn = OQRC.IdOwn
       --                                                  AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND IU.UomName = 'PAL'
       AND (S.ExpirationDate > GETDATE() + I.ExpirationDays OR S.ExpirationDate IS NULL) -- se agrega linea para que no reponga producto vencido
       AND ((S.IdInboundOrder IS NULL) OR ((S.IdInboundOrder IS NOT NULL) AND EXISTS (SELECT IO.IdInboundOrder FROM InboundOrder IO
       WHERE IO.IdInboundOrder = S.IdInboundOrder
       AND (IO.IdInboundType in (11,12)
       OR IO.IdOutboundOrderSource IS NULL))))--no calzada
       AND @itemQty >= IU.ConversionFactor
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem,S.LotNumber,s.FabricationDate,S.ExpirationDate,S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, IU.ConversionFactor,S.FifoDate
       HAVING ((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
       AND S.IdWhs = OLP.IdWhs
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))
       AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLP.ExpirationDate IS NULL))
       AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
       OR(S.FabricationDate IS NULL)
       OR(OLP.FabricationDate IS NULL))
       AND L.IdLocCode = OLP.IdLocSourceProposal),0)

       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
       AND S.IdWhs = OLPS.IdWhs
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLPS.ExpirationDate IS NULL))
       AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
       OR(S.FabricationDate IS NULL)
       OR(OLPS.FabricationDate IS NULL))
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       ) &gt;= IU.ConversionFactor
           AND (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										                         AND S.IdWhs = OLP.IdWhs
										                         AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
											                       OR(OLP.IdLpnSourceProposal IS NULL))
											                       AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
											                       OR(S.lotNumber IS NULL)
											                       OR(OLP.LotNumber IS NULL))
											                       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
											                       OR(S.ExpirationDate IS NULL)
											                       OR(OLP.ExpirationDate IS NULL))
											                       AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
											                       OR(S.FabricationDate IS NULL)
											                       OR(OLP.FabricationDate IS NULL))
                                             AND L.IdLocCode = OLP.IdLocSourceProposal),0)
                               - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                             FROM v_Other_LocationPicking_Sim AS OLPS
                                            WHERE S.IdItem = OLPS.IdItem
										                          AND S.IdWhs = OLPS.IdWhs
										                          AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
											                         OR(OLPS.IdLpnSourceProposal IS NULL))
											                         AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
											                         OR(S.lotNumber IS NULL)
											                         OR(OLPS.LotNumber IS NULL))
											                         AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
											                         OR(S.ExpirationDate IS NULL)
											                         OR(OLPS.ExpirationDate IS NULL))
											                         AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
											                         OR(S.FabricationDate IS NULL)
											                        OR(OLPS.FabricationDate IS NULL))
                                              AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
                ) &gt;= CASE WHEN (@itemQty/IU.ConversionFactor) &lt;= 0 
                             THEN 0 
                             ELSE IU.ConversionFactor * (@itemQty/IU.ConversionFactor) 
                             END
       )
	   ORDER BY S.ExpirationDate ASC, S.FifoDate ASC, ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>  
   
   <query code="STKPUTItemExpLess">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) -
           (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                 FROM v_Other_LocationPicking_Sim AS OLPS
                 WHERE S.IdItem = OLPS.IdItem
	            -- AND S.IdWhs = OLPS.IdWhs
                 AND L.IdLocCode = OLPS.IdLocSourceProposal
                 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                 OR(OLPS.IdLpnSourceProposal IS NULL))
                 AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
                 OR(S.lotNumber IS NULL)
                 OR(OLPS.LotNumber IS NULL))
                 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
                 OR(S.ExpirationDate IS NULL)
                 OR(OLPS.ExpirationDate IS NULL))
                 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
                 OR(S.FabricationDate IS NULL)
                 OR(OLPS.FabricationDate IS NULL))
           ),0) +
           (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
               FROM v_Other_LocationPicking AS OLP
               WHERE S.IdItem = OLP.IdItem
	          -- AND S.IdWhs = OLP.IdWhs
               AND L.IdLocCode = OLP.IdLocSourceProposal
               AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
               OR(OLP.IdLpnSourceProposal IS NULL))
               AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
               OR(S.lotNumber IS NULL)
               OR(OLP.LotNumber IS NULL))
               AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
               OR(S.ExpirationDate IS NULL)
               OR(OLP.ExpirationDate IS NULL))
               AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
               OR(S.FabricationDate IS NULL)
               OR(OLP.FabricationDate IS NULL))
           ),0)
       ))) AS ItemQty,
       S.IdItem,
       S.LotNumber,
       S.fabricationDate,
       S.ExpirationDate,
	     S.FifoDate,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       LEFT JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem
       AND S.IdLocCode = OLPS.IdLocSourceProposal
       AND S.ExpirationDate = OLPS.ExpirationDate
       AND S.FabricationDate = OLPS.FabricationDate
       AND S.LotNumber = OLPS.LotNumber
       LEFT JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem
       AND S.IdLocCode = OLP.IdLocSourceProposal
       AND S.ExpirationDate = OLP.ExpirationDate
       AND S.FabricationDate = OLP.FabricationDate
       AND S.LotNumber = OLP.LotNumber
       -- Stock Reserve by Customer
      -- LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
      -- AND S.IdWhs = OQRC.IdWhs
     --  AND S.IdOwn = OQRC.IdOwn
   --    AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND (S.ExpirationDate > GETDATE() + I.ExpirationDays OR S.ExpirationDate IS NULL) -- se agrega linea para que no reponga producto vencido
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND ((S.IdInboundOrder IS NULL) OR ((S.IdInboundOrder IS NOT NULL) AND EXISTS (SELECT IO.IdInboundOrder FROM InboundOrder IO
       WHERE IO.IdInboundOrder = S.IdInboundOrder
       AND (IO.IdInboundType in (11,12)
       OR IO.IdOutboundOrderSource IS NULL))))--no calzada
       --  AND S.ExpirationDate &gt;= @expirationDate
       GROUP BY
       S.ItemQty,
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, S.FifoDate,s.lotNumber, s.fabricationDate,s.expirationDate--,OLP.IdWhs
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                             FROM v_Other_LocationPicking_Sim AS OLPS
                                             WHERE   S.IdItem = OLPS.IdItem
	                                               --AND S.IdWhs = OLPS.IdWhs
                                                   AND L.IdLocCode = OLPS.IdLocSourceProposal
                                                   AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                                   OR(OLPS.IdLpnSourceProposal IS NULL))
                                                   AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
                                                   OR(S.lotNumber IS NULL)
                                                   OR(OLPS.LotNumber IS NULL))
                                                   AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
                                                   OR(S.ExpirationDate IS NULL)
                                                   OR(OLPS.ExpirationDate IS NULL))
                                                   AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
                                                   OR(S.FabricationDate IS NULL)
                                                   OR(OLPS.FabricationDate IS NULL))
                                                   ),0) +
                           (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                         FROM v_Other_LocationPicking AS OLP
                                         WHERE S.IdItem = OLP.IdItem
	                                     --AND S.IdWhs = OLP.IdWhs
                                         AND L.IdLocCode = OLP.IdLocSourceProposal
                                         AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                         OR(OLP.IdLpnSourceProposal IS NULL))
                                         AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
                                         OR(S.lotNumber IS NULL)
                                         OR(OLP.LotNumber IS NULL))
                                         AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
                                         OR(S.ExpirationDate IS NULL)
                                         OR(OLP.ExpirationDate IS NULL))
                                         AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
                                         OR(S.FabricationDate IS NULL)
                                         OR(OLP.FabricationDate IS NULL))
       ),0)
       ))
       ) &lt;= @itemQty
       and
       (SUM(S.ItemQty) - (COALESCE((SELECT  SUM(COALESCE(OLPS.ItemQty,0))
                                       FROM v_Other_LocationPicking_Sim AS OLPS
                                      WHERE S.IdItem = OLPS.IdItem
	                                      AND S.IdWhs = OLPS.IdWhs
                                        AND L.IdLocCode = OLPS.IdLocSourceProposal
                                        AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                        OR(OLPS.IdLpnSourceProposal IS NULL))
                                        AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
                                        OR(S.lotNumber IS NULL)
                                        OR(OLPS.LotNumber IS NULL))
                                        AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
                                        OR(S.ExpirationDate IS NULL)
                                        OR(OLPS.ExpirationDate IS NULL))
                                        AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
                                        OR(S.FabricationDate IS NULL)
                                        OR(OLPS.FabricationDate IS NULL))
       ),0) +
                       (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                               FROM v_Other_LocationPicking AS OLP
                               WHERE S.IdItem = OLP.IdItem
	                         --  AND S.IdWhs = OLP.IdWhs
                               AND L.IdLocCode = OLP.IdLocSourceProposal
                               AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                               OR(OLP.IdLpnSourceProposal IS NULL))
                               AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
                               OR(S.lotNumber IS NULL)
                               OR(OLP.LotNumber IS NULL))
                               AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
                               OR(S.ExpirationDate IS NULL)
                               OR(OLP.ExpirationDate IS NULL))
                               AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
                               OR(S.FabricationDate IS NULL)
                               OR(OLP.FabricationDate IS NULL))
                       ),0)
       ))
       ) &gt; 0
	   ORDER BY S.ExpirationDate ASC, S.FifoDate ASC, ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="DateTime">expirationDate</parameter>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemExpGreater">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       CASE WHEN
       (SUM(S.ItemQty) -
                 (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                     FROM v_Other_LocationPicking_Sim AS OLPS
                     WHERE S.IdItem = OLPS.IdItem
	                 --AND S.IdWhs = OLPS.IdWhs
                     AND L.IdLocCode = OLPS.IdLocSourceProposal
                     AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                     OR(OLPS.IdLpnSourceProposal IS NULL))
                     AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
                     OR(S.lotNumber IS NULL)
                     OR(OLPS.LotNumber IS NULL))
                     AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
                     OR(S.ExpirationDate IS NULL)
                     OR(OLPS.ExpirationDate IS NULL))
                     AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
                     OR(S.FabricationDate IS NULL)
                     OR(OLPS.FabricationDate IS NULL))
                 ),0) +
       (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
             FROM v_Other_LocationPicking AS OLP
             WHERE S.IdItem = OLP.IdItem
	        -- AND S.IdWhs = OLP.IdWhs
             AND L.IdLocCode = OLP.IdLocSourceProposal
             AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
             OR(OLP.IdLpnSourceProposal IS NULL))
             AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
             OR(S.lotNumber IS NULL)
             OR(OLP.LotNumber IS NULL))
             AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
             OR(S.ExpirationDate IS NULL)
             OR(OLP.ExpirationDate IS NULL))
             AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
             OR(S.FabricationDate IS NULL)
             OR(OLP.FabricationDate IS NULL))
             ),0)
       )))
       > @itemQty THEN @itemQty ELSE

       (SUM(S.ItemQty) -
       (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                     FROM v_Other_LocationPicking_Sim AS OLPS
                     WHERE S.IdItem = OLPS.IdItem
	                -- AND S.IdWhs = OLPS.IdWhs
                     AND L.IdLocCode = OLPS.IdLocSourceProposal
                     AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                     OR(OLPS.IdLpnSourceProposal IS NULL))
                     AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
                     OR(S.lotNumber IS NULL)
                     OR(OLPS.LotNumber IS NULL))
                     AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
                     OR(S.ExpirationDate IS NULL)
                     OR(OLPS.ExpirationDate IS NULL))
                     AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
                     OR(S.FabricationDate IS NULL)
                     OR(OLPS.FabricationDate IS NULL))
                     ),0) +

       (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                     FROM v_Other_LocationPicking AS OLP
                     WHERE S.IdItem = OLP.IdItem
	                -- AND S.IdWhs = OLP.IdWhs
                     AND L.IdLocCode = OLP.IdLocSourceProposal
                     AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                     OR(OLP.IdLpnSourceProposal IS NULL))
                     AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
                     OR(S.lotNumber IS NULL)
                     OR(OLP.LotNumber IS NULL))
                     AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
                     OR(S.ExpirationDate IS NULL)
                     OR(OLP.ExpirationDate IS NULL))
                     AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
                     OR(S.FabricationDate IS NULL)
                     OR(OLP.FabricationDate IS NULL))
                     ),0)
       ))) end ItemQty,
       S.IdItem,
       S.LotNumber,
       S.fabricationDate,
       S.ExpirationDate,
	     S.FifoDate,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status

       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       LEFT JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem
	     AND S.IdWhs = OLPS.IdWhs
       AND S.IdLocCode = OLPS.IdLocSourceProposal
       AND S.ExpirationDate = OLPS.ExpirationDate
       AND S.FabricationDate = OLPS.FabricationDate
       AND S.LotNumber = OLPS.LotNumber
       LEFT JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem
	     AND S.IdWhs = OLP.IdWhs
       AND S.IdLocCode = OLP.IdLocSourceProposal
       AND S.ExpirationDate = OLP.ExpirationDate
       AND S.FabricationDate = OLP.FabricationDate
       AND S.LotNumber = OLP.LotNumber
       -- Stock Reserve by Customer
      -- LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
      -- --AND S.IdWhs = OQRC.IdWhs
      -- AND S.IdOwn = OQRC.IdOwn
      -- AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND (S.ExpirationDate > GETDATE() + I.ExpirationDays OR S.ExpirationDate IS NULL) -- se agrega linea para que no reponga producto vencido
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND ((S.IdInboundOrder IS NULL) OR ((S.IdInboundOrder IS NOT NULL) AND EXISTS (SELECT IO.IdInboundOrder FROM InboundOrder IO
       WHERE IO.IdInboundOrder = S.IdInboundOrder
       AND (IO.IdInboundType in (11,12)
       OR IO.IdOutboundOrderSource IS NULL))))--no calzada
       --AND S.ExpirationDate &gt;= @expirationDate
       GROUP BY
       S.ItemQty,
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, S.FifoDate, s.lotNumber, s.fabricationDate,s.expirationDate--,OLP.IdWhs
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                             FROM v_Other_LocationPicking_Sim AS OLPS
                                             WHERE S.IdItem = OLPS.IdItem
	                                         --AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLPS.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                             OR(OLPS.IdLpnSourceProposal IS NULL))
                                             AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
                                             OR(S.lotNumber IS NULL)
                                             OR(OLPS.LotNumber IS NULL))
                                             AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
                                             OR(S.ExpirationDate IS NULL)
                                             OR(OLPS.ExpirationDate IS NULL))
                                             AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
                                             OR(S.FabricationDate IS NULL)
                                             OR(OLPS.FabricationDate IS NULL))
                                             ),0) +
       (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                     FROM v_Other_LocationPicking AS OLP
                     WHERE S.IdItem = OLP.IdItem
	                -- AND S.IdWhs = OLP.IdWhs
                     AND L.IdLocCode = OLP.IdLocSourceProposal
                     AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                     OR(OLP.IdLpnSourceProposal IS NULL))
                     AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
                     OR(S.lotNumber IS NULL)
                     OR(OLP.LotNumber IS NULL))
                     AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
                     OR(S.ExpirationDate IS NULL)
                     OR(OLP.ExpirationDate IS NULL))
                     AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
                     OR(S.FabricationDate IS NULL)
                     OR(OLP.FabricationDate IS NULL))
                     ),0)
       ))
       ) &gt;= @itemQty
	   ORDER BY S.ExpirationDate ASC, S.FifoDate ASC, ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="DateTime">expirationDate</parameter>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>
     
   <query code="STKPUTItemNoZoneLessQtyUomCajaCalzada">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (IU.ConversionFactor * ROUND(((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                                                   FROM v_Other_LocationPicking AS OLP
                                                                  WHERE S.IdItem = OLP.IdItem
																	                                  AND S.IdWhs = OLP.IdWhs
                                                                    AND L.IdLocCode = OLP.IdLocSourceProposal
																                                    AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
																	                                  OR(OLP.IdLpnSourceProposal IS NULL))
																	                                  AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
																	                                  OR(S.lotNumber IS NULL)
																	                                  OR(OLP.LotNumber IS NULL))
																	                                  AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
																	                                  OR(S.ExpirationDate IS NULL)
																	                                  OR(OLP.ExpirationDate IS NULL))
																	                                  AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
																	                                  OR(S.FabricationDate IS NULL)
																	                                  OR(OLP.FabricationDate IS NULL)) 
																   
																   ),0)
                                                     - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                                                   FROM v_Other_LocationPicking_Sim AS OLPS
                                                                  WHERE S.IdItem = OLPS.IdItem
																                                    AND S.IdWhs = OLPS.IdWhs
                                                                   AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       )/IU.ConversionFactor),0,1)) AS ItemQty,
	     S.IdItem,
       S.LotNumber,
       S.fabricationDate,
       S.ExpirationDate,
	     S.FifoDate,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem
	     INNER JOIN InboundOrder IO ON S.IdInboundOrder = IO.IdInboundOrder AND IO.IdOutboundOrderSource = @IdOutboundOrder --calzada
       -- Stock Reserve by Customer
      -- LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
      --                                                   AND S.IdWhs = OQRC.IdWhs
      --                                                   AND S.IdOwn = OQRC.IdOwn
      --                                                   AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND IU.UomName = 'PAL'
       AND (S.ExpirationDate > GETDATE() + I.ExpirationDays OR S.ExpirationDate IS NULL) -- se agrega linea para que no reponga producto vencido
       GROUP BY
       S.IdWhs, S.IdOwn,  S.IdItem, S.LotNumber,s.FabricationDate,S.ExpirationDate, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, IU.ConversionFactor, S.FifoDate
       HAVING ((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
       AND S.IdWhs = OLP.IdWhs
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))
       AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLP.ExpirationDate IS NULL))
       AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
       OR(S.FabricationDate IS NULL)
       OR(OLP.FabricationDate IS NULL))
       AND L.IdLocCode = OLP.IdLocSourceProposal),0)
       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
       AND S.IdWhs = OLPS.IdWhs
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLPS.ExpirationDate IS NULL))
       AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
       OR(S.FabricationDate IS NULL)
       OR(OLPS.FabricationDate IS NULL))
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       ) &gt;= IU.ConversionFactor
           AND (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										                        AND S.IdWhs = OLP.IdWhs
										                        AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
											                     OR(OLP.IdLpnSourceProposal IS NULL))
											                     AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
											                     OR(S.lotNumber IS NULL)
											                     OR(OLP.LotNumber IS NULL))
											                       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
											                     OR(S.ExpirationDate IS NULL)
											                     OR(OLP.ExpirationDate IS NULL))
											                       AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
											                     OR(S.FabricationDate IS NULL)
											                     OR(OLP.FabricationDate IS NULL))
                                             AND L.IdLocCode = OLP.IdLocSourceProposal),0)
                               - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                             FROM v_Other_LocationPicking_Sim AS OLPS
                                            WHERE S.IdItem = OLPS.IdItem
										                          AND S.IdWhs = OLPS.IdWhs
										                          AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
											                       OR(OLPS.IdLpnSourceProposal IS NULL))
											                       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
											                       OR(S.lotNumber IS NULL)
											                       OR(OLPS.LotNumber IS NULL))
											                       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
											                       OR(S.ExpirationDate IS NULL)
											                       OR(OLPS.ExpirationDate IS NULL))
											                       AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
											                       OR(S.FabricationDate IS NULL)
											                       OR(OLPS.FabricationDate IS NULL))
                                             AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
                ) &lt;= CASE WHEN (@itemQty/IU.ConversionFactor) &lt;= 0 
                             THEN 0 
                             ELSE IU.ConversionFactor * (@itemQty/IU.ConversionFactor) 
                             END
              )
	   ORDER BY S.ExpirationDate ASC, S.FifoDate ASC, ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">IdOutboundOrder</parameter>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>

   <query code="STKPUTItemNoZoneGreaterQtyUomCajaCalzada">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (IU.ConversionFactor * ROUND((@itemQty/IU.ConversionFactor),0,1)) AS ItemQty,
       S.IdItem,
       S.LotNumber,
       S.fabricationDate,
       S.ExpirationDate,
       S.FifoDate,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem
       INNER JOIN InboundOrder IO ON S.IdInboundOrder = IO.IdInboundOrder AND IO.IdOutboundOrderSource = @IdOutboundOrder --calzada
       -- Stock Reserve by Customer
       --LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       --                                                  AND S.IdWhs = OQRC.IdWhs
       --                                                  AND S.IdOwn = OQRC.IdOwn
       --                                                  AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND IU.UomName = 'PAL'
       AND (S.ExpirationDate > GETDATE() + I.ExpirationDays OR S.ExpirationDate IS NULL) -- se agrega linea para que no reponga producto vencido
       AND @itemQty >= IU.ConversionFactor
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem,S.LotNumber,s.FabricationDate,S.ExpirationDate,S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, IU.ConversionFactor,S.FifoDate
       HAVING ((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
       AND S.IdWhs = OLP.IdWhs
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))
       AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLP.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLP.ExpirationDate IS NULL))
       AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
       OR(S.FabricationDate IS NULL)
       OR(OLP.FabricationDate IS NULL))
       AND L.IdLocCode = OLP.IdLocSourceProposal),0)
       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
       AND S.IdWhs = OLPS.IdWhs
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
       OR(S.lotNumber IS NULL)
       OR(OLPS.LotNumber IS NULL))
       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
       OR(S.ExpirationDate IS NULL)
       OR(OLPS.ExpirationDate IS NULL))
       AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
       OR(S.FabricationDate IS NULL)
       OR(OLPS.FabricationDate IS NULL))
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       ) &gt;= IU.ConversionFactor
       AND (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                         FROM v_Other_LocationPicking AS OLP
                                         WHERE S.IdItem = OLP.IdItem
                                         AND S.IdWhs = OLP.IdWhs
                                         AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                         OR(OLP.IdLpnSourceProposal IS NULL))
                                         AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
                                         OR(S.lotNumber IS NULL)
                                         OR(OLP.LotNumber IS NULL))
                                         AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
                                         OR(S.ExpirationDate IS NULL)
                                         OR(OLP.ExpirationDate IS NULL))
                                         AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
                                         OR(S.FabricationDate IS NULL)
                                         OR(OLP.FabricationDate IS NULL))
                                         AND L.IdLocCode = OLP.IdLocSourceProposal),0)
       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                     FROM v_Other_LocationPicking_Sim AS OLPS
                     WHERE S.IdItem = OLPS.IdItem
                     AND S.IdWhs = OLPS.IdWhs
                     AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                     OR(OLPS.IdLpnSourceProposal IS NULL))
                     AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
                     OR(S.lotNumber IS NULL)
                     OR(OLPS.LotNumber IS NULL))
                     AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
                     OR(S.ExpirationDate IS NULL)
                     OR(OLPS.ExpirationDate IS NULL))
                     AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
                     OR(S.FabricationDate IS NULL)
                     OR(OLPS.FabricationDate IS NULL))
                     AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       ) &gt;= CASE WHEN (@itemQty/IU.ConversionFactor) &lt;= 0
       THEN 0
       ELSE IU.ConversionFactor * (@itemQty/IU.ConversionFactor)
       END
       )
       ORDER BY S.ExpirationDate ASC, S.FifoDate ASC, ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">IdOutboundOrder</parameter>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>
   
  <query code="LOCSTGPrimaryCapUnit">
    <sql>
		SELECT TOP 1
       ABS(SL.PutawayFlow - @putawayFlow) AS Ruta,
       SL.IdLocCode,
       SL.LocCode,
       SL.RowLoc,
       SL.ColumnLoc,
       SL.LevelLoc,
       SL.Aisle,
       SL.Status,
       SL.Description,
       SL.SharedItem,
       SL.OnlyLPN,
       SL.PickingFlow,
       SL.PutawayFlow,
       SL.CapacityLPN,
       SL.CapacityUnit,
       SL.Length,
       SL.Width,
       SL.Height,
       SL.Volume,
       SL.Weight,
       SL.LockInventory,
       SLT.IdLocType,
       SLT.LocTypeCode,
       SLT.LocTypeName,
       SLT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
            ItemLocation IL ON IL.IdLocCode = L.IdLocCode AND IL.IdItem = @idItem
		
		INNER JOIN Location SL ON SL.LocTypeCode = 'STG' AND EXISTS(SELECT WZSL.IdLocCode FROM WorkZoneLocation WZSL WHERE SL.IdLocCode = WZSL.IdLocCode AND WZSL.IdWorkZone = WZL.IdWorkZone)
		INNER JOIN LocationType SLT ON SL.LocTypeCode = SLT.LocTypeCode
		
       WHERE L.IdWhs = @idWhs
         AND L.LocTypeCode = 'PICK'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT WZF.IdLocCode
                    FROM WorkZoneForkLift WZF INNER JOIN
                         WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE WZF.IdLocCode = @idForkLift
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
		AND NOT EXISTS(SELECT TD.IdItem
					   FROM TaskDetail TD
					   WHERE TD.IdLocTargetProposal = L.IdLocCode
					   AND TD.IdWhs = L.IdWhs
					   AND TD.IdItem = IL.IdItem
					   AND TD.IsComplete = 0
					   AND TD.Status = 1
					   AND IdTask IN (SELECT IdTask FROM Task WHERE TaskTypeCode = 'REPL' and IdTrackTaskType IN (11,21) and IsComplete = 0))
		         AND (IL.ReOrderQty &gt;= (@ItemQty) + ISNULL((SELECT SUM(S1.ItemQty) FROM Stock S1 WHERE S1.IdWhs = L.IdWhs AND S1.IdLocCode = L.IdLocCode AND S1.IdItem = @idItem),0))
       ORDER BY Ruta ASC
	  </sql>
    <parameters>
       <parameter type="Int">putawayFlow</parameter>
	     <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
	     <parameter type="Int">idUser</parameter>
	     <parameter type="String">idForklift</parameter>
	     <parameter type="Decimal">itemQty</parameter>
     </parameters>
  </query>
   
  <query code="LOCPrimaryCapUnit">
    <sql>
		SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
            ItemLocation IL ON IL.IdLocCode = L.IdLocCode AND IL.IdItem = @idItem
       WHERE L.IdWhs = @idWhs
         AND L.LocTypeCode = 'PICK'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT WZF.IdLocCode
                    FROM WorkZoneForkLift WZF INNER JOIN
                         WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE WZF.IdLocCode = @idForkLift
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
		AND NOT EXISTS(SELECT TD.IdItem
					   FROM TaskDetail TD
					   WHERE TD.IdLocTargetProposal = L.IdLocCode
					   AND TD.IdWhs = L.IdWhs
					   AND TD.IdItem = IL.IdItem
					   AND TD.IsComplete = 0
					   AND TD.Status = 1
					   AND IdTask IN (SELECT IdTask FROM Task WHERE TaskTypeCode = 'REPL' and IdTrackTaskType IN (11,21) and IsComplete = 0))
					   AND (IL.ReOrderQty &gt;= (@ItemQty) + ISNULL((SELECT SUM(S1.ItemQty) FROM Stock S1 WHERE S1.IdWhs = L.IdWhs AND S1.IdLocCode = L.IdLocCode AND S1.IdItem = @idItem),0))
       ORDER BY Ruta ASC
	  </sql>
    <parameters>
       <parameter type="Int">putawayFlow</parameter>
	     <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
	     <parameter type="Int">idUser</parameter>
	     <parameter type="String">idForklift</parameter>
	     <parameter type="Decimal">itemQty</parameter>
     </parameters>
  </query>
   
  <query code="LOCSTGPICKItemCapVolItemZoneUsrZoneMaqZone">
	  <sql>
		  SELECT TOP 1
		  ABS(SL.PutawayFlow - @putawayFlow) AS Ruta,
		  SL.IdLocCode,
		  SL.LocCode,
		  SL.RowLoc,
		  SL.ColumnLoc,
		  SL.LevelLoc,
		  SL.Aisle,
		  SL.Status,
		  SL.Description,
		  SL.SharedItem,
		  SL.OnlyLPN,
		  SL.PickingFlow,
		  SL.PutawayFlow,
		  SL.CapacityLPN,
		  SL.CapacityUnit,
		  SL.Length,
		  SL.Width,
		  SL.Height,
		  SL.Volume,
		  SL.Weight,
		  SL.LockInventory,
		  SLT.IdLocType,
		  SLT.LocTypeCode,
		  SLT.LocTypeName,
		  SLT.Status
		  FROM Location L INNER JOIN
		  LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
		  WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
		  WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone AND WZI.IdItem = @idItem INNER JOIN
		  Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem
		
		  INNER JOIN Location SL ON SL.LocTypeCode = 'STG' AND EXISTS(SELECT WZSL.IdLocCode FROM WorkZoneLocation WZSL WHERE SL.IdLocCode = WZSL.IdLocCode AND WZSL.IdWorkZone = WZL.IdWorkZone)
		  INNER JOIN LocationType SLT ON SL.LocTypeCode = SLT.LocTypeCode
		
		  WHERE L.IdWhs = @idWhs
		  AND L.LocTypeCode = 'PICK'
		  AND L.HoldCode IS NULL
		  AND L.LockInventory = 0
		  AND S.HoldCode IS NULL
		  AND L.Volume &gt;= (@totalVolumen + (SELECT SUM(TotalVolumen)
								    FROM Stock
								    WHERE IdLocCode = L.IdLocCode))
		  AND EXISTS(SELECT IDUserWms
				    FROM UserWorkZone UWZ INNER JOIN
				    WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
				    WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
				    WHERE UWZ.IdUserWms = @idUser
					  AND WZ.IdWhs = L.IdWhs
					  AND WZL.IdLocCode = L.IdLocCode)
		  AND EXISTS(SELECT WZF.IdLocCode
				    FROM WorkZoneForkLift WZF INNER JOIN
				    WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
				    WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
				    WHERE WZF.IdLocCode = @idForkLift
					  AND WZ.IdWhs = L.IdWhs
					  AND WZL.IdLocCode = L.IdLocCode)
		  ORDER BY Ruta ASC
	  </sql>
	  <parameters>
		  <parameter type="Int">putawayFlow</parameter>
		  <parameter type="Int">idItem</parameter>
		  <parameter type="Int">idWhs</parameter>
		  <parameter type="Decimal">totalVolumen</parameter>
		  <parameter type="Int">idUser</parameter>
		  <parameter type="String">idForklift</parameter>
    </parameters>
  </query>
   
 <query code="LOCPICKItemCapVolItemZoneUsrZoneMaqZone">
		<sql>
			SELECT TOP 1
			ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
			L.IdLocCode,
			L.LocCode,
			L.RowLoc,
			L.ColumnLoc,
			L.LevelLoc,
			L.Aisle,
			L.Status,
			L.Description,
			L.SharedItem,
			L.OnlyLPN,
			L.PickingFlow,
			L.PutawayFlow,
			L.CapacityLPN,
			L.CapacityUnit,
			L.Length,
			L.Width,
			L.Height,
			L.Volume,
			L.Weight,
			L.LockInventory,
			LT.IdLocType,
			LT.LocTypeCode,
			LT.LocTypeName,
			LT.Status
			FROM Location L INNER JOIN
			LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
			WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone AND WZI.IdItem = @idItem INNER JOIN
			Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem
			WHERE L.IdWhs = @idWhs
			AND L.LocTypeCode = 'PICK'
			AND L.HoldCode IS NULL
			AND L.LockInventory = 0
			AND S.HoldCode IS NULL
			AND L.Volume &gt;= (@totalVolumen + (SELECT SUM(TotalVolumen)
									  FROM Stock
									  WHERE IdLocCode = L.IdLocCode))
			AND EXISTS(SELECT IDUserWms
					  FROM UserWorkZone UWZ INNER JOIN
					  WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
					  WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
					  WHERE UWZ.IdUserWms = @idUser
						AND WZ.IdWhs = L.IdWhs
						AND WZL.IdLocCode = L.IdLocCode)
			AND EXISTS(SELECT WZF.IdLocCode
					  FROM WorkZoneForkLift WZF INNER JOIN
					  WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
					  WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
					  WHERE WZF.IdLocCode = @idForkLift
						AND WZ.IdWhs = L.IdWhs
						AND WZL.IdLocCode = L.IdLocCode)
			ORDER BY Ruta ASC
		</sql>
		<parameters>
			<parameter type="Int">putawayFlow</parameter>
			<parameter type="Int">idItem</parameter>
			<parameter type="Int">idWhs</parameter>
			<parameter type="Decimal">totalVolumen</parameter>
			<parameter type="Int">idUser</parameter>
			<parameter type="String">idForklift</parameter>		
     </parameters>
  </query>
   
  <query code="LOCSTGPICKEmptyNOSTOCKZONEItemZoneUsrZoneMaqZone">
     <sql>
		SELECT TOP 1
		ABS(SL.PutawayFlow - @putawayFlow) AS Ruta,
		SL.IdLocCode,
		SL.LocCode,
		SL.RowLoc,
		SL.ColumnLoc,
		SL.LevelLoc,
		SL.Aisle,
		SL.Status,
		SL.Description,
		SL.SharedItem,
		SL.OnlyLPN,
		SL.PickingFlow,
		SL.PutawayFlow,
		SL.CapacityLPN,
		SL.CapacityUnit,
		SL.Length,
		SL.Width,
		SL.Height,
		SL.Volume,
		SL.Weight,
		SL.LockInventory,
		SLT.IdLocType,
		SLT.LocTypeCode,
		SLT.LocTypeName,
		SLT.Status
		FROM Location L INNER JOIN
		LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
		WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
		WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone AND WZI.IdItem = @idItem
		
		INNER JOIN Location SL ON SL.LocTypeCode = 'STG' AND EXISTS(SELECT WZSL.IdLocCode FROM WorkZoneLocation WZSL WHERE SL.IdLocCode = WZSL.IdLocCode AND WZSL.IdWorkZone = WZL.IdWorkZone)
		INNER JOIN LocationType SLT ON SL.LocTypeCode = SLT.LocTypeCode
		
		WHERE L.IdWhs = @idWhs
		AND L.LocTypeCode = 'PICK'
		AND L.HoldCode IS NULL
		AND L.LockInventory = 0
		AND L.Volume &gt;= (@totalVolumen)
		AND NOT EXISTS(SELECT S.StockId FROM Stock S INNER JOIN WorkZoneLocation WZL2 ON WZL2.IdWorkZone = WZI.IdWorkZone AND S.IdLocCode = WZL2.IdLocCode WHERE S.IdItem = @idItem)
		AND EXISTS(SELECT IDUserWms
				  FROM UserWorkZone UWZ INNER JOIN
				  WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
				  WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
				  WHERE UWZ.IdUserWms = @idUser
					AND WZ.IdWhs = L.IdWhs
					AND WZL.IdLocCode = L.IdLocCode)
		AND EXISTS(SELECT WZF.IdLocCode
				  FROM WorkZoneForkLift WZF INNER JOIN
				  WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
				  WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
				  WHERE WZF.IdLocCode = @idForkLift
					AND WZ.IdWhs = L.IdWhs
					AND WZL.IdLocCode = L.IdLocCode)
		ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
	     <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
	     <parameter type="Decimal">totalVolumen</parameter>
	     <parameter type="Int">idUser</parameter>
	     <parameter type="String">idForklift</parameter>
     </parameters>
  </query>
   
  <query code="LOCPICKEmptyNOSTOCKZONEItemZoneUsrZoneMaqZone">
     <sql>
		SELECT TOP 1
		ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
		L.IdLocCode,
		L.LocCode,
		L.RowLoc,
		L.ColumnLoc,
		L.LevelLoc,
		L.Aisle,
		L.Status,
		L.Description,
		L.SharedItem,
		L.OnlyLPN,
		L.PickingFlow,
		L.PutawayFlow,
		L.CapacityLPN,
		L.CapacityUnit,
		L.Length,
		L.Width,
		L.Height,
		L.Volume,
		L.Weight,
		L.LockInventory,
		LT.IdLocType,
		LT.LocTypeCode,
		LT.LocTypeName,
		LT.Status
		FROM Location L INNER JOIN
		LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
		WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
		WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone AND WZI.IdItem = @idItem
		WHERE L.IdWhs = @idWhs
		AND L.LocTypeCode = 'PICK'
		AND L.HoldCode IS NULL
		AND L.LockInventory = 0
		AND L.Volume &gt;= (@totalVolumen)
		AND NOT EXISTS(SELECT S.StockId FROM Stock S INNER JOIN WorkZoneLocation WZL2 ON WZL2.IdWorkZone = WZI.IdWorkZone AND S.IdLocCode = WZL2.IdLocCode WHERE S.IdItem = @idItem)
		AND EXISTS(SELECT IDUserWms
				  FROM UserWorkZone UWZ INNER JOIN
				  WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
				  WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
				  WHERE UWZ.IdUserWms = @idUser
					AND WZ.IdWhs = L.IdWhs
					AND WZL.IdLocCode = L.IdLocCode)
		AND EXISTS(SELECT WZF.IdLocCode
				  FROM WorkZoneForkLift WZF INNER JOIN
				  WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
				  WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
				  WHERE WZF.IdLocCode = @idForkLift
					AND WZ.IdWhs = L.IdWhs
					AND WZL.IdLocCode = L.IdLocCode)
		ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
	     <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
	     <parameter type="Decimal">totalVolumen</parameter>
	     <parameter type="Int">idUser</parameter>
	     <parameter type="String">idForklift</parameter>
     </parameters>
  </query>
   
  <query code="LOCSTGPUTItemCapVolItemZoneMaqZoneUserZone">
	  <sql>
			  SELECT TOP 1
			  ABS(SL.PutawayFlow - @putawayFlow) AS Ruta,
			  SL.IdLocCode,
			  SL.LocCode,
			  SL.RowLoc,
			  SL.ColumnLoc,
			  SL.LevelLoc,
			  SL.Aisle,
			  SL.Status,
			  SL.Description,
			  SL.SharedItem,
			  SL.OnlyLPN,
			  SL.PickingFlow,
			  SL.PutawayFlow,
			  SL.CapacityLPN,
			  SL.CapacityUnit,
			  SL.Length,
			  SL.Width,
			  SL.Height,
			  SL.Volume,
			  SL.Weight,
			  SL.LockInventory,
			  SLT.IdLocType,
			  SLT.LocTypeCode,
			  SLT.LocTypeName,
			  SLT.Status
			  FROM Location L INNER JOIN
			  LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
			  WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
              WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone AND WZI.IdItem = @idItem INNER JOIN
			  Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem
			
			  INNER JOIN Location SL ON SL.LocTypeCode = 'STG' AND EXISTS(SELECT WZSL.IdLocCode FROM WorkZoneLocation WZSL WHERE SL.IdLocCode = WZSL.IdLocCode AND WZSL.IdWorkZone = WZL.IdWorkZone)
			  INNER JOIN LocationType SLT ON SL.LocTypeCode = SLT.LocTypeCode
			
			  WHERE L.IdWhs = @idWhs
			  AND L.LocTypeCode = 'PUT'
			  AND L.HoldCode IS NULL
			  AND L.LockInventory = 0
			  AND S.HoldCode IS NULL
			  AND L.Volume &gt;= (@totalVolumen + (SELECT SUM(TotalVolumen)
									    FROM Stock
									    WHERE IdLocCode = L.IdLocCode))
			  AND EXISTS(SELECT IDUserWms
					    FROM UserWorkZone UWZ INNER JOIN
					    WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
					    WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
					    WHERE UWZ.IdUserWms = @idUser
						  AND WZ.IdWhs = L.IdWhs
						  AND WZL.IdLocCode = L.IdLocCode)
			  AND EXISTS(SELECT WZF.IdLocCode
					    FROM WorkZoneForkLift WZF INNER JOIN
					    WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
					    WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
					    WHERE WZF.IdLocCode = @idForkLift
						  AND WZ.IdWhs = L.IdWhs
						  AND WZL.IdLocCode = L.IdLocCode)
			  ORDER BY Ruta ASC
	  </sql>
	  <parameters>
		  <parameter type="Int">putawayFlow</parameter>
		  <parameter type="Int">idItem</parameter>
		  <parameter type="Int">idWhs</parameter>
		  <parameter type="Decimal">totalVolumen</parameter>
		  <parameter type="Int">idUser</parameter>
		  <parameter type="String">idForklift</parameter>   
	  </parameters>
  </query>
   
  <query code="LOCPUTItemCapVolItemZoneMaqZoneUserZone">
	  <sql>
		  SELECT TOP 1
		  ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
		  L.IdLocCode,
		  L.LocCode,
		  L.RowLoc,
		  L.ColumnLoc,
		  L.LevelLoc,
		  L.Aisle,
		  L.Status,
		  L.Description,
		  L.SharedItem,
		  L.OnlyLPN,
		  L.PickingFlow,
		  L.PutawayFlow,
		  L.CapacityLPN,
		  L.CapacityUnit,
		  L.Length,
		  L.Width,
		  L.Height,
		  L.Volume,
		  L.Weight,
		  L.LockInventory,
		  LT.IdLocType,
		  LT.LocTypeCode,
		  LT.LocTypeName,
		  LT.Status
		  FROM Location L INNER JOIN
		  LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
		  WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
		  WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone AND WZI.IdItem = @idItem INNER JOIN
		  Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem
		  WHERE L.IdWhs = @idWhs
		  AND L.LocTypeCode = 'PUT'
		  AND L.HoldCode IS NULL
		  AND L.LockInventory = 0
		  AND S.HoldCode IS NULL
		  AND L.Volume &gt;= (@totalVolumen + (SELECT SUM(TotalVolumen)
								    FROM Stock
								    WHERE IdLocCode = L.IdLocCode))
		  AND EXISTS(SELECT IDUserWms
				    FROM UserWorkZone UWZ INNER JOIN
				    WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
				    WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
				    WHERE UWZ.IdUserWms = @idUser
					  AND WZ.IdWhs = L.IdWhs
					  AND WZL.IdLocCode = L.IdLocCode)
		  AND EXISTS(SELECT WZF.IdLocCode
				    FROM WorkZoneForkLift WZF INNER JOIN
				    WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
				    WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
				    WHERE WZF.IdLocCode = @idForkLift
					  AND WZ.IdWhs = L.IdWhs
					  AND WZL.IdLocCode = L.IdLocCode)
		  ORDER BY Ruta ASC
	  </sql>
	  <parameters>
		  <parameter type="Int">putawayFlow</parameter>
		  <parameter type="Int">idItem</parameter>
		  <parameter type="Int">idWhs</parameter>
		  <parameter type="Decimal">totalVolumen</parameter>
		  <parameter type="Int">idUser</parameter>	   
		  <parameter type="String">idForklift</parameter>
	  </parameters>
  </query>
   
  <query code="LOCSTGPUTEmptyCapVolItemZoneMaqZoneUserZone">
	  <sql>
		  SELECT TOP 1
		  ABS(SL.PutawayFlow - @putawayFlow) AS Ruta,
		  SL.IdLocCode,
		  SL.LocCode,
		  SL.RowLoc,
		  SL.ColumnLoc,
		  SL.LevelLoc,
		  SL.Aisle,
		  SL.Status,
		  SL.Description,
		  SL.SharedItem,
		  SL.OnlyLPN,
		  SL.PickingFlow,
		  SL.PutawayFlow,
		  SL.CapacityLPN,
		  SL.CapacityUnit,
		  SL.Length,
		  SL.Width,
		  SL.Height,
		  SL.Volume,
		  SL.Weight,
		  SL.LockInventory,
		  SLT.IdLocType,
		  SLT.LocTypeCode,
		  SLT.LocTypeName,
		  SLT.Status
		  FROM Location L INNER JOIN
		  LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
		  WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
		  WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone AND WZI.IdItem = @idItem
		
		  INNER JOIN Location SL ON SL.LocTypeCode = 'STG' AND EXISTS(SELECT WZSL.IdLocCode FROM WorkZoneLocation WZSL WHERE SL.IdLocCode = WZSL.IdLocCode AND WZSL.IdWorkZone = WZL.IdWorkZone)
		  INNER JOIN LocationType SLT ON SL.LocTypeCode = SLT.LocTypeCode
		
		  WHERE L.IdWhs = @idWhs
		  AND L.LocTypeCode = 'PUT'
		  AND L.HoldCode IS NULL
		  AND L.LockInventory = 0
		  AND L.Volume &gt;= (@totalVolumen)
		  AND NOT EXISTS(SELECT StockId FROM Stock S WHERE S.IdItem = @idItem AND S.IdLocCode = L.IdLocCode)
		  AND EXISTS(SELECT IDUserWms
				    FROM UserWorkZone UWZ INNER JOIN
				    WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
				    WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
				    WHERE UWZ.IdUserWms = @idUser
					  AND WZ.IdWhs = L.IdWhs
					  AND WZL.IdLocCode = L.IdLocCode)
		  AND EXISTS(SELECT WZF.IdLocCode
				    FROM WorkZoneForkLift WZF INNER JOIN
				    WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
				    WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
				    WHERE WZF.IdLocCode = @idForkLift
					  AND WZ.IdWhs = L.IdWhs
					  AND WZL.IdLocCode = L.IdLocCode)
		  ORDER BY Ruta ASC
	  </sql>
	  <parameters>
		  <parameter type="Int">putawayFlow</parameter>
		  <parameter type="Int">idItem</parameter>
		  <parameter type="Int">idWhs</parameter>
		  <parameter type="Decimal">totalVolumen</parameter>
		  <parameter type="Int">idUser</parameter>	   
		  <parameter type="String">idForklift</parameter>
	  </parameters>
  </query>
   
  <query code="LOCPUTEmptyCapVolItemZoneMaqZoneUserZone">
	  <sql>
		  SELECT TOP 1
		  ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
		  L.IdLocCode,
		  L.LocCode,
		  L.RowLoc,
		  L.ColumnLoc,
		  L.LevelLoc,
		  L.Aisle,
		  L.Status,
		  L.Description,
		  L.SharedItem,
		  L.OnlyLPN,
		  L.PickingFlow,
		  L.PutawayFlow,
		  L.CapacityLPN,
		  L.CapacityUnit,
		  L.Length,
		  L.Width,
		  L.Height,
		  L.Volume,
		  L.Weight,
		  L.LockInventory,
		  LT.IdLocType,
		  LT.LocTypeCode,
		  LT.LocTypeName,
		  LT.Status
		  FROM Location L INNER JOIN
		  LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
		  WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
		  WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone AND WZI.IdItem = @idItem
		  WHERE L.IdWhs = @idWhs
		  AND L.LocTypeCode = 'PUT'
		  AND L.HoldCode IS NULL
		  AND L.LockInventory = 0
		  AND L.Volume &gt;= (@totalVolumen)
		  AND NOT EXISTS(SELECT StockId FROM Stock S WHERE S.IdItem = @idItem AND S.IdLocCode = L.IdLocCode)
		  AND EXISTS(SELECT IDUserWms
				    FROM UserWorkZone UWZ INNER JOIN
				    WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
				    WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
				    WHERE UWZ.IdUserWms = @idUser
					  AND WZ.IdWhs = L.IdWhs
					  AND WZL.IdLocCode = L.IdLocCode)
		  AND EXISTS(SELECT WZF.IdLocCode
				    FROM WorkZoneForkLift WZF INNER JOIN
				    WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
				    WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
				    WHERE WZF.IdLocCode = @idForkLift
					  AND WZ.IdWhs = L.IdWhs
					  AND WZL.IdLocCode = L.IdLocCode)
		  ORDER BY Ruta ASC
	  </sql>
	  <parameters>
		  <parameter type="Int">putawayFlow</parameter>
		  <parameter type="Int">idItem</parameter>
		  <parameter type="Int">idWhs</parameter>
		  <parameter type="Decimal">totalVolumen</parameter>
		  <parameter type="Int">idUser</parameter>	   
		  <parameter type="String">idForklift</parameter>
	  </parameters>
  </query>
   
  <query code="LOCSTGPUTEmptyCapVolMaqZoneUserZone">
	  <sql>
		  SELECT TOP 1
		  ABS(SL.PutawayFlow - @putawayFlow) AS Ruta,
		  SL.IdLocCode,
		  SL.LocCode,
		  SL.RowLoc,
		  SL.ColumnLoc,
		  SL.LevelLoc,
		  SL.Aisle,
		  SL.Status,
		  SL.Description,
		  SL.SharedItem,
		  SL.OnlyLPN,
		  SL.PickingFlow,
		  SL.PutawayFlow,
		  SL.CapacityLPN,
		  SL.CapacityUnit,
		  SL.Length,
		  SL.Width,
		  SL.Height,
		  SL.Volume,
		  SL.Weight,
		  SL.LockInventory,
		  SLT.IdLocType,
		  SLT.LocTypeCode,
		  SLT.LocTypeName,
		  SLT.Status
		  FROM Location L 
		  INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		  INNER JOIN Location SL ON SL.LocTypeCode = 'STG' 
		  -- DREYES 20200204 Se comenta por no tener relacion con la zona del item, y para salir del paso para que cliente valide.
		  -- AND EXISTS(SELECT WZSL.IdLocCode FROM WorkZoneLocation WZSL WHERE SL.IdLocCode = WZSL.IdLocCode AND WZSL.IdWorkZone = WZL.IdWorkZone)
		  INNER JOIN LocationType SLT ON SL.LocTypeCode = SLT.LocTypeCode
		  -- DREYES 20200204 Se agregan las 2 lineas siguientes 
		  INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode 
		  INNER JOIN WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone AND WZI.IdItem = 4
		  WHERE L.IdWhs = @idWhs
		  AND L.LocTypeCode = 'PUT'
		  AND L.HoldCode IS NULL
		  AND L.LockInventory = 0
		  AND L.Volume &gt;= (@totalVolumen)
		  AND NOT EXISTS(SELECT StockId FROM Stock S WHERE S.IdItem = @idItem AND S.IdLocCode = L.IdLocCode)
		  AND EXISTS(SELECT IDUserWms
				    FROM UserWorkZone UWZ INNER JOIN
				    WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
				    WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
				    WHERE UWZ.IdUserWms = @idUser
					  AND WZ.IdWhs = L.IdWhs
					  AND WZL.IdLocCode = L.IdLocCode)
		  AND EXISTS(SELECT WZF.IdLocCode
				    FROM WorkZoneForkLift WZF INNER JOIN
				    WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
				    WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
				    WHERE WZF.IdLocCode = @idForkLift
					  AND WZ.IdWhs = L.IdWhs
					  AND WZL.IdLocCode = L.IdLocCode)
		  ORDER BY Ruta ASC
	  </sql>
	  <parameters>
		  <parameter type="Int">putawayFlow</parameter>
		  <parameter type="Int">idWhs</parameter>
		  <parameter type="Decimal">totalVolumen</parameter>
		  <parameter type="Int">idItem</parameter>
		  <parameter type="Int">idUser</parameter>
		  <parameter type="String">idForklift</parameter>   
	  </parameters>
  </query>
   
  <query code="LOCPUTEmptyCapVolMaqZoneUserZone">
	  <sql>
		  SELECT TOP 1
		  ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
		  L.IdLocCode,
		  L.LocCode,
		  L.RowLoc,
		  L.ColumnLoc,
		  L.LevelLoc,
		  L.Aisle,
		  L.Status,
		  L.Description,
		  L.SharedItem,
		  L.OnlyLPN,
		  L.PickingFlow,
		  L.PutawayFlow,
		  L.CapacityLPN,
		  L.CapacityUnit,
		  L.Length,
		  L.Width,
		  L.Height,
		  L.Volume,
		  L.Weight,
		  L.LockInventory,
		  LT.IdLocType,
		  LT.LocTypeCode,
		  LT.LocTypeName,
		  LT.Status
		  FROM Location L INNER JOIN
		  LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		  WHERE L.IdWhs = @idWhs
		  AND L.LocTypeCode = 'PUT'
		  AND L.HoldCode IS NULL
		  AND L.LockInventory = 0
		  AND L.Volume &gt;= (@totalVolumen)
		  AND NOT EXISTS(SELECT StockId FROM Stock S WHERE S.IdItem = @idItem AND S.IdLocCode = L.IdLocCode)
		  AND EXISTS(SELECT IDUserWms
				    FROM UserWorkZone UWZ INNER JOIN
				    WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
				    WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
				    WHERE UWZ.IdUserWms = @idUser
					  AND WZ.IdWhs = L.IdWhs
					  AND WZL.IdLocCode = L.IdLocCode)
		  AND EXISTS(SELECT WZF.IdLocCode
				    FROM WorkZoneForkLift WZF INNER JOIN
				    WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
				    WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
				    WHERE WZF.IdLocCode = @idForkLift
					  AND WZ.IdWhs = L.IdWhs
					  AND WZL.IdLocCode = L.IdLocCode)
		  ORDER BY Ruta ASC
	  </sql>
	  <parameters>
		  <parameter type="Int">putawayFlow</parameter>
		  <parameter type="Int">idWhs</parameter>
		  <parameter type="Decimal">totalVolumen</parameter>
		  <parameter type="Int">idItem</parameter>
		  <parameter type="Int">idUser</parameter>	   
		  <parameter type="String">idForklift</parameter>
	  </parameters>
  </query>
   
  <query code="STKPrimaryGreaterQty">
	  <sql>
		  SELECT TOP 1
		  ABS(L.PickingFlow - @pickingFlow) AS Ruta,
		  S.IdWhs,
		  S.IdOwn,
		  (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		  FROM v_Other_LocationPicking AS OLP
		  WHERE S.IdItem = OLP.IdItem
		  AND L.IdLocCode = OLP.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLP.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL) OR(S.LotNumber IS NULL) OR(OLP.LotNumber IS NULL))
		  AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLP.FifoDate IS NULL))
		  --AND ((@fabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLP.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLP.expirationDate IS NULL))),0)
		  + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		  FROM v_Other_LocationPicking_Sim AS OLPS
		  WHERE S.IdItem = OLPS.IdItem
		  AND L.IdLocCode = OLPS.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR(OLPS.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLPS.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL) OR(S.LotNumber IS NULL) OR(OLPS.LotNumber IS NULL))
		  AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLPS.FifoDate IS NULL))
		  --AND ((@fabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLPS.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLPS.expirationDate IS NULL))),0)))) AS ItemQty,
		  S.IdItem,
		  CASE
		  WHEN @idCtgItem IS NOT NULL THEN @idCtgItem
		  WHEN @idCtgItem IS NULL THEN S.IdCtgItem
		  END AS IdCategoryItem,
		  CASE
		  WHEN @lotNumber IS NOT NULL THEN @lotNumber
		  WHEN @lotNumber IS NULL THEN S.Lotnumber
		  END AS LotNumber,
		  CASE
		  WHEN  @fifoDate IS NOT NULL THEN @fifoDate
		  WHEN  @fifoDate IS NULL THEN S.FifoDate
		  END AS FifoDate,
		  NULL AS FabricationDate,
		  CASE
		  WHEN @expirationDate IS NOT NULL THEN @expirationDate
		  WHEN @expirationDate IS NULL THEN S.ExpirationDate
		  END AS ExpirationDate,
		  S.IdLpnCode,
		  S.LpnTypeCode,
		  S.IdLpnCodeContainer,
		  S.LpnTypeCodeContainer,
		  L.IdLocCode,
		  L.LocCode,
		  L.RowLoc,
		  L.ColumnLoc,
		  L.LevelLoc,
		  L.Aisle,L.Status,
		  L.Description,
		  L.SharedItem,
		  L.OnlyLPN,
		  L.PickingFlow,
		  L.PutawayFlow,
		  L.CapacityLPN,
		  L.CapacityUnit,
		  L.Length,
		  L.Width,
		  L.Height,
		  L.Volume,
		  L.Weight,
		  L.LockInventory,
		  LT.IdLocType,
		  LT.LocTypeCode,
		  LT.LocTypeName,
		  LT.Status
		  FROM Stock S
		  INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
		  INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		  INNER JOIN Item I ON I.IdItem = S.IdItem
		  LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
		  AND S.IdWhs = OQRC.IdWhs
		  AND S.IdOwn = OQRC.IdOwn
		  AND OQRC.CustomerCode &lt;&gt; @customerCode
		  INNER JOIN ItemLocation IL ON IL.IdLocCode = L.IdLocCode AND IL.IdItem = I.IdItem
		  WHERE S.IdWhs = L.IdWhs
		  AND S.IdItem = @idItem
		  AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
		  AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
		  AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
		  --AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
		  AND ((S.ExpirationDate = @expirationDate AND @expirationDate IS NOT NULL)OR(@expirationDate IS NULL))
		  AND S.IdWhs = @idWhs
		  AND L.LocTypeCode = 'PICK'
		  AND L.HoldCode IS NULL
		  AND L.Status = 1
		  AND L.LockInventory = 0
		  AND S.HoldCode IS NULL
		  GROUP BY
		  S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		  L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		  L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		  L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		  LT.LocTypeName, LT.Status, IdCtgItem, LotNumber, FifoDate, ExpirationDate
		  HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		  FROM v_Other_LocationPicking AS OLP
		  WHERE S.IdItem = OLP.IdItem
		  AND L.IdLocCode = OLP.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLP.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL) OR(S.LotNumber IS NULL) OR(OLP.LotNumber IS NULL))
		  AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLP.FifoDate IS NULL))
		  --AND ((@fabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLP.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLP.expirationDate IS NULL))),0)
		  + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		  FROM v_Other_LocationPicking_Sim AS OLPS
		  WHERE S.IdItem = OLPS.IdItem
		  AND L.IdLocCode = OLPS.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR(OLPS.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLPS.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL) OR(S.LotNumber IS NULL)	OR(OLPS.LotNumber IS NULL))
		  AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLPS.FifoDate IS NULL))
		  --AND ((@fabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLPS.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLPS.expirationDate IS NULL))
		  ),0)))) &gt;= @itemQty
		  ORDER BY ItemQty DESC, Ruta ASC
	  </sql>
	  <parameters>
	     <parameter type="Int">pickingFlow</parameter>
	     <parameter type="Int">idCtgItem</parameter>
	     <parameter type="String">lotNumber</parameter>
	     <parameter type="DateTime">fifoDate</parameter>
	     <parameter type="DateTime">expirationDate</parameter>
	     <parameter type="String">customerCode</parameter>
	     <parameter type="Int">idItem</parameter>
	     <parameter type="Int">idWhs</parameter>
	     <parameter type="Decimal">itemQty</parameter>
	   </parameters>
  </query>
   
  <query code="STKPICKGreaterQty">
	  <sql>
		  SELECT TOP 1
		  ABS(L.PickingFlow - @pickingFlow) AS Ruta,
		  S.IdWhs,
		  S.IdOwn,
		  (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		  FROM v_Other_LocationPicking AS OLP
		  WHERE S.IdItem = OLP.IdItem
		  AND L.IdLocCode = OLP.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLP.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL) OR(S.LotNumber IS NULL) OR(OLP.LotNumber IS NULL))
		  AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLP.FifoDate IS NULL))
		  --AND ((@fabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLP.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLP.expirationDate IS NULL))),0)
		  + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		  FROM v_Other_LocationPicking_Sim AS OLPS
		  WHERE S.IdItem = OLPS.IdItem
		  AND L.IdLocCode = OLPS.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR(OLPS.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLPS.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL) OR(S.LotNumber IS NULL) OR(OLPS.LotNumber IS NULL))
		  AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLPS.FifoDate IS NULL))
		  --AND ((@fabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLPS.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLPS.expirationDate IS NULL))),0)))) AS ItemQty,
		  S.IdItem,
		  CASE
		  WHEN @idCtgItem IS NOT NULL THEN @idCtgItem
		  WHEN @idCtgItem IS NULL THEN S.IdCtgItem
		  END AS IdCategoryItem,
		  CASE
		  WHEN @lotNumber IS NOT NULL THEN @lotNumber
		  WHEN @lotNumber IS NULL THEN S.Lotnumber
		  END AS LotNumber,
		  CASE
		  WHEN  @fifoDate IS NOT NULL THEN @fifoDate
		  WHEN  @fifoDate IS NULL THEN S.FifoDate
		  END AS FifoDate,
		  NULL AS FabricationDate,
		  CASE
		  WHEN @expirationDate IS NOT NULL THEN @expirationDate
		  WHEN @expirationDate IS NULL THEN S.ExpirationDate
		  END AS ExpirationDate,
		  S.IdLpnCode,
		  S.LpnTypeCode,
		  S.IdLpnCodeContainer,
		  S.LpnTypeCodeContainer,
		  L.IdLocCode,
		  L.LocCode,
		  L.RowLoc,
		  L.ColumnLoc,
		  L.LevelLoc,
		  L.Aisle,L.Status,
		  L.Description,
		  L.SharedItem,
		  L.OnlyLPN,
		  L.PickingFlow,
		  L.PutawayFlow,
		  L.CapacityLPN,
		  L.CapacityUnit,
		  L.Length,
		  L.Width,
		  L.Height,
		  L.Volume,
		  L.Weight,
		  L.LockInventory,
		  LT.IdLocType,
		  LT.LocTypeCode,
		  LT.LocTypeName,
		  LT.Status
		  FROM Stock S
		  INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
		  INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		  INNER JOIN Item I ON I.IdItem = S.IdItem
		  WHERE S.IdWhs = L.IdWhs
		  AND S.IdItem = @idItem
		  AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
		  AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
		  AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
		  --AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
		  AND ((S.ExpirationDate = @expirationDate AND @expirationDate IS NOT NULL)OR(@expirationDate IS NULL))
		  AND S.IdWhs = @idWhs
		  AND L.LocTypeCode = 'PICK'
		  AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
		  AND L.Status = 1
		  AND L.LockInventory = 0
		  AND S.HoldCode IS NULL
		  GROUP BY
		  S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		  L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		  L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		  L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		  LT.LocTypeName, LT.Status, IdCtgItem, LotNumber, FifoDate,ExpirationDate
		  HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		  FROM v_Other_LocationPicking AS OLP
		  WHERE S.IdItem = OLP.IdItem
		  AND L.IdLocCode = OLP.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLP.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL) OR(S.LotNumber IS NULL) OR(OLP.LotNumber IS NULL))
		  AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLP.FifoDate IS NULL))
		  --AND ((@fabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLP.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLP.expirationDate IS NULL))),0)
		  + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		  FROM v_Other_LocationPicking_Sim AS OLPS
		  WHERE S.IdItem = OLPS.IdItem
		  AND L.IdLocCode = OLPS.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR(OLPS.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLPS.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL) OR(S.LotNumber IS NULL)	OR(OLPS.LotNumber IS NULL))
		  AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLPS.FifoDate IS NULL))
		  --AND ((@fabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL) OR(S.FabricationDate IS NULL) OR(OLPS.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLPS.expirationDate IS NULL))
		  ),0)))) &gt;= @itemQty
		  ORDER BY ItemQty DESC, Ruta ASC
	  </sql>
	  <parameters>
	     <parameter type="Int">pickingFlow</parameter>
	     <parameter type="Int">idCtgItem</parameter>
	     <parameter type="String">lotNumber</parameter>
	     <parameter type="DateTime">fifoDate</parameter>
	     <parameter type="DateTime">expirationDate</parameter>
	     <parameter type="Int">idItem</parameter>
	     <parameter type="Int">idWhs</parameter>
	     <parameter type="Decimal">itemQty</parameter>
	   </parameters>
  </query>
   
  <query code="STKPUTGreaterQty">
	  <sql>
		  SELECT TOP 1
		  ABS(L.PickingFlow - @pickingFlow) AS Ruta,
		  S.IdWhs,
		  S.IdOwn,
		  (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		  FROM v_Other_LocationPicking AS OLP
		  WHERE S.IdItem = OLP.IdItem
		  AND L.IdLocCode = OLP.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLP.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL) OR(S.LotNumber IS NULL) OR(OLP.LotNumber IS NULL))
		  AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLP.FifoDate IS NULL))
		  --AND ((@fabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLP.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLP.expirationDate IS NULL))),0)
		  + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		  FROM v_Other_LocationPicking_Sim AS OLPS
		  WHERE S.IdItem = OLPS.IdItem
		  AND L.IdLocCode = OLPS.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR(OLPS.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLPS.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL) OR(S.LotNumber IS NULL) OR(OLPS.LotNumber IS NULL))
		  AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLPS.FifoDate IS NULL))
		  --AND ((@fabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLPS.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLPS.expirationDate IS NULL))),0)))) AS ItemQty,
		  S.IdItem,
		  CASE
		  WHEN @idCtgItem IS NOT NULL THEN @idCtgItem
		  WHEN @idCtgItem IS NULL THEN S.IdCtgItem
		  END AS IdCategoryItem,
		  CASE
		  WHEN @lotNumber IS NOT NULL THEN @lotNumber
		  WHEN @lotNumber IS NULL THEN S.Lotnumber
		  END AS LotNumber,
		  CASE
		  WHEN  @fifoDate IS NOT NULL THEN @fifoDate
		  WHEN  @fifoDate IS NULL THEN S.FifoDate
		  END AS FifoDate,
		  NULL AS FabricationDate,
		  CASE
		  WHEN @expirationDate IS NOT NULL THEN @expirationDate
		  WHEN @expirationDate IS NULL THEN S.ExpirationDate
		  END AS ExpirationDate,
		  S.IdLpnCode,
		  S.LpnTypeCode,
		  S.IdLpnCodeContainer,
		  S.LpnTypeCodeContainer,
		  L.IdLocCode,
		  L.LocCode,
		  L.RowLoc,
		  L.ColumnLoc,
		  L.LevelLoc,
		  L.Aisle,L.Status,
		  L.Description,
		  L.SharedItem,
		  L.OnlyLPN,
		  L.PickingFlow,
		  L.PutawayFlow,
		  L.CapacityLPN,
		  L.CapacityUnit,
		  L.Length,
		  L.Width,
		  L.Height,
		  L.Volume,
		  L.Weight,
		  L.LockInventory,
		  LT.IdLocType,
		  LT.LocTypeCode,
		  LT.LocTypeName,
		  LT.Status
		  FROM Stock S
		  INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
		  INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		  INNER JOIN Item I ON I.IdItem = S.IdItem
		  WHERE S.IdWhs = L.IdWhs
		  AND S.IdItem = @idItem
		  AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
		  AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
		  AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
		  --AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
		  AND ((S.ExpirationDate = @expirationDate AND @expirationDate IS NOT NULL)OR(@expirationDate IS NULL))
		  AND S.IdWhs = @idWhs
		  AND L.LocTypeCode = 'PUT'
		  AND L.HoldCode IS NULL
		  AND L.Status = 1
		  AND L.LockInventory = 0
		  AND S.HoldCode IS NULL
		  GROUP BY
		  S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		  L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		  L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		  L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		  LT.LocTypeName, LT.Status, IdCtgItem, LotNumber, FifoDate, ExpirationDate
		  HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		  FROM v_Other_LocationPicking AS OLP
		  WHERE S.IdItem = OLP.IdItem
		  AND L.IdLocCode = OLP.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLP.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL) OR(S.LotNumber IS NULL) OR(OLP.LotNumber IS NULL))
		  AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLP.FifoDate IS NULL))
		  --AND ((@fabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLP.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLP.expirationDate IS NULL))),0)
		  + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		  FROM v_Other_LocationPicking_Sim AS OLPS
		  WHERE S.IdItem = OLPS.IdItem
		  AND L.IdLocCode = OLPS.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR(OLPS.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLPS.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL) OR(S.LotNumber IS NULL)	OR(OLPS.LotNumber IS NULL))
		  AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLPS.FifoDate IS NULL))
		  --AND ((@fabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLPS.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLPS.expirationDate IS NULL))
		  ),0)))) &gt;= @itemQty
		  ORDER BY ItemQty DESC, Ruta ASC
	  </sql>
	  <parameters>
	     <parameter type="Int">pickingFlow</parameter>
	     <parameter type="Int">idCtgItem</parameter>
	     <parameter type="String">lotNumber</parameter>
	     <parameter type="DateTime">fifoDate</parameter>
	     <parameter type="DateTime">expirationDate</parameter>
	     <parameter type="Int">idItem</parameter>
	     <parameter type="Int">idWhs</parameter>
	     <parameter type="Decimal">itemQty</parameter>
	   </parameters>
  </query>
   
  <query code="STKPICKLessQty">
	  <sql>
		  SELECT TOP 1
		  ABS(L.PickingFlow - @pickingFlow) AS Ruta,
		  S.IdWhs,
		  S.IdOwn,
		  (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		  FROM v_Other_LocationPicking AS OLP
		  WHERE S.IdItem = OLP.IdItem
		  AND L.IdLocCode = OLP.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLP.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL) OR(S.LotNumber IS NULL) OR(OLP.LotNumber IS NULL))
		  AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLP.FifoDate IS NULL))
		  --AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL) OR(S.FabricationDate IS NULL) OR(OLP.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLP.expirationDate IS NULL))),0)
		  + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		  FROM v_Other_LocationPicking_Sim AS OLPS
		  WHERE S.IdItem = OLPS.IdItem
		  AND L.IdLocCode = OLPS.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR(OLPS.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLPS.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL) OR(S.LotNumber IS NULL) OR(OLPS.LotNumber IS NULL))
		  AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLPS.FifoDate IS NULL))
		  --AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL) OR(S.FabricationDate IS NULL) OR(OLPS.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLPS.expirationDate IS NULL))),0)))) AS ItemQty,
		  S.IdItem,
		  CASE
		  WHEN @idCtgItem IS NOT NULL THEN @idCtgItem
		  WHEN @idCtgItem IS NULL THEN S.IdCtgItem
		  END AS IdCategoryItem,
		  CASE
		  WHEN @lotNumber IS NOT NULL THEN @lotNumber
		  WHEN @lotNumber IS NULL THEN S.Lotnumber
		  END AS LotNumber,
		  CASE
		  WHEN  @fifoDate IS NOT NULL THEN @fifoDate
		  WHEN  @fifoDate IS NULL THEN S.FifoDate
		  END AS FifoDate,
		  NULL FabricationDate,
		  CASE
		  WHEN @expirationDate IS NOT NULL THEN @expirationDate
		  WHEN @expirationDate IS NULL THEN S.ExpirationDate
		  END AS ExpirationDate,
		  S.IdLpnCode,
		  S.LpnTypeCode,
		  S.IdLpnCodeContainer,
		  S.LpnTypeCodeContainer,
		  L.IdLocCode,
		  L.LocCode,
		  L.RowLoc,
		  L.ColumnLoc,
		  L.LevelLoc,
		  L.Aisle,L.Status,
		  L.Description,
		  L.SharedItem,
		  L.OnlyLPN,
		  L.PickingFlow,
		  L.PutawayFlow,
		  L.CapacityLPN,
		  L.CapacityUnit,
		  L.Length,
		  L.Width,
		  L.Height,
		  L.Volume,
		  L.Weight,
		  L.LockInventory,
		  LT.IdLocType,
		  LT.LocTypeCode,
		  LT.LocTypeName,
		  LT.Status
		  FROM Stock S
		  INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
		  INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		  INNER JOIN Item I ON I.IdItem = S.IdItem
		  WHERE S.IdWhs = L.IdWhs
		  AND S.IdItem = @idItem
		  AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
		  AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
		  AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
		  --AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
		  AND ((S.ExpirationDate = @expirationDate AND @expirationDate IS NOT NULL)OR(@expirationDate IS NULL))
		  AND S.IdWhs = @idWhs
		  AND L.LocTypeCode = 'PICK'
		  AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
		  AND L.Status = 1
		  AND L.LockInventory = 0
		  AND S.HoldCode IS NULL
		  GROUP BY
		  S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		  L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		  L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		  L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		  LT.LocTypeName, LT.Status, IdCtgItem, LotNumber,FifoDate, ExpirationDate
		  HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		  FROM v_Other_LocationPicking AS OLP
		  WHERE S.IdItem = OLP.IdItem
		  AND L.IdLocCode = OLP.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLP.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL) OR(S.LotNumber IS NULL) OR(OLP.LotNumber IS NULL))
		  AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLP.FifoDate IS NULL))
		  --AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL) OR(S.FabricationDate IS NULL) OR(OLP.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLP.expirationDate IS NULL))),0)
		  + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		  FROM v_Other_LocationPicking_Sim AS OLPS
		  WHERE S.IdItem = OLPS.IdItem
		  AND L.IdLocCode = OLPS.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR(OLPS.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLPS.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL) OR(S.LotNumber IS NULL)	OR(OLPS.LotNumber IS NULL))
		  AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLPS.FifoDate IS NULL))
		  --AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL) OR(S.FabricationDate IS NULL) OR(OLPS.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLPS.expirationDate IS NULL))
		  ),0)))) &gt;= 0
		  ORDER BY ItemQty DESC, Ruta ASC
	  </sql>
	  <parameters>
	     <parameter type="Int">pickingFlow</parameter>
	     <parameter type="Int">idCtgItem</parameter>
	     <parameter type="String">lotNumber</parameter>
	     <parameter type="DateTime">fifoDate</parameter>
	     <parameter type="DateTime">expirationDate</parameter>
	     <parameter type="Int">idItem</parameter>
	     <parameter type="Int">idWhs</parameter>
	   </parameters>
  </query>
   
  <query code="STKPUTLessQty">
	  <sql>
		  SELECT TOP 1
		  ABS(L.PickingFlow - @pickingFlow) AS Ruta,
		  S.IdWhs,
		  S.IdOwn,
		  (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		  FROM v_Other_LocationPicking AS OLP
		  WHERE S.IdItem = OLP.IdItem
		  AND L.IdLocCode = OLP.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLP.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL) OR(S.LotNumber IS NULL) OR(OLP.LotNumber IS NULL))
		  AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLP.FifoDate IS NULL))
		  --AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL) OR(S.FabricationDate IS NULL) OR(OLP.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLP.expirationDate IS NULL))),0)
		  + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		  FROM v_Other_LocationPicking_Sim AS OLPS
		  WHERE S.IdItem = OLPS.IdItem
		  AND L.IdLocCode = OLPS.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR(OLPS.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLPS.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL) OR(S.LotNumber IS NULL) OR(OLPS.LotNumber IS NULL))
		  AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLPS.FifoDate IS NULL))
		  --AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLPS.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLPS.expirationDate IS NULL))),0)))) AS ItemQty,
		  S.IdItem,
		  CASE
		  WHEN @idCtgItem IS NOT NULL THEN @idCtgItem
		  WHEN @idCtgItem IS NULL THEN S.IdCtgItem
		  END AS IdCategoryItem,
		  CASE
		  WHEN @lotNumber IS NOT NULL THEN @lotNumber
		  WHEN @lotNumber IS NULL THEN S.Lotnumber
		  END AS LotNumber,
		  CASE
		  WHEN  @fifoDate IS NOT NULL THEN @fifoDate
		  WHEN  @fifoDate IS NULL THEN S.FifoDate
		  END AS FifoDate,
		  NULL FabricationDate,
		  CASE
		  WHEN @expirationDate IS NOT NULL THEN @expirationDate
		  WHEN @expirationDate IS NULL THEN S.ExpirationDate
		  END AS ExpirationDate,
		  S.IdLpnCode,
		  S.LpnTypeCode,
		  S.IdLpnCodeContainer,
		  S.LpnTypeCodeContainer,
		  L.IdLocCode,
		  L.LocCode,
		  L.RowLoc,
		  L.ColumnLoc,
		  L.LevelLoc,
		  L.Aisle,L.Status,
		  L.Description,
		  L.SharedItem,
		  L.OnlyLPN,
		  L.PickingFlow,
		  L.PutawayFlow,
		  L.CapacityLPN,
		  L.CapacityUnit,
		  L.Length,
		  L.Width,
		  L.Height,
		  L.Volume,
		  L.Weight,
		  L.LockInventory,
		  LT.IdLocType,
		  LT.LocTypeCode,
		  LT.LocTypeName,
		  LT.Status
		  FROM Stock S
		  INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
		  INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		  INNER JOIN Item I ON I.IdItem = S.IdItem
		  WHERE S.IdWhs = L.IdWhs
		  AND S.IdItem = @idItem
		  AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
		  AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
		  AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
		  --AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
		  AND ((S.ExpirationDate = @expirationDate AND @expirationDate IS NOT NULL)OR(@expirationDate IS NULL))
		  AND S.IdWhs = @idWhs
		  AND L.LocTypeCode = 'PUT'
		  AND L.HoldCode IS NULL
		  AND L.Status = 1
		  AND L.LockInventory = 0
		  AND S.HoldCode IS NULL
		  GROUP BY
		  S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		  L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		  L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		  L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		  LT.LocTypeName, LT.Status, IdCtgItem, LotNumber,FifoDate,ExpirationDate
		  HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		  FROM v_Other_LocationPicking AS OLP
		  WHERE S.IdItem = OLP.IdItem
		  AND L.IdLocCode = OLP.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLP.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL) OR(S.LotNumber IS NULL) OR(OLP.LotNumber IS NULL))
		  AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLP.FifoDate IS NULL))
		  --AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLP.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLP.expirationDate IS NULL))),0)
		  + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		  FROM v_Other_LocationPicking_Sim AS OLPS
		  WHERE S.IdItem = OLPS.IdItem
		  AND L.IdLocCode = OLPS.IdLocSourceProposal
		  AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR(OLPS.IdLpnSourceProposal IS NULL))
		  AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL) OR(S.IdCtgItem IS NULL) OR(OLPS.IdCtgItem IS NULL))
		  AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL) OR(S.LotNumber IS NULL)	OR(OLPS.LotNumber IS NULL))
		  AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL) OR(S.FifoDate IS NULL) OR(OLPS.FifoDate IS NULL))
		  --AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL) OR(S.FabricationDate IS NULL) OR(OLPS.FabricationDate IS NULL))
		  AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL) OR(S.ExpirationDate IS NULL) OR(OLPS.expirationDate IS NULL))
		  ),0)))) &gt;= 0
		  ORDER BY ItemQty DESC, Ruta ASC
	  </sql>
	  <parameters>
	     <parameter type="Int">pickingFlow</parameter>
	     <parameter type="Int">idCtgItem</parameter>
	     <parameter type="String">lotNumber</parameter>
	     <parameter type="DateTime">fifoDate</parameter>
	     <parameter type="DateTime">expirationDate</parameter>
	     <parameter type="Int">idItem</parameter>
	     <parameter type="Int">idWhs</parameter>
	   </parameters>
  </query>	
   
  <query code="STGUnPick">
	  <sql>
	     SELECT TOP 1
         ABS(L.PutawayFlow - 1) AS Ruta,
         L.IdLocCode,
         L.LocCode,
         L.RowLoc,
         L.ColumnLoc,
         L.LevelLoc,
         L.Aisle,
         L.Status,
         L.Description,
         L.SharedItem,
         L.OnlyLPN,
         L.PickingFlow,
         L.PutawayFlow,
         L.CapacityLPN,
         L.CapacityUnit,
         L.Length,
         L.Width,
         L.Height,
         L.Volume,
         L.Weight,
         L.LockInventory,
         LT.IdLocType,
         LT.LocTypeCode,
         LT.LocTypeName,
         LT.Status
         FROM Location L INNER JOIN
              LocationType LT ON L.LocTypeCode = LT.LocTypeCode
         WHERE L.IdWhs = 1
           AND L.LocTypeCode = 'STG'
           AND L.HoldCode IS NULL
           AND L.LockInventory = 0
		   AND NOT EXISTS (SELECT WZL.IdLocCode FROM WorkZoneLocation WZL INNER JOIN WorkZone WZ ON WZ.IdWorkZone = WZL.IdWorkZone WHERE WZL.IdLocCode = L.IdLocCode AND WZ.TypeZone = 1)
           AND EXISTS(SELECT IDUserWms
                      FROM UserWorkZone UWZ INNER JOIN
                           WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                           WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                      WHERE UWZ.IdUserWms = @idUser
                        AND WZ.IdWhs = L.IdWhs
                        AND WZL.IdLocCode = L.IdLocCode)
           AND EXISTS(SELECT WZF.IdLocCode
                      FROM WorkZoneForkLift WZF INNER JOIN
                           WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                           WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                      WHERE WZF.IdLocCode = @idForklift
                        AND WZ.IdWhs = L.IdWhs
                        AND WZL.IdLocCode = L.IdLocCode)
         ORDER BY Ruta ASC
	  </sql>
	  <parameters>
	     <parameter type="Int">idUser</parameter>
	     <parameter type="String">idForklift</parameter>
	   </parameters>
  </query>
  
  <query code="LocPickItemNoZoneLessQtyCtgItem">
     <sql>
			SELECT TOP 1
			       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
				     S.IdWhs,
				     S.IdOwn,
				     S.IdItem,
				     S.IdCtgItem,
				     (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
											                     FROM v_Other_LocationPicking AS OLP
											                    WHERE S.IdItem = OLP.IdItem
												                    AND S.IdWhs = OLP.IdWhs
												                    AND S.IdCtgItem = OLP.IdCtgItem
												                    AND L.IdLocCode = OLP.IdLocSourceProposal),0)
								             - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
											                     FROM v_Other_LocationPicking_Sim AS OLPS
											                    WHERE S.IdItem = OLPS.IdItem
												                    AND S.IdWhs = OLPS.IdWhs
												                    AND S.IdCtgItem = OLPS.IdCtgItem
												                    AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
				     ) AS ItemQty,
				     S.ExpirationDate,
				     S.IdLpnCode,
				     S.LpnTypeCode,
				     S.IdLpnCodeContainer,
				     S.LpnTypeCodeContainer,
				     L.IdLocCode,
				     L.LocCode,
				     L.RowLoc,
				     L.ColumnLoc,
				     L.LevelLoc,
				     L.Aisle,
				     L.Status,
				     L.Description,
				     L.SharedItem,
				     L.OnlyLPN,
				     L.PickingFlow,
				     L.PutawayFlow,
				     L.CapacityLPN,
				     L.CapacityUnit,
				     L.Length,
				     L.Width,
				     L.Height,
				     L.Volume,
				     L.Weight,
				     L.LockInventory,
				     LT.IdLocType,
				     LT.LocTypeCode,
				     LT.LocTypeName,
				     LT.Status
			  FROM Stock S
  INNER JOIN Location L 
		      ON L.IdLocCode = S.IdLocCode
			   AND L.IdWhs = S.IdWhs
  INNER JOIN LocationType LT 
		      ON L.LocTypeCode = LT.LocTypeCode
  INNER JOIN Item I 
		      ON I.IdItem = S.IdItem
		   WHERE S.IdItem = @idItem
			   AND S.IdWhs = @idWhs
			   AND S.IdCtgItem = @idCtgItem
			   AND L.LocTypeCode = 'PICK'
		     AND L.HoldCode IS NULL
			   AND S.HoldCode IS NULL
		     AND L.Status = 1
			   AND L.LockInventory = 0
			   AND (S.ExpirationDate &gt; GETDATE() + I.ShelfLife OR S.ExpirationDate IS NULL)
	  GROUP BY S.IdWhs,
				     S.IdOwn,
				     S.IdItem,
				     S.IdCtgItem,
				     L.PickingFlow,
				     S.ExpirationDate,
				     S.IdLpnCode,
				     S.LpnTypeCode,
				     S.IdLpnCodeContainer,
				     S.LpnTypeCodeContainer,
				     L.IdLocCode,
				     L.LocCode,
				     L.RowLoc,
				     L.ColumnLoc,
				     L.LevelLoc,
				     L.Aisle,
				     L.Status,
				     L.Description,
				     L.SharedItem,
				     L.OnlyLPN,
				     L.PickingFlow,
				     L.PutawayFlow,
				     L.CapacityLPN,
				     L.CapacityUnit,
				     L.Length,
				     L.Width,
				     L.Height,
				     L.Volume,
				     L.Weight,
				     L.LockInventory,
				     LT.IdLocType,
				     LT.LocTypeCode,
				     LT.LocTypeName,
				     LT.Status
			HAVING (	(SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
													                    FROM v_Other_LocationPicking AS OLP
													                   WHERE S.IdItem = OLP.IdItem
													                     AND S.IdWhs = OLP.IdWhs
													                     AND S.IdCtgItem = OLP.IdCtgItem
													                     AND L.IdLocCode = OLP.IdLocSourceProposal),0)
										            - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
													                    FROM v_Other_LocationPicking_Sim AS OLPS
													                   WHERE S.IdItem = OLPS.IdItem
													                     AND S.IdWhs = OLPS.IdWhs
													                     AND S.IdCtgItem = OLPS.IdCtgItem
													                     AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
						    ) &gt; 0
					AND 
						  (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
													                  FROM v_Other_LocationPicking AS OLP
													                 WHERE S.IdItem = OLP.IdItem
													                   AND S.IdWhs = OLP.IdWhs
													                   AND S.IdCtgItem = OLP.IdCtgItem
													                   AND L.IdLocCode = OLP.IdLocSourceProposal),0)
										          - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
													                  FROM v_Other_LocationPicking_Sim AS OLPS
													                 WHERE S.IdItem = OLPS.IdItem
													                   AND S.IdWhs = OLPS.IdWhs
													                   AND S.IdCtgItem = OLPS.IdCtgItem
													                   AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
						  ) &lt;= @itemQty
				   )
	      ORDER BY S.ExpirationDate ASC,
				         ItemQty ASC,
		             Ruta ASC		   
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="Decimal">itemQty</parameter>
     </parameters>
   </query>
   
   <query code="LocPutItemNoZoneLessQtyCtgItem">
     <sql>
			SELECT TOP 1
			       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
				     S.IdWhs,
				     S.IdOwn,
				     S.IdItem,
				     S.IdCtgItem,
				     (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
											                     FROM v_Other_LocationPicking AS OLP
											                    WHERE S.IdItem = OLP.IdItem
												                    AND S.IdWhs = OLP.IdWhs
												                    AND S.IdCtgItem = OLP.IdCtgItem
												                    AND L.IdLocCode = OLP.IdLocSourceProposal),0)
								             - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
											                     FROM v_Other_LocationPicking_Sim AS OLPS
											                    WHERE S.IdItem = OLPS.IdItem
												                    AND S.IdWhs = OLPS.IdWhs
												                    AND S.IdCtgItem = OLPS.IdCtgItem
												                    AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
				     ) AS ItemQty,
				     S.ExpirationDate,
				     S.IdLpnCode,
				     S.LpnTypeCode,
				     S.IdLpnCodeContainer,
				     S.LpnTypeCodeContainer,
				     L.IdLocCode,
				     L.LocCode,
				     L.RowLoc,
				     L.ColumnLoc,
				     L.LevelLoc,
				     L.Aisle,
				     L.Status,
				     L.Description,
				     L.SharedItem,
				     L.OnlyLPN,
				     L.PickingFlow,
				     L.PutawayFlow,
				     L.CapacityLPN,
				     L.CapacityUnit,
				     L.Length,
				     L.Width,
				     L.Height,
				     L.Volume,
				     L.Weight,
				     L.LockInventory,
				     LT.IdLocType,
				     LT.LocTypeCode,
				     LT.LocTypeName,
				     LT.Status
			  FROM Stock S
  INNER JOIN Location L 
		      ON L.IdLocCode = S.IdLocCode
			   AND L.IdWhs = S.IdWhs
  INNER JOIN LocationType LT 
		      ON L.LocTypeCode = LT.LocTypeCode
  INNER JOIN Item I 
		      ON I.IdItem = S.IdItem
		   WHERE S.IdItem = @idItem
			   AND S.IdWhs = @idWhs
			   AND S.IdCtgItem = @idCtgItem
			   AND L.LocTypeCode = 'PUT'
		     AND L.HoldCode IS NULL
			   AND S.HoldCode IS NULL
		     AND L.Status = 1
			   AND L.LockInventory = 0
			   AND (S.ExpirationDate &gt; GETDATE() + I.ShelfLife OR S.ExpirationDate IS NULL)
	  GROUP BY S.IdWhs,
				     S.IdOwn,
				     S.IdItem,
				     S.IdCtgItem,
				     L.PickingFlow,
				     S.ExpirationDate,
				     S.IdLpnCode,
				     S.LpnTypeCode,
				     S.IdLpnCodeContainer,
				     S.LpnTypeCodeContainer,
				     L.IdLocCode,
				     L.LocCode,
				     L.RowLoc,
				     L.ColumnLoc,
				     L.LevelLoc,
				     L.Aisle,
				     L.Status,
				     L.Description,
				     L.SharedItem,
				     L.OnlyLPN,
				     L.PickingFlow,
				     L.PutawayFlow,
				     L.CapacityLPN,
				     L.CapacityUnit,
				     L.Length,
				     L.Width,
				     L.Height,
				     L.Volume,
				     L.Weight,
				     L.LockInventory,
				     LT.IdLocType,
				     LT.LocTypeCode,
				     LT.LocTypeName,
				     LT.Status
			HAVING (	(SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
													                    FROM v_Other_LocationPicking AS OLP
													                   WHERE S.IdItem = OLP.IdItem
													                     AND S.IdWhs = OLP.IdWhs
													                     AND S.IdCtgItem = OLP.IdCtgItem
													                     AND L.IdLocCode = OLP.IdLocSourceProposal),0)
										            - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
													                    FROM v_Other_LocationPicking_Sim AS OLPS
													                   WHERE S.IdItem = OLPS.IdItem
													                     AND S.IdWhs = OLPS.IdWhs
													                     AND S.IdCtgItem = OLPS.IdCtgItem
													                     AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
						    ) &gt; 0
					AND 
						  (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
													                  FROM v_Other_LocationPicking AS OLP
													                 WHERE S.IdItem = OLP.IdItem
													                   AND S.IdWhs = OLP.IdWhs
													                   AND S.IdCtgItem = OLP.IdCtgItem
													                   AND L.IdLocCode = OLP.IdLocSourceProposal),0)
										          - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
													                  FROM v_Other_LocationPicking_Sim AS OLPS
													                 WHERE S.IdItem = OLPS.IdItem
													                   AND S.IdWhs = OLPS.IdWhs
													                   AND S.IdCtgItem = OLPS.IdCtgItem
													                   AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
						  ) &lt;= @itemQty
				   )
	      ORDER BY S.ExpirationDate ASC,
				         ItemQty ASC,
		             Ruta ASC		   
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="Decimal">itemQty</parameter>
     </parameters>
   </query>

   <query code="LocPutItemNoZoneLessQtyUomCajaCtgItem">
     <sql>
      SELECT TOP 1
			       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
				     S.IdWhs,
				     S.IdOwn,
				     S.IdItem,
				     S.IdCtgItem,
				     (IU.ConversionFactor * ROUND(((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty, 0)) 
																			                                   FROM v_Other_LocationPicking AS OLP 
																			                                  WHERE S.IdItem = OLP.IdItem 
																				                                  AND S.IdWhs = OLP.IdWhs 
																				                                  AND S.IdCtgItem = OLP.IdCtgItem
																				                                  AND L.IdLocCode = OLP.IdLocSourceProposal), 0)
																                         - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty, 0)) 
																			                                 FROM v_Other_LocationPicking_Sim AS OLPS 
																			                                WHERE S.IdItem = OLPS.IdItem 
																				                                AND S.IdWhs = OLPS.IdWhs
																				                                AND S.IdCtgItem = OLPS.IdCtgItem
																				                                AND L.IdLocCode = OLPS.IdLocSourceProposal), 0)
											              ) / IU.ConversionFactor),0,1)
				     ) AS ItemQty,
				     S.ExpirationDate,
				     S.IdLpnCode,
				     S.LpnTypeCode,
				     S.IdLpnCodeContainer,
				     S.LpnTypeCodeContainer,
				     L.IdLocCode,
				     L.LocCode,
				     L.RowLoc,
				     L.ColumnLoc,
				     L.LevelLoc,
				     L.Aisle,
				     L.Status,
				     L.Description,
				     L.SharedItem,
				     L.OnlyLPN,
				     L.PickingFlow,
				     L.PutawayFlow,
				     L.CapacityLPN,
				     L.CapacityUnit,
				     L.Length,
				     L.Width,
				     L.Height,
				     L.Volume,
				     L.Weight,
				     L.LockInventory,
				     LT.IdLocType,
				     LT.LocTypeCode,
				     LT.LocTypeName,
				     LT.Status
			  FROM Stock S
       INNER JOIN Location L 
		      ON L.IdLocCode = S.IdLocCode
			   AND L.IdWhs = S.IdWhs
  INNER JOIN LocationType LT 
		      ON L.LocTypeCode = LT.LocTypeCode
  INNER JOIN Item I 
		      ON I.IdItem = S.IdItem
  INNER JOIN ItemUom IU 
		      ON I.IdItem = IU.IdItem
		   WHERE S.IdItem = @idItem
			   AND S.IdWhs = @idWhs
			   AND S.IdCtgItem = @idCtgItem
			   AND L.LocTypeCode = 'PUT'
		     AND L.HoldCode IS NULL
			   AND S.HoldCode IS NULL
		     AND L.Status = 1
			   AND L.LockInventory = 0
			   AND (S.ExpirationDate &gt; GETDATE() + I.ShelfLife OR S.ExpirationDate IS NULL)
			   AND IU.UomName = 'Caja'
			   AND @itemQty &gt;= IU.ConversionFactor 
		GROUP BY S.IdWhs,
				     S.IdOwn,
				     S.IdItem,
				     S.IdCtgItem,
				     L.PickingFlow,
				     S.ExpirationDate,
				     S.IdLpnCode,
				     S.LpnTypeCode,
				     S.IdLpnCodeContainer,
				     S.LpnTypeCodeContainer,
				     L.IdLocCode,
				     L.LocCode,
				     L.RowLoc,
				     L.ColumnLoc,
				     L.LevelLoc,
				     L.Aisle,
				     L.Status,
				     L.Description,
				     L.SharedItem,
				     L.OnlyLPN,
				     L.PickingFlow,
				     L.PutawayFlow,
				     L.CapacityLPN,
				     L.CapacityUnit,
				     L.Length,
				     L.Width,
				     L.Height,
				     L.Volume,
				     L.Weight,
				     L.LockInventory,
				     LT.IdLocType,
				     LT.LocTypeCode,
				     LT.LocTypeName,
				     LT.Status,
				     IU.ConversionFactor
			HAVING (
						    (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
													                    FROM v_Other_LocationPicking AS OLP
													                   WHERE S.IdItem = OLP.IdItem
													                     AND S.IdWhs = OLP.IdWhs
													                     AND S.IdCtgItem = OLP.IdCtgItem
													                     AND L.IdLocCode = OLP.IdLocSourceProposal),0)
									              - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
													                    FROM v_Other_LocationPicking_Sim AS OLPS
													                   WHERE S.IdItem = OLPS.IdItem
													                     AND S.IdWhs = OLPS.IdWhs
													                     AND S.IdCtgItem = OLPS.IdCtgItem
													                     AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
						    ) &gt;= IU.ConversionFactor 
					AND (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty, 0)) 
													                  FROM v_Other_LocationPicking AS OLP 
													                 WHERE S.IdItem = OLP.IdItem 
													                   AND S.IdWhs = OLP.IdWhs 
													                   AND S.IdCtgItem = OLP.IdCtgItem
													                   AND L.IdLocCode = OLP.IdLocSourceProposal), 0) 
										          - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty, 0)) 
													                  FROM v_Other_LocationPicking_Sim AS OLPS 
													                 WHERE S.IdItem = OLPS.IdItem 
													                   AND S.IdWhs = OLPS.IdWhs 
													                   AND S.IdCtgItem = OLPS.IdCtgItem
													                   AND L.IdLocCode = OLPS.IdLocSourceProposal), 0)
						    ) &lt;= CASE WHEN (@itemQty / IU.ConversionFactor) &lt;= 0 
						              THEN 0 
								          ELSE IU.ConversionFactor * (@itemQty / IU.ConversionFactor) 
							        END
				      )
	      ORDER BY S.ExpirationDate ASC,
				         ItemQty ASC,
		             Ruta ASC		   
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Int">idItem</parameter>
		 <parameter type="String">lotNumber</parameter>
		 <parameter type="DateTime">fifo</parameter>
		 <parameter type="DateTime">expirationDate</parameter>
		 <parameter type="DateTime">fabricationDate</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="Decimal">itemQty</parameter>
     </parameters>
   </query>
   
   <query code="LocPickZoneFklUserItemLocationUsedForPut">
     <sql>
           SELECT TOP 1
			          ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
			          L.IdLocCode,
			          L.LocCode,
			          L.RowLoc,
			          L.ColumnLoc,
			          L.LevelLoc,
			          L.Aisle,
			          L.Status,
			          L.Description,
			          L.SharedItem,
			          L.OnlyLPN,
			          L.PickingFlow,
			          L.PutawayFlow,
			          L.CapacityLPN,
			          L.CapacityUnit,
			          L.Length,
			          L.Width,
			          L.Height,
			          L.Volume,
			          L.Weight,
			          L.LockInventory,
			          LT.IdLocType,
			          LT.LocTypeCode,
			          LT.LocTypeName,
			          LT.Status
           FROM Location L 
     INNER JOIN LocationType LT 
             ON L.LocTypeCode = LT.LocTypeCode 
     INNER JOIN WorkZoneLocation WZL 
             ON L.IdLocCode = WZL.IdLocCode 
     INNER JOIN WorkZoneItem WZI 
             ON WZL.IdWorkZone = WZI.IdWorkZone 
     INNER JOIN Stock S 
             ON L.IdLocCode = S.IdLocCode 
            AND WZI.IdItem = S.IdItem
          WHERE L.IdWhs = @idWhs
            AND L.LocTypeCode = 'PICK'
            AND L.HoldCode IS NULL
            AND L.LockInventory = 0
            AND S.IdItem = @idItem
            AND S.HoldCode IS NULL
	        AND NOT Exists (SELECT IdITem 
		                        FROM ItemLocation 
						               WHERE IdItem = @idItem)
            AND EXISTS(SELECT IDUserWms
                         FROM UserWorkZone UWZ 
                   INNER JOIN WorkZone WZ 
			                     ON UWZ.IdWorkZone = WZ.IdWorkZone 
			             INNER JOIN WorkZoneLocation WZL 
			                     ON WZ.IdWorkZone = WZL.IdWorkZone
                        WHERE UWZ.IdUserWms = @idUser
                          AND WZ.IdWhs = L.IdWhs
                          AND WZL.IdLocCode = L.IdLocCode)
             AND EXISTS(SELECT WZF.IdLocCode
                          FROM WorkZoneForkLift WZF 
                    INNER JOIN WorkZone WZ 
				                    ON WZF.IdWorkZone = WZ.IdWorkZone 
                    INNER JOIN WorkZoneLocation WZL 
				                    ON WZ.IdWorkZone = WZL.IdWorkZone
                         WHERE WZF.IdLocCode = @idForkLift
                           AND WZ.IdWhs = L.IdWhs
                           AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY L.IdLocCode,
			          L.PutawayFlow,
			          L.LocCode,
			          L.RowLoc,
			          L.ColumnLoc,
			          L.LevelLoc,
			          L.Aisle,
			          L.Status,
			          L.Description,
			          L.SharedItem,
			          L.OnlyLPN,
			          L.PickingFlow,
			          L.PutawayFlow,
			          L.CapacityLPN,
			          L.CapacityUnit,
			          L.Length,
			          L.Width,
			          L.Height,
			          L.Volume,
			          L.Weight,
			          L.LockInventory,
			          LT.IdLocType,
			          LT.LocTypeCode,
			          LT.LocTypeName,
			          LT.Status
	       HAVING L.CapacityUnit &gt;= (COALESCE((SELECT SUM(S.ItemQty) 
										                              FROM Stock S 
										                             WHERE IdLocCode = L.IdLocCode),0) 
							                      + COALESCE((SELECT SUM(S.ItemQty) 
							                                    FROM Stock S 
										                             WHERE IdLocCode = @idForkLift 
										                               AND IdItem = @idItem),0))
            ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>
   
   <query code="LocPickZoneFklUserItemLocationUsedForPutByCtg">
     <sql>
           SELECT TOP 1
			          ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
			          L.IdLocCode,
			          L.LocCode,
			          L.RowLoc,
			          L.ColumnLoc,
			          L.LevelLoc,
			          L.Aisle,
			          L.Status,
			          L.Description,
			          L.SharedItem,
			          L.OnlyLPN,
			          L.PickingFlow,
			          L.PutawayFlow,
			          L.CapacityLPN,
			          L.CapacityUnit,
			          L.Length,
			          L.Width,
			          L.Height,
			          L.Volume,
			          L.Weight,
			          L.LockInventory,
			          LT.IdLocType,
			          LT.LocTypeCode,
			          LT.LocTypeName,
			          LT.Status,
                S.IdCtgItem
           FROM Location L 
     INNER JOIN LocationType LT 
             ON L.LocTypeCode = LT.LocTypeCode 
     INNER JOIN WorkZoneLocation WZL 
             ON L.IdLocCode = WZL.IdLocCode 
     INNER JOIN WorkZoneItem WZI 
             ON WZL.IdWorkZone = WZI.IdWorkZone 
     INNER JOIN Stock S 
             ON L.IdLocCode = S.IdLocCode 
            AND WZI.IdItem = S.IdItem
          WHERE L.IdWhs = @idWhs
            AND L.LocTypeCode = 'PICK'
            AND L.HoldCode IS NULL
            AND L.LockInventory = 0
            AND S.IdItem = @idItem
            AND S.IdCtgItem = @idCtgItem
            AND S.HoldCode IS NULL
	        AND NOT Exists (SELECT IdITem 
		                        FROM ItemLocation 
						               WHERE IdItem = @idItem)
            AND EXISTS(SELECT IDUserWms
                         FROM UserWorkZone UWZ 
                   INNER JOIN WorkZone WZ 
			                     ON UWZ.IdWorkZone = WZ.IdWorkZone 
			             INNER JOIN WorkZoneLocation WZL 
			                     ON WZ.IdWorkZone = WZL.IdWorkZone
                        WHERE UWZ.IdUserWms = @idUser
                          AND WZ.IdWhs = L.IdWhs
                          AND WZL.IdLocCode = L.IdLocCode)
             AND EXISTS(SELECT WZF.IdLocCode
                          FROM WorkZoneForkLift WZF 
                    INNER JOIN WorkZone WZ 
				                    ON WZF.IdWorkZone = WZ.IdWorkZone 
                    INNER JOIN WorkZoneLocation WZL 
				                    ON WZ.IdWorkZone = WZL.IdWorkZone
                         WHERE WZF.IdLocCode = @idForkLift
                           AND WZ.IdWhs = L.IdWhs
                           AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY L.IdLocCode,
			          L.PutawayFlow,
			          L.LocCode,
			          L.RowLoc,
			          L.ColumnLoc,
			          L.LevelLoc,
			          L.Aisle,
			          L.Status,
			          L.Description,
			          L.SharedItem,
			          L.OnlyLPN,
			          L.PickingFlow,
			          L.PutawayFlow,
			          L.CapacityLPN,
			          L.CapacityUnit,
			          L.Length,
			          L.Width,
			          L.Height,
			          L.Volume,
			          L.Weight,
			          L.LockInventory,
			          LT.IdLocType,
			          LT.LocTypeCode,
			          LT.LocTypeName,
			          LT.Status,
                S.IdCtgItem
	       HAVING L.CapacityUnit &gt;= (COALESCE((SELECT SUM(S.ItemQty) 
										                              FROM Stock S 
										                             WHERE IdLocCode = L.IdLocCode),0) 
							                      + COALESCE((SELECT SUM(S.ItemQty) 
							                                    FROM Stock S 
										                             WHERE IdLocCode = @idForkLift 
										                               AND IdItem = @idItem),0))
            ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>
   
   <query code="LocPutItemNoZoneLessQtyCtgItemRepo">
     <sql>
			SELECT TOP 1
			       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
				     S.IdWhs,
				     S.IdOwn,
				     S.IdItem,
				     S.IdCtgItem,
				     (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
											                     FROM v_Other_LocationPicking AS OLP
											                    WHERE S.IdItem = OLP.IdItem
												                    AND S.IdWhs = OLP.IdWhs
												                    AND S.IdCtgItem = OLP.IdCtgItem
												                    AND L.IdLocCode = OLP.IdLocSourceProposal),0)
								             - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
											                     FROM v_Other_LocationPicking_Sim AS OLPS
											                    WHERE S.IdItem = OLPS.IdItem
												                    AND S.IdWhs = OLPS.IdWhs
												                    AND S.IdCtgItem = OLPS.IdCtgItem
												                    AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
				     ) AS ItemQty,
				     S.ExpirationDate,
				     S.IdLpnCode,
				     S.LpnTypeCode,
				     S.IdLpnCodeContainer,
				     S.LpnTypeCodeContainer,
				     L.IdLocCode,
				     L.LocCode,
				     L.RowLoc,
				     L.ColumnLoc,
				     L.LevelLoc,
				     L.Aisle,
				     L.Status,
				     L.Description,
				     L.SharedItem,
				     L.OnlyLPN,
				     L.PickingFlow,
				     L.PutawayFlow,
				     L.CapacityLPN,
				     L.CapacityUnit,
				     L.Length,
				     L.Width,
				     L.Height,
				     L.Volume,
				     L.Weight,
				     L.LockInventory,
				     LT.IdLocType,
				     LT.LocTypeCode,
				     LT.LocTypeName,
				     LT.Status
			  FROM Stock S
  INNER JOIN Location L 
		      ON L.IdLocCode = S.IdLocCode
			   AND L.IdWhs = S.IdWhs
  INNER JOIN LocationType LT 
		      ON L.LocTypeCode = LT.LocTypeCode
  INNER JOIN Item I 
		      ON I.IdItem = S.IdItem
		   WHERE S.IdItem = @idItem
			   AND S.IdWhs = @idWhs
			   AND S.IdCtgItem = @idCtgItem
			   AND L.LocTypeCode = 'PUT'
		     AND L.HoldCode IS NULL
			   AND S.HoldCode IS NULL
		     AND L.Status = 1
			   AND L.LockInventory = 0
			   AND (S.ExpirationDate &gt; GETDATE() + I.ShelfLife OR S.ExpirationDate IS NULL)
	  GROUP BY S.IdWhs,
				     S.IdOwn,
				     S.IdItem,
				     S.IdCtgItem,
				     L.PutawayFlow,
				     S.ExpirationDate,
				     S.IdLpnCode,
				     S.LpnTypeCode,
				     S.IdLpnCodeContainer,
				     S.LpnTypeCodeContainer,
				     L.IdLocCode,
				     L.LocCode,
				     L.RowLoc,
				     L.ColumnLoc,
				     L.LevelLoc,
				     L.Aisle,
				     L.Status,
				     L.Description,
				     L.SharedItem,
				     L.OnlyLPN,
				     L.PickingFlow,
				     L.PutawayFlow,
				     L.CapacityLPN,
				     L.CapacityUnit,
				     L.Length,
				     L.Width,
				     L.Height,
				     L.Volume,
				     L.Weight,
				     L.LockInventory,
				     LT.IdLocType,
				     LT.LocTypeCode,
				     LT.LocTypeName,
				     LT.Status
			HAVING (	(SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
													                    FROM v_Other_LocationPicking AS OLP
													                   WHERE S.IdItem = OLP.IdItem
													                     AND S.IdWhs = OLP.IdWhs
													                     AND S.IdCtgItem = OLP.IdCtgItem
													                     AND L.IdLocCode = OLP.IdLocSourceProposal),0)
										            - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
													                    FROM v_Other_LocationPicking_Sim AS OLPS
													                   WHERE S.IdItem = OLPS.IdItem
													                     AND S.IdWhs = OLPS.IdWhs
													                     AND S.IdCtgItem = OLPS.IdCtgItem
													                     AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
						    ) &gt; 0
					AND 
						  (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
													                  FROM v_Other_LocationPicking AS OLP
													                 WHERE S.IdItem = OLP.IdItem
													                   AND S.IdWhs = OLP.IdWhs
													                   AND S.IdCtgItem = OLP.IdCtgItem
													                   AND L.IdLocCode = OLP.IdLocSourceProposal),0)
										          - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
													                  FROM v_Other_LocationPicking_Sim AS OLPS
													                 WHERE S.IdItem = OLPS.IdItem
													                   AND S.IdWhs = OLPS.IdWhs
													                   AND S.IdCtgItem = OLPS.IdCtgItem
													                   AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
						  ) &lt;= @itemQty
				   )
	      ORDER BY S.ExpirationDate ASC,
				         ItemQty ASC,
		             Ruta ASC		   
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="Decimal">itemQty</parameter>
     </parameters>
   </query>
   
   <query code="LocPutItemNoZoneLessQtyUomCajaCtgItemRepo">
     <sql>
      SELECT TOP 1
			       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
				     S.IdWhs,
				     S.IdOwn,
				     S.IdItem,
				     S.IdCtgItem,
				     (IU.ConversionFactor * ROUND(((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty, 0)) 
																			                                   FROM v_Other_LocationPicking AS OLP 
																			                                  WHERE S.IdItem = OLP.IdItem 
																				                                  AND S.IdWhs = OLP.IdWhs 
																				                                  AND S.IdCtgItem = OLP.IdCtgItem
																				                                  AND L.IdLocCode = OLP.IdLocSourceProposal), 0)
																                         - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty, 0)) 
																			                                 FROM v_Other_LocationPicking_Sim AS OLPS 
																			                                WHERE S.IdItem = OLPS.IdItem 
																				                                AND S.IdWhs = OLPS.IdWhs
																				                                AND S.IdCtgItem = OLPS.IdCtgItem
																				                                AND L.IdLocCode = OLPS.IdLocSourceProposal), 0)
											              ) / IU.ConversionFactor),0,1)
				     ) AS ItemQty,
				     S.ExpirationDate,
				     S.IdLpnCode,
				     S.LpnTypeCode,
				     S.IdLpnCodeContainer,
				     S.LpnTypeCodeContainer,
				     L.IdLocCode,
				     L.LocCode,
				     L.RowLoc,
				     L.ColumnLoc,
				     L.LevelLoc,
				     L.Aisle,
				     L.Status,
				     L.Description,
				     L.SharedItem,
				     L.OnlyLPN,
				     L.PickingFlow,
				     L.PutawayFlow,
				     L.CapacityLPN,
				     L.CapacityUnit,
				     L.Length,
				     L.Width,
				     L.Height,
				     L.Volume,
				     L.Weight,
				     L.LockInventory,
				     LT.IdLocType,
				     LT.LocTypeCode,
				     LT.LocTypeName,
				     LT.Status
			  FROM Stock S
       INNER JOIN Location L 
		      ON L.IdLocCode = S.IdLocCode
			   AND L.IdWhs = S.IdWhs
  INNER JOIN LocationType LT 
		      ON L.LocTypeCode = LT.LocTypeCode
  INNER JOIN Item I 
		      ON I.IdItem = S.IdItem
  INNER JOIN ItemUom IU 
		      ON I.IdItem = IU.IdItem
		   WHERE S.IdItem = @idItem
			   AND S.IdWhs = @idWhs
			   AND S.IdCtgItem = @idCtgItem
			   AND L.LocTypeCode = 'PUT'
		     AND L.HoldCode IS NULL
			   AND S.HoldCode IS NULL
		     AND L.Status = 1
			   AND L.LockInventory = 0
			   AND (S.ExpirationDate &gt; GETDATE() + I.ShelfLife OR S.ExpirationDate IS NULL)
			   AND IU.UomName = 'Caja'
			   AND @itemQty &gt;= IU.ConversionFactor 
		GROUP BY S.IdWhs,
				     S.IdOwn,
				     S.IdItem,
				     S.IdCtgItem,
				     L.PutawayFlow,
				     S.ExpirationDate,
				     S.IdLpnCode,
				     S.LpnTypeCode,
				     S.IdLpnCodeContainer,
				     S.LpnTypeCodeContainer,
				     L.IdLocCode,
				     L.LocCode,
				     L.RowLoc,
				     L.ColumnLoc,
				     L.LevelLoc,
				     L.Aisle,
				     L.Status,
				     L.Description,
				     L.SharedItem,
				     L.OnlyLPN,
				     L.PickingFlow,
				     L.PutawayFlow,
				     L.CapacityLPN,
				     L.CapacityUnit,
				     L.Length,
				     L.Width,
				     L.Height,
				     L.Volume,
				     L.Weight,
				     L.LockInventory,
				     LT.IdLocType,
				     LT.LocTypeCode,
				     LT.LocTypeName,
				     LT.Status,
				     IU.ConversionFactor
			HAVING (
						    (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
													                    FROM v_Other_LocationPicking AS OLP
													                   WHERE S.IdItem = OLP.IdItem
													                     AND S.IdWhs = OLP.IdWhs
													                     AND S.IdCtgItem = OLP.IdCtgItem
													                     AND L.IdLocCode = OLP.IdLocSourceProposal),0)
									              - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
													                    FROM v_Other_LocationPicking_Sim AS OLPS
													                   WHERE S.IdItem = OLPS.IdItem
													                     AND S.IdWhs = OLPS.IdWhs
													                     AND S.IdCtgItem = OLPS.IdCtgItem
													                     AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
						    ) &gt;= IU.ConversionFactor 
					AND (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty, 0)) 
													                  FROM v_Other_LocationPicking AS OLP 
													                 WHERE S.IdItem = OLP.IdItem 
													                   AND S.IdWhs = OLP.IdWhs 
													                   AND S.IdCtgItem = OLP.IdCtgItem
													                   AND L.IdLocCode = OLP.IdLocSourceProposal), 0) 
										          - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty, 0)) 
													                  FROM v_Other_LocationPicking_Sim AS OLPS 
													                 WHERE S.IdItem = OLPS.IdItem 
													                   AND S.IdWhs = OLPS.IdWhs 
													                   AND S.IdCtgItem = OLPS.IdCtgItem
													                   AND L.IdLocCode = OLPS.IdLocSourceProposal), 0)
						    ) &lt;= CASE WHEN (@itemQty / IU.ConversionFactor) &lt;= 0 
						              THEN 0 
								          ELSE IU.ConversionFactor * (@itemQty / IU.ConversionFactor) 
							        END
				      )
	      ORDER BY S.ExpirationDate ASC,
				         ItemQty ASC,
		             Ruta ASC		   
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="Decimal">itemQty</parameter>
     </parameters>
   </query>
	 
  <!-- new rules-->
  <query code="LOCSTGHoldCodeZoneWithoutItemFilter">
     <sql>
       SELECT TOP 1
       ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
            LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
            WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
            WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
	   --Comtentada la restricción de HOLDCLODE. SF 10-12-2018
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
         AND L.LocTypeCode = 'STG'
         AND EXISTS(SELECT IDUserWms
                    FROM UserWorkZone UWZ INNER JOIN
                         WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE UWZ.IdUserWms = @idUser
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
         AND EXISTS(SELECT WZF.IdLocCode
                    FROM WorkZoneForkLift WZF INNER JOIN
                         WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
                         WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
                    WHERE WZF.IdLocCode = @idForkLift
                      AND WZ.IdWhs = L.IdWhs
                      AND WZL.IdLocCode = L.IdLocCode)
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
     <sub-querys>
       <sub-query code="ORDERBYRutaASC">
         <sql>
           ORDER BY Ruta ASC
         </sql>
         <parameters>
         </parameters>
       </sub-query>
     </sub-querys>
   </query>   
	 
  <query code="STKPUTItemNoZoneLessQtyByOutboundTypeCodeOrderByHangar">
     <sql>
		 SELECT TOP 1
		 ABS(L.PickingFlow - @pickingFlow) AS Ruta,
		 S.IdWhs,
		 S.IdOwn,
		 (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) AS ItemQty,
		 S.IdItem,
		 CASE
		 WHEN @idCtgItem IS NOT NULL THEN @idCtgItem
		 WHEN @idCtgItem IS NULL THEN S.IdCtgItem
		 END AS IdCategoryItem,
		 CASE
		 WHEN @lotNumber IS NOT NULL THEN @lotNumber
		 WHEN @lotNumber IS NULL THEN S.Lotnumber
		 END AS LotNumber,
		 CASE
		 WHEN  @fifoDate IS NOT NULL THEN @fifoDate
		 WHEN  @fifoDate IS NULL THEN S.FifoDate
		 END AS FifoDate,
		 CASE
		 WHEN @fabricationDate IS NOT NULL THEN @fabricationDate
		 WHEN @fabricationDate IS NULL THEN S.FabricationDate
		 END AS FabricationDate,
		 CASE
		 WHEN @expirationDate IS NOT NULL THEN @expirationDate
		 WHEN @expirationDate IS NULL THEN S.ExpirationDate
		 END AS ExpirationDate,
		 S.StockId,
		 S.IdLpnCode,
		 S.LpnTypeCode,
		 S.IdLpnCodeContainer,
		 S.LpnTypeCodeContainer,
		 L.IdLocCode,
		 L.LocCode,
		 L.RowLoc,
		 L.ColumnLoc,
		 L.LevelLoc,
		 L.Aisle,L.Status,
		 L.Description,
		 L.SharedItem,
		 L.OnlyLPN,
		 L.PickingFlow,
		 L.PutawayFlow,
		 L.CapacityLPN,
		 L.CapacityUnit,
		 L.Length,
		 L.Width,
		 L.Height,
		 L.Volume,
		 L.Weight,
		 L.LockInventory,
		 LT.IdLocType,
		 LT.LocTypeCode,
		 LT.LocTypeName,
		 LT.Status
		 FROM Stock S
		 INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
		 INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		 INNER JOIN Item I ON I.IdItem = S.IdItem
		 -- Stock Reserve by Customer
		 LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
		 AND S.IdWhs = OQRC.IdWhs
		 AND S.IdOwn = OQRC.IdOwn
		 AND OQRC.CustomerCode &lt;&gt; @customerCode
		 WHERE S.IdWhs = L.IdWhs
		 AND S.IdItem = @idItem
		 AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
		 AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
		 AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
		 AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
		 AND ((S.ExpirationDate = @expirationDate AND @expirationDate IS NOT NULL)OR(@expirationDate IS NULL))
		 AND S.IdWhs = @idWhs
		 AND L.LocTypeCode = 'PUT'
		 AND L.HoldCode IS NULL
		 AND L.Status = 1
		 AND L.LockInventory = 0
		 AND S.HoldCode IS NULL
		 -- Validación de documento TR. 15-11-2018 Sebastián Flores
		 AND @outboundTypeCodeDoc = @outboundTypeCode
		 GROUP BY
		 S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		 L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		 L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		 L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		 LT.LocTypeName, LT.Status, L.IdHng, S.StockId, IdCtgItem, LotNumber, FifoDate, FabricationDate, ExpirationDate
		 HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) &gt; 0
		 AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) &lt;= @itemQty
		 -- Ordenamiento de Hangar DESC. 12-02-2019. Sebastián Flores
		 ORDER BY L.IdHng DESC,ItemQty,S.StockId DESC
	 </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="DateTime">fifoDate</parameter>
       <parameter type="DateTime">fabricationDate</parameter>
       <parameter type="DateTime">expirationDate</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="String">outboundTypeCode</parameter>
       <parameter type="String">outboundTypeCodeDoc</parameter>
     </parameters>
   </query>
	 
  <query code="STKPUTItemNoZoneGreaterQtyByOutboundTypeCodeOrderByHangar">	
     <sql>
		 SELECT TOP 1
		 ABS(L.PickingFlow - @pickingFlow) AS Ruta,
		 S.IdWhs,
		 S.IdOwn,
		 (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) AS ItemQty,
		 S.IdItem,
		 CASE
		 WHEN @idCtgItem IS NOT NULL THEN @idCtgItem
		 WHEN @idCtgItem IS NULL THEN S.IdCtgItem
		 END AS IdCategoryItem,
		 CASE
		 WHEN @lotNumber IS NOT NULL THEN @lotNumber
		 WHEN @lotNumber IS NULL THEN S.Lotnumber
		 END AS LotNumber,
		 CASE
		 WHEN  @fifoDate IS NOT NULL THEN @fifoDate
		 WHEN  @fifoDate IS NULL THEN S.FifoDate
		 END AS FifoDate,
		 CASE
		 WHEN @fabricationDate IS NOT NULL THEN @fabricationDate
		 WHEN @fabricationDate IS NULL THEN S.FabricationDate
		 END AS FabricationDate,
		 CASE
		 WHEN @expirationDate IS NOT NULL THEN @expirationDate
		 WHEN @expirationDate IS NULL THEN S.ExpirationDate
		 END AS ExpirationDate,
		 S.StockId,
		 S.IdLpnCode,
		 S.LpnTypeCode,
		 S.IdLpnCodeContainer,
		 S.LpnTypeCodeContainer,
		 L.IdLocCode,
		 L.LocCode,
		 L.RowLoc,
		 L.ColumnLoc,
		 L.LevelLoc,
		 L.Aisle,L.Status,
		 L.Description,
		 L.SharedItem,
		 L.OnlyLPN,
		 L.PickingFlow,
		 L.PutawayFlow,
		 L.CapacityLPN,
		 L.CapacityUnit,
		 L.Length,
		 L.Width,
		 L.Height,
		 L.Volume,
		 L.Weight,
		 L.LockInventory,
		 LT.IdLocType,
		 LT.LocTypeCode,
		 LT.LocTypeName,
		 LT.Status
		 FROM Stock S
		 INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
		 INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		 INNER JOIN Item I ON I.IdItem = S.IdItem
		 -- Stock Reserve by Customer
		 LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
		 AND S.IdWhs = OQRC.IdWhs
		 AND S.IdOwn = OQRC.IdOwn
		 AND OQRC.CustomerCode &lt;&gt; @customerCode
		 WHERE S.IdWhs = L.IdWhs
		 AND S.IdItem = @idItem
		 AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
		 AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
		 AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
		 AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
		 AND ((S.ExpirationDate = @expirationDate AND @expirationDate IS NOT NULL)OR(@expirationDate IS NULL))
		 AND S.IdWhs = @idWhs
		 AND L.LocTypeCode = 'PUT'
		 AND L.HoldCode IS NULL
		 AND L.Status = 1
		 AND L.LockInventory = 0
		 AND S.HoldCode IS NULL
		 -- Validación de documento TR. 15-11-2018 Sebastián Flores
		 AND @outboundTypeCodeDoc = @outboundTypeCode
		 GROUP BY
		 S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		 L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		 L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		 L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		 LT.LocTypeName, LT.Status, L.IdHng, S.StockId, IdCtgItem, LotNumber, FifoDate, FabricationDate, ExpirationDate
		 HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) &gt;= @itemQty
		 --ORDER BY ItemQty DESC, Ruta ASC
		 -- Ordenamiento de Hangar DESC. 12-02-2019. Sebastián Flores
		 ORDER BY L.IdHng DESC,ItemQty,S.StockId DESC
	 </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="DateTime">fifoDate</parameter>
       <parameter type="DateTime">fabricationDate</parameter>
       <parameter type="DateTime">expirationDate</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="String">outboundTypeCode</parameter>
       <parameter type="String">outboundTypeCodeDoc</parameter>
     </parameters>
   </query>
	 
  <query code="STKPUTItemNoZoneLessQtyRepoItem">
     <sql>
		 SELECT TOP 1
		 ABS(L.PickingFlow - @pickingFlow) AS Ruta,
		 S.IdWhs,
		 S.IdOwn,
		 (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) AS ItemQty,
		 S.IdItem,
		 CASE
		 WHEN @idCtgItem IS NOT NULL THEN @idCtgItem
		 WHEN @idCtgItem IS NULL THEN S.IdCtgItem
		 END AS IdCategoryItem,
		 CASE
		 WHEN @lotNumber IS NOT NULL THEN @lotNumber
		 WHEN @lotNumber IS NULL THEN S.Lotnumber
		 END AS LotNumber,
		 CASE
		 WHEN  @fifoDate IS NOT NULL THEN @fifoDate
		 WHEN  @fifoDate IS NULL THEN S.FifoDate
		 END AS FifoDate,
		 CASE
		 WHEN @fabricationDate IS NOT NULL THEN @fabricationDate
		 WHEN @fabricationDate IS NULL THEN S.FabricationDate
		 END AS FabricationDate,
		 CASE
		 WHEN @expirationDate IS NOT NULL THEN @expirationDate
		 WHEN @expirationDate IS NULL THEN S.ExpirationDate
		 END AS ExpirationDate,
		 S.StockId,
		 S.IdLpnCode,
		 S.LpnTypeCode,
		 S.IdLpnCodeContainer,
		 S.LpnTypeCodeContainer,
		 L.IdLocCode,
		 L.LocCode,
		 L.RowLoc,
		 L.ColumnLoc,
		 L.LevelLoc,
		 L.Aisle,L.Status,
		 L.Description,
		 L.SharedItem,
		 L.OnlyLPN,
		 L.PickingFlow,
		 L.PutawayFlow,
		 L.CapacityLPN,
		 L.CapacityUnit,
		 L.Length,
		 L.Width,
		 L.Height,
		 L.Volume,
		 L.Weight,
		 L.LockInventory,
		 LT.IdLocType,
		 LT.LocTypeCode,
		 LT.LocTypeName,
		 LT.Status
		 FROM Stock S
		 INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
		 INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		 INNER JOIN Item I ON I.IdItem = S.IdItem
		 -- Stock Reserve by Customer
		 LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
		 AND S.IdWhs = OQRC.IdWhs
		 AND S.IdOwn = OQRC.IdOwn
		 AND OQRC.CustomerCode &lt;&gt; @customerCode
		 WHERE S.IdWhs = L.IdWhs
		 AND S.IdItem = @idItem
		 AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
		 AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
		 AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
		 AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
		 AND ((S.ExpirationDate = @expirationDate AND @expirationDate IS NOT NULL)OR(@expirationDate IS NULL))
		 AND S.IdWhs = @idWhs
		 AND L.LocTypeCode = 'PUT'
		 AND L.HoldCode IS NULL
		 AND L.Status = 1
		 AND L.LockInventory = 0
		 AND S.HoldCode IS NULL
		 GROUP BY
		 S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		 L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		 L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		 L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		 LT.LocTypeName, LT.Status, S.StockId, IdCtgItem, LotNumber, FifoDate, FabricationDate, ExpirationDate
		 HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) &gt; 0
		 AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) &lt;= @itemQty
		 ORDER BY ItemQty ASC, Ruta ASC, S.StockId DESC
	 </sql>
    <parameters>
      <parameter type="Int">pickingFlow</parameter>
      <parameter type="Decimal">itemQty</parameter>
      <parameter type="Int">idItem</parameter>
      <parameter type="Int">idCtgItem</parameter>
      <parameter type="String">lotNumber</parameter>
      <parameter type="DateTime">fifoDate</parameter>
      <parameter type="DateTime">fabricationDate</parameter>
      <parameter type="DateTime">expirationDate</parameter>
      <parameter type="Int">idWhs</parameter>
      <parameter type="String">customerCode</parameter>
    </parameters>
   </query>
	 
  <query code="STKPUTItemNoZoneGreaterQtyRepoItem">
     <sql>
		 SELECT TOP 1
		 ABS(L.PickingFlow - @pickingFlow) AS Ruta,
		 S.IdWhs,
		 S.IdOwn,
		 (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0))))  AS ItemQty,
		 S.IdItem,
		 CASE
		 WHEN @idCtgItem IS NOT NULL THEN @idCtgItem
		 WHEN @idCtgItem IS NULL THEN S.IdCtgItem
		 END AS IdCategoryItem,
		 CASE
		 WHEN @lotNumber IS NOT NULL THEN @lotNumber
		 WHEN @lotNumber IS NULL THEN S.Lotnumber
		 END AS LotNumber,
		 CASE
		 WHEN  @fifoDate IS NOT NULL THEN @fifoDate
		 WHEN  @fifoDate IS NULL THEN S.FifoDate
		 END AS FifoDate,
		 CASE
		 WHEN @fabricationDate IS NOT NULL THEN @fabricationDate
		 WHEN @fabricationDate IS NULL THEN S.FabricationDate
		 END AS FabricationDate,
		 CASE
		 WHEN @expirationDate IS NOT NULL THEN @expirationDate
		 WHEN @expirationDate IS NULL THEN S.ExpirationDate
		 END AS ExpirationDate,
		 S.StockId,
		 S.IdLpnCode,
		 S.LpnTypeCode,
		 S.IdLpnCodeContainer,
		 S.LpnTypeCodeContainer,
		 L.IdLocCode,
		 L.LocCode,
		 L.RowLoc,
		 L.ColumnLoc,
		 L.LevelLoc,
		 L.Aisle,L.Status,
		 L.Description,
		 L.SharedItem,
		 L.OnlyLPN,
		 L.PickingFlow,
		 L.PutawayFlow,
		 L.CapacityLPN,
		 L.CapacityUnit,
		 L.Length,
		 L.Width,
		 L.Height,
		 L.Volume,
		 L.Weight,
		 L.LockInventory,
		 LT.IdLocType,
		 LT.LocTypeCode,
		 LT.LocTypeName,
		 LT.Status
		 FROM Stock S
		 INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
		 INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
		 INNER JOIN Item I ON I.IdItem = S.IdItem
		 -- Stock Reserve by Customer
		 LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
		 AND S.IdWhs = OQRC.IdWhs
		 AND S.IdOwn = OQRC.IdOwn
		 AND OQRC.CustomerCode &lt;&gt; @customerCode
		 WHERE S.IdWhs = L.IdWhs
		 AND S.IdItem = @idItem
		 AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
		 AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
		 AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
		 AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
		 AND ((S.ExpirationDate = @expirationDate AND @expirationDate IS NOT NULL)OR(@expirationDate IS NULL))
		 AND S.IdWhs = @idWhs
		 AND L.LocTypeCode = 'PUT'
		 AND L.HoldCode IS NULL
		 AND L.Status = 1
		 AND L.LockInventory = 0
		 AND S.HoldCode IS NULL
		 GROUP BY
		 S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		 L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		 L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		 L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		 LT.LocTypeName, LT.Status, S.StockId, IdCtgItem, LotNumber, FifoDate, FabricationDate, ExpirationDate
		 HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		 FROM v_Other_LocationPicking AS OLP
		 WHERE S.IdItem = OLP.IdItem
		 AND S.IdWhs = OLP.IdWhs
		 AND L.IdLocCode = OLP.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
		 OR(OLP.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLP.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLP.LotNumber IS NULL))
		 AND ((S.FifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLP.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLP.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLP.expirationDate IS NULL))
		 ),0)
		 + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		 FROM v_Other_LocationPicking_Sim AS OLPS
		 WHERE S.IdItem = OLPS.IdItem
		 AND S.IdWhs = OLPS.IdWhs
		 AND L.IdLocCode = OLPS.IdLocSourceProposal
		 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
		 OR(OLPS.IdLpnSourceProposal IS NULL))
		 AND ((S.IdCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND S.IdCtgItem IS NOT NULL)
		 OR(S.IdCtgItem IS NULL)
		 OR(OLPS.IdCtgItem IS NULL))
		 AND ((S.LotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
		 OR(S.LotNumber IS NULL)
		 OR(OLPS.LotNumber IS NULL))
		 AND ((S.FifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND S.FifoDate IS NOT NULL)
		 OR(S.FifoDate IS NULL)
		 OR(OLPS.FifoDate IS NULL))
		 AND ((S.FabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND S.FabricationDate IS NOT NULL)
		 OR(S.FabricationDate IS NULL)
		 OR(OLPS.FabricationDate IS NULL))
		 AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
		 OR(S.ExpirationDate IS NULL)
		 OR(OLPS.expirationDate IS NULL))
		 ),0)))) &gt;= @itemQty
		 ORDER BY ItemQty ASC, Ruta ASC , S.StockId DESC
	 </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idCtgItem</parameter>
       <parameter type="String">lotNumber</parameter>
       <parameter type="DateTime">fifoDate</parameter>
       <parameter type="DateTime">fabricationDate</parameter>
       <parameter type="DateTime">expirationDate</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>
	 
  <query code="STKPUTItemNoZoneLessQtyUomCajaOrderByFifo">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (IU.ConversionFactor * ROUND(((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                                                 FROM v_Other_LocationPicking AS OLP
                                                                 WHERE S.IdItem = OLP.IdItem
																   AND S.IdWhs = OLP.IdWhs
                                                                   AND L.IdLocCode = OLP.IdLocSourceProposal),0)
                                                     - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                                                 FROM v_Other_LocationPicking_Sim AS OLPS
                                                                 WHERE S.IdItem = OLPS.IdItem
																   AND S.IdWhs = OLPS.IdWhs
                                                                   AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       )/IU.ConversionFactor),0,1)) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
                                                         AND S.IdWhs = OQRC.IdWhs
                                                         AND S.IdOwn = OQRC.IdOwn
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.Status = 1
         AND L.LockInventory = 0
         AND S.HoldCode IS NULL
         AND IU.UomName = 'Caja'
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode, 
       LT.LocTypeName, LT.Status, IU.ConversionFactor, S.FifoDate
       HAVING ((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal),0)
                               - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										    AND S.IdWhs = OLPS.IdWhs
                                            AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
                ) &gt;= IU.ConversionFactor
           AND (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal),0)
                               - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										     AND S.IdWhs = OLPS.IdWhs
                                             AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
                ) &lt;= CASE WHEN (@itemQty/IU.ConversionFactor) &lt;= 0 
                             THEN 0 
                             ELSE IU.ConversionFactor * (@itemQty/IU.ConversionFactor) 
                             END
              )
       ORDER BY ItemQty DESC, S.FifoDate ASC,Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>
	 
  <query code="LOCPUTItemZoneFromClosestPrimLoc">
     <sql>
       SELECT TOP 1
	   ABS(L.PutawayFlow - (select PutawayFlow from Location where IdLocCode in (select top 1 IdLocCode from ItemLocation where IdItem = @idItem))) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
       WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone INNER JOIN
       Stock S ON L.IdLocCode = S.IdLocCode AND WZI.IdItem = S.IdItem
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND S.IdItem = @idItem
       AND S.HoldCode IS NULL
       AND EXISTS(SELECT IDUserWms
					   FROM UserWorkZone UWZ INNER JOIN
					   WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
					   WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
					   WHERE UWZ.IdUserWms = @idUser
					   AND WZ.IdWhs = L.IdWhs
					   AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
					   FROM WorkZoneForkLift WZF INNER JOIN
					   WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
					   WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
					   WHERE WZF.IdLocCode = @idForkLift
					   AND WZ.IdWhs = L.IdWhs
					   AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY  L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       HAVING L.CapacityLPN > (SELECT COUNT(DISTINCT S.IdLpnCode) FROM Stock S WHERE IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>	 
	 
  <query code="LOCPUTEmptyZoneFromClosestPrimLoc">
     <sql>
       SELECT TOP 1
	   -- Actualiza condición para que busque una ubicación cercana a ubicación primaria
       ABS(L.PutawayFlow - (select PutawayFlow from Location where IdLocCode in (select top 1 IdLocCode from ItemLocation where IdItem = @idItem))) AS Ruta,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Location L INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode INNER JOIN
       WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
       WHERE L.IdWhs = @idWarehouse
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.LockInventory = 0
       AND WZI.IdItem = @idItem
       AND NOT EXISTS(SELECT S.IdLocCode
       FROM Stock S
       WHERE S.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
       FROM WorkZoneForkLift WZF INNER JOIN
       WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE WZF.IdLocCode = @idForkLift
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY  L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       HAVING L.CapacityLPN > (SELECT COUNT(DISTINCT S.IdLpnCode) FROM Stock S WHERE IdLocCode = L.IdLocCode)
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>
	 
  <query code="LOCPUTItmSharedZoneMaqUserFromClosestPrimLoc">
     <sql>
       SELECT TOP 1
          ABS(L.PutawayFlow - (select PutawayFlow from Location where IdLocCode in (select top 1 IdLocCode    Code from ItemLocation where IdItem = @idItem))) AS Ruta,
       L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status, L.Description, L.SharedItem, L.OnlyLPN,
       L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit, L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory,
       LT.IdLocType, LT.LocTypeCode, LT.LocTypeName, LT.Status
       FROM Stock S
                    INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
                    INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode  
                    INNER JOIN WorkZoneLocation WZL ON WZL.IdLocCode = L.IdLocCode
       WHERE L.IdWhs = @idWarehouse
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.LockInventory = 0
		 AND L.SharedItem = 1 
         AND S.HoldCode IS NULL
             AND WZL.IdWorkZone IN (Select IdWorkZone From WorkZoneItem Where IdItem = @idItem)
             AND WZL.IdWorkZone IN (Select IdWorkZone FROM UserWorkZone Where IdUserWms = @idUser)
             AND WZL.IdWorkZone IN (Select IdWorkZone FROM WorkZoneForkLift Where IdLocCode = @idForkLift) 
       GROUP BY L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status, L.Description, L.SharedItem, L.OnlyLPN,
       L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit, L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory,
       LT.IdLocType, LT.LocTypeCode, LT.LocTypeName, LT.Status
          Having L.CapacityLPN >  COUNT(DISTINCT S.IdLpnCode) 
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>
	 
  <query code="STKPUTItemNoZoneQtyGreaterThanMaxPrimaryLocGreaterQtyOrderByFifo">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
										FROM v_Other_LocationPicking AS OLP
											WHERE S.IdItem = OLP.IdItem AND L.IdLocCode = OLP.IdLocSourceProposal
											AND S.IdWhs = OLP.IdWhs
											AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
											OR(OLP.IdLpnSourceProposal IS NULL))),0)
						+ (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
										FROM v_Other_LocationPicking_Sim AS OLPS
											WHERE S.IdItem = OLPS.IdItem
											AND S.IdWhs = OLPS.IdWhs
											AND L.IdLocCode = OLPS.IdLocSourceProposal
											AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
											OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN (SELECT TOP 1 IdItem, ReOrderPoint, ReOrderQty
						FROM ItemLocation
						   WHERE IdItem = @idItem) IL ON IL.IdItem = I.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
					   AND S.IdWhs = OQRC.IdWhs
					   AND S.IdOwn = OQRC.IdOwn
					   AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
	   -- Actualizada DREYES 2019-08-05 para que busque stock basado en la diferencia entre maximo y minimo
	   AND COALESCE((IL.ReOrderQty - IL.ReOrderPoint),0) &lt;= @itemQty
       GROUP BY
		   S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
		   L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
		   L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
		   L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
		   LT.LocTypeName, LT.Status ,S.FifoDate
      HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                           FROM v_Other_LocationPicking AS OLP
                                           WHERE S.IdItem = OLP.IdItem
										     AND S.IdWhs = OLP.IdWhs
                                             AND L.IdLocCode = OLP.IdLocSourceProposal
                                             AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
                                                OR(OLP.IdLpnSourceProposal IS NULL))),0)
                             + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                          FROM v_Other_LocationPicking_Sim AS OLPS
                                          WHERE S.IdItem = OLPS.IdItem
										    AND S.IdWhs = OLPS.IdWhs
                                            AND L.IdLocCode = OLPS.IdLocSourceProposal
                                            AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
                                               OR(OLPS.IdLpnSourceProposal IS NULL))
               ),0)))) > 0
       ORDER BY FifoDate ASC, ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>
	 
  <query code="STKPICKItemNoZoneLessQtyPlanUnidLotOrderByFifo">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       L.IdWhs,
       I.IdOwn,
       (SUM(SP.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE I.IdItem = OLP.IdItem
	   AND L.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal),0)
       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE I.IdItem = OLPS.IdItem
	   AND L.IdWhs = OLPs.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       ) AS ItemQty,
       I.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       -- 2019-09-23 DREYES para no ser estrictos en lote s.lotNumber,
       s.fabricationDate,
       s.expirationDate
       FROM ItemLocation IL LEFT JOIN
       (SELECT S.IdWhs, S.IdOwn, S.IdItem, SUM(ItemQty) ItemQty, S.LotNumber
       FROM Stock S INNER JOIN
       Location L ON S.IdLocCode = L.IdLocCode
       WHERE ((L.LocTypeCode = 'PICK'  AND L.OnlyLPN = 0) OR
       (L.LocTypeCode = 'PUT'  AND L.OnlyLPN = 1))
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
       GROUP BY S.IdWhs, S.IdOwn, S.IdItem, S.LotNumber) SP ON IL.IdItem = SP.IdItem INNER JOIN
       Location L ON L.IdLocCode = IL.IdLocCode INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Item I ON I.IdItem = IL.IdItem LEFT JOIN
       Stock S ON S.IdWhs = L.IdWhs
       AND S.IdOwn = I.IdOwn
       AND S.IdItem = I.IdItem
       AND S.IdLocCode = IL.IdLocCode LEFT OUTER JOIN
       -- Stock Reserve by Customer
       v_Other_QtyReserveCustomer AS OQRC ON I.IdItem = OQRC.IdItem
       AND L.IdWhs = OQRC.IdWhs
       AND I.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE IL.IdItem = @idItem
       AND L.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND L.OnlyLPN = 0
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       -- AND S.LotNumber IS NOT NULL
       -- AND S.ExpirationDate IS NOT NULL
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
       GROUP BY
       L.IdWhs, I.IdOwn, I.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status,s.lotNumber,s.fabricationDate, s.expirationDate,S.FIFODATE,SP.ItemQty
       HAVING (
       (SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE I.IdItem = OLP.IdItem
	   AND L.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal),0))
       - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE I.IdItem = OLPS.IdItem
	   AND L.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)) &gt; 0)
       AND (SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE I.IdItem = OLP.IdItem
	   AND L.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal),0))
       - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE I.IdItem = OLPS.IdItem
	   AND L.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)) &lt;= @itemQty)
       )
       ORDER BY S.FIFODATE asc, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Decimal">itemQty</parameter>
     </parameters>
   </query>
	 
  <query code="STKPICKItemNoZoneGreaterQtyPlanUnidLotOrderByFifo">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       L.IdWhs,
       I.IdOwn,
       @itemQty1 AS ItemQty,
       I.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       -- 2019-09-23 DREYES para no ser estrictos en lote S.LotNumber,
       S.FabricationDate,
       S.ExpirationDate
       FROM ItemLocation IL LEFT JOIN
       (SELECT S.IdWhs, S.IdOwn, S.IdItem, SUM(ItemQty) ItemQty
       FROM Stock S INNER JOIN
       Location L ON S.IdLocCode = L.IdLocCode
       WHERE ((L.LocTypeCode = 'PICK'  AND L.OnlyLPN = 0) OR
       (L.LocTypeCode = 'PUT'  AND L.OnlyLPN = 1))
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
       GROUP BY S.IdWhs, S.IdOwn, S.IdItem) SP ON IL.IdItem = SP.IdItem INNER JOIN
       Location L ON L.IdLocCode = IL.IdLocCode INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Item I ON I.IdItem = IL.IdItem LEFT JOIN
       Stock S ON S.IdWhs = L.IdWhs
       AND S.IdOwn = I.IdOwn
       AND S.IdItem = I.IdItem
       AND S.IdLocCode = IL.IdLocCode LEFT OUTER JOIN
       -- Stock Reserve by Customer
       v_Other_QtyReserveCustomer AS OQRC ON I.IdItem = OQRC.IdItem
       AND L.IdWhs = OQRC.IdWhs
       AND I.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode LEFT JOIN
       (SELECT IdItem, IdLocSourceProposal, IdWhs, SUM(COALESCE(ItemQty,0)) ItemQty
       FROM v_Other_LocationPicking
       GROUP BY IdItem, IdLocSourceProposal, IdWhs) VOLP ON I.IdItem = VOLP.IdItem
	   AND L.IdWhs = VOLP.IdWhs
       AND L.IdLocCode = VOLP.IdLocSourceProposal LEFT JOIN
       (SELECT IdItem, IdLocSourceProposal, IdWhs, SUM(COALESCE(ItemQty,0)) ItemQty,LotNumber
       FROM v_Other_LocationPicking_Sim
       GROUP BY IdItem, IdLocSourceProposal,LotNumber, IdWhs) VOLPS ON I.IdItem = VOLPS.IdItem
	   AND L.IdWhs = VOLPS.IdWhs
       AND L.IdLocCode = VOLPS.IdLocSourceProposal
       WHERE IL.IdItem = @idItem
       AND L.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND L.OnlyLPN = 0
       AND L.HoldCode IS NULL
       AND L.Status = 1
       --AND S.LotNumber IS NOT NULL
       -- AND S.LotNumber &lt;&gt; VOLPS.LotNumber
       AND L.LockInventory = 0
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
       GROUP BY
       L.IdWhs, I.IdOwn, I.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status,S.LotNumber,S.FabricationDate,S.ExpirationDate, S.FifoDate
       HAVING (SUM(SP.ItemQty) - COALESCE(SUM(VOLP.ItemQty),0) - COALESCE(SUM(VOLPS.ItemQty),0)) &gt;= @itemQty2
       ORDER BY S.FifoDate ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty1</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Decimal">itemQty2</parameter>
     </parameters>
   </query>
	 
  <query code="STKPUTNearbyPrimaryLocItemZoneLessQtyOrderByFifo">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - (select PickingFlow from Location where IdLocCode in (select top 1 IdLocCode from ItemLocation where IdItem = @idItem))) AS Ruta,
       S.StockId,
       S.IdWhs,
       S.IdOwn,
       SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) AS ItemQty,
       S.IdCtgItem,
       S.IdItem,
       S.Status,
       S.FifoDate,
       S.ExpirationDate,
       S.FabricationDate,
       S.LotNumber,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       S.Price,
       S.IdReceipt,
       S.IdInboundOrder,
       S.InboundLineNumber,
       S.IdOutboundOrder,
       S.OutboundLineNumber,
       S.SealNumber,
       S.ReasonCode,
       S.HoldCode,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
       -- Stock en Tareas Pendientes
       LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND S.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))
       -- Stock en Tareas Simuladas
       LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND S.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt; 0
       AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &lt;= @itemQty
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
       FROM WorkZoneForkLift WZF INNER JOIN
       WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE WZF.IdLocCode = @idForkLift
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY
       S.StockId, S.IdWhs, S.IdOwn, S.IdCtgItem, S.IdItem, S.Status, S.FifoDate, S.ExpirationDate, S.FabricationDate,
       S.LotNumber, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer, S.Price, S.IdReceipt,
       S.IdInboundOrder, S.InboundLineNumber, S.IdOutboundOrder, S.OutboundLineNumber, S.SealNumber, S.ReasonCode,
       S.HoldCode, L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle,
       L.Status, L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status
       ORDER BY S.FifoDate ASC, Ruta ASC, ItemQty ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>
	 
  <query code="STKPUTNearbyPrimaryLocItemZoneGreaterQtyOrderByFifo">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - (select PickingFlow from Location where IdLocCode in (select top 1 IdLocCode from ItemLocation where IdItem = @idItem))) AS Ruta,
       S.StockId,
       S.IdWhs,
       S.IdOwn,
       SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) AS ItemQty,
       S.IdCtgItem,
       S.IdItem,
       S.Status,
       S.FifoDate,
       S.ExpirationDate,
       S.FabricationDate,
       S.LotNumber,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       S.Price,
       S.IdReceipt,
       S.IdInboundOrder,
       S.InboundLineNumber,
       S.IdOutboundOrder,
       S.OutboundLineNumber,
       S.SealNumber,
       S.ReasonCode,
       S.HoldCode,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
       -- Stock en Tareas Pendientes
       LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem
	   AND S.IdWhs = OLP.IdWhs
       AND S.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))
       -- Stock en Tareas Simuladas
       LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem
	   AND S.IdWhs = OLPS.IdWhs
       AND S.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       -- Stock Reserve by Customer
       --LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem AND
       --S.IdWhs = OQRC.IdWhs AND S.IdOwn = OQRC.IdOwn AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt;= @itemQty
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND EXISTS(SELECT IDUserWms
       FROM UserWorkZone UWZ INNER JOIN
       WorkZone WZ ON UWZ.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE UWZ.IdUserWms = @idUser
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       AND EXISTS(SELECT WZF.IdLocCode
       FROM WorkZoneForkLift WZF INNER JOIN
       WorkZone WZ ON WZF.IdWorkZone = WZ.IdWorkZone INNER JOIN
       WorkZoneLocation WZL ON WZ.IdWorkZone = WZL.IdWorkZone
       WHERE WZF.IdLocCode = @idForkLift
       AND WZ.IdWhs = L.IdWhs
       AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY
       S.StockId, S.IdWhs, S.IdOwn, S.IdCtgItem, S.IdItem, S.Status, S.FifoDate, S.ExpirationDate, S.FabricationDate,
       S.LotNumber, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer, S.Price, S.IdReceipt,
       S.IdInboundOrder, S.InboundLineNumber, S.IdOutboundOrder, S.OutboundLineNumber, S.SealNumber, S.ReasonCode,
       S.HoldCode, L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle,
       L.Status, L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status
       ORDER BY S.FifoDate ASC, Ruta ASC, ItemQty ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>
	 
  <query code="STKPUTItemNoZoneQtyGreaterThanMaxPrimaryLocGreaterQtyLotFabExpOrderByFifo">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	AND OLP.IDWHS= @idwhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	AND OLPS.Idwhs=@IDWHS
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       S.FifoDate
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN (SELECT TOP 1 IdItem, ReOrderPoint, ReOrderQty
       FROM ItemLocation
       WHERE IdItem = @idItem) IL ON IL.IdItem = I.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND IL.ReOrderQty - IL.ReOrderPoint &lt;= @itemQty
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status ,S.FifoDate
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	AND OLP.idwhs=@idwhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
       AND OLPS.idwhs=@idwhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) &gt;= @itemQty
       ORDER BY FifoDate ASC, ItemQty DESC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>
	 
  <query code="STKPUTItemNoZoneQtyGreaterThanMaxPriLocLessQtyOrderByFifo">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       S.IdWhs,
       S.IdOwn,
       (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	 AND OLP.IdWhs = @idWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	AND OLPS.idwhs=@idwhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) AS ItemQty,
       S.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status,
       S.FifoDate
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN (SELECT TOP 1 IdItem, ReOrderPoint, ReOrderQty
       FROM ItemLocation
       WHERE IdItem = @idItem) IL ON IL.IdItem = I.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
       AND S.IdWhs = OQRC.IdWhs
       AND S.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
       AND S.IdItem = @idItem
       AND S.IdWhs = @idWhs
       AND L.LocTypeCode = 'PUT'
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       AND IL.ReOrderQty - IL.ReOrderPoint &lt;= @itemQty
       GROUP BY
       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status,S.FifoDate
       HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	AND OLP.idwhs=@idwhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	AND OLPS.idwhs=@idwhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) &gt; 0
       AND (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE S.IdItem = OLP.IdItem
	AND OLP.idwhs=@idwhs
       AND L.IdLocCode = OLP.IdLocSourceProposal
       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL)
       OR(OLP.IdLpnSourceProposal IS NULL))),0)
       + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE S.IdItem = OLPS.IdItem
	AND OLPS.idwhs=@idwhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal
       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL)
       OR(OLPS.IdLpnSourceProposal IS NULL))
       ),0)))) &lt;= @itemQty
       ORDER BY FifoDate ASC, ItemQty ASC, Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
     </parameters>
   </query>
	 
  <query code="STKPICKItemNoZoneLessQtyPlanUnidNoVariableFields">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       L.IdWhs,
       I.IdOwn,
       (SUM(SP.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE I.IdItem = OLP.IdItem
	AND OLP.Idwhs=@Idwhs
       AND L.IdLocCode = OLP.IdLocSourceProposal),0)
       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
	
       WHERE I.IdItem = OLPS.IdItem
	AND OLPS.Idwhs=@IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       ) AS ItemQty,
       I.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM ItemLocation IL LEFT JOIN
        (SELECT S.IdWhs, S.IdOwn, S.IdItem, SUM(ItemQty) ItemQty
       FROM Stock S INNER JOIN
        Location L ON S.IdLocCode = L.IdLocCode
       WHERE ((L.LocTypeCode = 'PICK'  AND L.OnlyLPN = 0) OR
        (L.LocTypeCode = 'PUT'  AND L.OnlyLPN = 1))
	           --12 09 2019 agrega S.idwhs--
	   AND S.idwhs=@idwhs
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       GROUP BY S.IdWhs, S.IdOwn, S.IdItem) SP ON IL.IdItem = SP.IdItem INNER JOIN
       Location L ON L.IdLocCode = IL.IdLocCode INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Item I ON I.IdItem = IL.IdItem LEFT JOIN
       Stock S ON S.IdWhs = L.IdWhs
       AND S.IdOwn = I.IdOwn
       AND S.IdItem = I.IdItem
       AND S.IdLocCode = IL.IdLocCode LEFT OUTER JOIN
       -- Stock Reserve by Customer
       v_Other_QtyReserveCustomer AS OQRC ON I.IdItem = OQRC.IdItem
       AND L.IdWhs = OQRC.IdWhs
       AND I.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE IL.IdItem = @idItem
       AND L.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND L.OnlyLPN = 0
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
       GROUP BY
       L.IdWhs, I.IdOwn, I.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, SP.ItemQty
       HAVING (
       (SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE I.IdItem = OLP.IdItem
	AND OLP.idwhs=@idwhs
       AND L.IdLocCode = OLP.IdLocSourceProposal),0))
       - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE I.IdItem = OLPS.IdItem
	AND OLPS.idwhs=@idwhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)) &gt; 0)
       AND (SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE I.IdItem = OLP.IdItem
	AND OLP.idwhs=@idwhs
       AND L.IdLocCode = OLP.IdLocSourceProposal),0))
       - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE I.IdItem = OLPS.IdItem
	AND OLPS.idwhs=@idwhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)) &lt;= @itemQty)
       )
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="String">customerCode</parameter>       
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Decimal">itemQty</parameter>       
     </parameters>
   </query>
	 
  <query code="STKPICKItemNoZoneGreaterQtyPlanUnidNoVariableFields">
     <sql>
       SELECT TOP 1
       ABS(L.PickingFlow - @pickingFlow) AS Ruta,
       L.IdWhs,
       I.IdOwn,
       @itemQty1 AS ItemQty,
       I.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM ItemLocation IL LEFT JOIN
       (SELECT S.IdWhs, S.IdOwn, S.IdItem, SUM(ItemQty) ItemQty
       FROM Stock S INNER JOIN
       Location L ON S.IdLocCode = L.IdLocCode
       WHERE ((L.LocTypeCode = 'PICK'  AND L.OnlyLPN = 0) OR
       (L.LocTypeCode = 'PUT'  AND L.OnlyLPN = 1))
       --12 09 2019 agrega S.idwhs--
       AND S.IdWhs=@Idwhs
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       GROUP BY S.IdWhs, S.IdOwn, S.IdItem) SP ON IL.IdItem = SP.IdItem INNER JOIN
       Location L ON L.IdLocCode = IL.IdLocCode INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Item I ON I.IdItem = IL.IdItem LEFT JOIN
       Stock S ON S.IdWhs = L.IdWhs
       AND S.IdOwn = I.IdOwn
       AND S.IdItem = I.IdItem
       AND S.IdLocCode = IL.IdLocCode LEFT OUTER JOIN
       -- Stock Reserve by Customer
       v_Other_QtyReserveCustomer AS OQRC ON I.IdItem = OQRC.IdItem
       AND L.IdWhs = OQRC.IdWhs
       AND I.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode LEFT JOIN
       (SELECT IdItem, IdLocSourceProposal,idWhs,SUM(COALESCE(ItemQty,0)) ItemQty

-- Agregar WH,Owner 09 12 2019--

       FROM v_Other_LocationPicking
       GROUP BY IdItem, IdLocSourceProposal,IdWhs) VOLP ON I.IdItem = VOLP.IdItem
       AND VOLP.idwhs= @idWhs
       AND L.IdLocCode = VOLP.IdLocSourceProposal LEFT JOIN
       
       (SELECT IdItem, IdLocSourceProposal,idwhs, SUM(COALESCE(ItemQty,0)) ItemQty
       FROM v_Other_LocationPicking_Sim
       GROUP BY IdItem,Idwhs, IdLocSourceProposal,idwhs) VOLPS ON I.IdItem = VOLPS.IdItem
	AND VOLPS.IDWHS=@IDWHS
       AND L.IdLocCode = VOLPS.IdLocSourceProposal
       WHERE IL.IdItem = @idItem
       AND L.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND L.OnlyLPN = 0
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
       GROUP BY
       L.IdWhs, I.IdOwn, I.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status
       HAVING (SUM(SP.ItemQty) - COALESCE(SUM(VOLP.ItemQty),0) - COALESCE(SUM(VOLPS.ItemQty),0)) &gt;= @itemQty2
       ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty1</parameter>
       <parameter type="String">customerCode</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="Decimal">itemQty2</parameter>       
     </parameters>
   </query>

  <query code="STKPICKItemNoZoneLessQtyPlanUnidPickZoneOrderByQty">
	  <sql>
	   SELECT TOP 1
       L.PickingFlow AS Ruta,
       L.IdWhs,
       I.IdOwn,
       (SUM(SP.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE I.IdItem = OLP.IdItem
	   AND L.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal),0)
       - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE I.IdItem = OLPS.IdItem
	   AND L.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       ) AS ItemQty,
       I.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,
       L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM ItemLocation IL LEFT JOIN
        (SELECT S.IdWhs, S.IdOwn, S.IdItem, SUM(ItemQty) ItemQty
       FROM Stock S INNER JOIN
        Location L ON S.IdLocCode = L.IdLocCode
       WHERE ((L.LocTypeCode = 'PICK'  AND L.OnlyLPN = 0) OR
        (L.LocTypeCode = 'PUT'  AND L.OnlyLPN = 1))
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       GROUP BY S.IdWhs, S.IdOwn, S.IdItem) SP ON IL.IdItem = SP.IdItem INNER JOIN
       Location L ON L.IdLocCode = IL.IdLocCode INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Item I ON I.IdItem = IL.IdItem LEFT JOIN
       Stock S ON S.IdWhs = L.IdWhs
       AND S.IdOwn = I.IdOwn
       AND S.IdItem = I.IdItem
       AND S.IdLocCode = IL.IdLocCode LEFT OUTER JOIN
       -- Stock Reserve by Customer
       v_Other_QtyReserveCustomer AS OQRC ON I.IdItem = OQRC.IdItem
       AND L.IdWhs = OQRC.IdWhs
       AND I.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE IL.IdItem = @idItem
       AND L.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND L.OnlyLPN = 0
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
	   AND EXISTS (SELECT WZL.IdLocCode 
					 FROM WorkZoneLocation WZL
					 JOIN WorkZone WZ
					   ON WZL.IdWorkZone = WZ.IdWorkZone
					WHERE WZ.TypeZone = 5
					  AND WZ.IdWhs = L.IdWhs
					  AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY
       L.IdWhs, I.IdOwn, I.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status, SP.ItemQty
       HAVING (
       (SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE I.IdItem = OLP.IdItem
	   AND L.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal),0))
       - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE I.IdItem = OLPS.IdItem
	   AND L.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)) &gt; 0)
       AND (SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
       FROM v_Other_LocationPicking AS OLP
       WHERE I.IdItem = OLP.IdItem
	   AND L.IdWhs = OLP.IdWhs
       AND L.IdLocCode = OLP.IdLocSourceProposal),0))
       - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
       FROM v_Other_LocationPicking_Sim AS OLPS
       WHERE I.IdItem = OLPS.IdItem
	   AND L.IdWhs = OLPS.IdWhs
       AND L.IdLocCode = OLPS.IdLocSourceProposal),0)) &lt;= @itemQty)
       )
	   --Modificación Sebastián Flores 20082019
       ORDER BY Ruta ASC, ItemQty DESC
	  </sql>
	  <parameters>
		  <parameter type="Int">pickingFlow</parameter>
		  <parameter type="String">customerCode</parameter>
		  <parameter type="Int">idItem</parameter>
		  <parameter type="Int">idWhs</parameter>
		  <parameter type="Decimal">itemQty</parameter>
	  </parameters>
  </query>

  <query code="STKPICKItemNoZoneGreaterQtyPlanUnidPickZoneOrderByQty">
	  <sql>
	   SELECT TOP 1
       L.PickingFlow AS Ruta,
       L.IdWhs,
       I.IdOwn,
       @itemQty1 AS ItemQty,
       I.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM ItemLocation IL LEFT JOIN
       (SELECT S.IdWhs, S.IdOwn, S.IdItem, SUM(ItemQty) ItemQty
       FROM Stock S INNER JOIN
       Location L ON S.IdLocCode = L.IdLocCode
       WHERE ((L.LocTypeCode = 'PICK'  AND L.OnlyLPN = 0) OR
       (L.LocTypeCode = 'PUT'  AND L.OnlyLPN = 1))
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
       AND S.HoldCode IS NULL
       GROUP BY S.IdWhs, S.IdOwn, S.IdItem) SP ON IL.IdItem = SP.IdItem INNER JOIN
       Location L ON L.IdLocCode = IL.IdLocCode INNER JOIN
       LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN
       Item I ON I.IdItem = IL.IdItem LEFT JOIN
       Stock S ON S.IdWhs = L.IdWhs
       AND S.IdOwn = I.IdOwn
       AND S.IdItem = I.IdItem
       AND S.IdLocCode = IL.IdLocCode LEFT OUTER JOIN
       -- Stock Reserve by Customer
       v_Other_QtyReserveCustomer AS OQRC ON I.IdItem = OQRC.IdItem
       AND L.IdWhs = OQRC.IdWhs
       AND I.IdOwn = OQRC.IdOwn
       AND OQRC.CustomerCode &lt;&gt; @customerCode LEFT JOIN
       (SELECT IdItem, IdLocSourceProposal, SUM(COALESCE(ItemQty,0)) ItemQty, IdWhs
       FROM v_Other_LocationPicking
       GROUP BY IdItem, IdLocSourceProposal, IdWhs) VOLP ON I.IdItem = VOLP.IdItem
	   AND L.IdWhs = VOLP.IdWhs
       AND L.IdLocCode = VOLP.IdLocSourceProposal LEFT JOIN
       (SELECT IdItem, IdLocSourceProposal, SUM(COALESCE(ItemQty,0)) ItemQty, IdWhs
       FROM v_Other_LocationPicking_Sim
       GROUP BY IdItem, IdLocSourceProposal, IdWhs) VOLPS ON I.IdItem = VOLPS.IdItem
	   AND L.IdWhs = VOLPS.IdWhs
       AND L.IdLocCode = VOLPS.IdLocSourceProposal
       WHERE IL.IdItem = @idItem
       AND L.IdWhs = @idWhs
       AND L.LocTypeCode = 'PICK'
       AND L.OnlyLPN = 0
       AND L.HoldCode IS NULL
       AND L.Status = 1
       AND L.LockInventory = 0
	   AND EXISTS (SELECT WZL.IdLocCode 
					 FROM WorkZoneLocation WZL
					 JOIN WorkZone WZ
					   ON WZL.IdWorkZone = WZ.IdWorkZone
					WHERE WZ.TypeZone = 5
					  AND WZ.IdWhs = L.IdWhs
					  AND WZL.IdLocCode = L.IdLocCode)
       AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
       GROUP BY
       L.IdWhs, I.IdOwn, I.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
       LT.LocTypeName, LT.Status
       HAVING (SUM(SP.ItemQty) - COALESCE(SUM(VOLP.ItemQty),0) - COALESCE(SUM(VOLPS.ItemQty),0)) &gt;= @itemQty2
       ORDER BY Ruta ASC, ItemQty DESC
	  </sql>
	  <parameters>
		  <parameter type="Int">pickingFlow</parameter>
		  <parameter type="Decimal">itemQty1</parameter>
		  <parameter type="String">customerCode</parameter>
		  <parameter type="Int">idItem</parameter>
		  <parameter type="Int">idWhs</parameter>
		  <parameter type="Decimal">itemQty2</parameter>
	  </parameters>
  </query>
 
  <query code="STKPICKItemNoZoneLessQtyPlanCajaPickZone">
	  <sql>
	   SELECT TOP 1
       L.PickingFlow AS Ruta,
       L.IdWhs,
       I.IdOwn,
       (IU.ConversionFactor * ROUND(((SUM(SP.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                                                  FROM v_Other_LocationPicking AS OLP
                                                                  WHERE I.IdItem = OLP.IdItem
																    AND L.IdWhs = OLP.IdWhs
                                                                    AND L.IdLocCode = OLP.IdLocSourceProposal),0)
                                                      - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                                                  FROM v_Other_LocationPicking_Sim AS OLPS
                                                                  WHERE I.IdItem = OLPS.IdItem
																    AND L.IdWhs = OLPS.IdWhs
                                                                    AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
       )/IU.ConversionFactor),0,1)) AS ItemQty,
       I.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM ItemLocation IL LEFT JOIN
            (SELECT S.IdWhs, S.IdOwn, S.IdItem, SUM(ItemQty) ItemQty
			       FROM Stock S INNER JOIN
				          Location L ON S.IdLocCode = L.IdLocCode
			       WHERE ((L.LocTypeCode = 'PICK'  AND L.OnlyLPN = 0) OR 
					          (L.LocTypeCode = 'PUT'  AND L.OnlyLPN = 1))
			         AND L.HoldCode IS NULL 
			         AND L.Status = 1
			         AND L.LockInventory = 0
					 AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
			       GROUP BY S.IdWhs, S.IdOwn, S.IdItem) SP ON IL.IdItem = SP.IdItem INNER JOIN			      
			      Location L ON L.IdLocCode = IL.IdLocCode INNER JOIN
			      LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
			      Item I ON I.IdItem = IL.IdItem INNER JOIN 
			      ItemUom IU ON I.IdItem = IU.IdItem
	                   AND IU.UomName = 'LVTA' LEFT JOIN
		        Stock S ON S.IdWhs = L.IdWhs 
			   	         AND S.IdOwn = I.IdOwn 
				           AND S.IdItem = I.IdItem 
				           AND S.IdLocCode = IL.IdLocCode LEFT OUTER JOIN 
		        -- Stock Reserve by Customer
		        v_Other_QtyReserveCustomer AS OQRC ON I.IdItem = OQRC.IdItem 
										                          AND L.IdWhs = OQRC.IdWhs 
										                          AND I.IdOwn = OQRC.IdOwn 
                                              AND OQRC.CustomerCode &lt;&gt; @customerCode        
       WHERE IL.IdItem = @idItem
         AND L.IdWhs = @idWhs
         AND L.LocTypeCode = 'PICK'
	       AND L.OnlyLPN = 0
         AND L.HoldCode IS NULL
         AND L.Status = 1
         AND L.LockInventory = 0
         AND S.HoldCode IS NULL
         AND (ROUND(@itemQty1/IU.ConversionFactor,0,1)) > 0
		 AND IU.UomName = 'LVTA'
		 AND EXISTS (SELECT WZL.IdLocCode 
					   FROM WorkZoneLocation WZL
					   JOIN WorkZone WZ
					     ON WZL.IdWorkZone = WZ.IdWorkZone
					  WHERE WZ.TypeZone = 5
					    AND WZ.IdWhs = L.IdWhs
					    AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY
       L.IdWhs, I.IdOwn, I.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode, 
       LT.LocTypeName, LT.Status, SP.ItemQty, IU.ConversionFactor
       HAVING (SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                            FROM v_Other_LocationPicking AS OLP
                                            WHERE I.IdItem = OLP.IdItem
											  AND L.IdWhs = OLP.IdWhs
                                              AND L.IdLocCode = OLP.IdLocSourceProposal),0)
                               - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                            FROM v_Other_LocationPicking_Sim AS OLPS
                                            WHERE I.IdItem = OLPS.IdItem
											  AND L.IdWhs = OLPS.IdWhs
                                              AND L.IdLocCode = OLPS.IdLocSourceProposal),0)))
               ) &gt;= IU.ConversionFactor
          AND (SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                            FROM v_Other_LocationPicking AS OLP
                                            WHERE I.IdItem = OLP.IdItem
											  AND L.IdWhs = OLP.IdWhs
                                              AND L.IdLocCode = OLP.IdLocSourceProposal),0) 
                               - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                            FROM v_Other_LocationPicking_Sim AS OLPS
                                            WHERE I.IdItem = OLPS.IdItem
											  AND L.IdWhs = OLPS.IdWhs
                                              AND L.IdLocCode = OLPS.IdLocSourceProposal),0)))
               ) &lt;= CASE WHEN (@itemQty2/IU.ConversionFactor) &lt;= 0
												    THEN 0
												    ELSE IU.ConversionFactor * (@itemQty3/IU.ConversionFactor)
											 END
	   ORDER BY Ruta ASC
	  </sql>
	  <parameters>
		  <parameter type="Int">pickingFlow</parameter>
		  <parameter type="String">customerCode</parameter>
		  <parameter type="Int">idItem</parameter>
		  <parameter type="Int">idWhs</parameter>
		  <parameter type="Decimal">itemQty1</parameter>
		  <parameter type="Decimal">itemQty2</parameter>
		  <parameter type="Decimal">itemQty3</parameter>
	  </parameters>
  </query>

  <query code="STKPICKItemNoZoneGreaterQtyPlanCajaPickZone">
	  <sql>
	   SELECT TOP 1
	   L.PickingFlow AS Ruta,
       I.IdOwn,
       (IU.ConversionFactor * ROUND(@itemQty1/IU.ConversionFactor,0,1)) AS ItemQty,
       I.IdItem,
       S.IdLpnCode,
       S.LpnTypeCode,
       S.IdLpnCodeContainer,
       S.LpnTypeCodeContainer,
       L.IdLocCode,
       L.LocCode,
       L.RowLoc,
       L.ColumnLoc,
       L.LevelLoc,
       L.Aisle,L.Status,
       L.Description,
       L.SharedItem,
       L.OnlyLPN,
       L.PickingFlow,
       L.PutawayFlow,
       L.CapacityLPN,
       L.CapacityUnit,
       L.Length,
       L.Width,
       L.Height,
       L.Volume,
       L.Weight,
       L.LockInventory,
       LT.IdLocType,
       LT.LocTypeCode,
       LT.LocTypeName,
       LT.Status
       FROM ItemLocation IL LEFT JOIN
            (SELECT S.IdWhs, S.IdOwn, S.IdItem, SUM(ItemQty) ItemQty
			       FROM Stock S INNER JOIN
				        Location L ON S.IdLocCode = L.IdLocCode
			       WHERE ((L.LocTypeCode = 'PICK'  AND L.OnlyLPN = 0) OR 
					          (L.LocTypeCode = 'PUT'  AND L.OnlyLPN = 1))
			         AND L.HoldCode IS NULL 
			         AND L.Status = 1
			         AND L.LockInventory = 0
					 AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
			       GROUP BY S.IdWhs, S.IdOwn, S.IdItem) SP ON IL.IdItem = SP.IdItem INNER JOIN			      
			      Location L ON L.IdLocCode = IL.IdLocCode INNER JOIN
			      LocationType LT ON L.LocTypeCode = LT.LocTypeCode INNER JOIN 
			      Item I ON I.IdItem = IL.IdItem INNER JOIN 
			      ItemUom IU ON I.IdItem = IU.IdItem
	                   AND IU.UomName = 'LVTA' LEFT JOIN
		        Stock S ON S.IdWhs = L.IdWhs 
			   	         AND S.IdOwn = I.IdOwn 
				           AND S.IdItem = I.IdItem 
				           AND S.IdLocCode = IL.IdLocCode LEFT OUTER JOIN 
		         -- Stock Reserve by Customer
		         v_Other_QtyReserveCustomer AS OQRC ON I.IdItem = OQRC.IdItem 
											                         AND L.IdWhs = OQRC.IdWhs 
											                         AND I.IdOwn = OQRC.IdOwn 
											                         AND OQRC.CustomerCode &lt;&gt; @customerCode       
       WHERE I.IdItem = @idItem
         AND L.IdWhs = @idWhs
         AND L.LocTypeCode = 'PICK'
		     AND L.OnlyLPN = 0
         AND L.HoldCode IS NULL
         AND L.Status = 1
         AND L.LockInventory = 0
         AND S.HoldCode IS NULL
         AND (ROUND(@itemQty2/IU.ConversionFactor,0,1)) > 0
		 AND IU.UomName = 'LVTA'
		 AND EXISTS (SELECT WZL.IdLocCode 
					   FROM WorkZoneLocation WZL
					   JOIN WorkZone WZ
					     ON WZL.IdWorkZone = WZ.IdWorkZone
					  WHERE WZ.TypeZone = 5
					    AND WZ.IdWhs = L.IdWhs
					    AND WZL.IdLocCode = L.IdLocCode)
       GROUP BY
       L.IdWhs, I.IdOwn, I.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
       L.PickingFlow, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode, 
       LT.LocTypeName, LT.Status, SP.ItemQty, IU.ConversionFactor
       HAVING (SUM(SP.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                            FROM v_Other_LocationPicking AS OLP
                                            WHERE I.IdItem = OLP.IdItem
											  AND L.IdWhs = OLP.IdWhs
                                              AND L.IdLocCode = OLP.IdLocSourceProposal),0) 
                               - (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                            FROM v_Other_LocationPicking_Sim AS OLPS
                                            WHERE I.IdItem = OLPS.IdItem
											  AND L.IdWhs = OLPS.IdWhs
                                              AND L.IdLocCode = OLPS.IdLocSourceProposal),0)))) &gt;= (IU.ConversionFactor * ROUND(@itemQty3/IU.ConversionFactor,0,1))
       ORDER BY Ruta ASC
	  </sql>
	  <parameters>
		  <parameter type="Int">pickingFlow</parameter>
		  <parameter type="Decimal">itemQty1</parameter>
		  <parameter type="String">customerCode</parameter>
		  <parameter type="Int">idItem</parameter>
		  <parameter type="Int">idWhs</parameter>
		  <parameter type="Decimal">itemQty2</parameter>
		  <parameter type="Decimal">itemQty3</parameter>
	  </parameters>
  </query>
	 
  <!-- end new rules-->
  
  <query code="LOCPICKEmptyZoneCapacityUnit">
     <sql>
       SELECT    TOP 1
                 ABS(L.PutawayFlow - @putawayFlow) AS Ruta,
                 L.IdLocCode,
                 L.LocCode,
                 L.RowLoc,
                 L.ColumnLoc,
                 L.LevelLoc,
                 L.Aisle,
                 L.Status,
                 L.Description,
                 L.SharedItem,
                 L.OnlyLPN,
                 L.PickingFlow,
                 L.PutawayFlow,
                 L.CapacityLPN,
                 L.CapacityUnit,
                 L.Length,
                 L.Width,
                 L.Height,
                 L.Volume,
                 L.Weight,
                 L.LockInventory,
                 LT.IdLocType,
                 LT.LocTypeCode,
                 LT.LocTypeName,
                 LT.Status
           FROM Location L 
     INNER JOIN LocationType LT 
             ON L.LocTypeCode = LT.LocTypeCode 
     INNER JOIN WorkZoneLocation WZL 
             ON L.IdLocCode = WZL.IdLocCode 
     INNER JOIN WorkZoneItem WZI 
             ON WZL.IdWorkZone = WZI.IdWorkZone
          WHERE L.IdWhs = @idWarehouse
            AND L.LocTypeCode = 'PICK'
            AND L.HoldCode IS NULL
            AND L.LockInventory = 0
            AND WZI.IdItem = @idItem
            AND NOT EXISTS(SELECT S.IdLocCode
                             FROM Stock S
                             WHERE S.IdLocCode = L.IdLocCode)
           AND EXISTS(SELECT IDUserWms
                        FROM UserWorkZone UWZ 
                  INNER JOIN WorkZone WZ 
                          ON UWZ.IdWorkZone = WZ.IdWorkZone 
                  INNER JOIN WorkZoneLocation WZL 
                          ON WZ.IdWorkZone = WZL.IdWorkZone
                       WHERE UWZ.IdUserWms = @idUser
                         AND WZ.IdWhs = L.IdWhs
                         AND WZL.IdLocCode = L.IdLocCode)
           AND EXISTS(SELECT WZF.IdLocCode
                        FROM WorkZoneForkLift WZF 
                  INNER JOIN WorkZone WZ 
                          ON WZF.IdWorkZone = WZ.IdWorkZone 
                  INNER JOIN WorkZoneLocation WZL 
                          ON WZ.IdWorkZone = WZL.IdWorkZone
                       WHERE WZF.IdLocCode = @idForkLift
                         AND WZ.IdWhs = L.IdWhs
                         AND WZL.IdLocCode = L.IdLocCode)
                     GROUP BY  L.IdLocCode,
                               L.LocCode,
                               L.RowLoc,
                               L.ColumnLoc,
                               L.LevelLoc,
                               L.Aisle,
                               L.Status,
                               L.Description,
                               L.SharedItem,
                               L.OnlyLPN,
                               L.PickingFlow,
                               L.PutawayFlow,
                               L.CapacityLPN,
                               L.CapacityUnit,
                               L.Length,
                               L.Width,
                               L.Height,
                               L.Volume,
                               L.Weight,
                               L.LockInventory,
                               LT.IdLocType,
                               LT.LocTypeCode,
                               LT.LocTypeName,
                               LT.Status
                 HAVING L.CapacityUnit >= COALESCE((SELECT SUM(S.ItemQty) 
                                                      FROM Stock S 
                                                     WHERE IdLocCode = @idForkLift),0)
                   ORDER BY Ruta ASC
     </sql>
     <parameters>
       <parameter type="Int">putawayFlow</parameter>
       <parameter type="Int">idWarehouse</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idUser</parameter>
       <parameter type="String">idForkLift</parameter>
     </parameters>
   </query>
   
   <query code="STKPUTItemNoZoneLessQtyUomPalletLotExp">
     <sql>
       SELECT  TOP 1
               ABS(L.PickingFlow - @pickingFlow) AS Ruta,
               S.IdWhs,
               S.IdOwn,
              (IU.ConversionFactor * ROUND(((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                                                          FROM v_Other_LocationPicking AS OLP
                                                                         WHERE S.IdItem = OLP.IdItem
																                                           AND S.IdWhs = OLP.IdWhs
                                                                           AND L.IdLocCode = OLP.IdLocSourceProposal
																                                           AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
																	                                          OR (S.lotNumber IS NULL)
																	                                          OR (OLP.LotNumber IS NULL))
																	                                         AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
																	                                          OR (S.ExpirationDate IS NULL)
																	                                          OR (OLP.ExpirationDate IS NULL))
																                                           AND ((S.IdLpnCode = OLP.IdLpnSourceProposal 
                                                                           AND OLP.IdLpnSourceProposal IS NOT NULL) 
                                                                            OR (OLP.IdLpnSourceProposal IS NULL))),0)
                                                            - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                                                          FROM v_Other_LocationPicking_Sim AS OLPS
                                                                         WHERE S.IdItem = OLPS.IdItem
																                                          AND S.IdWhs = OLPS.IdWhs
																                                          AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
																                                           OR (S.lotNumber IS NULL)
																                                           OR (OLPS.LotNumber IS NULL))
																                                          AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
																                                           OR (S.ExpirationDate IS NULL)
																                                           OR (OLPS.ExpirationDate IS NULL))
																                                          AND L.IdLocCode = OLPS.IdLocSourceProposal																   
																                                          AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR (OLPS.IdLpnSourceProposal IS NULL))),0)
                                                                        -- AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
             )/IU.ConversionFactor),0,1)) AS ItemQty,
             S.IdItem,
             S.IdLpnCode,
             S.LpnTypeCode,
             S.IdLpnCodeContainer,
             S.LpnTypeCodeContainer,
             L.IdLocCode,
             L.LocCode,
             L.RowLoc,
             L.ColumnLoc,
             L.LevelLoc,
             L.Aisle,
             L.Status,
             L.Description,
             L.SharedItem,
             L.OnlyLPN,
             L.PickingFlow,
             L.PutawayFlow,
             L.CapacityLPN,
             L.CapacityUnit,
             L.Length,
             L.Width,
             L.Height,
             L.Volume,
             L.Weight,
             L.LockInventory,
             LT.IdLocType,
             LT.LocTypeCode,
             LT.LocTypeName,
             LT.Status
       FROM Stock S
       INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
       INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
       INNER JOIN Item I ON I.IdItem = S.IdItem
       INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem
       -- Stock Reserve by Customer
       LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
                                                         AND S.IdWhs = OQRC.IdWhs
                                                         AND S.IdOwn = OQRC.IdOwn
                                                         AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.Status = 1
         AND L.LockInventory = 0
         AND S.HoldCode IS NULL
         AND IU.uomname = 'PALLET'
		 AND (S.ExpirationDate &gt; GETDATE() + I.ShelfLife OR S.ExpirationDate IS NULL) -- se agrega linea para que no reponga producto vencido 
		 AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL) -- Agregado a solicitud de Felipe Salinas BASE-477
       GROUP BY
           S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
           L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
           L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
           L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode, 
           LT.LocTypeName, LT.Status, IU.ConversionFactor,S.FifoDate,s.LotNumber,S.ExpirationDate
       HAVING ((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                             FROM v_Other_LocationPicking AS OLP
                                            WHERE S.IdItem = OLP.IdItem
										                          AND S.IdWhs = OLP.IdWhs
                                              AND L.IdLocCode = OLP.IdLocSourceProposal
											                        AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
											                         OR (S.lotNumber IS NULL)
											                         OR (OLP.LotNumber IS NULL))
											                        AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
											                         OR (S.ExpirationDate IS NULL)
											                         OR (OLP.ExpirationDate IS NULL))
											                        AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))),0)
                               - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                             FROM v_Other_LocationPicking_Sim AS OLPS
                                            WHERE S.IdItem = OLPS.IdItem
										                         AND S.IdWhs = OLPS.IdWhs
                                           -- AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
										                          AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
																               OR (S.lotNumber IS NULL)
																               OR (OLPS.LotNumber IS NULL))
																              AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
																               OR (S.ExpirationDate IS NULL)
																               OR (OLPS.ExpirationDate IS NULL))
																              AND L.IdLocCode = OLPS.IdLocSourceProposal																   
																              AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR (OLPS.IdLpnSourceProposal IS NULL))),0)
                ) &gt;= IU.ConversionFactor
           AND (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                             FROM v_Other_LocationPicking AS OLP
                                            WHERE S.IdItem = OLP.IdItem
										                          AND S.IdWhs = OLP.IdWhs
											                        AND L.IdLocCode = OLP.IdLocSourceProposal
											                        AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
											                         OR (S.lotNumber IS NULL)
											                         OR (OLP.LotNumber IS NULL))
											                        AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
											                         OR (S.ExpirationDate IS NULL)
											                         OR (OLP.ExpirationDate IS NULL))
											                        AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))),0)
                                             --AND L.IdLocCode = OLP.IdLocSourceProposal),0)
                               - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                             FROM v_Other_LocationPicking_Sim AS OLPS
                                            WHERE S.IdItem = OLPS.IdItem
										                          AND S.IdWhs = OLPS.IdWhs
											                        AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
											                         OR (S.lotNumber IS NULL)
											                         OR (OLPS.LotNumber IS NULL))
											                        AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
											                         OR (S.ExpirationDate IS NULL)
											                         OR (OLPS.ExpirationDate IS NULL))
											                         AND L.IdLocCode = OLPS.IdLocSourceProposal																   
											                         AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR (OLPS.IdLpnSourceProposal IS NULL))),0)
                                            -- AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
                ) &lt;= CASE WHEN (@itemQty/IU.ConversionFactor) &lt;= 0 
                             THEN 0 
                             ELSE IU.ConversionFactor * (@itemQty/IU.ConversionFactor) 
                             END
              )       
	   ORDER BY S.ExpirationDate ASC, S.FifoDate ASC, ItemQty ASC, Ruta ASC --Agregado a solicitud de Felipe Salinas BASE-477
     </sql>
     <parameters>	 
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
	     <parameter type="String">lotNumber</parameter>
	     <parameter type="DateTime">expirationDate</parameter>
	     <parameter type="DateTime">fifoDate</parameter>	 	       
     </parameters>
   </query>
   
   <query code="STKPUTItemNoZoneGreaterQtyUomPalletLotExp">
     <sql>
       SELECT TOP 1
               ABS(L.PickingFlow - @pickingFlow) AS Ruta,
               S.IdWhs,
               S.IdOwn,
               (IU.ConversionFactor * ROUND((@itemQty/IU.ConversionFactor),0,1)) AS ItemQty,
               S.IdItem,
               S.IdLpnCode,
               S.LpnTypeCode,
               S.IdLpnCodeContainer,
               S.LpnTypeCodeContainer,
               L.IdLocCode,
               L.LocCode,
               L.RowLoc,
               L.ColumnLoc,
               L.LevelLoc,
               L.Aisle,
               L.Status,
               L.Description,
               L.SharedItem,
               L.OnlyLPN,
               L.PickingFlow,
               L.PutawayFlow,
               L.CapacityLPN,
               L.CapacityUnit,
               L.Length,
               L.Width,
               L.Height,
               L.Volume,
               L.Weight,
               L.LockInventory,
               LT.IdLocType,
               LT.LocTypeCode,
               LT.LocTypeName,
               LT.Status
               FROM Stock S
               INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
               INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
               INNER JOIN Item I ON I.IdItem = S.IdItem
               INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem
               -- Stock Reserve by Customer
               LEFT OUTER JOIN v_Other_QtyReserveCustomer AS OQRC ON S.IdItem = OQRC.IdItem
                                                                 AND S.IdWhs = OQRC.IdWhs
                                                                 AND S.IdOwn = OQRC.IdOwn
                                                                 AND OQRC.CustomerCode &lt;&gt; @customerCode
       WHERE S.IdWhs = L.IdWhs
         AND S.IdItem = @idItem
         AND S.IdWhs = @idWhs
         AND L.LocTypeCode = 'PUT'
         AND L.HoldCode IS NULL
         AND L.Status = 1
         AND L.LockInventory = 0
         AND S.HoldCode IS NULL
         AND IU.uomname = 'PALLET'
         AND @itemQty >= IU.ConversionFactor 
		     AND (S.ExpirationDate > GETDATE() + I.ShelfLife OR S.ExpirationDate IS NULL) -- se agrega linea para que no reponga producto vencido 
		     AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL) -- Agregado a solicitud de Felipe Salinas BASE-477
    GROUP BY
           S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
           L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
           L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
           L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode, 
           LT.LocTypeName, LT.Status, IU.ConversionFactor,S.FifoDate,s.LotNumber,S.ExpirationDate
    HAVING ((SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                          FROM v_Other_LocationPicking AS OLP
                                         WHERE S.IdItem = OLP.IdItem
										                       AND S.IdWhs = OLP.IdWhs
                                           AND L.IdLocCode = OLP.IdLocSourceProposal
											                     AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
											                      OR (S.lotNumber IS NULL)
											                      OR (OLP.LotNumber IS NULL))
											                     AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
											                      OR (S.ExpirationDate IS NULL)
											                      OR (OLP.ExpirationDate IS NULL))
											                     AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))),0)
											 
											 --),0)
                               - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                           FROM v_Other_LocationPicking_Sim AS OLPS
                                           WHERE S.IdItem = OLPS.IdItem
										                         AND S.IdWhs = OLPS.IdWhs
											                       AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
											                        OR (S.lotNumber IS NULL)
											                        OR (OLPS.LotNumber IS NULL))
											                       AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
											                        OR (S.ExpirationDate IS NULL)
											                        OR (OLPS.ExpirationDate IS NULL))
											                       AND L.IdLocCode = OLPS.IdLocSourceProposal																   
											                       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR (OLPS.IdLpnSourceProposal IS NULL))),0)
                                           --AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
                ) &gt;= IU.ConversionFactor
           AND (SUM(S.ItemQty) - COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
                                              FROM v_Other_LocationPicking AS OLP
                                             WHERE S.IdItem = OLP.IdItem
										                           AND S.IdWhs = OLP.IdWhs
                                               AND L.IdLocCode = OLP.IdLocSourceProposal
											                         AND ((S.lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
											                          OR (S.lotNumber IS NULL)
											                          OR (OLP.LotNumber IS NULL))
											                         AND ((S.ExpirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
											                          OR (S.ExpirationDate IS NULL)
											                          OR (OLP.ExpirationDate IS NULL))
											                         AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))),0) 
											 
											 --),0)
                               - COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
                                             FROM v_Other_LocationPicking_Sim AS OLPS
                                            WHERE S.IdItem = OLPS.IdItem
										                          AND S.IdWhs = OLPS.IdWhs
											                        AND ((S.lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND S.LotNumber IS NOT NULL)
											                         OR (S.lotNumber IS NULL)
											                         OR (OLPS.LotNumber IS NULL))
											                        AND ((S.ExpirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND S.ExpirationDate IS NOT NULL)
											                         OR (S.ExpirationDate IS NULL)
											                         OR (OLPS.ExpirationDate IS NULL))
											                        AND L.IdLocCode = OLPS.IdLocSourceProposal																   
											                        AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR (OLPS.IdLpnSourceProposal IS NULL))),0)
                                            --AND L.IdLocCode = OLPS.IdLocSourceProposal),0)
                ) &gt;= CASE WHEN (@itemQty/IU.ConversionFactor) &lt;= 0 
                             THEN 0 
                             ELSE IU.ConversionFactor * (@itemQty/IU.ConversionFactor) 
                             END
       )      
	  ORDER BY S.ExpirationDate ASC, S.FifoDate ASC, ItemQty ASC, Ruta ASC --Agregado a solicitud de Felipe Salinas BASE-477
     </sql>
     <parameters>
       <parameter type="Int">pickingFlow</parameter>
       <parameter type="Decimal">itemQty</parameter>
       <parameter type="Int">idItem</parameter>
       <parameter type="Int">idWhs</parameter>
       <parameter type="String">customerCode</parameter>
	     <parameter type="String">lotNumber</parameter>
	     <parameter type="DateTime">expirationDate</parameter>
	     <parameter type="DateTime">fifoDate</parameter>
     </parameters>
   </query>
   
   <query code="STKPrimaryLessQty">
	<sql>
		SELECT TOP 1
	         ABS(L.PickingFlow - @pickingFlow) AS Ruta,
	         S.IdWhs,
	         S.IdOwn,
	         (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		                                      FROM v_Other_LocationPicking AS OLP
		                                     WHERE S.IdItem = OLP.IdItem
		                                       AND S.IdWhs = OLP.IdWhs
		                                       AND L.IdLocCode = OLP.IdLocSourceProposal
		                                       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))
		                                       AND ((@idCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL) OR(@idCtgItem IS NULL) OR(OLP.IdCtgItem IS NULL))
		                                       AND ((@lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL) OR(@lotNumber IS NULL) OR(OLP.LotNumber IS NULL))
		                                       AND ((@fifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL) OR(@fifoDate IS NULL) OR(OLP.FifoDate IS NULL))
		                                      --AND ((@fabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLP.FabricationDate IS NULL))
		                                       AND ((@expirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND @expirationDate IS NOT NULL) OR(@expirationDate IS NULL) OR(OLP.expirationDate IS NULL))),0)
	                          + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		                                       FROM v_Other_LocationPicking_Sim AS OLPS
		                                      WHERE S.IdItem = OLPS.IdItem
		                                        AND S.IdWhs = OLPS.IdWhs
		                                        AND L.IdLocCode = OLPS.IdLocSourceProposal
		                                        AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR(OLPS.IdLpnSourceProposal IS NULL)) 
		                                        AND ((@idCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL) OR(@idCtgItem IS NULL) OR(OLPS.IdCtgItem IS NULL))
		                                        AND ((@lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL) OR(@lotNumber IS NULL) OR(OLPS.LotNumber IS NULL))
		                                        AND ((@fifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL) OR(@fifoDate IS NULL) OR(OLPS.FifoDate IS NULL))
		                                        --AND ((@fabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLPS.FabricationDate IS NULL))
		                                        AND ((@expirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND @expirationDate IS NOT NULL) OR(@expirationDate IS NULL) OR(OLPS.expirationDate IS NULL))),0)))) AS ItemQty,
	         S.IdItem,
	         @idCtgItem IdCategoryItem,
	         @lotNumber LotNumber,
	         @fifoDate FifoDate,
	         NULL FabricationDate, --@fabricationDate FabricationDate,
	         @expirationDate ExpirationDate,
	         S.IdLpnCode,
	         S.LpnTypeCode,
	         S.IdLpnCodeContainer,
	         S.LpnTypeCodeContainer,
	         L.IdLocCode,
	         L.LocCode,
	         L.RowLoc,
	         L.ColumnLoc,
	         L.LevelLoc,
	         L.Aisle,L.Status,
	         L.Description,
	         L.SharedItem,
	         L.OnlyLPN,
	         L.PickingFlow,
	         L.PutawayFlow,
	         L.CapacityLPN,
	         L.CapacityUnit,
	         L.Length,
	         L.Width,
	         L.Height,
	         L.Volume,
	         L.Weight,
	         L.LockInventory,
	         LT.IdLocType,
	         LT.LocTypeCode,
	         LT.LocTypeName,
	         LT.Status
	   FROM Stock S
	   INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
	   INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
	   INNER JOIN Item I ON I.IdItem = S.IdItem
	   INNER JOIN ItemLocation IL ON IL.IdLocCode = L.IdLocCode AND IL.IdItem = I.IdItem
	   WHERE S.IdWhs = L.IdWhs
	     AND S.IdItem = @idItem
	     AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
	     AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
	     AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
	   --AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
	     AND ((S.ExpirationDate = @expirationDate AND @expirationDate IS NOT NULL)OR(@expirationDate IS NULL))
	     AND S.IdWhs = @idWhs
	     AND L.LocTypeCode = 'PICK'
	     AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
	   --AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
	     AND L.Status = 1
	     AND L.LockInventory = 0
	   --AND S.HoldCode IS NULL
	  -- AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2)
	   GROUP BY
	       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
	       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
	       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
	       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
	       LT.LocTypeName, LT.Status
	   HAVING ((SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		                                        FROM v_Other_LocationPicking AS OLP
		                                       WHERE S.IdItem = OLP.IdItem
		                                         AND S.IdWhs = OLP.IdWhs
		                                         AND L.IdLocCode = OLP.IdLocSourceProposal
		                                         AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))
		                                         AND ((@idCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL) OR(@idCtgItem IS NULL) OR(OLP.IdCtgItem IS NULL))
		                                         AND ((@lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL) OR(@lotNumber IS NULL) OR(OLP.LotNumber IS NULL))
		                                         AND ((@fifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL) OR(@fifoDate IS NULL) OR(OLP.FifoDate IS NULL))
		                                       --AND ((@fabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLP.FabricationDate IS NULL))
		                                         AND ((@expirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND @expirationDate IS NOT NULL) OR(@expirationDate IS NULL) OR(OLP.expirationDate IS NULL))),0)
	                           + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
			                                      FROM v_Other_LocationPicking_Sim AS OLPS
			                                     WHERE S.IdItem = OLPS.IdItem
			                                      AND S.IdWhs = OLPS.IdWhs
			                                      AND L.IdLocCode = OLPS.IdLocSourceProposal 
			                                      AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR(OLPS.IdLpnSourceProposal IS NULL))
			                                      AND ((@idCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL) OR(@idCtgItem IS NULL) OR(OLPS.IdCtgItem IS NULL))
			                                      AND ((@lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL) OR(@lotNumber IS NULL)	OR(OLPS.LotNumber IS NULL))
			                                      AND ((@fifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL) OR(@fifoDate IS NULL) OR(OLPS.FifoDate IS NULL))
			                                      --AND ((@fabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLPS.FabricationDate IS NULL))
			                                      AND ((@expirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND @expirationDate IS NOT NULL) OR(@expirationDate IS NULL) OR(OLPS.expirationDate IS NULL))
			                                      ),0)))) &gt; 0)
	   	      
	   AND
	   ((SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		                                 FROM v_Other_LocationPicking AS OLP
		                                WHERE S.IdItem = OLP.IdItem
		                                  AND S.IdWhs = OLP.IdWhs
		                                  AND L.IdLocCode = OLP.IdLocSourceProposal
		                                  AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))
		                                  AND ((@idCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL) OR(@idCtgItem IS NULL) OR(OLP.IdCtgItem IS NULL))
		                                  AND ((@lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL) OR(@lotNumber IS NULL) OR(OLP.LotNumber IS NULL))
		                                  AND ((@fifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL) OR(@fifoDate IS NULL) OR(OLP.FifoDate IS NULL))
		                                --AND ((@fabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLP.FabricationDate IS NULL))
		                                  AND ((@expirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND @expirationDate IS NOT NULL) OR(@expirationDate IS NULL) OR(OLP.expirationDate IS NULL))),0)
	                     + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
			                                FROM v_Other_LocationPicking_Sim AS OLPS
			                               WHERE S.IdItem = OLPS.IdItem
			                                 AND S.IdWhs = OLPS.IdWhs
			                                 AND L.IdLocCode = OLPS.IdLocSourceProposal 
			                                 AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR(OLPS.IdLpnSourceProposal IS NULL))
			                                 AND ((@idCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL) OR(@idCtgItem IS NULL) OR(OLPS.IdCtgItem IS NULL))
			                                 AND ((@lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL) OR(@lotNumber IS NULL)	OR(OLPS.LotNumber IS NULL))
			                                 AND ((@fifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL) OR(@fifoDate IS NULL) OR(OLPS.FifoDate IS NULL))
			                               --AND ((@fabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLPS.FabricationDate IS NULL))
			                                 AND ((@expirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND @expirationDate IS NOT NULL) OR(@expirationDate IS NULL) OR(OLPS.expirationDate IS NULL))
			                                  ),0)))) &lt;= @itemQty)
			
	   ORDER BY ItemQty ASC, Ruta ASC
	</sql>
	<parameters>
	   <parameter type="Int">pickingFlow</parameter>
	   <parameter type="Int">idWhs</parameter>
	   <parameter type="Int">idOwn</parameter>
	   <parameter type="Int">idItem</parameter>
	   <parameter type="Int">idCtgItem</parameter>
	   <parameter type="Decimal">itemQty</parameter>
	   <parameter type="Decimal">totalWeight</parameter>
	   <parameter type="Decimal">totalVolumen</parameter>
	   <parameter type="DateTime">fifoDate</parameter>
	   <parameter type="DateTime">expirationDate</parameter>
	   <parameter type="DateTime">fabricationDate</parameter>
	   <parameter type="String">lotNumber</parameter>
	   <parameter type="String">idLpnCode</parameter>
	   <parameter type="String">idLpnCodeContainer</parameter>
	   <parameter type="Int">idInboundOrder</parameter>
	   <parameter type="Int">idOutboundOrder</parameter>
	   <parameter type="String">outboundType</parameter>
	   <parameter type="String">holdCode</parameter>
	   <parameter type="String">idForklift</parameter>
	   <parameter type="Int">idUser</parameter>
	 </parameters>
	</query>
   
   <query code="STKPrimaryGreaterQtyRepl">
	<sql>
		SELECT TOP 1
	         ABS(L.PickingFlow - @pickingFlow) AS Ruta,
	         S.IdWhs,
	         S.IdOwn,
	         (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		                                      FROM v_Other_LocationPicking AS OLP
		                                     WHERE S.IdItem = OLP.IdItem
		                                       AND S.IdWhs = OLP.IdWhs
		                                       AND L.IdLocCode = OLP.IdLocSourceProposal
		                                       AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))
		                                       AND ((@idCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL) OR(@idCtgItem IS NULL) OR(OLP.IdCtgItem IS NULL))
		                                       AND ((@lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL) OR(@lotNumber IS NULL) OR(OLP.LotNumber IS NULL))
		                                       AND ((@fifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL) OR(@fifoDate IS NULL) OR(OLP.FifoDate IS NULL))
		                                       --AND ((@fabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLP.FabricationDate IS NULL))
		                                       AND ((@expirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND @expirationDate IS NOT NULL) OR(@expirationDate IS NULL) OR(OLP.expirationDate IS NULL))),0)
	                         + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
		                                      FROM v_Other_LocationPicking_Sim AS OLPS
		                                     WHERE S.IdItem = OLPS.IdItem
		                                       AND S.IdWhs = OLPS.IdWhs
		                                       AND L.IdLocCode = OLPS.IdLocSourceProposal
		                                       AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR(OLPS.IdLpnSourceProposal IS NULL)) 
		                                       AND ((@idCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL) OR(@idCtgItem IS NULL) OR(OLPS.IdCtgItem IS NULL))
		                                       AND ((@lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL) OR(@lotNumber IS NULL) OR(OLPS.LotNumber IS NULL))
		                                       AND ((@fifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL) OR(@fifoDate IS NULL) OR(OLPS.FifoDate IS NULL))
		                                     --AND ((@fabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLPS.FabricationDate IS NULL))
		                                       AND ((@expirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND @expirationDate IS NOT NULL) OR(@expirationDate IS NULL) OR(OLPS.expirationDate IS NULL))),0)))) AS ItemQty,
	         S.IdItem,
	         @idCtgItem IdCategoryItem,
	         @lotNumber LotNumber,
	         @fifoDate FifoDate,
	         NULL FabricationDate, --@fabricationDate FabricationDate,
	         @expirationDate ExpirationDate,
	         S.IdLpnCode,
	         S.LpnTypeCode,
	         S.IdLpnCodeContainer,
	         S.LpnTypeCodeContainer,
	         L.IdLocCode,
	         L.LocCode,
	         L.RowLoc,
	         L.ColumnLoc,
	         L.LevelLoc,
	         L.Aisle,L.Status,
	         L.Description,
	         L.SharedItem,
	         L.OnlyLPN,
	         L.PickingFlow,
	         L.PutawayFlow,
	         L.CapacityLPN,
	         L.CapacityUnit,
	         L.Length,
	         L.Width,
	         L.Height,
	         L.Volume,
	         L.Weight,
	         L.LockInventory,
	         LT.IdLocType,
	         LT.LocTypeCode,
	         LT.LocTypeName,
	         LT.Status
	    FROM Stock S
	   INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
	   INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
	   INNER JOIN Item I ON I.IdItem = S.IdItem
	   INNER JOIN ItemLocation IL ON IL.IdLocCode = L.IdLocCode AND IL.IdItem = I.IdItem
	    WHERE S.IdWhs = L.IdWhs
	      AND S.IdItem = @idItem
	      AND ((S.IdCtgItem = @idCtgItem AND @idCtgItem IS NOT NULL)OR(@idCtgItem IS NULL))
	      AND ((S.LotNumber = @lotNumber AND @lotNumber IS NOT NULL)OR(@lotNumber IS NULL))
	      AND ((S.FifoDate = @fifoDate AND @fifoDate IS NOT NULL)OR(@fifoDate IS NULL))
	    --AND ((S.FabricationDate = @fabricationDate AND @fabricationDate IS NOT NULL)OR(@fabricationDate IS NULL))
	      AND ((S.ExpirationDate = @expirationDate AND @expirationDate IS NOT NULL)OR(@expirationDate IS NULL))
	      AND S.IdWhs = @idWhs
	      AND L.LocTypeCode = 'PICK'
	    --AND (L.HoldCode IS NULL OR L.HoldCode ='LBUSY')
	      AND (S.HoldCode IN (Select ReasonCode from Reason Where TypeInOut = 2) OR S.HoldCode IS NULL)
	      AND L.Status = 1
	      AND L.LockInventory = 0
	    -- AND S.HoldCode IS NULL
	   GROUP BY
	       S.IdWhs, S.IdOwn, S.IdItem, S.IdLpnCode, S.LpnTypeCode, S.IdLpnCodeContainer, S.LpnTypeCodeContainer,
	       L.PickingFlow, S.IdItem, L.IdLocCode, L.LocCode, L.RowLoc, L.ColumnLoc, L.LevelLoc, L.Aisle, L.Status,
	       L.Description, L.SharedItem, L.OnlyLPN, L.PickingFlow, L.PutawayFlow, L.CapacityLPN, L.CapacityUnit,
	       L.Length, L.Width, L.Height, L.Volume, L.Weight, L.LockInventory, LT.IdLocType, LT.LocTypeCode,
	       LT.LocTypeName, LT.Status
	   HAVING (SUM(S.ItemQty) - (COALESCE((SELECT SUM(COALESCE(OLP.ItemQty,0))
		                                       FROM v_Other_LocationPicking AS OLP
		                                      WHERE S.IdItem = OLP.IdItem
		                                        AND S.IdWhs = OLP.IdWhs
		                                        AND L.IdLocCode = OLP.IdLocSourceProposal
		                                        AND ((S.IdLpnCode = OLP.IdLpnSourceProposal AND OLP.IdLpnSourceProposal IS NOT NULL) OR(OLP.IdLpnSourceProposal IS NULL))
		                                        AND ((@idCtgItem = OLP.IdCtgItem AND OLP.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL) OR(@idCtgItem IS NULL) OR(OLP.IdCtgItem IS NULL))
		                                        AND ((@lotNumber = OLP.LotNumber AND OLP.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL) OR(@lotNumber IS NULL) OR(OLP.LotNumber IS NULL))
		                                        AND ((@fifoDate = OLP.FifoDate AND OLP.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL) OR(@fifoDate IS NULL) OR(OLP.FifoDate IS NULL))
		                                       --AND ((@fabricationDate = OLP.FabricationDate AND OLP.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLP.FabricationDate IS NULL))
		                                        AND ((@expirationDate = OLP.ExpirationDate AND OLP.ExpirationDate IS NOT NULL AND @expirationDate IS NOT NULL) OR(@expirationDate IS NULL) OR(OLP.expirationDate IS NULL))),0)
	                         + (COALESCE((SELECT SUM(COALESCE(OLPS.ItemQty,0))
			                                    FROM v_Other_LocationPicking_Sim AS OLPS
			                                   WHERE S.IdItem = OLPS.IdItem
			                                     AND S.IdWhs = OLPS.IdWhs
			                                     AND L.IdLocCode = OLPS.IdLocSourceProposal 
			                                     AND ((S.IdLpnCode = OLPS.IdLpnSourceProposal AND OLPS.IdLpnSourceProposal IS NOT NULL) OR(OLPS.IdLpnSourceProposal IS NULL))
			                                     AND ((@idCtgItem = OLPS.IdCtgItem AND OLPS.IdCtgItem IS NOT NULL AND @idCtgItem IS NOT NULL) OR(@idCtgItem IS NULL) OR(OLPS.IdCtgItem IS NULL))
			                                     AND ((@lotNumber = OLPS.LotNumber AND OLPS.LotNumber IS NOT NULL AND @lotNumber IS NOT NULL) OR(@lotNumber IS NULL)	OR(OLPS.LotNumber IS NULL))
			                                     AND ((@fifoDate = OLPS.FifoDate AND OLPS.FifoDate IS NOT NULL AND @fifoDate IS NOT NULL) OR(@fifoDate IS NULL) OR(OLPS.FifoDate IS NULL))
			                                   --AND ((@fabricationDate = OLPS.FabricationDate AND OLPS.FabricationDate IS NOT NULL AND @fabricationDate IS NOT NULL) OR(@fabricationDate IS NULL) OR(OLPS.FabricationDate IS NULL))
			                                     AND ((@expirationDate = OLPS.ExpirationDate AND OLPS.ExpirationDate IS NOT NULL AND @expirationDate IS NOT NULL) OR(@expirationDate IS NULL) OR(OLPS.expirationDate IS NULL))
			                      ),0)))) &gt;= @itemQty
	   ORDER BY ItemQty ASC, Ruta ASC
	</sql>
	<parameters>
	   <parameter type="Int">pickingFlow</parameter>
	   <parameter type="Int">idWhs</parameter>
	   <parameter type="Int">idOwn</parameter>
	   <parameter type="Int">idItem</parameter>
	   <parameter type="Int">idCtgItem</parameter>
	   <parameter type="Decimal">itemQty</parameter>
	   <parameter type="Decimal">totalWeight</parameter>
	   <parameter type="Decimal">totalVolumen</parameter>
	   <parameter type="DateTime">fifoDate</parameter>
	   <parameter type="DateTime">expirationDate</parameter>
	   <parameter type="DateTime">fabricationDate</parameter>
	   <parameter type="String">lotNumber</parameter>
	   <parameter type="String">idLpnCode</parameter>
	   <parameter type="String">idLpnCodeContainer</parameter>
	   <parameter type="Int">idInboundOrder</parameter>
	   <parameter type="Int">idOutboundOrder</parameter>
	   <parameter type="String">outboundType</parameter>
	   <parameter type="String">holdCode</parameter>
	   <parameter type="String">idForklift</parameter>
	   <parameter type="Int">idUser</parameter>
	 </parameters>
	</query>


 </querys>


