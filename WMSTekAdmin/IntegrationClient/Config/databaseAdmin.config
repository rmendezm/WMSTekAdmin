<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE pools SYSTEM "..\dtd\database.dtd">
<pools>
  <pool_config code ="WMSTek_WEB">
    <name>WMSTek_SQLSERVER</name>
    <!--<data_source_name>Database=WMSTEK30_02;Server=192.168.0.23;User ID=sa;Password=platano;Language=Spanish</data_source_name>-->
    <!--<data_source_name>Database=WMSTEKVITOKO;Server=10.12.9.91;User ID=sa;Password=Teatinos1;Language=Spanish</data_source_name>-->
    <!--<data_source_name>Database=WMSTEK30_03;Server=DXMXL810070G;User ID=sa;Password=1234;Language=Spanish</data_source_name>-->
    <!--<data_source_name>Database=WMSTEK30;Server=10.12.5.95\testing01;User ID=vcsepulvedao;Password=Vs2010$;Language=Spanish</data_source_name>-->
    <!--<data_source_name>Database=WMSTEK30_DiagQA;Server=SERV-SQL2005\WMSTEK30SQL2005;User ID=usuarioweb;Password=usuarioweb;Language=Spanish</data_source_name>-->
    <!--<data_source_name>Database=WMSTEK30_03;Server=SERV-SQL2005\WMSTEK30SQL2005;User ID=usuarioweb;Password=usuarioweb;Language=Spanish</data_source_name>-->
    <!--<data_source_name>Database=WMSTEK30_03;Server=10.12.9.91;User ID=usuarioweb;Password=usuarioweb;Language=Spanish</data_source_name>-->
    <!--<data_source_name>Database=WMSTEK3;Server=10.0.50.86;User ID=dreyes;Password=dreyes;Language=Spanish</data_source_name>-->
    <!--<data_source_name>Database=WMSTEK30_03;Server=192.168.0.23;User ID=usuarioweb;Password=platano;Language=Spanish</data_source_name>-->
    <!--<data_source_name>Database=WMSTEK30_03;Server=10.12.1.116;User ID=usuarioweb;Password=usuarioweb;</data_source_name>-->
    <!--<data_source_name>Database=WMSTEK30_01;Server=NEWIMAGEN2\MSSQLSERVER;User ID=sa;Password=123;</data_source_name>-->
    <!--<data_source_name>Database=WMSTEK30_01;Server=NTB-HP8440-LSV\WMSTEK30;User ID=sa;Password=alameda;</data_source_name>-->
    <!--<data_source_name>Database=WMSTEK3QA;Server=10.12.9.91;User ID=sa;Password=Teatinos1;Language=Spanish</data_source_name>-->
    <!--<data_source_name>Database=WMSTEK30_TestComer;Server=10.12.9.91;User ID=usuarioweb;Password=usuarioweb;Language=Spanish</data_source_name>-->
    <!--stg - Ingresar String de conexion-->
    <!--<data_source_name>Database=wmstek3;Server=ACONTRERAS-NB\SQL;User ID=sa;Password=123456;</data_source_name>-->
    <!--<data_source_name>Database=WMSTEK3;Server=VNARVAEZ-NB\MSSQLSERVER2012;User ID=sa;Password=Password01;Language=SPANISH</data_source_name>-->
    <data_source_name>Database=WMSTEK3;Server=VNARVAEZ-NB\MSSQLSERVER2012;User ID=sa;Password=Password01</data_source_name>
    <!--<data_source_name>Database=WMSTEK3;Server=VNARVAEZ-NB\MSSQLSERVER2012;User ID=sa;Password=Password01;Language=ENGLISH</data_source_name>-->
    <driver_class>System.Data.SqlClient.SqlConnection,SqlClient</driver_class>
    <time_out>15</time_out>
    <user>sa</user>
    <password>
    </password>
    <querys>
      <!-- BASE section  -->
      <query code="CfgParam_GetLayoutConfiguration">
        <sql>
          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
      </query>


      <query code="Base_TestConnection">
        <sql>
          SELECT 1 AS IsTrue
        </sql>
      </query>
      <!-- End BASE section  -->

      <!-- LANGUAGE section  -->
      <query code="Language_FindAll">
        <sql>
          SELECT IdLanguage, IsBaseLanguage, Name FROM CfgLanguage
        </sql>
      </query>
      <query code="Language_GetLanguageDefined">
        <sql>
          SELECT IdLanguage
          ,IsBaseLanguage
          ,CodeBase
          ,Name
          FROM CfgLanguage 
          WHERE IsBaseLanguage &lt; &gt; 1;
        </sql>
      </query>

      <!-- End LANGUAGE section  -->

      <!-- USER section  -->
      <query code="User_GetByUsernameAndPassord">
        <sql>
          SELECT  IdUserWms,
          UserName,
          Password,
          FirstName,
          LastName,
          WorkPhone,
          Email,
          IsBaseUser,
          CodStatus,
          l.IdLanguage,
          l.Name AS Language,
          l.CodeBase
          FROM CfgUserWms u
          LEFT JOIN CfgLanguage l ON u.IdLanguage = l.idLanguage
          WHERE UserName = @username AND Password = @password
        </sql>
        <parameters>
          <parameter type="String">username</parameter>
          <parameter type="String">password</parameter>
        </parameters>
      </query>

      <query code="User_FindAll">
        <sql>
          SELECT	u.IdUserWms,
          u.UserName,
          u.Password,
          u.FirstName,
          u.LastName,
          ISNULL(u.WorkPhone, '') AS WorkPhone,
          u.Email,
          u.IdLanguage,
          u.IsBaseUser,
          u.CodStatus,
          l.Name as Language,
          l.CodeBase,
          ISNULL(u.MobilePhone, '') AS MobilePhone,
          ISNULL(u.HousePhone, '') AS HousePhone,
          u.UserInternalCode,
          u.IdForeman,
          f.FirstName AS ForemanFirstName,
          f.LastName AS ForemanLastName,
          u.Comment
          FROM CfgUserWms u
          LEFT JOIN CfgLanguage l ON u.IdLanguage = l.idLanguage
          LEFT JOIN CfgUserWms f ON u.IdForeman = f.IdUserWms
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">u.UserName</filter>
          <filter name="Name" type="textLike">u.FirstName</filter>
          <filter name="Description" type="textLike">u.LastName</filter>
          <filter name="Status" type="numericEqual">u.CodStatus</filter>
        </filters>
      </query>

      <query code="GetLastUser">
        <sql>
          SELECT
          IdUserWms,
          UserName,
          Password,
          FirstName,
          LastName,
          ISNULL(WorkPhone, '') AS WorkPhone,
          Email,
          IsBaseUser,
          CodStatus,
          u.IdLanguage,
          l.Name as Language,
          l.CodeBase
          FROM CfgUserWms u
          LEFT JOIN CfgLanguage l ON u.IdLanguage = l.idLanguage
          WHERE IdUserWms = (SELECT COALESCE(MAX(IdUserWms), 0) FROM CfgUserWms);

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="User_GetByCodStatus">
        <sql>
          SELECT
          u.IdUserWms,
          UserName,
          Password,
          FirstName,
          LastName,
          IsBaseUser
          FROM CfgUserWms u
          WHERE CodStatus = @codStatus
          AND u.IdUserWms &lt;&gt; 1 <!--Filtra usuario Administrador-->
          ORDER BY FirstName;
        </sql>
        <parameters>
          <parameter type="Boolean">codStatus</parameter>
        </parameters>
      </query>

      <query code="User_GetByWorkZone">
        <sql>
          SELECT
          u.IdUserWms,
          UserName,
          Password,
          FirstName,
          LastName,
          IsBaseUser
          FROM CfgUserWms u
          INNER JOIN UserWorkZone uz ON u.IdUserWms = uz.IdUserWms
          WHERE uz.IdWorkZone = @idWorkZone
          AND u.CodStatus = 1
          ORDER BY FirstName;
        </sql>
        <parameters>
          <parameter type="Int">idWorkZone</parameter>
        </parameters>
      </query>

      <query code="User_GetByRole">
        <sql>
          SELECT
          u.IdUserWms,
          UserName,
          Password,
          FirstName,
          LastName,
          IsBaseUser,
          CodStatus
          FROM CfgUserWms u
          JOIN CfgUserWmsRole r ON u.IdUserWms = r.IdUserWms
          WHERE r.idRole = @idRole
          ORDER BY FirstName;;
        </sql>
        <parameters>
          <parameter type="Int">idRole</parameter>
        </parameters>
      </query>

      <query code="User_GetByNotInRole">
        <sql>
          SELECT
          u.IdUserWms,
          UserName,
          Password,
          FirstName,
          LastName,
          IsBaseUser,
          CodStatus
          FROM CfgUserWms u
          WHERE u.IdUserWms NOT IN (
          SELECT IdUserWms FROM CfgUserWmsRole
          WHERE idRole IN (@idRole))
          AND u.IdUserWms &lt;&gt; 1 <!--Filtra usuario Administrador-->
          ORDER BY FirstName;;
        </sql>
        <parameters>
          <parameter type="Int">idRole</parameter>
        </parameters>
      </query>

      <query code="User_GetByForeman">
        <sql>
          SELECT
          u.IdUserWms,
          u.UserName,
          u.Password,
          u.FirstName,
          u.LastName
          FROM CfgUserWms u
          WHERE u.IdForeman = @idUser
          ORDER BY FirstName;;
        </sql>
        <parameters>
          <parameter type="Int">idUser</parameter>
        </parameters>
      </query>

      <query code="User_GetByUsername">
        <sql>
          SELECT
          u.IdUserWms,
          u.UserName,
          u.Password,
          u.FirstName,
          u.LastName
          FROM CfgUserWms u
          WHERE u.UserName = @username;
        </sql>
        <parameters>
          <parameter type="String">username</parameter>
        </parameters>
      </query>

      <query code="User_GetOperatorByWhs">
        <sql>
          SELECT CUW.UserName
          FROM CfgUserWms CUW
          INNER JOIN WarehouseUserWms WUW ON WUW.IdUserWms = CUW.IdUserWms
          WHERE CUW.CodStatus = 1
          AND WUW.DefaultWhs = 1
          @SQLPart
          ORDER BY CUW.UserName
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">WUW.IdWhs</filter>
        </filters>
      </query>

      <query code="User_Update">
        <sql>
          UPDATE CfgUserWms SET
          FirstName = @firstName,
          LastName = @lastName,
          UserName = @userName,
          UserInternalCode = @userInternalCode,
          WorkPhone = @workPhone,
          MobilePhone = @mobilePhone,
          HousePhone = @housePhone,
          Email = @email,
          IdForeman = @idForeman,
          IdLanguage = @idLanguage,
          CodStatus = @codstatus,
          Comment = @comment,
          DateModified = @dateModified,
          UserModified = @userModified
          WHERE
          IdUserWms = @idUserWms
        </sql>
        <parameters>
          <parameter type="Int">idUserWms</parameter>
          <parameter type="String">firstName</parameter>
          <parameter type="String">lastName</parameter>
          <parameter type="String">userName</parameter>
          <parameter type="String">userInternalCode</parameter>
          <parameter type="String">workPhone</parameter>
          <parameter type="String">mobilePhone</parameter>
          <parameter type="String">housePhone</parameter>
          <parameter type="String">email</parameter>
          <parameter type="Int">idForeman</parameter>
          <parameter type="Int">idLanguage</parameter>
          <parameter type="Boolean">codstatus</parameter>
          <parameter type="String">comment</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="User_UpdatePass">
        <sql>
          UPDATE CfgUserWms SET
          Password = @Password
          WHERE
          IdUserWms = @idUserWms
        </sql>
        <parameters>
          <parameter type="Int">idUserWms</parameter>
          <parameter type="String">Password</parameter>
        </parameters>
      </query>

      <query code="User_Insert">
        <sql>
          INSERT INTO CfgUserWms
          (IdUserWms,
          FirstName,
          LastName,
          IsBaseUser,
          UserName,
          Password,
          UserInternalCode,
          WorkPhone,
          MobilePhone,
          HousePhone,
          Email,
          IdForeman,
          IdLanguage,
          CodStatus,
          Comment,
          DateCreated,
          UserCreated)

          VALUES
          (@IdUserWms,
          @firstName,
          @lastName,
          @isBaseUser,
          @userName,
          @password,
          @userInternalCode,
          @workPhone,
          @mobilePhone,
          @housePhone,
          @email,
          @idForeman,
          @idlanguage,
          @codStatus,
          @comment,
          @dateCreated,
          @userCreated)

        </sql>
        <parameters>
          <parameter type="Int">idUserWms</parameter>
          <parameter type="String">firstName</parameter>
          <parameter type="String">lastName</parameter>
          <parameter type="Int">isBaseUser</parameter>
          <parameter type="String">userName</parameter>
          <parameter type="String">password</parameter>
          <parameter type="String">userInternalCode</parameter>
          <parameter type="String">workPhone</parameter>
          <parameter type="String">mobilePhone</parameter>
          <parameter type="String">housePhone</parameter>
          <parameter type="String">email</parameter>
          <parameter type="Int">idForeman</parameter>
          <parameter type="Int">idLanguage</parameter>
          <parameter type="Boolean">codstatus</parameter>
          <parameter type="String">comment</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="User_Delete">
        <sql>
          DELETE FROM CfgUserWmsRole WHERE idUserWms = @idUserWms;

          DELETE FROM WarehouseUserWms WHERE IdUserWms = @idUserWms;

          DELETE FROM UserOwner WHERE IdUserWms = @idUserWms;

          DELETE FROM UserWorkZone WHERE IdUserWms = @idUserWms;

          DELETE FROM UserPrinter WHERE IdUserWms = @idUserWms;

          DELETE FROM CfgUserWms WHERE idUserWms = @idUserWms;
        </sql>

        <parameters>
          <parameter type="Int">idUserWms</parameter>
        </parameters>
      </query>

      <query code="User_DeleteRelations">
        <sql>
          DELETE FROM WarehouseUserWms WHERE IdUserWms = @idUserWms;

          DELETE FROM UserOwner WHERE IdUserWms = @idUserWms;

          DELETE FROM UserWorkZone WHERE IdUserWms = @idUserWms;

          DELETE FROM UserPrinter WHERE IdUserWms = @idUserWms;
        </sql>

        <parameters>
          <parameter type="Int">idUserWms</parameter>
        </parameters>
      </query>

      <query code="RoleUser_DeleteByRol">
        <sql>
          DELETE
          FROM CfgUserWmsRole
          WHERE IdRole = @idRole
        </sql>
        <parameters>
          <parameter  type="Int">idRole</parameter>
        </parameters>
      </query>

      <query code="RoleUser_DeleteByUser">
        <sql>
          DELETE
          FROM CfgUserWmsRole
          WHERE IdUserWms = @idUser
        </sql>
        <parameters>
          <parameter  type="Int">idUser</parameter>
        </parameters>
      </query>

      <query code="RoleUser_Insert">
        <sql>
          INSERT INTO dbo.CfgUserWmsRole
          (IdUserWms
          ,IdRole
          ,DateCreated
          ,UserCreated)
          values (
          @idUser,
          @idRole,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>
          <parameter  type="Int">idUser</parameter>
          <parameter type="Int">idRole</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="User_findOwners">
        <sql>
          SELECT U.IdOwn
          ,U.IdUserWms
          ,O.OwnCode
          ,O.OwnName
          ,O.TradeName
          ,U.DateCreated
          ,U.UserCreated
          ,U.DefaultOwner
          FROM UserOwner U
          INNER JOIN Owner O ON O.IdOwn = U.IdOwn
          WHERE IdUserWms = @IdUserWms
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
        </parameters>
      </query>

      <query code="User_InsertOwners">
        <sql>
          INSERT INTO UserOwner
          (IdOwn
          ,IdUserWms
          ,DateCreated
          ,UserCreated
          ,DefaultOwner)
          VALUES
          (@IdOwn
          ,@IdUserWms
          ,@DateCreated
          ,@UserCreated
          ,@DefaultOwner)
        </sql>
        <parameters>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdUserWms</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
          <parameter type="Int">DefaultOwner</parameter>
        </parameters>
      </query>

      <query code="User_DeleteOneOwner">
        <sql>
          DELETE FROM UserOwner
          WHERE IdUserWms = @IdUserWms
          AND IdOwn = @IdOwn
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>


      <query code="User_findPrinterByUser">
        <sql>
          SELECT
          U.IdUserWms
          ,U.IdPrinter
          ,P.PrinterName
          ,P.Description
          ,U.IdWmsProcessCode
          ,U.DefaultPrint
          ,U.DateCreated
          ,U.UserCreated
          ,U.DateModified
          ,U.UserModified
          FROM UserPrinter U
          INNER JOIN Printer P ON P.IdPrinter = U.IdPrinter
          WHERE IdUserWms = @IdUserWms
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
        </parameters>
      </query>

      <query code="User_InsertPrinters">
        <sql>
          INSERT INTO UserPrinter
          (IdUserWms
          ,IdPrinter
          ,IdWmsProcessCode
          ,DefaultPrint
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdUserWms
          ,@IdPrinter
          ,@IdWmsProcessCode
          ,@DefaultPrint
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
          <parameter type="Int">IdPrinter</parameter>
          <parameter type="String">IdWmsProcessCode</parameter>
          <parameter type="Int">DefaultPrint</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="User_DeleteOnePrinter">
        <sql>
          DELETE FROM UserPrinter
          WHERE IdUserWms = @IdUserWms
          AND IdPrinter = @IdPrinter
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
          <parameter type="Int">IdPrinter</parameter>
        </parameters>
      </query>

      <query code="User_findWorkZone">
        <sql>
          SELECT
          U.IdUserWms
          ,U.IdWorkZone
          ,W.WorkZoneName
          ,W.Description
          ,U.DateCreated
          ,U.UserCreated
          ,U.DateModified
          ,U.UserModified
          ,W.IdWhs
          FROM UserWorkZone U
          INNER JOIN WorkZone W ON W.IdWorkZone = U.IdWorkZone
          WHERE IdUserWms = @IdUserWms
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
        </parameters>
      </query>

      <query code="User_InsertWorkZone">
        <sql>
          INSERT INTO UserWorkZone
          (IdUserWms
          ,IdWorkZone
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdUserWms
          ,@IdWorkZone
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
          <parameter type="Int">IdWorkZone</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="User_DeleteOneWorkZone">
        <sql>
          DELETE FROM UserWorkZone
          WHERE IdUserWms = @IdUserWms
          AND IdWorkZone = @IdWorkZone
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
          <parameter type="Int">IdWorkZone</parameter>
        </parameters>
      </query>
      <!-- End USER section  -->

      <!-- RECEPTION section  -->

      <query code="Receipt_FindAll">
        <sql>
          SELECT DISTINCT R.IdReceipt,
          INO.IdInboundOrder,
          INO.InboundNumber,
          O.IdOwn,
          O.OwnCode,
          O.OwnName,
          O.TradeName,
          R.ReceiptDate,
          R.Status,
          RT.IdReceiptType,
          RT.ReceiptTypeCode,
          RT.ReceiptTypeName,
          R.ReferenceDoc,
          RDT.IdReferenceDocType,
          RDT.ReferenceDocTypeCode,
          RDT.ReferenceDocTypeName,
          C.IdCarrier,
          C.CarrierCode,
          C.CarrierName,
          R.IdTruckCode,
          D.IdDriver,
          D.DriverCode,
          D.DriverName,
          R.ShiftNumber,
          WS.IdWhs,
          WS.WhsCode,
          WS.ShortWhsName,
          WS.WhsName,
          R.UserWms,
          R.IdLocationForkLift,
          R.IdLocationStage

          FROM InboundOrder INO
          INNER JOIN InboundType It ON It.IdInboundType = INO.IdInboundType
          INNER JOIN Owner O ON INO.IdOwn = O.IdOwn
          INNER JOIN Receipt R ON R.IdInboundOrder = INO.IdInboundOrder
          LEFT JOIN ReceiptDetail Rd ON R.IdReceipt = Rd.IdReceipt
          LEFT JOIN Item itm ON itm.IdItem = Rd.IdItem
          LEFT JOIN ReceiptType RT ON R.IdReceiptType = RT.IdReceiptType
          LEFT JOIN ReferenceDocType RDT ON R.IdReferenceDocType = RDT.IdReferenceDocType
          LEFT JOIN Carrier C ON R.IdCarrier = C.IdCarrier
          LEFT JOIN Driver D ON R.DriverCode = D.DriverCode
          LEFT JOIN Warehouse WS ON R.IdWhs = WS.IdWhs
          @SQLPart
          ORDER BY R.IdReceipt DESC;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">INO.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">INO.InboundNumber</filter>
          <filter name="DateRange" type="textBetween">R.ReceiptDate</filter>
          <filter name="Owner" type="numericIn">O.IdOwn</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="InboundType" type="numericIn">It.IdInboundType</filter>
          <filter name="ReferenceDocType" type="numericIn">R.IdReferenceDocType</filter>
          <filter name="Vendor" type="numericIn">INO.IdVendor</filter>
          <filter name="Carrier" type="numericIn">C.IdCarrier</filter>
          <filter name="ExpectedDateRange" type="textBetween">INO.DateExpected</filter>
          <filter name="ExpirationDateRange" type="textBetween">INO.ExpirationDate</filter>
          <filter name="Driver" type="numericIn">D.IdDriver</filter>
          <filter name="GroupItem1" type="numericEqual">itm.IdGrpItem1</filter>
          <filter name="GroupItem2" type="numericEqual">itm.IdGrpItem2</filter>
          <filter name="GroupItem3" type="numericEqual">itm.IdGrpItem3</filter>
          <filter name="GroupItem4" type="numericEqual">itm.IdGrpItem4</filter>
        </filters>
      </query>

      <query code="ReceiptDetail_ById">
        <sql>
          SELECT   INB.InboundNumber
          , R.ReceiptDate
          , R.Status
          , I.IdItem
          , I.ItemCode
          , I.Description
          , I.LongItemName
          , CI.IdCtgItem
          , CI.CtgName
          , SUM(RD.ItemQty) Received
          , RD.FifoDate
          , RD.ExpirationDate
          , RD.FabricationDate
          , RD.LotNumber
          , RD.Price
          , RD.IdLpnCode
          FROM    ReceiptDetail RD
          INNER JOIN  Receipt R
          ON RD.IdReceipt = R.IdReceipt
          INNER JOIN Item I
          ON RD.IdItem = I.IdItem
          INNER JOIN InboundOrder INB
          ON R.IdInboundOrder = INB.IdInboundOrder
          LEFT OUTER JOIN CategoryItem CI
          ON RD.IdCtgItem = CI.IdCtgItem
          LEFT OUTER JOIN Lpn LPN
          ON LPN.IdLpnCode = RD.IdLpnCode

          WHERE   (RD.IdReceipt = @idReceipt)
          GROUP BY
          INB.InboundNumber
          , R.Status
          , R.ReceiptDate
          , I.IdItem
          , I.ItemCode
          , I.Description
          , I.LongItemName
          , CI.IdCtgItem
          , CI.CtgName
          , RD.IdItem
          , RD.FifoDate
          , RD.ExpirationDate
          , RD.FabricationDate
          , RD.LotNumber
          , RD.Price
          , RD.IdLpnCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idReceipt</parameter>
        </parameters>
      </query>

      <query code="Receipt_GetByInboundId">
        <sql>
          SELECT
          R.IdInboundOrder, R.ReceiptDate, R.Status, R.ReferenceDoc,
          R.IdReferenceDocType, RDT.ReferenceDocTypeName,
          R.IdCarrier, C.CarrierCode, R.IdTruckCode, R.DriverCode,
          RD.IdReceiptDetail, RD.IdItem, I.ItemCode, RD.IdCtgItem,
          CI.CtgName, RD.ItemQty, RD.FifoDate, RD.ExpirationDate,
          RD.FabricationDate, RD.LotNumber, RD.IdLpnCode
          FROM Receipt R
          LEFT JOIN ReferenceDocType RDT ON RDT.IdReferenceDocType = R.IdReferenceDocType
          LEFT JOIN Carrier C ON C.IdCarrier = R.IdCarrier
          LEFT JOIN ReceiptDetail RD ON RD.IdReceipt = R.IdReceipt
          LEFT JOIN Item I ON I.IdItem = RD.IdItem
          LEFT JOIN CategoryItem CI ON CI.IdCtgItem = RD.IdCtgItem
          WHERE R.idInboundOrder =  @idInboundOrder
        </sql>
        <parameters>
          <parameter type="Int">idInboundOrder</parameter>
        </parameters>
      </query>

      <query code="GetTotalReceiptReportConsult">
        <sql>
          SELECT IdInboundOrder ,IdWhs ,WhsName ,IdOwn ,OwnName ,InboundNumber ,IdInboundType ,Inboundtypename ,OrderComment ,IdVendor
          ,VendorName ,EmissionDate ,Status ,NameTrackInboundType ,IdReceipt ,ReceiptDate ,ReferenceDoc,IdReferenceDocType
          ,ReferenceDocTypeName ,IdCarrier,CarrierName,IdTruckCode,DriverCode,DriverName
          FROM v_Inb_InboundReceiptHeader
          WHERE IdOwn =  @IdOwn
          AND InboundNumber = @InboundNumber
        </sql>
        <parameters>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">InboundNumber</parameter>
        </parameters>
      </query>

      <query code="GetReceiptHeaderReportConsult">
        <sql>
          SELECT IdInboundOrder ,IdWhs ,WhsName ,IdOwn ,OwnName ,InboundNumber ,IdInboundType ,Inboundtypename ,OrderComment ,IdVendor
          ,VendorName ,EmissionDate ,Status ,NameTrackInboundType ,IdReceipt ,ReceiptDate ,ReferenceDoc,IdReferenceDocType
          ,ReferenceDocTypeName ,IdCarrier,CarrierName,IdTruckCode,DriverCode,DriverName
          FROM v_Inb_InboundReceiptHeader
          @SQLPart;
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Owner" type="numericIn">IdOwn</filter>
          <filter name="DocumentNbr" type="textEqual">InboundNumber</filter>
          <filter name="Code" type="numericEqual">IdReceipt</filter>
          <filter name="Description" type="textEqual">ReferenceDoc</filter>
        </filters>
      </query>

      <query code="InboundOrder_FindAll">
        <sql>
          SELECT DISTINCT
          iOr.IdInboundOrder
          ,whs.IdWhs
          ,whs.WhsCode
          ,whs.ShortWhsName
          ,whs.WhsName
          ,own.IdOwn
          ,own.OwnCode
          ,own.OwnName
          ,own.TradeName
          ,iOr.InboundNumber
          ,iTy.IdInboundType
          ,iTy.InboundTypeCode
          ,iOr.OrderComment
          ,ven.IdVendor
          ,ven.VendorName
          ,ven.VendorCode
          ,iOr.DateExpected
          ,iOr.EmissionDate
          ,iOr.ExpirationDate
          ,iOr.Status
          ,tra.IdTrackInboundType
          ,tra.NameTrackInboundType
          ,out.IdOutboundOrder
          ,out.OutboundNumber
          ,iOr.IsAsn
          ,iOr.PercentLpnInspection
          ,iOr.PercentQA
          ,iOr.ShiftNumber
          ,iOr.SpecialField1
          ,iOr.SpecialField2
          ,iOr.SpecialField3
          ,iOr.SpecialField4
          ,iOr.DateCreated
          ,iOr.UserCreated
          ,iOr.DateModified
          ,iOr.UserModified
          FROM InboundOrder iOr

          JOIN Owner own ON iOr.IdOwn = own.IdOwn
          JOIN Warehouse whs ON iOr.IdWhs = whs.IdWhs
          JOIN InboundType iTy ON iOr.IdInboundType = iTy.IdInboundType
          JOIN v_Inb_LatestTrack tra ON iOR.IdInboundOrder = tra.IdInboundOrder
          LEFT JOIN Vendor ven ON iOr.IdVendor = ven.IdVendor
          LEFT JOIN OutboundOrder out ON iOR.IdOutboundOrderSource = out.IdOutboundOrder
          LEFT JOIN InboundDetail iD ON iOR.IdInboundOrder = iD.IdInboundOrder
          LEFT JOIN Item itm ON itm.IdItem = iD.IdItem @SQLPart
          ORDER BY iOr.IdInboundOrder DESC;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">iOr.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">iOr.InboundNumber</filter>
          <filter name="DateRange" type="textBetween">iOr.EmissionDate</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">own.IdOwn</filter>
          <filter name="InboundType" type="numericIn">iTy.IdInboundType</filter>
        </filters>
      </query>

      <query code="InboundOrder_GetByOwner">
        <sql>
          SELECT
          iOr.IdInboundOrder
          ,whs.IdWhs
          ,whs.WhsCode
          ,whs.ShortWhsName
          ,whs.WhsName
          ,own.IdOwn
          ,own.OwnCode
          ,own.OwnName
          ,own.TradeName
          ,iOr.InboundNumber
          ,iTy.IdInboundType
          ,iTy.InboundTypeCode
          ,iOr.OrderComment
          ,ven.IdVendor
          ,ven.VendorName
          ,ven.VendorCode
          ,iOr.DateExpected
          ,iOr.EmissionDate
          ,iOr.ExpirationDate
          ,iOr.Status
          ,tra.IdTrackInboundType
          ,tra.NameTrackInboundType
          ,out.IdOutboundOrder
          ,out.OutboundNumber
          ,iOr.IsAsn
          ,iOr.PercentLpnInspection
          ,iOr.PercentQA
          ,iOr.ShiftNumber
          ,iOr.SpecialField1
          ,iOr.SpecialField2
          ,iOr.SpecialField3
          ,iOr.SpecialField4
          ,iOr.DateCreated
          ,iOr.UserCreated
          ,iOr.DateModified
          ,iOr.UserModified
          FROM InboundOrder iOr

          JOIN Owner own ON iOr.IdOwn = own.IdOwn
          JOIN Warehouse whs ON iOr.IdWhs = whs.IdWhs
          JOIN InboundType iTy ON iOr.IdInboundType = iTy.IdInboundType
          JOIN v_Inb_LatestTrack tra ON iOR.IdInboundOrder = tra.IdInboundOrder
          LEFT JOIN Vendor ven ON iOr.IdVendor = ven.IdVendor
          LEFT JOIN OutboundOrder out ON iOR.IdOutboundOrderSource = out.IdOutboundOrder
          WHERE iOr.IdOwn = @idOwner
          ORDER BY iOr.IdInboundOrder DESC;
        </sql>
        <parameters>
          <parameter type="Int">idOwner</parameter>
        </parameters>
      </query>

      <query code="InboundOrder_GetByNumberAndOwner">
        <sql>
          SELECT
          iOr.IdInboundOrder
          ,whs.IdWhs
          ,whs.WhsCode
          ,whs.ShortWhsName
          ,whs.WhsName
          ,own.IdOwn
          ,own.OwnCode
          ,own.OwnName
          ,own.TradeName
          ,iOr.InboundNumber
          ,iTy.IdInboundType
          ,iTy.InboundTypeCode
          ,iOr.OrderComment
          ,ven.IdVendor
          ,ven.VendorName
          ,ven.VendorCode
          ,iOr.DateExpected
          ,iOr.EmissionDate
          ,iOr.ExpirationDate
          ,iOr.Status
          ,tra.IdTrackInboundType
          ,tra.NameTrackInboundType
          ,tra.DateTrack
          ,out.IdOutboundOrder
          ,out.OutboundNumber
          ,iOr.IsAsn
          ,iOr.PercentLpnInspection
          ,iOr.PercentQA
          ,iOr.ShiftNumber
          ,iOr.SpecialField1
          ,iOr.SpecialField2
          ,iOr.SpecialField3
          ,iOr.SpecialField4
          ,iOr.DateCreated
          ,iOr.UserCreated
          ,iOr.DateModified
          ,iOr.UserModified
          FROM InboundOrder iOr

          JOIN Owner own ON iOr.IdOwn = own.IdOwn
          JOIN Warehouse whs ON iOr.IdWhs = whs.IdWhs
          JOIN InboundType iTy ON iOr.IdInboundType = iTy.IdInboundType
          JOIN v_Inb_LatestTrack tra ON iOR.IdInboundOrder = tra.IdInboundOrder
          LEFT JOIN Vendor ven ON iOr.IdVendor = ven.IdVendor
          LEFT JOIN OutboundOrder out ON iOR.IdOutboundOrderSource = out.IdOutboundOrder
          WHERE iOr.IdOwn = @idOwner
          AND iOr.InboundNumber = @inboundNumber
          ORDER BY iOr.IdInboundOrder DESC;
        </sql>
        <parameters>
          <parameter type="String">inboundNumber</parameter>
          <parameter type="Int">idOwner</parameter>
        </parameters>
      </query>

      <query code="InboundOrder_Insert">
        <sql>
          INSERT INTO InboundOrder
          (IdInboundOrder
          ,IdWhs
          ,IdOwn
          ,InboundNumber
          ,IdInboundType
          ,OrderComment
          ,IdVendor
          ,DateExpected
          ,EmissionDate
          ,ExpirationDate
          ,Status
          ,IdOutboundOrderSource
          ,IsAsn
          ,PercentLpnInspection
          ,PercentQA
          ,ShiftNumber
          ,DateCreated
          ,UserCreated)

          VALUES
          (@IdInboundOrder
          ,@IdWhs
          ,@IdOwn
          ,@InboundNumber
          ,@IdInboundType
          ,@OrderComment
          ,@IdVendor
          ,@DateExpected
          ,@EmissionDate
          ,@ExpirationDate
          ,@Status
          ,@IdOutboundOrderSource
          ,@IsAsn
          ,@PercentLpnInspection
          ,@PercentQA
          ,@ShiftNumber
          ,@dateCreated
          ,@userCreated)

        </sql>
        <parameters>
          <parameter type="Int">IdInboundOrder</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">InboundNumber</parameter>
          <parameter type="Int">IdInboundType</parameter>
          <parameter type="String">OrderComment</parameter>
          <parameter type="Int">IdVendor</parameter>
          <parameter type="DateTime">DateExpected</parameter>
          <parameter type="DateTime">EmissionDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="Int">IdOutboundOrderSource</parameter>
          <parameter type="Boolean">IsAsn</parameter>
          <parameter type="Int">PercentLpnInspection</parameter>
          <parameter type="Int">PercentQA</parameter>
          <parameter type="String">ShiftNumber</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="InboundOrder_Update">
        <sql>
          UPDATE InboundOrder
          SET IdInboundOrder = @IdInboundOrder
          ,IdWhs = @IdWhs
          ,IdOwn = @IdOwn
          ,InboundNumber = @InboundNumber
          ,IdInboundType = @IdInboundType
          ,OrderComment = @OrderComment
          ,IdVendor = @IdVendor
          ,DateExpected = @DateExpected
          ,EmissionDate = @EmissionDate
          ,ExpirationDate = @ExpirationDate
          ,Status = @Status
          ,IdOutboundOrderSource = @IdOutboundOrderSource
          ,IsAsn = @IsAsn
          ,PercentLpnInspection = @PercentLpnInspection
          ,PercentQA = @PercentQA
          ,ShiftNumber = @ShiftNumber
          ,DateModified = @dateModified
          ,UserModified = @userModified

          WHERE IdInboundOrder = @IdInboundOrder
        </sql>
        <parameters>
          <parameter type="Int">idInboundOrder</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">InboundNumber</parameter>
          <parameter type="Int">IdInboundType</parameter>
          <parameter type="String">OrderComment</parameter>
          <parameter type="Int">IdVendor</parameter>
          <parameter type="DateTime">DateExpected</parameter>
          <parameter type="DateTime">EmissionDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="Int">IdOutboundOrderSource</parameter>
          <parameter type="Boolean">IsAsn</parameter>
          <parameter type="Int">PercentLpnInspection</parameter>
          <parameter type="Int">PercentQA</parameter>
          <parameter type="String">ShiftNumber</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="InboundOrder_Delete">
        <sql>
          DELETE FROM InboundTrack
          WHERE IdInboundOrder = @IdInboundOrder;

          DELETE FROM InboundDetail
          WHERE IdInboundOrder = @IdInboundOrder;

          DELETE FROM InboundOrder
          WHERE IdInboundOrder = @IdInboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdInboundOrder</parameter>
        </parameters>
      </query>

      <query code="InboundOrderDetail_ById">
        <sql>
          SELECT IdInboundDetail
          ,inDet.IdInboundOrder
          ,inDet.LineNumber
          ,inDet.LineCode
          ,itm.IdItem
          ,itm.Description
          ,itm.ItemCode
          ,Ctg.IdCtgItem
          ,Ctg.CtgName
          ,inDet.ItemQty
          ,COALESCE((SELECT sum(ItemQty)
          from ReceiptDetail redet
          JOIN Receipt rec ON redet.IdReceipt = rec.IdReceipt
          JOIN InboundOrder inbo ON rec.IdInboundOrder = inbo.IdInboundOrder
          JOIN Item itm ON redet.IdItem = itm.IdItem
          WHERE  inDet.IdItem = itm.IdItem
          AND	inbo.IdInboundOrder = inDet.IdInboundOrder) , 0)AS Received
          ,inDet.Status
          ,inDet.LineComment
          ,inDet.FifoDate
          ,inDet.ExpirationDate
          ,inDet.FabricationDate
          ,inDet.LotNumber
          ,inDet.LpnCode
          ,inDet.Price
          ,inDet.SpecialField1
          ,inDet.SpecialField2
          ,inDet.SpecialField3
          ,inDet.SpecialField4
          ,inDet.DateCreated
          ,inDet.UserCreated
          ,inDet.DateModified
          ,inDet.UserModified
          FROM InboundDetail inDet
          JOIN Item itm ON itm.IdItem = inDet.IdItem
          LEFT OUTER JOIN CategoryItem Ctg ON Ctg.IdCtgItem = inDet.IdCtgItem
          WHERE IdInboundOrder = @idInboundOrder;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idInboundOrder</parameter>
        </parameters>
      </query>

      <query code="InboundDetail_Insert">
        <sql>
          INSERT INTO InboundDetail
          (IdInboundDetail
          ,IdInboundOrder
          ,LineNumber
          ,LineCode
          ,IdItem
          ,IdCtgItem
          ,ItemQty
          ,Status
          ,LineComment
          ,FifoDate
          ,ExpirationDate
          ,FabricationDate
          ,LotNumber
          ,LpnCode
          ,Price
          ,DateCreated
          ,UserCreated)

          VALUES
          (@IdInboundDetail
          ,@IdInboundOrder
          ,@LineNumber
          ,@LineCode
          ,@IdItem
          ,@IdCtgItem
          ,@ItemQty
          ,@Status
          ,@LineComment
          ,@FifoDate
          ,@ExpirationDate
          ,@FabricationDate
          ,@LotNumber
          ,@LpnCode
          ,@Price
          ,@dateCreated
          ,@userCreated)

        </sql>
        <parameters>
          <parameter type="Int">idInboundDetail</parameter>
          <parameter type="Int">idInboundOrder</parameter>
          <parameter type="Int">LineNumber</parameter>
          <parameter type="String">LineCode</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdCtgItem</parameter>
          <parameter type="Decimal">ItemQty</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">LineComment</parameter>
          <parameter type="DateTime">FifoDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="DateTime">FabricationDate</parameter>
          <parameter type="String">LotNumber</parameter>
          <parameter type="String">LpnCode</parameter>
          <parameter type="Decimal">Price</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="InboundDetail_Delete">
        <sql>
          DELETE FROM InboundDetail
          WHERE IdInboundDetail = @IdInboundDetail
          AND IdInboundOrder = @IdInboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdInboundDetail</parameter>
          <parameter type="Int">IdInboundOrder</parameter>
        </parameters>
      </query>

      <query code="InboundDetail_DeleteAll">
        <sql>
          DELETE FROM InboundDetail
          WHERE IdInboundOrder = @IdInboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdInboundOrder</parameter>
        </parameters>
      </query>

      <query code="InboundType_FindAll">
        <sql>
          SELECT IdInboundType
          ,InboundTypeCode
          ,InboundTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM InboundType;
        </sql>
      </query>


      <query code="InboundType_GetByCode">
        <sql>
          SELECT IdInboundType
          ,InboundTypeCode
          ,InboundTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM InboundType
          WHERE InboundTypeCode = @inboundTypeCode
        </sql>
        <parameters>
          <parameter type="String">inboundTypeCode</parameter>
        </parameters>
      </query>

      <query code="InboundType_FindNacInt">
        <sql>
          SELECT IdInboundType
          ,InboundTypeCode
          ,InboundTypeName
          FROM InboundType
          WHERE IdInboundType IN (1,2,9);
        </sql>
      </query>

      <query code="InboundType_FindDev">
        <sql>
          SELECT IdInboundType
          ,InboundTypeCode
          ,InboundTypeName
          FROM InboundType
          WHERE IdInboundType IN (6,7);
        </sql>
      </query>

      <query code="InboundType_FindProd">
        <sql>
          SELECT IdInboundType
          ,InboundTypeCode
          ,InboundTypeName
          FROM InboundType
          WHERE IdInboundType IN (4,5);
        </sql>
      </query>

      <query code="InboundType_GetTrasp">
        <sql>
          SELECT IdInboundType
          ,InboundTypeCode
          ,InboundTypeName
          FROM InboundType
          WHERE IdInboundType IN (3,8);
        </sql>
      </query>

      <query code="InboundType_GetById">
        <sql>
          SELECT IdInboundType
          ,InboundTypeCode
          ,InboundTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM InboundType
          WHERE IdInboundType = @IdInboundType;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdInboundType</parameter>
        </parameters>
      </query>

      <query code="IdInboundType_GetById">
        <sql>
          SELECT IdInboundType
          ,InboundTypeCode
          ,InboundTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM InboundType
          WHERE IdInboundType = @IdInboundType;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdInboundType</parameter>
        </parameters>
      </query>

      <query code="TrackInbound_FindAll">
        <sql>
          SELECT IdTrackInboundType
          ,NameTrackInboundType
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM TrackInboundType
        </sql>
      </query>

      <query code="GetTrackInboundTypeByOrder">
        <sql>
          SELECT IdTrackInboundType
          FROM InboundTrack
          WHERE IdInboundOrder = @idOrder
        </sql>
        <parameters>
          <parameter type="Int">idOrder</parameter>
        </parameters>
      </query>

      <query code="GetTrackInboundTypeByStatus">
        <sql>
          SELECT IdTrackInboundType
          ,NameTrackInboundType
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM TrackInboundType
          WHERE IdTrackInboundType IN(@SQLPart);

        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
      </query>

      <query code="InsertInboundTrack">
        <sql>
          INSERT INTO InboundTrack
          (IdInboundOrder
          ,IdTrackInboundType
          ,DateTrack)
          SELECT @IdInboundOrder,
          @IdInboundTrackType,
          @DateTrack
        </sql>
        <parameters>
          <parameter type="Int">IdInboundOrder</parameter>
          <parameter type="Int">IdInboundTrackType</parameter>
          <parameter type="DateTime">DateTrack</parameter>
        </parameters>
      </query>
      <!-- End RECEPTION section  -->


      <!-- Begin OUTBOUND section  -->
      <query code="OutboundOrder_FindAll">
        <sql>
          SELECT DISTINCT
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs1.WhsCode,
          Whs1.ShortWhsName,
          Whs1.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          tra.IdTrackOutboundType,
          tra.NameTrackOutboundType,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Co1.CountryName	as CountryDeliveryName,
          Out.IdStateDelivery,
          St1.StateName as StateDeliveryName,
          Out.IdCityDelivery,
          Ci1.CityName as CityDeliveryName,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          whs2.WhsCode as WhsTargetCode,
          whs2.ShortWhsName as WhsTargetShortName,
          whs2.WhsName as WhsTargetName,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          CO2.CountryName	as CountryFactName,
          Out.IdStateFact,
          St2.StateName as StateFactName,
          Out.IdCityFact,
          Ci2.CityName as CityFactName,
          Out.FactPhone,
          Out.FactEmail,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified
          FROM OutboundOrder Out

          LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
          LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs
          LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
          LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
          LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity
          LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
          LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
          LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity
          LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
          JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
          LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem @SQLPart
          ORDER BY Out.IdOutboundOrder DESC;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">Whs1.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">Out.OutboundNumber</filter>
          <filter name="DateRange" type="textBetween">Out.EmissionDate</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">Own.IdOwn</filter>
        </filters>
      </query>

      <query code="SatisfactionLevel_FindAll">
        <sql>
          SELECT 
          OO.IdOutboundOrder, 
          OO.IdWhs, 
          W.WhsName, 
          OO.IdOwn, 
          O.OwnName, 
          OO.OutboundNumber,
          OO.IdOutboundType, 
          OT.OutboundTypeName, 
          VLT.IdTrackOutboundType,
          VLT.NameTrackOutboundType,
          COALESCE(REQ.TotRequest,0) Request,  
          COALESCE(PICK.TotPicking,0) Picking,
          COALESCE(REQ.TotRequest,0) - COALESCE(PICK.TotPicking,0) Diference,
          COALESCE(STK.InStock,0) InStock,
          PctSatisfaction = CASE WHEN (COALESCE(REQ.TotRequest,0) - COALESCE(PICK.TotPicking,0)) &lt;= COALESCE(STK.InStock,0) THEN 100.0
          ELSE ROUND(COALESCE(STK.InStock,0)*100 / (COALESCE(REQ.TotRequest,0) - COALESCE(PICK.TotPicking,0)),1) END,
          OO.EmissionDate,
          OO.ExpectedDate,
          OO.CustomerCode,
          OO.CustomerName,
          OO.DeliveryAddress1,
          OO.IdCountryDelivery,
          C.CountryName CountryDeliveryName,
          OO.IdStateDelivery,
          S.StateName StateDeliveryName,
          OO.IdCityDelivery,
          CIT.CityName CityDeliveryName,
          OO.CarrierCode,
          OO.RouteCode
          FROM OutboundOrder OO
          INNER JOIN Warehouse W
          ON W.IdWhs = OO.IdWhs
          INNER JOIN Owner O
          ON O.IdOwn = OO.IdOwn
          INNER JOIN OutboundType OT
          ON OT.IdOutboundType = OO.IdOutboundType
          LEFT JOIN v_Oub_LatestTrack VLT
          ON VLT.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN Country C
          ON C.IdCountry = OO.IdCountryDelivery
          LEFT JOIN State S
          ON S.IdState = OO.IdStateDelivery
          LEFT JOIN City CIT
          ON CIT.IdCity = OO.IdCityDelivery
          LEFT JOIN (SELECT D.IdOutboundOrder, SUM(DD.ItemQty) TotPicking
          FROM Dispatch D
          INNER JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE DD.IdWmsProcessCode IN ('PICK','PKBAT','PKKIT','PKPSS','PKUNK','PKVAS','PKWAV')
          GROUP BY D.IdOutboundOrder) PICK
          ON  PICK.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN (SELECT OO.IdOutboundOrder, SUM(OD.ItemQty) TotRequest
          FROM OutBoundOrder OO
          INNER JOIN OutboundDetail OD
          ON OD.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN v_Oub_LatestTrack LT
          ON OO.IdOutboundOrder = LT.IdOutboundOrder
          WHERE LT.IdTrackOutboundType IS NULL OR LT.IdTrackOutboundType &lt; 70
			                GROUP BY  OO.IdOutboundOrder) REQ
 		      ON  REQ.IdOutboundOrder = OO.IdOutboundOrder
	        LEFT JOIN (SELECT OO.IdOutboundOrder, SUM(S.ItemQty) InStock
		                FROM OutBoundOrder OO 
			              INNER JOIN OutboundDetail OD 
                    ON OD.IdOutboundOrder = OO.IdOutboundOrder
			              LEFT JOIN Stock S 
                    ON S.IdWhs = OO.IdWhs 
                    AND S.IdItem = OD.IdItem
					          AND S.IdCtgItem = OD.IdCtgItem  
			              LEFT JOIN Location L 
                    ON L.IdLocCode = S.IdLocCode
						        AND L.LocTypeCode IN ('PUT', 'PICK')
			              LEFT JOIN v_Oub_LatestTrack LT 
                    ON OO.IdOutboundOrder = LT.IdOutboundOrder 
			              WHERE LT.IdTrackOutboundType IS NULL OR LT.IdTrackOutboundType &lt; 70
			              GROUP BY  OO.IdOutboundOrder) STK
		      ON STK.IdOutboundOrder = OO.IdOutboundOrder
          @SQLPart
          ORDER BY OO.IdOutboundOrder;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">OO.IdWhs</filter>
          <filter name="Owner" type="numericIn">OO.IdOwn</filter>
          <filter name="OutboundType" type="textIn">OT.IdOutboundType</filter>
          <filter name="TrackOutboundType" type="numericIn">VLT.IdTrackOutboundType</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="Name" type="textLike">OO.CustomerCode</filter>
          <filter name="Description" type="textLike">OO.CustomerName</filter>
          <filter name="DateRange" type="textBetween">OO.ExpectedDate</filter>
        </filters>
      </query>

      <query code="SatisfactionLevelDetail_FindAll">
        <sql>
          SELECT
          OO.IdWhs,
          OO.OutboundNumber,
          OD.IdOutboundDetail,
          OD.IdOutboundOrder,
          OD.LineNumber,
          OD.IdItem,
          I.ItemCode,
          I.LongItemName,
          OD.IdCtgItem,
          CI.CtgName,
          OD.ItemQty,
          COALESCE(TSK.PickPending,0) PickPending,
          COALESCE(SPK.StockInPick,0) StockInPick,
          COALESCE(SPU.StockInPut,0) StockInPut,
          PctSatisfactionDetail = CASE WHEN (COALESCE(SPK.StockInPick,0) + COALESCE(SPU.StockInPut,0) - COALESCE(TSK.PickPending,0)) &gt;= OD.ItemQty THEN 100.0
                                 WHEN (COALESCE(SPK.StockInPick,0) + COALESCE(SPU.StockInPut,0) - COALESCE(TSK.PickPending,0)) &lt; 0 THEN 0
                                 ELSE  (COALESCE(SPK.StockInPick,0) + COALESCE(SPU.StockInPut,0) - COALESCE(TSK.PickPending,0)) * 100 / OD.ItemQty  END,
          OD.LotNumber,
          OD.FifoDate,
          OD.ExpirationDate ExpirationDateDetail,
          OD.FabricationDate
          FROM OutboundOrder OO
          INNER JOIN OutboundDetail OD
          ON OO.IdOutboundOrder = OD.IdOutboundOrder
          INNER JOIN Item I
          ON I.IdItem = OD.IdItem
          INNER JOIN CategoryItem CI
          ON CI.IdCtgItem = OD.IdCtgItem
          LEFT JOIN (SELECT T.IdWhs, TD.IdItem, TD.IdCtgItem, SUM(TD.ProposalQty) PickPending
          FROM TASK T
          LEFT JOIN TaskDetail TD
          ON TD.IdTask = T.IdTask
          WHERE T.TaskTypeCode IN ('PIKOR','PIKBT','PIKWV','PIKPS','PIKIT','PIUNK','PIKVA','PAKOR')
          AND TD.IsComplete = 0
          AND T.IsComplete = 0
          GROUP BY T.IdWhs, TD.IdItem, TD.IdCtgItem) TSK
          ON TSK.IdWhs = OO.IdWhs
          AND TSK.IdItem = OD.IdItem
          AND TSK.IdCtgItem = OD.IdCtgItem
          LEFT JOIN (SELECT S.IdWhs, S.IdItem, S.IdCtgItem, SUM(S.ItemQty) StockInPick
          FROM Stock S
          INNER JOIN Location L
          ON L.IdLocCode = S.IdLocCode
          WHERE L.LocTypeCode = 'PICK'
          AND S.HoldCode IS NULL
          GROUP BY S.IdWhs, S.IdItem, S.IdCtgItem) SPK
          ON SPK.IdWhs = OO.IdWhs
          AND SPK.IdItem = OD.IdItem
          AND SPK.IdCtgItem = OD.IdCtgItem
          LEFT JOIN (SELECT S.IdWhs, S.IdItem, S.IdCtgItem, SUM(S.ItemQty) StockInPut
          FROM Stock S
          INNER JOIN Location L
          ON L.IdLocCode = S.IdLocCode
          WHERE L.LocTypeCode = 'PUT'
          AND S.HoldCode IS NULL
          GROUP BY S.IdWhs, S.IdItem, S.IdCtgItem) SPU
          ON SPU.IdWhs = OO.IdWhs
          AND SPU.IdItem = OD.IdItem
          AND SPU.IdCtgItem = OD.IdCtgItem
          WHERE OD.Status = 1
          AND OD.IdOutboundOrder = @idOutboundOrder
          ORDER BY OD.LineNumber

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idOutboundOrder</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="ReadyForDispatch_FindAll">
        <sql>
          SELECT
          OO.IdOutboundOrder,
          OO.IdWhs,
          W.WhsName,
          OO.IdOwn,
          O.OwnName,
          OO.OutboundNumber,
          OO.IdOutboundType,
          OT.OutboundTypeName,
          VLT.IdTrackOutboundType,
          VLT.NameTrackOutboundType,
          COALESCE(REQ.TotRequest,0) totRequest,
          COALESCE(PREP.TotPrepared,0) AS totPicking,
          COALESCE(PREP.TotPrepared,0) - COALESCE(REQ.TotRequest,0) totDiference,
          OO.EmissionDate,
          OO.ExpectedDate,
          OO.CustomerCode,
          OO.CustomerName,
          OO.DeliveryAddress1,
          OO.IdCountryDelivery,
          C.CountryName CountryDeliveryName,
          OO.IdStateDelivery,
          S.StateName StateDeliveryName,
          OO.IdCityDelivery,
          CIT.CityName CityDeliveryName,
          OO.CarrierCode,
          OO.RouteCode
          FROM OutboundOrder OO
          INNER JOIN Warehouse W
          ON W.IdWhs = OO.IdWhs
          INNER JOIN Owner O
          ON O.IdOwn = OO.IdOwn
          INNER JOIN OutboundType OT
          ON OT.IdOutboundType = OO.IdOutboundType
          LEFT JOIN v_Oub_LatestTrack VLT
          ON VLT.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN Country C
          ON C.IdCountry = OO.IdCountryDelivery
          LEFT JOIN State S
          ON S.IdState = OO.IdStateDelivery
          LEFT JOIN City CIT
          ON CIT.IdCity = OO.IdCityDelivery
          LEFT JOIN (SELECT OO.IdOutboundOrder, SUM(OD.ItemQty) TotRequest
          FROM OutBoundOrder OO
          INNER JOIN OutboundDetail OD
          ON OD.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN v_Oub_LatestTrack LT
          ON OO.IdOutboundOrder = LT.IdOutboundOrder
          WHERE LT.IdTrackOutboundType IS NULL
          OR LT.IdTrackOutboundType &lt; 70
		                GROUP BY  OO.IdOutboundOrder) REQ
 		      ON  REQ.IdOutboundOrder = OO.IdOutboundOrder
	        LEFT JOIN (SELECT D.IdOutboundOrder, V.IdTrackOutboundType, SUM(DD.ItemQty) TotPrepared
		                FROM Dispatch D 
			              INNER JOIN v_Oub_LatestTrack V 
                    ON V.IdOutboundOrder = D.IdOutboundOrder
			              INNER JOIN DispatchDetail DD 
                    ON D.IdDispatch = DD.IdDispatch				
                    WHERE D.IdTrackOutbound &lt; 70 
                    AND V.IdTrackOutboundType &lt; 70
          GROUP BY D.IdOutboundOrder, V.IdTrackOutboundType) PREP
          ON  PREP.IdOutboundOrder = OO.IdOutboundOrder
          AND PREP.IdTrackOutboundType = VLT.IdTrackOutboundType
          WHERE OO.IdOutboundType IN (1,2,3)
          AND VLT.IdTrackOutboundType IN (21,41,51)
          @SQLPart
          ORDER BY OO.IdOutboundOrder

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">OO.IdWhs</filter>
          <filter name="Owner" type="numericIn">OO.IdOwn</filter>
          <filter name="OutboundType" type="textIn">OT.IdOutboundType</filter>
          <filter name="TrackOutboundType" type="numericIn">VLT.IdTrackOutboundType</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="Name" type="textLike">OO.CustomerCode</filter>
          <filter name="Description" type="textLike">OO.CustomerName</filter>
          <filter name="DateRange" type="textBetween">OO.ExpectedDate</filter>
          <filter name="Country" type="textIn">OO.IdCountryDelivery</filter>
          <filter name="State" type="textIn">OO.IdStateDelivery</filter>
          <filter name="City" type="textIn">OO.IdCityDelivery</filter>
          <filter name="Carrier" type="textLike">OO.CarrierCode</filter>
          <filter name="Route" type="textLike">OO.RouteCode</filter>
        </filters>
      </query>

      <query code="ReadyForDispatchDetail_FindAll">
        <sql>
          SELECT
          OO.IdWhs,
          OD.IdOutboundDetail,
          OD.IdOutboundOrder,
          OO.OutboundNumber,
          OD.LineNumber,
          OD.IdItem,
          I.ItemCode,
          I.LongItemName,
          OD.ItemQty,
          COALESCE(PREP.TotPrepared,0) PickPending,
          COALESCE(PREP.TotPrepared,0)- OD.ItemQty StockInPick
          FROM OutboundOrder OO
          INNER JOIN OutboundDetail OD
          ON OD.IdOutboundOrder = OO.IdOutboundOrder
          INNER JOIN Item I
          ON I.IdItem = OD.IdItem
          LEFT JOIN v_Oub_LatestTrack VLT
          ON VLT.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN (SELECT D.IdOutboundOrder, LineNumber, SUM(DD.ItemQty) TotPrepared
          FROM Dispatch D
          INNER JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE DD.IdWmsProcessCode = 'PACK' --Packing
          GROUP BY D.IdOutboundOrder, LineNumber) PREP
          ON  PREP.IdOutboundOrder = OO.IdOutboundOrder
          AND PREP.LineNumber = OD.LineNumber
          WHERE OO.IdOutboundType IN (1,2,3)
          AND VLT.IdTrackOutboundType = 21 --Packing
          AND OD.IdOutboundOrder = @idOutboundOrder
          UNION
          SELECT
          OO.IdWhs,
          OD.IdOutboundDetail,
          OD.IdOutboundOrder,
          OO.OutboundNumber,
          OD.LineNumber,
          OD.IdItem,
          I.ItemCode,
          I.LongItemName,
          OD.ItemQty,
          COALESCE(PREP.TotPrepared,0) Prepared,
          COALESCE(PREP.TotPrepared,0)- OD.ItemQty Diff
          FROM OutboundOrder OO
          INNER JOIN OutboundDetail OD
          ON OD.IdOutboundOrder = OO.IdOutboundOrder
          INNER JOIN Item I
          ON I.IdItem = OD.IdItem
          LEFT JOIN v_Oub_LatestTrack VLT
          ON VLT.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN (SELECT D.IdOutboundOrder, LineNumber, SUM(DD.ItemQty) TotPrepared
          FROM Dispatch D
          INNER JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE DD.IdWmsProcessCode = 'RUTEO'  --Ruteo
          GROUP BY D.IdOutboundOrder, LineNumber) PREP
          ON  PREP.IdOutboundOrder = OO.IdOutboundOrder
          AND PREP.LineNumber = OD.LineNumber
          WHERE OO.IdOutboundType IN (1,2,3)
          AND VLT.IdTrackOutboundType = 41 -- Movto Anden
          AND OD.IdOutboundOrder = @idOutboundOrder
          UNION
          SELECT
          OO.IdWhs,
          OD.IdOutboundDetail,
          OD.IdOutboundOrder,
          OO.OutboundNumber,
          OD.LineNumber,
          OD.IdItem,
          I.ItemCode,
          I.LongItemName,
          OD.ItemQty,
          COALESCE(PREP.TotPrepared,0) Prepared,
          COALESCE(PREP.TotPrepared,0)- OD.ItemQty Diff
          FROM OutboundOrder OO
          INNER JOIN OutboundDetail OD
          ON OD.IdOutboundOrder = OO.IdOutboundOrder
          INNER JOIN Item I
          ON I.IdItem = OD.IdItem
          LEFT JOIN v_Oub_LatestTrack VLT
          ON VLT.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN (SELECT D.IdOutboundOrder, LineNumber, SUM(DD.ItemQty) TotPrepared
          FROM Dispatch D
          INNER JOIN DispatchDetail DD
          ON D.IdDispatch = DD.IdDispatch
          WHERE DD.IdWmsProcessCode = 'LOAD' --Loading
          GROUP BY D.IdOutboundOrder, LineNumber) PREP
          ON  PREP.IdOutboundOrder = OO.IdOutboundOrder
          AND PREP.LineNumber = OD.LineNumber
          WHERE OO.IdOutboundType IN (1,2,3)
          AND VLT.IdTrackOutboundType = 51 --Loading
          AND OD.IdOutboundOrder = @idOutboundOrder
          ORDER BY OD.LineNumber

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idOutboundOrder</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>
      
      <query code="OutboundOrderDetail_ById">
        <sql>
          SELECT IdOutboundDetail
          ,outDet.IdOutboundOrder
          ,outDet.LineNumber
          ,outDet.LineCode
          ,outDet.IdItem
          ,i.ItemCode
          ,i.Description
          ,outDet.IdCtgItem
          ,ca.CtgName
          ,outDet.ItemQty
          ,outDet.Status
          ,outDet.LotNumber
          ,outDet.FifoDate
          ,outDet.ExpirationDate
          ,outDet.FabricationDate
          FROM OutboundDetail outDet
          LEFT JOIN categoryitem ca ON outDet.IdCtgItem = ca.IdCtgItem
          LEFT JOIN Item i ON outDet.IdItem = i.IdItem
          WHERE outDet.IdOutboundOrder = @idOutboundOrder;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idOutboundOrder</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
      </query>

      <query code="OutboundOrderDetail_GetByOutboundId_Kit">
        <sql>
          SELECT
          outDet.IdOutboundDetail
          ,outDet.IdOutboundOrder
          ,outDet.LineNumber
          ,outDet.LineCode
          ,i.IdItem
          ,i.ItemCode
          ,i.Description
          ,outDet.IdCtgItem
          ,ca.CtgName
          ,(outDet.ItemQty * kit.ItemQty) ItemQty
          ,outDet.Status
          ,outDet.LotNumber
          ,outDet.FifoDate
          ,outDet.ExpirationDate
          ,outDet.FabricationDate
          FROM OutboundDetail outDet
          INNER JOIN Kit ON outDet.IdItem = kit.IdItemKit
          INNER JOIN Item i ON kit.IdItemBase = i.IdItem
          LEFT JOIN categoryitem ca ON outDet.IdCtgItem = ca.IdCtgItem
          WHERE outDet.IdOutboundOrder = @idOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">idOutboundOrder</parameter>
        </parameters>
      </query>

      <!-- Muestra stock asociado a un Item, menos el stock reservado por tareas de picking pendientes -->
      <query code="OutboundOrderDetail_ById_ItemStock">
        <sql>
          SELECT IdOutboundDetail
          ,outDet.IdOutboundOrder
          ,outDet.LineNumber
          ,outDet.LineCode
          ,outDet.IdItem
          ,i.ItemCode
          ,i.Description
          ,outDet.IdCtgItem
          ,ca.CtgName
          ,outDet.ItemQty
          ,(SELECT (stock.ItemQty - taskDetail.ItemQty) AS ItemQty FROM
          (SELECT COALESCE(SUM(s.ItemQty), 0) AS ItemQty
          FROM Stock s
          INNER JOIN Location l ON s.idLocCode = l.idLocCode
          WHERE l.LocTypeCode IN('PICK', 'PUT')
          AND s.IdItem = i.IdItem) stock,
          (SELECT COALESCE(SUM(td.ProposalQty), 0) AS ItemQty
          FROM TaskDetail td
          WHERE td.Status = 1
          AND td.IsComplete = 0
          AND td.IdItem = i.IdItem) taskDetail) AS ItemStock
          ,outDet.Status
          ,outDet.LotNumber
          ,outDet.FifoDate
          ,outDet.ExpirationDate
          ,outDet.FabricationDate
          FROM OutboundDetail outDet
          LEFT JOIN categoryitem ca ON outDet.IdCtgItem = ca.IdCtgItem
          LEFT JOIN Item i ON outDet.IdItem = i.IdItem
          WHERE outDet.IdOutboundOrder = @idOutboundOrder;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idOutboundOrder</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
      </query>

      <query code="OutboundOrder_GetById">
        <sql>
          SELECT
          Out.IdOutboundOrder,
          Whs.IdWhs,
          Whs.WhsCode,
          Whs.ShortWhsName,
          Whs.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Out.IdStateDelivery,
          Out.IdCityDelivery,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          Out.FullShipment,
          Out.CarrierCode,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          Out.IdStateFact,
          Out.IdCityFact,
          Out.FactPhone,
          Out.FactEmail,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified

          FROM OutboundOrder Out

          LEFT JOIN Warehouse Whs
          ON Out.IdWhs = Whs.IdWhs
          AND Out.IdWhsTarget = Whs.IdWhs

          LEFT JOIN Owner Own
          ON Out.IdOwn = Own.IdOwn

          INNER JOIN OutboundType OutType
          ON Out.IdOutboundType = OutType.IdOutboundType

          LEFT JOIN Country Co
          ON Out.IdCountryDelivery = Co.IdCountry
          AND Out.IdCountryFact = Co.IdCountry

          LEFT JOIN State St
          ON Out.IdStateDelivery = St.IdState
          AND Out.IdStateFact= St.IdState

          LEFT JOIN City Ci
          ON Out.IdCityDelivery = Ci.IdCity
          AND Out.IdCityFact= Ci.IdCity

          WHERE IdOutboundOrder = @IdOutboundOrder
          AND Name LIKE @name
          AND Description LIKE @description;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">OutboundNumber</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="String">name</parameter>
          <parameter type="String">description</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">Whs.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">Out.OutboundNumber</filter>
          <filter name="DateRange" type="textBetween">Out.EmissionDate</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">Own.IdOwn</filter>
        </filters>
      </query>

      <query code="OutboundOrder_GetByIdOwner">
        <sql>
          SELECT
          Out.IdOutboundOrder,
          Whs.IdWhs,
          Whs.WhsCode,
          Whs.ShortWhsName,
          Whs.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Out.IdStateDelivery,
          Out.IdCityDelivery,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          Out.FullShipment,
          Out.CarrierCode,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          Out.IdStateFact,
          Out.IdCityFact,
          Out.FactPhone,
          Out.FactEmail,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified

          FROM OutboundOrder Out

          LEFT JOIN Warehouse Whs
          ON Out.IdWhs = Whs.IdWhs
          AND Out.IdWhsTarget = Whs.IdWhs

          LEFT JOIN Owner Own
          ON Out.IdOwn = Own.IdOwn

          INNER JOIN OutboundType OutType
          ON Out.IdOutboundType = OutType.IdOutboundType

          LEFT JOIN Country Co
          ON Out.IdCountryDelivery = Co.IdCountry
          AND Out.IdCountryFact = Co.IdCountry

          LEFT JOIN State St
          ON Out.IdStateDelivery = St.IdState
          AND Out.IdStateFact= St.IdState

          LEFT JOIN City Ci
          ON Out.IdCityDelivery = Ci.IdCity
          AND Out.IdCityFact= Ci.IdCity

          WHERE Own.IdOwn = @IdOwn

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">Own.IdOwn</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="OutboundOrder_GetByTrack">
        <sql>
          SELECT DISTINCT
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs1.WhsCode,
          Whs1.ShortWhsName,
          Whs1.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          tra.IdTrackOutboundType,
          tra.NameTrackOutboundType,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Co1.CountryName	as CountryDeliveryName,
          Out.IdStateDelivery,
          St1.StateName as StateDeliveryName,
          Out.IdCityDelivery,
          Ci1.CityName as CityDeliveryName,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          whs2.WhsCode as WhsTargetCode,
          whs2.ShortWhsName as WhsTargetShortName,
          whs2.WhsName as WhsTargetName,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          CO2.CountryName	as CountryFactName,
          Out.IdStateFact,
          St2.StateName as StateFactName,
          Out.IdCityFact,
          Ci2.CityName as CityFactName,
          Out.FactPhone,
          Out.FactEmail,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified,
          (SELECT CASE WHEN COUNT(IdOutboundOrder) = 0 THEN 0 ELSE 1 END AS IsTrue
          FROM v_Oub_InOtherSimulation
          WHERE ((IdUser = @idUser AND WmsProcess != @dispatchType) OR IdUser != @idUser)
          AND IdOutboundOrder = Out.IdOutboundOrder) AS InOtherSimulation
          FROM OutboundOrder Out

          LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
          LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs
          LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
          LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
          LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity
          LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
          LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
          LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity
          LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
          JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
          LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
          LEFT JOIN TaskOutboundOrderSimulation ts ON ts.IdOutbound = Out.IdOutboundOrder
          WHERE tra.IdTrackOutboundType = @idTrackOutboundType
          -- Filtra las Ordenes generadas por tareas de procesos Wave
          AND OutType.OutboudTypeCode != 'PIKWV'
          -- Las Ordenes de tipo 'KIT', 'UNKIT' y 'VAS' se procesan aparte (Procesos 'Liberar Kit', 'Liberar Unkit' y 'Liberar VAS')
          AND (OutType.OutboudTypeCode = 'KIT' AND @dispatchType = 'PIKIT' OR @dispatchType != 'PIKIT' AND OutType.OutboudTypeCode != 'KIT')
          AND (OutType.OutboudTypeCode = 'UNKIT' AND @dispatchType = 'PIUNK' OR @dispatchType != 'PIUNK' AND OutType.OutboudTypeCode != 'UNKIT')
          AND (OutType.OutboudTypeCode = 'VAS' AND @dispatchType = 'PIKVA' OR @dispatchType != 'PIKVA' AND OutType.OutboudTypeCode != 'VAS')
          @SQLPart
          ORDER BY Out.Priority, Out.IdOutboundOrder DESC;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
          <parameter type="Int">idTrackOutboundType</parameter>
          <parameter type="Int">idUser</parameter>
          <parameter type="String">dispatchType</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">Whs1.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">Out.OutboundNumber</filter>
          <filter name="DateRange" type="textBetween">Out.EmissionDate</filter>
          <filter name="ExpectedDateRange" type="textBetween">Out.ExpectedDate</filter>
          <filter name="ShipmentDateRange" type="textBetween">Out.ShipmentDate</filter>
          <filter name="ExpirationDateRange" type="textBetween">Out.ExpirationDate</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">Own.IdOwn</filter>
          <filter name="PriorityRange" type="textBetween">Out.Priority</filter>
          <filter name="Customer" type="textLike">Out.CustomerName</filter>
          <filter name="Carrier" type="textLike">Car.CarrierName</filter>
          <filter name="Route" type="textLike">Out.RouteCode</filter>
          <filter name="Country" type="numericEqual">Out.IdCountryDelivery</filter>
          <filter name="State" type="numericEqual">Out.IdStateDelivery</filter>
          <filter name="City" type="numericEqual">Out.IdCityDelivery</filter>
          <filter name="GroupItem1" type="numericEqual">itm.IdGrpItem1</filter>
          <filter name="GroupItem2" type="numericEqual">itm.IdGrpItem2</filter>
          <filter name="GroupItem3" type="numericEqual">itm.IdGrpItem3</filter>
          <filter name="GroupItem4" type="numericEqual">itm.IdGrpItem4</filter>
        </filters>
      </query>

      <query code="GetOutboundOrderById">
        <sql>
          SELECT DISTINCT
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs1.WhsCode,
          Whs1.ShortWhsName,
          Whs1.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          tra.IdTrackOutboundType,
          tra.NameTrackOutboundType,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Co1.CountryName	as CountryDeliveryName,
          Out.IdStateDelivery,
          St1.StateName as StateDeliveryName,
          Out.IdCityDelivery,
          Ci1.CityName as CityDeliveryName,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          whs2.WhsCode as WhsTargetCode,
          whs2.ShortWhsName as WhsTargetShortName,
          whs2.WhsName as WhsTargetName,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          CO2.CountryName	as CountryFactName,
          Out.IdStateFact,
          St2.StateName as StateFactName,
          Out.IdCityFact,
          Ci2.CityName as CityFactName,
          Out.FactPhone,
          Out.FactEmail,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified
          FROM OutboundOrder Out

          LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
          LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs
          LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
          LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
          LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity
          LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
          LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
          LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity
          LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
          JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
          LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
          LEFT JOIN TaskOutboundOrderSimulation ts ON ts.IdOutbound = Out.IdOutboundOrder
          WHERE Out.IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="GetOutboundOrderByNumber">
        <sql>
          SELECT DISTINCT
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs1.WhsCode,
          Whs1.ShortWhsName,
          Whs1.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          tra.IdTrackOutboundType,
          tra.NameTrackOutboundType,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Co1.CountryName	as CountryDeliveryName,
          Out.IdStateDelivery,
          St1.StateName as StateDeliveryName,
          Out.IdCityDelivery,
          Ci1.CityName as CityDeliveryName,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          whs2.WhsCode as WhsTargetCode,
          whs2.ShortWhsName as WhsTargetShortName,
          whs2.WhsName as WhsTargetName,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          CO2.CountryName	as CountryFactName,
          Out.IdStateFact,
          St2.StateName as StateFactName,
          Out.IdCityFact,
          Ci2.CityName as CityFactName,
          Out.FactPhone,
          Out.FactEmail,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified
          FROM OutboundOrder Out

          LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
          LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs
          LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
          LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
          LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity
          LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
          LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
          LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity
          LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
          JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
          LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
          LEFT JOIN TaskOutboundOrderSimulation ts ON ts.IdOutbound = Out.IdOutboundOrder
          WHERE Out.OutboundNumber = @OutboundNumber
          AND Own.IdOwn = @IdOwn
        </sql>
        <parameters>
          <parameter type="String">OutboundNumber</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="OutboundOrder_GetByTaskInSimulation">
        <sql>
          SELECT
          DISTINCT
          --CASE WHEN ts.IdOutbound IS NULL THEN 0 ELSE 1 END AS InSimulation,
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs1.WhsCode,
          Whs1.ShortWhsName,
          Whs1.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.LoadCode,
          Out.LoadSeq,
          Out.Priority,
          Out.InmediateProcess,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          tra.IdTrackOutboundType,
          tra.NameTrackOutboundType,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,
          Out.DeliveryAddress2,
          Out.IdCountryDelivery,
          Co1.CountryName	as CountryDeliveryName,
          Out.IdStateDelivery,
          St1.StateName as StateDeliveryName,
          Out.IdCityDelivery,
          Ci1.CityName as CityDeliveryName,
          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.IdWhsTarget,
          whs2.WhsCode as WhsTargetCode,
          whs2.ShortWhsName as WhsTargetShortName,
          whs2.WhsName as WhsTargetName,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode,
          Out.Plate,
          Out.Invoice,
          Out.FactAddress1,
          Out.FactAddress2,
          Out.IdCountryFact,
          CO2.CountryName	as CountryFactName,
          Out.IdStateFact,
          St2.StateName as StateFactName,
          Out.IdCityFact,
          Ci2.CityName as CityFactName,
          Out.FactPhone,
          Out.FactEmail,
          Out.DateCreated,
          Out.UserCreated,
          Out.DateModified,
          Out.UserModified
          FROM OutboundOrder Out

          LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs1 ON Out.IdWhs = whs1.IdWhs
          LEFT JOIN Warehouse whs2 ON Out.IdWhsTarget = whs2.IdWhs
          LEFT JOIN Country Co1 ON Out.IdCountryDelivery = Co1.IdCountry
          LEFT JOIN State St1 ON Out.IdStateDelivery = St1.IdState
          LEFT JOIN City Ci1 ON Out.IdCityDelivery = Ci1.IdCity
          LEFT JOIN Country Co2 ON Out.IdCountryFact = Co2.IdCountry
          LEFT JOIN State St2 ON Out.IdStateFact = St2.IdState
          LEFT JOIN City Ci2 ON Out.IdCityFact = Ci2.IdCity
          LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
          JOIN v_Oub_LatestTrack tra ON Out.IdOutboundOrder = tra.IdOutboundOrder
          LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem
          INNER JOIN TaskOutboundOrderSimulation ts ON ts.IdOutbound = Out.IdOutboundOrder
          WHERE ts.IdTask = @idTask

          ORDER BY Out.Priority, Out.IdOutboundOrder DESC;
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
        </parameters>
      </query>

      <query code="GetOutboundOrderInOtherSimulationPikor">
        <sql>
          SELECT CASE WHEN COUNT(IdOutboundOrder) = 0 THEN 0 ELSE 1 END AS IsTrue
          FROM v_Oub_InOtherSimulation
          WHERE ((IdUser !=  @IdUser AND WmsProcess = 'PIKOR') OR WmsProcess = 'OTHER')
          AND IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdUser</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="GetOutboundOrderInOtherSimulationOther">
        <sql>
          SELECT CASE WHEN COUNT(IdOutboundOrder) = 0 THEN 0 ELSE 1 END AS IsTrue
          FROM v_Oub_InOtherSimulation
          WHERE ((IdUser != @IdUser AND WmsProcess = 'OTHER') OR WmsProcess = 'PIKOR')
          AND IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdUser</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="ExtractDispatchHead">
        <sql>
          SELECT OO.IdOutboundOrder, OO.IdWhs, OO.IdOwn, O.OwnCode, OO.OutboundNumber,
          OO.Status, LT.IdTrackOutboundType, LT.NameTrackOutboundType, LT.DateTrack
          FROM OutboundOrder OO
          INNER JOIN Owner O
          ON O.IdOwn = OO.IdOwn
          LEFT JOIN v_Oub_LatestTrack LT
          ON LT.IdOutboundOrder = OO.IdOutboundOrder
          WHERE 	OO.OutboundNumber = @OutboundNumber
          AND OO.IdOwn = @IdOwn

        </sql>
        <parameters>
          <parameter type="String">OutboundNumber</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="ExtractDispatchDetails">
        <sql>
          SELECT D.IdOutboundOrder,  D.IdTrackOutbound, D.TrackOutboundDate, D.Status,
          D.IdCarrier, C.CarrierCode, D.IdTruckCode, D.IdDriveCode,
          DD.IdDispatchDetail, DD.IdWmsProcessCode, DD.IdItem, I.ItemCode,
          DD.IdCtgItem, CI.CtgName, DD.ItemQty, DD.LotNumber, DD.FifoDate,
          DD.ExpirationDate, DD.FabricationDate, DD.IdLpnCode
          FROM Dispatch D
          LEFT JOIN Carrier C
          ON C.IdCarrier = D.IdCarrier
          LEFT JOIN DispatchDetail DD
          ON DD.IdDispatch = D.IdDispatch
          LEFT JOIN Item I
          ON I.IdItem = DD.IdItem
          LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = DD.IdCtgItem
          WHERE IdTrackOutbound = 51 --Loading
          AND D.IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="OutboundOrder_Insert">
        <sql>
          INSERT INTO OutboundOrder
          (IdOutboundOrder,
          IdWhs,
          IdOwn,
          OutboundNumber,
          IdOutboundType,
          Status,
          ReferenceNumber,
          LoadCode,
          LoadSeq,
          Priority,
          InmediateProcess,
          EmissionDate,
          ExpectedDate,
          ShipmentDate,
          ExpirationDate,
          CancelDate,
          CancelUser,
          CustomerCode,
          CustomerName,
          DeliveryAddress1,
          DeliveryAddress2,
          IdCountryDelivery,
          IdStateDelivery,
          IdCityDelivery,
          DeliveryPhone,
          DeliveryEmail,
          IdWhsTarget,
          FullShipment,
          CarrierCode,
          RouteCode,
          Plate,
          Invoice,
          FactAddress1,
          FactAddress2,
          IdCountryFact,
          IdStateFact,
          IdCityFact,
          FactPhone,
          FactEmail,
          AllowCrossDock,
          AllowBackOrder,
          SpecialField1,
          SpecialField2,
          SpecialField3,
          SpecialField4,
          DateCreated,
          UserCreated)
          VALUES
          (@IdOutboundOrder,
          @IdWhs,
          @IdOwn,
          @OutboundNumber,
          @IdOutboundType,
          @Status,
          @ReferenceNumber,
          @LoadCode,
          @LoadSeq,
          @Priority,
          @InmediateProcess,
          @EmissionDate,
          @ExpectedDate,
          @ShipmentDate,
          @ExpirationDate,
          @CancelDate,
          @CancelUser,
          @CustomerCode,
          @CustomerName,
          @DeliveryAddress1,
          @DeliveryAddress2,
          @IdCountryDelivery,
          @IdStateDelivery,
          @IdCityDelivery,
          @DeliveryPhone,
          @DeliveryEmail,
          @IdWhsTarget,
          @FullShipment,
          @CarrierCode,
          @RouteCode,
          @Plate,
          @Invoice,
          @FactAddress1,
          @FactAddress2,
          @IdCountryFact,
          @IdStateFact,
          @IdCityFact,
          @FactPhone,
          @FactEmail,
          @AllowCrossDock,
          @AllowBackOrder,
          @SpecialField1,
          @SpecialField2,
          @SpecialField3,
          @SpecialField4,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">OutboundNumber</parameter>
          <parameter type="Int">IdOutboundType</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">ReferenceNumber</parameter>
          <parameter type="String">LoadCode</parameter>
          <parameter type="String">LoadSeq</parameter>
          <parameter type="Int">Priority</parameter>
          <parameter type="Boolean">InmediateProcess</parameter>
          <parameter type="DateTime">EmissionDate</parameter>
          <parameter type="DateTime">ExpectedDate</parameter>
          <parameter type="DateTime">ShipmentDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="DateTime">CancelDate</parameter>
          <parameter type="String">CancelUser</parameter>
          <parameter type="String">CustomerCode</parameter>
          <parameter type="String">CustomerName</parameter>
          <parameter type="String">DeliveryAddress1</parameter>
          <parameter type="String">DeliveryAddress2</parameter>
          <parameter type="Int">IdCountryDelivery</parameter>
          <parameter type="Int">IdStateDelivery</parameter>
          <parameter type="Int">IdCityDelivery</parameter>
          <parameter type="String">DeliveryPhone</parameter>
          <parameter type="String">DeliveryEmail</parameter>
          <parameter type="Int">IdWhsTarget</parameter>
          <parameter type="Boolean">FullShipment</parameter>
          <parameter type="String">CarrierCode</parameter>
          <parameter type="String">RouteCode</parameter>
          <parameter type="String">Plate</parameter>
          <parameter type="String">Invoice</parameter>
          <parameter type="String">FactAddress1</parameter>
          <parameter type="String">FactAddress2</parameter>
          <parameter type="Int">IdCountryFact</parameter>
          <parameter type="Int">IdStateFact</parameter>
          <parameter type="Int">IdCityFact</parameter>
          <parameter type="String">FactPhone</parameter>
          <parameter type="String">FactEmail</parameter>
          <parameter type="Boolean">AllowCrossDock</parameter>
          <parameter type="Boolean">AllowBackOrder</parameter>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="String">SpecialField3</parameter>
          <parameter type="String">SpecialField4</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="OutboundOrder_Update">
        <sql>
          UPDATE OutboundOrder
          SET IdOutboundOrder = @IdOutboundOrder,
          IdWhs = @IdWhs,
          IdOwn = @IdOwn,
          OutboundNumber = @OutboundNumber,
          IdOutboundType = @IdOutboundType,
          Status = @Status,
          ReferenceNumber = @ReferenceNumber,
          LoadCode = @LoadCode,
          LoadSeq = @LoadSeq,
          Priority = @Priority,
          InmediateProcess = @InmediateProcess,
          EmissionDate = @EmissionDate,
          ExpectedDate = @ExpectedDate,
          ShipmentDate = @ShipmentDate,
          ExpirationDate = @ExpirationDate,
          CancelDate = @CancelDate,
          CancelUser = @CancelUser,
          CustomerCode = @CustomerCode,
          CustomerName = @CustomerName,
          DeliveryAddress1 = @DeliveryAddress1,
          DeliveryAddress2 = @DeliveryAddress2,
          IdCountryDelivery = @IdCountryDelivery,
          IdStateDelivery = @IdStateDelivery,
          IdCityDelivery = @IdCityDelivery,
          DeliveryPhone = @DeliveryPhone,
          DeliveryEmail = @DeliveryEmail,
          IdWhsTarget = @IdWhsTarget,
          FullShipment = @FullShipment,
          CarrierCode = @CarrierCode,
          RouteCode = @RouteCode,
          Plate = @Plate,
          Invoice = @Invoice,
          FactAddress1 = @FactAddress1,
          FactAddress2 = @FactAddress2,
          IdCountryFact = @IdCountryFact,
          IdStateFact = @IdStateFact,
          IdCityFact = @IdCityFact,
          FactPhone = @FactPhone,
          FactEmail = @FactEmail,
          AllowCrossDock = @AllowCrossDock,
          AllowBackOrder = @AllowBackOrder,
          SpecialField1 = @SpecialField1,
          SpecialField2 = @SpecialField2,
          SpecialField3 = @SpecialField3,
          SpecialField4 = @SpecialField4,
          DateModified = @dateModified,
          UserModified = @userModified
          WHERE IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">OutboundNumber</parameter>
          <parameter type="Int">IdOutboundType</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">ReferenceNumber</parameter>
          <parameter type="String">LoadCode</parameter>
          <parameter type="String">LoadSeq</parameter>
          <parameter type="Int">Priority</parameter>
          <parameter type="Boolean">InmediateProcess</parameter>
          <parameter type="DateTime">EmissionDate</parameter>
          <parameter type="DateTime">ExpectedDate</parameter>
          <parameter type="DateTime">ShipmentDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="DateTime">CancelDate</parameter>
          <parameter type="String">CancelUser</parameter>
          <parameter type="String">CustomerCode</parameter>
          <parameter type="String">CustomerName</parameter>
          <parameter type="String">DeliveryAddress1</parameter>
          <parameter type="String">DeliveryAddress2</parameter>
          <parameter type="Int">IdCountryDelivery</parameter>
          <parameter type="Int">IdStateDelivery</parameter>
          <parameter type="Int">IdCityDelivery</parameter>
          <parameter type="String">DeliveryPhone</parameter>
          <parameter type="String">DeliveryEmail</parameter>
          <parameter type="Int">IdWhsTarget</parameter>
          <parameter type="Boolean">FullShipment</parameter>
          <parameter type="String">CarrierCode</parameter>
          <parameter type="String">RouteCode</parameter>
          <parameter type="String">Plate</parameter>
          <parameter type="String">Invoice</parameter>
          <parameter type="String">FactAddress1</parameter>
          <parameter type="String">FactAddress2</parameter>
          <parameter type="Int">IdCountryFact</parameter>
          <parameter type="Int">IdStateFact</parameter>
          <parameter type="Int">IdCityFact</parameter>
          <parameter type="String">FactPhone</parameter>
          <parameter type="String">FactEmail</parameter>
          <parameter type="Boolean">AllowCrossDock</parameter>
          <parameter type="Boolean">AllowBackOrder</parameter>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="String">SpecialField3</parameter>
          <parameter type="String">SpecialField4</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="OutboundOrder_Delete">
        <sql>
          DELETE FROM TaskDetailSimulation
          WHERE IdDocumentBound = @IdOutboundOrder;

          DELETE FROM TaskSimulation
          WHERE IdDocumentBound = @IdOutboundOrder;

          DELETE FROM OutboundTrack
          WHERE IdOutboundOrder = @IdOutboundOrder;

          DELETE FROM OutboundDetail
          WHERE IdOutboundOrder = @IdOutboundOrder;

          DELETE FROM OutboundOrder
          WHERE IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="OutboundOrder_GetCountWaveOrder">
        <sql>
          SELECT OutboundNumber FieldName
          FROM OutboundOrder o
          INNER JOIN OutboundType ot ON o.idOutboundType = ot.idOutboundtype
          WHERE ot.OutboudTypeCode = 'PIKWV'
        </sql>
        <parameters></parameters>
      </query>

      <query code="OutboundDetail_Insert">
        <sql>
          INSERT INTO OutboundDetail
          (IdOutboundDetail,
          IdOutboundOrder,
          LineNumber,
          LineCode,
          IdItem,
          IdCtgItem,
          ItemQty,
          Status,
          LotNumber,
          FifoDate,
          ExpirationDate,
          FabricationDate,
          GrpClass1,
          GrpClass2,
          GrpClass3,
          GrpClass4,
          GrpClass5,
          GrpClass6,
          GrpClass7,
          GrpClass8,
          SpecialField1,
          SpecialField2,
          SpecialField3,
          SpecialField4,
          DateCreated,
          UserCreated)
          VALUES
          (@IdOutboundDetail,
          @IdOutboundOrder,
          @LineNumber,
          @LineCode,
          @IdItem,
          @IdCtgItem,
          @ItemQty,
          @Status,
          @LotNumber,
          @FifoDate,
          @ExpirationDate,
          @FabricationDate,
          @GrpClass1,
          @GrpClass2,
          @GrpClass3,
          @GrpClass4,
          @GrpClass5,
          @GrpClass6,
          @GrpClass7,
          @GrpClass8,
          @SpecialField1,
          @SpecialField2,
          @SpecialField3,
          @SpecialField4,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundDetail</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="Int">LineNumber</parameter>
          <parameter type="String">LineCode</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdCtgItem</parameter>
          <parameter type="Decimal">ItemQty</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">LotNumber</parameter>
          <parameter type="DateTime">FifoDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="DateTime">FabricationDate</parameter>
          <parameter type="String">GrpClass1</parameter>
          <parameter type="String">GrpClass2</parameter>
          <parameter type="String">GrpClass3</parameter>
          <parameter type="String">GrpClass4</parameter>
          <parameter type="String">GrpClass5</parameter>
          <parameter type="String">GrpClass6</parameter>
          <parameter type="String">GrpClass7</parameter>
          <parameter type="String">GrpClass8</parameter>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="String">SpecialField3</parameter>
          <parameter type="String">SpecialField4</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="OutboundDetail_Delete">
        <sql>
          DELETE FROM OutboundDetail
          WHERE IdOutboundDetail = @IdOutboundDetail
          AND IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundDetail</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="OutboundDetail_DeleteAll">
        <sql>
          DELETE FROM OutboundDetail
          WHERE IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="InsertOutboundTrack">
        <sql>
          INSERT INTO OutboundTrack
          (IdOutboundOrder
          ,IdTrackOutboundType
          ,DateTrack)
          SELECT @IdOutboundOrder,
          @IdTrackOutboundType,
          @DateTrack
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="Int">IdTrackOutboundType</parameter>
          <parameter type="DateTime">DateTrack</parameter>
        </parameters>
      </query>

      <query code="TrackOutbound_FindAll">
        <sql>
          SELECT IdTrackOutboundType
          ,NameTrackOutboundType
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM TrackOutboundType
        </sql>
      </query>

      <!--Filtro Track Outbound Type -->
      <query code="TrackOutboundType_FindAll">
        <sql>
          SELECT IdTrackOutboundType
          ,NameTrackOutboundType
          FROM TrackOutboundType
          @SQLPart
          ORDER BY IdTrackOutboundType
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="TrackOutboundType" type="numericIn">IdTrackOutboundType</filter>
        </filters>

      </query>

      <!-- Begin Package Consult -->
      <query code="Package_FindAll">
        <sql>
          SELECT BUL.IdWhs
          , W.WhsName
          , BUL.IdOwn
          , O.OwnName
          , OO.IdOutboundType
          , OT.OutboundTypeName
          , VLT.IdTrackOutboundType
          , VLT.NameTrackOutboundType
          , OO.OutboundNumber
          , BUL.IdOutboundOrder
          , BUL.OutboundLineNumber
          , BUL.IdLpnCode
          , BUL.IdLocCode
          , BUL.TotItems ItemQty
          , L.IsClosed
          , L.WeightTotal
          , OO.CustomerCode
          , OO.CustomerName
          , OO.ExpectedDate
          , OO.IdCountryDelivery
          , C.CountryName
          , OO.IdStateDelivery
          , ST.StateName
          , OO.IdCityDelivery
          , CT.CityName
          , L.SealNumber
          , L.LpnParent
          FROM Lpn L
          INNER JOIN (SELECT S.IdWhs, S.IdOwn,
                      S.IdOutboundOrder, S.OutboundLineNumber,
                      S.IdLpnCode, S.IdLocCode, SUM(ItemQty) AS TotItems
                      FROM Stock S
                      WHERE IdOutboundOrder IS NOT NULL
                      GROUP BY S.IdWhs, S.IdOwn, S.IdOutboundOrder,
                      S.OutboundLineNumber, S.IdLpnCode, S.IdLocCode) AS BUL
          ON BUL.IdLpnCode = L.IdLpnCode
          INNER JOIN Warehouse W 
          ON W.IdWhs = BUL.IdWhs
          INNER JOIN Owner O 
          ON O.IdOwn = BUL.IdOwn
          INNER JOIN OutboundOrder OO 
          ON OO.IdOutboundOrder = BUL.IdOutboundOrder
          INNER JOIN OutboundType OT 
          ON OT.IdOutboundType = OO.IdOutboundType
          INNER JOIN v_Oub_LatestTrack VLT 
          ON VLT.IdOutboundOrder = OO.IdOutboundOrder
          LEFT JOIN Country C 
          ON C.IdCountry = OO.IdCountryDelivery
          LEFT JOIN State ST 
          ON ST.IdState = OO.IdStateDelivery
          LEFT JOIN City CT 
          ON CT.IdCity = OO.IdCityDelivery
          @SQLPart
          ORDER BY BUL.IdWhs, BUL.IdOwn, OO.OutboundNumber, BUL.IdLpnCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
          <filter name="Owner" type="numericIn">O.IdOwn</filter>
          <filter name="OutboundType" type="numericIn">OO.IdOutboundType</filter>
          <filter name="TrackOutboundType" type="numericIn">VLT.IdTrackOutboundType</filter>
          <filter name="DateRange" type="textBetween">OO.ExpectedDate</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="Customer" type="textLike">OO.CustomerCode</filter>
          <filter name="LpnSource" type="textLike">BUL.IdLpnCode</filter>
          <filter name="LocationSource" type="textLike">BUL.IdLocCode</filter>
          <filter name="Country" type="textEqual">OO.IdCountryDelivery</filter>
          <filter name="State" type="textEqual">OO.IdStateDelivery</filter>
          <filter name="City" type="textEqual">OO.IdCityDelivery</filter>
          <filter name="Carrier" type="textLike">OO.CarrierCode</filter>
          <filter name="Route" type="textLike">OO.RouteCode</filter>
        </filters>
      </query>
      <!-- End Package Consult -->

      <!-- End OUTBOUND section  -->

      <!-- Begin Dispatch section  -->

      <query code="GetByOutboundOrder">
        <sql>
          Select d.IdDispatch
          ,d.IdOutboundOrder
          ,d.Status
          ,d.IdTrackOutbound
          ,d.TrackOutboundDate
          ,d.IdDispatchType
          ,d.ReferenceDoc
          ,d.IdReferenceDocType
          ,d.IdCarrier
          ,d.IdTruckCode
          ,d.IdDriveCode
          ,d.ShiftNumber
          ,d.IdWhs
          ,d.UserWms
          ,d.IdLocationForLift
          ,d.IdLocationStage
          from dispatch D
          Where IdOutboundOrder = @IdOutboundOrder
        </sql>
        <parameters>
          <parameter type="Int">IdOutboundOrder</parameter>
        </parameters>
      </query>

      <query code="DispatchAdvanced_FindAll">
        <sql>
          SELECT DISTINCT
          Out.IdOutboundOrder,
          Out.IdWhs,
          Whs.WhsCode,
          Whs.ShortWhsName,
          Whs.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.OutboundNumber,
          OutType.IdOutboundType,
          OutType.OutboudTypeCode,
          OutType.OutboundTypeName,
          Out.Status,
          Out.ReferenceNumber,
          Out.Priority,
          Out.InmediateProcess,
          Vw.QtySolicitado,
          Vw.QtyPicking,
          Vw.QtyPacking,
          Vw.QtyLoading,
          Vw.QtyShipping,
          Vw.PctPicking,
          Vw.PctPacking,
          Vw.PctLoading,
          Vw.PctShipping,
          Out.EmissionDate,
          Out.ExpectedDate,
          Out.ShipmentDate,
          Out.ExpirationDate,
          Out.CancelDate,
          Out.CancelUser,
          Out.CustomerCode,
          Out.CustomerName,
          Out.DeliveryAddress1,

          Out.IdCountryDelivery,
          Co.CountryName as CountryDeliveryName,

          IdStateDelivery,
          StateName as StateDeliveryName,

          Out.IdCityDelivery,
          CityName as CityDeliveryName,

          Out.DeliveryPhone,
          Out.DeliveryEmail,
          Out.FullShipment,
          Out.CarrierCode,
          Car.CarrierName,
          Out.RouteCode

          FROM OutboundOrder Out

          LEFT JOIN Owner Own ON Out.IdOwn = Own.IdOwn
          INNER JOIN OutboundType OutType ON Out.IdOutboundType = OutType.IdOutboundType
          LEFT JOIN Carrier Car ON Out.CarrierCode = Car.CarrierCode
          LEFT JOIN Warehouse whs ON Out.IdWhs = whs.IdWhs
          LEFT JOIN Country Co ON Out.IdCountryDelivery = Co.IdCountry
          LEFT JOIN State St ON Out.IdStateDelivery = St.IdState
          LEFT JOIN City Ci ON Out.IdCityDelivery = Ci.IdCity
          INNER JOIN v_Oub_DisptchProgXOrder Vw ON Out.IdOutboundOrder = Vw.IdOutboundOrder
          LEFT JOIN OutboundDetail OutD ON Out.IdOutboundOrder = OutD.IdOutboundOrder
          LEFT JOIN Item itm ON itm.IdItem = OutD.IdItem

          @SQLPart

          ORDER BY Out.IdOutboundOrder DESC;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">Whs.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">Out.OutboundNumber</filter>
          <filter name="DateRange" type="textBetween">Out.EmissionDate</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">Own.IdOwn</filter>
        </filters>
      </query>

      <query code="DispatchAdvanced_GetByIdOutboundOrder">
        <sql>
          SELECT Od.IdOutboundDetail
          ,Od.LineNumber
          ,Od.LineCode
          ,Od.IdItem
          ,itm.Description
          ,itm.ItemCode
          ,Od.IdCtgItem
          ,Ctg.CtgName
          ,Od.ItemQty
          ,vw.QtyPicking
          ,vw.QtyPacking
          ,vw.QtyLoading
          ,vw.QtyShipping
          ,vw.PctPicking
          ,vw.PctPacking
          ,vw.PctLoading
          ,vw.PctShipping
          ,Od.Status
          ,Od.LotNumber
          ,Od.FifoDate
          ,Od.ExpirationDate
          ,Od.FabricationDate
          ,Od.GrpClass1
          ,Od.GrpClass2
          ,Od.GrpClass3
          ,Od.GrpClass4
          ,Od.GrpClass5
          ,Od.GrpClass6
          ,Od.GrpClass7
          ,Od.GrpClass8
          FROM OutboundDetail Od
          INNER JOIN v_Oub_DisptchProgXOrderDet vw
          ON Od.IdOutboundDetail = vw.IdOutboundDetail
          LEFT JOIN CategoryItem Ctg
          ON Ctg.IdCtgItem = Od.IdCtgItem
          LEFT JOIN Item itm
          ON itm.IdItem = Od.IdItem
          WHERE vw.IdOutboundDetail = Od.IdOutboundDetail
          AND Od.IdOutboundOrder = @IdOutboundOrder


          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">Whs.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">Out.OutboundNumber</filter>
          <filter name="DateRange" type="textBetween">Out.EmissionDate</filter>
          <filter name="Item" type="textLike">itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">Own.IdOwn</filter>
        </filters>
      </query>

      <query code="GetOutboundDispatchHeader">
        <sql>
          SELECT IdOutboundOrder
          ,IdWhs
          ,WhsName
          ,IdOwn
          ,OwnName
          ,OutboundNumber
          ,IdOutboundType
          ,OutboundTypeName
          ,Status
          ,IdTrackOutboundType
          ,NameTrackOutboundType
          ,DateTrack
          ,ReferenceNumber
          ,EmissionDate
          ,ExpectedDate
          ,CustomerCode
          ,CustomerName
          ,DeliveryAddress1
          ,DeliveryAddress2
          ,IdCountryDelivery
          ,CountryName
          ,IdStateDelivery
          ,StateName
          ,IdCityDelivery
          ,CityName
          ,DeliveryPhone
          ,IdDispatch
          ,IdDispatchType
          ,DispatchTypeName
          ,ReferenceDoc
          ,IdReferenceDocType
          ,ReferenceDocTypeName
          ,IdCarrier
          ,CarrierName
          ,IdTruckCode
          ,IdDriveCode
          ,DriverName
          FROM  v_Oub_DispatchHeader
          @SQLPart;
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Owner" type="numericIn">IdOwn</filter>
          <filter name="DocumentNbr" type="textEqual">OutboundNumber</filter>
        </filters>
      </query>
      <!-- End Dispatch section  -->

      <!-- MOVEMENT section  -->
      <query code="GetMovementByReceipt">
        <sql>
          SELECT m.MovementID
          , m.Secuencia
          , m.Qty
          , r.IdReceipt
          , inb.IdInboundOrder
          , inb.InboundNumber
          , m.ItemID
          , i.ItemCode
          , i.Description
          , i.Status
          , m.Date
          , m.UserName
          , m.LocationNameSource
          , m.LocationNameDestination

          FROM MovementLog m
          JOIN Receipt r ON m.DocumentID = r.IdReceipt
          JOIN Item i ON m.ItemID = i.IdItem
          JOIN InboundOrder inb ON r.IdInboundOrder = inb.IdInboundOrder
          WHERE m.DocumentID = @DocumentID;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">DocumentID</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>


      <query code="GenericLog_FindAll">
        <sql>
          SELECT ML.IdMovement
          ,ML.IdMovementType
          ,MT.MovementName
          ,ML.StartTime
          ,ML.EndTime
          ,ML.UserName
          ,ML.IdWhs
          ,W.WhsName
          ,ML.DocumentNumber
          ,ML.DocumentType
          ,IT.InboundTypeName
          ,ML.DocumentLineNumber
          ,ML.ReferenceNumber
          ,ML.IdOwn
          ,O.OwnName
          ,ML.IdItem
          ,I.ItemCode
          ,I.LongItemName Description
          ,ML.ItemQtyMov
          ,ML.IdUom
          ,IU.UomName
          ,ML.IdCtgItem
          ,CI.CtgName
          ,ML.LotNumber
          ,ML.FifoDate
          ,ML.ExpirationDate
          ,ML.FabricationDate
          ,ML.IdLpnCodeSource
          ,ML.IdLpnCodeTarget
          ,ML.LpnParentSource
          ,ML.LpnParentTarget
          ,ML.IdLocCodeProposal
          ,ML.IdLocCodeSource
          ,ML.IdLocCodeTarget
          ,ML.QtyBeforeSource
          ,ML.QtyBeforeTarget
          ,ML.ReasonCode
          ,ML.HoldCode
          ,ML.RoutingCode
          FROM MovementLog ML
          INNER JOIN MovementType MT ON MT.IdMovementType = ML.IdMovementType
          INNER JOIN Warehouse W ON W.IdWhs = ML.IdWhs
          LEFT JOIN InboundType IT ON IT.IdInboundType = ML.DocumentType
          LEFT JOIN Owner O ON O.IdOwn = ML.IdOwn
          LEFT JOIN Item I ON I.IdItem = ML.IdItem
          LEFT JOIN ItemUom IU ON IU.IdUom = ML.IdUom
          LEFT JOIN CategoryItem CI ON CI.IdCtgItem = ML.IdCtgItem
          @SQLPart
          ORDER BY ML.IdMovement;


          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @EntityPropertyName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">EntityPropertyName</parameter>

        </parameters>
        <filters>
          <filter name="WmsProcessType" type="textIn">MT.IdWmsProcessCode</filter>
          <filter name="Warehouse" type="numericIn">ML.IdWhs</filter>
          <filter name="Owner" type="numericIn" includeNulls="true">ML.IdOwn</filter>
          <filter name="MovementType" type="numericIn">ML.IdMovementType</filter>
          <filter name="DateRange" type="textBetween">ML.StartTime</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Description" type="textLike">I.LongItemName</filter>
          <filter name="DocumentNbr" type="textLike">ML.DocumentNumber</filter>
          <filter name="Driver" type="textLike">ML.UserName</filter>
          <filter name="LocationSource" type="textLike">ML.IdLocCodeSource</filter>
          <filter name="LocationTarget" type="textLike">ML.IdLocCodeTarget</filter>
          <filter name="LpnSource" type="textLike">ML.IdLpnCodeSource</filter>
          <filter name="LpnTarget" type="textLike">ML.IdLpnCodeTarget</filter>
        </filters>
      </query>

      <query code="GenericOutLog_FindAll">
        <sql>
          SELECT ML.IdMovement
          ,ML.IdMovementType
          ,MT.MovementName
          ,ML.StartTime
          ,ML.EndTime
          ,ML.UserName
          ,ML.IdWhs
          ,W.WhsName
          ,ML.DocumentNumber
          ,ML.DocumentType
          ,OT.OutboundTypeName
          ,ML.DocumentLineNumber
          ,ML.ReferenceNumber
          ,ML.IdOwn
          ,O.OwnName
          ,ML.IdItem
          ,I.ItemCode
          ,I.LongItemName Description
          ,ML.ItemQtyMov
          ,ML.IdUom
          ,IU.UomName
          ,ML.IdCtgItem
          ,CI.CtgName
          ,ML.LotNumber
          ,ML.FifoDate
          ,ML.ExpirationDate
          ,ML.FabricationDate
          ,ML.IdLpnCodeSource
          ,ML.IdLpnCodeTarget
          ,ML.LpnParentSource
          ,ML.LpnParentTarget
          ,ML.IdLocCodeProposal
          ,ML.IdLocCodeSource
          ,ML.IdLocCodeTarget
          ,ML.QtyBeforeSource
          ,ML.QtyBeforeTarget
          ,ML.ReasonCode
          ,ML.HoldCode
          ,ML.RoutingCode
          FROM MovementLog ML
          INNER JOIN MovementType MT ON MT.IdMovementType = ML.IdMovementType
          INNER JOIN Warehouse W ON W.IdWhs = ML.IdWhs
          LEFT JOIN OutboundType OT ON OT.OutboudTypeCode = ML.DocumentType
          LEFT JOIN Owner O ON O.IdOwn = ML.IdOwn
          LEFT JOIN Item I ON I.IdItem = ML.IdItem
          LEFT JOIN ItemUom IU ON IU.IdUom = ML.IdUom
          LEFT JOIN CategoryItem CI ON CI.IdCtgItem = ML.IdCtgItem
          @SQLPart
          ORDER BY ML.IdMovement;


          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @EntityPropertyName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">EntityPropertyName</parameter>

        </parameters>
        <filters>
          <filter name="WmsProcessType" type="textIn">MT.IdWmsProcessCode</filter>
          <filter name="Warehouse" type="numericIn">ML.IdWhs</filter>
          <filter name="Owner" type="numericIn" includeNulls="true">ML.IdOwn</filter>
          <filter name="MovementType" type="numericIn">ML.IdMovementType</filter>
          <filter name="DateRange" type="textBetween">ML.StartTime</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Description" type="textLike">I.LongItemName</filter>
          <filter name="DocumentNbr" type="textLike">ML.DocumentNumber</filter>
          <filter name="Driver" type="textLike">ML.UserName</filter>
          <filter name="LocationSource" type="textLike">ML.IdLocCodeSource</filter>
          <filter name="LocationTarget" type="textLike">ML.IdLocCodeTarget</filter>
          <filter name="LpnSource" type="textLike">ML.IdLpnCodeSource</filter>
          <filter name="LpnTarget" type="textLike">ML.IdLpnCodeTarget</filter>
        </filters>
      </query>

      <query code="DispatchMovement_FindAll">
        <sql>
          SELECT
          Mov.IdMovement
          ,Mov.IdMovementType
          ,MT.MovementName
          ,Mov.StartTime
          ,Mov.EndTime
          ,Mov.UserName
          ,Mov.DocumentNumber
          ,Mov.DocumentType
          ,Mov.DocumentLineNumber
          ,Mov.ReferenceNumber
          ,Mov.LotNumber
          ,Mov.FifoDate
          ,Mov.ExpirationDate
          ,Mov.FabricationDate
          ,Mov.ItemQtyMov
          ,Mov.QtyBeforeSource
          ,Mov.QtyBeforeTarget
          ,Mov.ReasonCode
          ,Mov.RoutingCode
          ,Mov.HoldCode
          ,Whs.IdWhs
          ,Whs.WhsCode
          ,Whs.ShortWhsName
          ,Whs.WhsName
          ,Own.IdOwn
          ,Own.OwnCode
          ,Own.OwnName
          ,Own.TradeName
          ,Itm.IdItem
          ,Itm.ItemCode
          ,Itm.Description
          ,CtgItm.IdCtgItem
          ,CtgItm.CtgName
          ,Mov.IdLpnCodeSource
          ,Mov.IdLpnCodeTarget
          ,Mov.IdLocCodeProposal
          ,Mov.IdLocCodeSource
          ,Mov.IdLocCodeTarget
          ,Mov.SpecialField1
          ,Mov.SpecialField2
          ,Mov.SpecialField3
          ,Mov.SpecialField4
          ,Mov.SpecialField5
          ,Mov.SpecialField6
          ,Mov.SpecialField7

          FROM MovementLog Mov

          LEFT JOIN CategoryItem  CtgItm ON Mov.IdCtgItem = CtgItm.IdCtgItem
          INNER JOIN Warehouse Whs ON Mov.IdWhs = Whs.IdWhs
          INNER JOIN Owner Own ON Mov.IdOwn = Own.IdOwn
          LEFT OUTER JOIN Item Itm ON Mov.IdItem = Itm.IdItem
          INNER JOIN movementtype MT ON Mov.idmovementtype = MT.idmovementtype

          WHERE MT.IdWmsProcessCode IN ('PICK','PACK','LOAD','SHIPP')

          @SQLPart

          ORDER BY Mov.IdMovement DESC;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">Mov.IdWhs</filter>
          <filter name="DocumentNbr" type="textLike">Mov.DocumentNumber</filter>
          <filter name="DateRange" type="textBetween">Mov.EndTime</filter>
          <filter name="Item" type="textLike">Itm.ItemCode</filter>
          <filter name="Owner" type="numericIn">Mov.IdOwn</filter>
          <filter name="Name" type="textLike">Mov.IdLocCodeTarget</filter>
        </filters>
      </query>

      <query code="SaveMovement">
        <sql>
          INSERT INTO MovementLog
          (IdMovement, IdMovementType, StartTime, EndTime, UserName,IdWhs,DocumentNumber,DocumentType,DocumentLineNumber,
          ReferenceNumber,IdOwn,IdItem,IdUom,IdCtgItem,LotNumber,FifoDate,ExpirationDate,FabricationDate,IdLpnCodeSource,
          IdLpnCodeTarget,LpnParentSource,LpnParentTarget,IdLocCodeProposal,IdLocCodeSource,IdLocCodeTarget,ItemQtyMov,QtyBeforeSource,QtyBeforeTarget,
          ReasonCode,HoldCode,RoutingCode)
          VALUES(
          @IdMovement,
          @IdMovementType,
          @StartTime,
          @EndTime,
          @UserName,
          @IdWhs,
          @DocumentNumber,
          @DocumentType,
          @DocumentLineNumber,
          @ReferenceNumber,
          @IdOwn,
          @IdItem,
          @IdUom,
          @IdCtgItem,
          @LotNumber,
          @FifoDate,
          @ExpirationDate,
          @FabricationDate,
          @IdLpnCodeSource,
          @IdLpnCodeTarget,
          @LpnParentSource,
          @LpnParentTarget,
          @IdLocCodeProposal,
          @IdLocCodeSource,
          @IdLocCodeTarget,
          @ItemQtyMov,
          @QtyBeforeSource,
          @QtyBeforeTarget,
          @ReasonCode,
          @HoldCode,
          @RoutingCode)


        </sql>
        <parameters>
          <parameter type="Int">IdMovement</parameter>
          <parameter type="Int">IdMovementType</parameter>
          <parameter type="DateTime">StartTime</parameter>
          <parameter type="DateTime">EndTime</parameter>
          <parameter type="String">UserName</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">DocumentNumber</parameter>
          <parameter type="String">DocumentType</parameter>
          <parameter type="String">DocumentLineNumber</parameter>
          <parameter type="String">ReferenceNumber</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdUom</parameter>
          <parameter type="Int">IdCtgItem</parameter>
          <parameter type="String">LotNumber</parameter>
          <parameter type="DateTime">FifoDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="DateTime">FabricationDate</parameter>
          <parameter type="String">IdLpnCodeSource</parameter>
          <parameter type="String">IdLpnCodeTarget</parameter>
          <parameter type="String">LpnParentSource</parameter>
          <parameter type="String">LpnParentTarget</parameter>
          <parameter type="String">IdLocCodeProposal</parameter>
          <parameter type="String">IdLocCodeSource</parameter>
          <parameter type="String">IdLocCodeTarget</parameter>
          <parameter type="Decimal">ItemQtyMov</parameter>
          <parameter type="Decimal">QtyBeforeSource</parameter>
          <parameter type="Decimal">QtyBeforeTarget</parameter>
          <parameter type="String">ReasonCode</parameter>
          <parameter type="String">HoldCode</parameter>
          <parameter type="String">RoutingCode</parameter>
        </parameters>
      </query>


      <query code="EstractMovementLogWithOwn">
        <sql>
          SELECT TOP(@QtyMovementToRet) ML.IdMovement, ML.IdMovementType, ML.StartTime, ML.EndTime,
          ML.UserName, ML.IdWhs, ML.DocumentNumber, ML.DocumentType,
          ML.DocumentLineNumber, ML.ReferenceNumber, ML.IdOwn, ML.IdItem,
          I.ItemCode, IU.UomCode, ML.IdCtgItem, CI.CtgName, ML.LotNumber, ML.FifoDate,
          ML.ExpirationDate, ML.FabricationDate, ML.IdLpnCodeSource,
          ML.IdLpnCodeTarget, ML.LpnParentSource, ML.LpnParentTarget,
          ML.IdLocCodeProposal, ML.IdLocCodeSource, ML.IdLocCodeTarget, ML.ItemQtyMov,
          ML.QtyBeforeSource, ML.QtyBeforeTarget, ML.ReasonCode,
          ML.HoldCode, ML.RoutingCode
          FROM MovementLog ML
          LEFT JOIN Item I
          ON I.IdItem = ML.IdItem
          LEFT JOIN ItemUom IU
          ON IU.IdUom = ML.IdUom
          LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = ML.IdCtgItem
          WHERE IdMovementType = @IdMovementType
          AND ML.IdOwn = @IdOwn
          AND ML.IdMovement > @IdMovement
        </sql>
        <parameters>
          <parameter type="Int">QtyMovementToRet</parameter>
          <parameter type="Int">IdMovementType</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdMovement</parameter>
        </parameters>
      </query>
      <query code="EstractMovementLog">
        <sql>
          SELECT TOP(@QtyMovementToRet) ML.IdMovement, ML.IdMovementType, ML.StartTime, ML.EndTime,
          ML.UserName, ML.IdWhs, ML.DocumentNumber, ML.DocumentType,
          ML.DocumentLineNumber, ML.ReferenceNumber, ML.IdOwn, ML.IdItem,
          I.ItemCode, IU.UomCode, ML.IdCtgItem, CI.CtgName, ML.LotNumber, ML.FifoDate,
          ML.ExpirationDate, ML.FabricationDate, ML.IdLpnCodeSource,
          ML.IdLpnCodeTarget, ML.LpnParentSource, ML.LpnParentTarget,
          ML.IdLocCodeProposal, ML.IdLocCodeSource, ML.IdLocCodeTarget, ML.ItemQtyMov,
          ML.QtyBeforeSource, ML.QtyBeforeTarget, ML.ReasonCode,
          ML.HoldCode, ML.RoutingCode
          FROM MovementLog ML
          LEFT JOIN Item I
          ON I.IdItem = ML.IdItem
          LEFT JOIN ItemUom IU
          ON IU.IdUom = ML.IdUom
          LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = ML.IdCtgItem
          WHERE IdMovementType = @IdMovementType
          AND ML.IdMovement > @IdMovement
        </sql>
        <parameters>
          <parameter type="Int">QtyMovementToRet</parameter>
          <parameter type="Int">IdMovementType</parameter>
          <parameter type="Int">IdMovement</parameter>
        </parameters>
      </query>

      <query code="EstractMovementLogById">
        <sql>
          SELECT TOP (@QtyMovementToRet)  ML.IdMovement, ML.IdMovementType, ML.StartTime, ML.EndTime,
          ML.UserName, W.WhsCode, ML.DocumentNumber, ML.DocumentType,
          ML.DocumentLineNumber, ML.ReferenceNumber, O.OwnCode, I.ItemCode,
          IU.UomCode, CI.CtgCode, CI.CtgName, ML.LotNumber, ML.FifoDate,
          ML.ExpirationDate, ML.FabricationDate, ML.IdLpnCodeSource,
          ML.IdLpnCodeTarget, ML.LpnParentSource, ML.LpnParentTarget,
          ML.IdLocCodeProposal, ML.IdLocCodeSource, ML.IdLocCodeTarget, ML.ItemQtyMov,
          ML.QtyBeforeSource, ML.QtyBeforeTarget, ML.ReasonCode,
          ML.HoldCode, ML.RoutingCode, ML.SpecialField1,ML.SpecialField2,ML.SpecialField3,
          ML.SpecialField4,ML.SpecialField5,ML.SpecialField6,ML.SpecialField7
          FROM MovementLog ML
          LEFT JOIN Item I ON I.IdItem = ML.IdItem
          LEFT JOIN ItemUom IU ON IU.IdUom = ML.IdUom
          LEFT JOIN CategoryItem CI ON CI.IdCtgItem = ML.IdCtgItem
          LEFT JOIN Warehouse W ON W.IdWhs = ML.IdWhs
          LEFT JOIN Owner O ON O.IdOwn = ML.IdOwn
          WHERE ML.IdMovement > @IdMovement
        </sql>
        <parameters>
          <parameter type="Int">QtyMovementToRet</parameter>
          <parameter type="Int">IdMovement</parameter>
        </parameters>
      </query>

      <!--Filtro Movement Type Todos-->
      <query code="MovementType_FindAll">
        <sql>
          SELECT IdMovementType
          ,MovementName
          ,IdWmsProcessCode
          FROM MovementType
          ORDER BY IdMovementType
        </sql>
      </query>


      <!--Filtro Movement Type Movimientos Internos-->
      <query code="MovementType_FindAllMovement">
        <sql>
          SELECT IdMovementType
          ,MovementName
          ,IdWmsProcessCode
          FROM MovementType
          @SQLPart
          ORDER BY IdMovementType
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>

        </parameters>
        <filters>
          <filter name="WmsProcessType" type="textIn">IdWmsProcessCode</filter>
        </filters>
      </query>
      <!-- End MOVEMENT section  -->


      <!--Begin Translation-->
      <query code="Translation_DeleteByNotInDictionary">
        <sql>
          DELETE
          FROM CfgTranslate
          WHERE IdDictionary
          NOT IN (Select IdDictionary FROM CfgDictionary)
        </sql>
      </query>


      <query code="Translate_GetByIdDictionary">
        <sql>
          SELECT IdLanguage
          ,IdDictionary
          ,TextValue
          ,ShortTextValue
          ,CodStatus
          FROM CfgTranslate
          WHERE IdDictionary = @IdDictionary;
        </sql>
        <parameters>
          <parameter type="Int">IdDictionary</parameter>
        </parameters>
      </query>

      <query code="Translate_DeleteByIdDictionaryAndIdLanguaje">
        <sql>
          DELETE CfgTranslate
          WHERE IdDictionary = @IdDictionary
          AND IdLanguage = @IdLanguage;
        </sql>
        <parameters>
          <parameter type="Int">IdDictionary</parameter>
          <parameter type="Int">IdLanguage</parameter>
        </parameters>
      </query>


      <query code="Translate_GetByLanguageAndDictionary">
        <sql>
          SELECT IdLanguage
          ,IdDictionary
          ,TextValue
          ,ShortTextValue
          ,CodStatus
          FROM CfgTranslate
          WHERE IdLanguage = @IdLanguage
          AND IdDictionary = @IdDictionary;
        </sql>
        <parameters>
          <parameter type="Int">IdLanguage</parameter>
          <parameter type="Int">IdDictionary</parameter>
        </parameters>
      </query>

      <query code="Translate_Insert">
        <sql>
          INSERT INTO CfgTranslate
          (IdLanguage
          ,IdDictionary
          ,TextValue
          ,ShortTextValue
          ,CodStatus
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdLanguage
          ,@IdDictionary
          ,@TextValue
          ,@ShortTextValue
          ,@CodStatus
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdLanguage</parameter>
          <parameter type="Int">IdDictionary</parameter>
          <parameter type="String">TextValue</parameter>
          <parameter type="String">ShortTextValue</parameter>
          <parameter type="Int">CodStatus</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>
      <query code="Translate_Update">
        <sql>
          UPDATE CfgTranslate
          SET TextValue = @TextValue
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdLanguage = @IdLanguage
          AND IdDictionary = @IdDictionary
        </sql>
        <parameters>
          <parameter type="Int">IdLanguage</parameter>
          <parameter type="Int">IdDictionary</parameter>
          <parameter type="String">TextValue</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>


      <query code="Translation_GetByContent">
        <sql>
          SELECT d.IdObjectKey, d.IdObjectKeyContainer, d.ObjectType, t.TextValue
          FROM CfgDictionary d
          INNER JOIN CfgTranslate t ON d.IdDictionary = t.IdDictionary
          WHERE (d.IdControlContainer = @IdControlContainer OR d.IdControlContainer = 'all')
          AND t.IdLanguage = @IdLanguage
          AND d.IdModule = @idModule
        </sql>
        <parameters>
          <parameter type="String">IdControlContainer</parameter>
          <parameter type="Int">IdLanguage</parameter>
          <parameter type="Int">idModule</parameter>
        </parameters>
      </query>

      <!--End Translation-->

      <!--Begin Module-->

      <query code="Module_FindAll">
        <sql>
          SELECT IdModule
          ,Name
          ,Description
          ,CodStatus
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM CfgModule
        </sql>
      </query>

      <!--END Module-->

      <!--Begin Diccionary-->
      <query code="Object_GetType">
        <sql>
          SELECT DISTINCT ObjectType
          FROM CfgDictionary
        </sql>
      </query>
      <query code="Container_GetObject">
        <sql>
          SELECT DISTINCT IdControlContainer
          FROM CfgDictionary
        </sql>
      </query>
      <query code="Dictionary_GetByStatus">
        <sql>
          SELECT  IdDictionary,
          IdObjectKey,
          IdObjectKeyContainer,
          IdControlContainer,
          IdModule,
          ObjectType,
          TextProperty,
          TextValue,
          CodStatus
          FROM    CfgDictionary
          WHERE   CodStatus = @codStatus
        </sql>
        <parameters>
          <parameter type="Boolean">codStatus</parameter>
        </parameters>
      </query>
      <query code="Dictionary_GetByKey">
        <sql>
          SELECT  IdDictionary,
          IdObjectKey,
          IdObjectKeyContainer,
          IdControlContainer,
          IdModule,
          ObjectType,
          TextProperty,
          TextValue,
          CodStatus
          FROM    CfgDictionary
          WHERE   IdControlContainer = @idControlContainer
          AND     IdObjectKeyContainer = @idObjectKeyContainer
          AND     IdObjectKey = @idObjectKey
          AND		TextValue = @textValue
        </sql>
        <parameters>
          <parameter type="String">idControlContainer</parameter>
          <parameter type="String">idObjectKeyContainer</parameter>
          <parameter type="String">idObjectKey</parameter>
          <parameter type="String">textValue</parameter>
        </parameters>
      </query>

      <query code="Dictionary_DeleteByStatus">
        <sql>
          DELETE
          FROM CfgDictionary
          WHERE IdObjectKeyContainer NOT IN('Menu_Item', 'Parameter')
          AND IdDictionary not in(Select IdDictionary From cfgTranslate)
          AND CodStatus = @codStatus
        </sql>
        <parameters>
          <parameter type="Boolean">codStatus</parameter>
        </parameters>
      </query>

      <query code="Dictionary_Delete">
        <sql>
          DELETE
          FROM CfgDictionaryWms
          WHERE idDictionaryWms = @id
        </sql>
        <parameters>
          <parameter type="Int">id</parameter>
        </parameters>
      </query>

      <query code="Dictionary_Insert">
        <sql>
          INSERT INTO CfgDictionary
          (IdDictionary,
          IdObjectKey,
          IdModule,
          ObjectType,
          TextProperty,
          TextValue,
          IdObjectKeyContainer,
          IdControlContainer,
          CodStatus,
          DateCreated,
          UserCreated)
          VALUES
          (@idDictionary,
          @idObjectKey,
          @idModule,
          @objectType,
          @textProperty,
          @textValue,
          @idObjectKeyContainer,
          @idControlContainer,
          @codStatus,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idDictionary</parameter>
          <parameter type="String">idObjectKey</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">objectType</parameter>
          <parameter type="String">textProperty</parameter>
          <parameter type="String">textValue</parameter>
          <parameter type="String">idObjectKeyContainer</parameter>
          <parameter type="String">idControlContainer</parameter>
          <parameter type="Boolean">codStatus</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="Dictionary_Update">
        <sql>
          UPDATE CfgDictionary SET
          IdObjectKey = @idObjectKey,
          IdModule = @idModule,
          ObjectType = @objectType,
          TextProperty = @textProperty,
          TextValue = @textValue,
          IdObjectKeyContainer = @idObjectKeyContainer,
          IdControlContainer = @idControlContainer,
          CodStatus = @codStatus,
          DateModified = @dateModified,
          UserModified = @userModified
          WHERE
          IdDictionary = @idDictionary;
        </sql>
        <parameters>
          <parameter type="Int">idDictionary</parameter>
          <parameter type="String">idObjectKey</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">objectType</parameter>
          <parameter type="String">textProperty</parameter>
          <parameter type="String">textValue</parameter>
          <parameter type="String">idObjectKeyContainer</parameter>
          <parameter type="String">idControlContainer</parameter>
          <parameter type="Boolean">codStatus</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="Dictionary_UpdateByStatus">
        <sql>
          UPDATE CfgDictionary
          SET	CodStatus = @codStatus
          WHERE IdObjectKey NOT IN('Menu_Item', 'Parameter')
        </sql>
        <parameters>
          <parameter type="Boolean">codStatus</parameter>
        </parameters>
      </query>

      <query code="Dictionary_GetProperty">
        <sql>
          SELECT DISTINCT TextProperty
          FROM CfgDictionary
        </sql>
      </query>

      <query code="Dictionary_TranslateView">
        <sql>
          SELECT IdModule
          ,ModuleName
          ,IdDictionary
          ,IdObjectKey
          ,IdObjectKeyContainer
          ,IdControlContainer
          ,ObjectType
          ,TextProperty
          ,TextBase
          ,CodStatus
          ,IdLanguage
          ,LangName
          ,TextValue
          FROM v_Cfg_DictionaryTranslate
          WHERE  (IdLanguage IS NULL OR IdLanguage = @IdLanguage)
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">@IdLanguage</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">TextBase</filter>
          <filter name="Name" type="textLike">TextValue</filter>
          <filter name="ObjectType" type="textEqual">ObjectType</filter>
          <filter name="Module" type="numericEqual">IdModule</filter>
          <filter name="PropertyName" type="textLike">TextProperty</filter>
          <filter name="ObjectContainer" type="textEqual">IdControlContainer</filter>
        </filters>
      </query>


      <!--End Diccionary-->

      <!-- MENU section  -->
      <query code="Menu_FindAllByLanguage">
        <sql>
          SELECT DISTINCT
          mnu.IdObject AS IdMenu,
          mnu.Name,
          mnu.MenuOrder,
          COALESCE(t.TextValue, mnu.TextValue) AS TextValue,
          ISNULL((SELECT COALESCE(tr0.TextValue, m0.TextValue) + ' > ' + COALESCE(tr1.TextValue, m1.TextValue)
          FROM CfgObject m1
          JOIN CfgObject m0 ON m0.IdObject = m1.IdObjectContainer
          LEFT JOIN CfgDictionary d0 ON m0.IdDictionary = d0.IdDictionary
          LEFT JOIN CfgTranslate tr0 ON d0.IdDictionary = tr0.IdDictionary
          LEFT JOIN CfgDictionary d1 ON m1.IdDictionary = d1.IdDictionary
          LEFT JOIN CfgTranslate tr1 ON d1.IdDictionary = tr1.IdDictionary
          WHERE m1.IdObject = mnu.IdObjectContainer), '') AS WinPath,
          COALESCE(t.ShortTextValue, mnu.ShortTextValue) AS  ShortTitle,
          mnu.IdObjectContainer AS IdParentMenu
          , ISNULL((SELECT DISTINCT pag.Name
          FROM CfgObject pag
          JOIN CfgPermission p ON p.IdObject = pag.IdObject
          WHERE pag.ObjectType = 'aspx Page'
          AND pag.IdObjectContainer = mnu.IdObject
          AND p.IdRole IN (SELECT idRole FROM CfgUserWmsRole WHERE IdUserWms = @idUser)
          AND p.IsEjecute = 1) , '') AspxPage,
          (SELECT ParameterValue FROM CompanyParameter WHERE ParameterCode = 'MaxOpenedPages') AS MaxOpenedPages,
          (SELECT COALESCE(t2.TextValue, d2.TextValue) AS TextValue FROM CfgDictionary d2 LEFT JOIN CfgTranslate t2 ON d2.IdDictionary = t2.IdDictionary WHERE d2.TextProperty = 'MaxOpenedPagesMessage' AND COALESCE(t.IdLanguage, @IdLanguage) = @IdLanguage) AS MaxOpenedPagesMessage
          FROM CfgObject mnu
          JOIN CfgPermission p ON p.IdObject = mnu.IdObject
          LEFT JOIN CfgDictionary d ON mnu.IdDictionary = d.IdDictionary
          LEFT JOIN CfgTranslate t ON d.IdDictionary = t.IdDictionary
          WHERE mnu.ObjectType = 'Menu Item'
          AND p.IdRole IN(SELECT idRole FROM CfgUserWmsRole WHERE IdUserWms = @idUser)
          AND p.IsEjecute = 1
          AND mnu.CodStatus = 1
          AND COALESCE(t.IdLanguage, @IdLanguage) = @IdLanguage
          ORDER BY mnu.MenuOrder
        </sql>
        <parameters>
          <parameter type="Int">IdLanguage</parameter>
          <parameter type="Int">idUser</parameter>
        </parameters>
      </query>

      <query code="Menu_FindByBaseLanguage">
        <sql>
          SELECT DISTINCT
          mnu.IdObject AS IdMenu,
          mnu.Name,
          mnu.TextValue,
          ISNULL((SELECT m0.TextValue + ' > ' + m1.TextValue
          FROM CfgObject m1
          JOIN CfgObject m0 ON m0.IdObject = m1.IdObjectContainer
          WHERE m1.IdObject = mnu.IdObjectContainer), '') AS WinPath,
          mnu.ShortTextValue AS ShortTitle,
          mnu.IdObjectContainer AS IdParentMenu
          , mnu.MenuOrder
          , ISNULL((SELECT DISTINCT pag.Name
          FROM CfgObject pag
          JOIN CfgPermission p ON p.IdObject = pag.IdObject
          WHERE pag.ObjectType = 'aspx Page'
          AND pag.IdObjectContainer = mnu.IdObject
          AND p.IdRole IN (SELECT idRole FROM CfgUserWmsRole WHERE IdUserWms = @idUser)
          AND p.IsEjecute = 1) , '') AspxPage,
          (SELECT ParameterValue FROM CompanyParameter WHERE ParameterCode = 'MaxOpenedPages') AS MaxOpenedPages,
          (SELECT d2.TextValue FROM CfgDictionary d2 WHERE d2.TextProperty = 'MaxOpenedPagesMessage') AS MaxOpenedPagesMessage
          FROM CfgObject mnu
          JOIN CfgPermission p ON p.IdObject = mnu.IdObject
          WHERE mnu.ObjectType = 'Menu Item'
          AND p.IdRole IN(SELECT idRole FROM CfgUserWmsRole WHERE IdUserWms = @idUser)
          AND p.IsEjecute = 1
          AND mnu.CodStatus = 1
          ORDER BY mnu.MenuOrder
        </sql>
        <parameters>
          <parameter type="Int">idUser</parameter>
        </parameters>
      </query>
      <!-- End MENU section  -->

      <!-- ROLE section  -->
      <query code="Role_GetByUser">
        <sql>
          SELECT  r.idRole,
          isBaseRole,
          name,
          description,
          codStatus
          FROM	CfgRole r
          JOIN	CfgUserWmsRole ur ON r.IdRole = ur.IdRole
          WHERE	ur.IdUserWms = @userId;
        </sql>
        <parameters>
          <parameter type="Int">userId</parameter>
        </parameters>
      </query>

      <query code="Role_GetByNotInUser">
        <sql>
          SELECT
          idRole,
          isBaseRole,
          Name,
          Description,
          CodStatus
          FROM CfgRole
          WHERE idRole NOT IN (SELECT idRole FROM CfgUserWmsRole WHERE IdUserWms = @userId);
        </sql>
        <parameters>
          <parameter type="Int">userId</parameter>
        </parameters>
      </query>

      <query code="Role_GetById">
        <sql>
          SELECT  idRole,
          isBaseRole,
          name,
          description,
          codStatus
          FROM	CfgRole
          WHERE	idRole = @id;
        </sql>
        <parameters>
          <parameter type="Int">id</parameter>
        </parameters>
      </query>

      <query code="Role_FindAll">
        <sql>
          SELECT IdRole, IsBaseRole, Name, Description, CodStatus
          FROM CfgRole
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textLike">Name</filter>
          <filter name="Description" type="textLike">Description</filter>
          <filter name="Status" type="numericEqual">CodStatus</filter>
        </filters>
      </query>

      <query code="Role_Update">
        <sql>
          UPDATE CfgRole SET
          IsBaseRole = @isBaseRole,
          Name = @name,
          Description = @description,
          CodStatus = @codStatus,
          DateModified = @dateModified,
          UserModified = @userModified
          WHERE
          IdRole = @idRole
        </sql>
        <parameters>
          <parameter type="Int">idRole</parameter>
          <parameter type="Int">isBaseRole</parameter>
          <parameter type="String">name</parameter>
          <parameter type="String">description</parameter>
          <parameter type="Boolean">codStatus</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="Role_Insert">
        <sql>
          INSERT INTO CfgRole
          (IdRole, IsBaseRole, Name, Description, CodStatus, DateCreated, UserCreated)

          VALUES
          (@idRole,
          @isBaseRole,
          @name,
          @description,
          @codStatus,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idRole</parameter>
          <parameter type="Int">isBaseRole</parameter>
          <parameter type="String">name</parameter>
          <parameter type="String">description</parameter>
          <parameter type="Boolean">codStatus</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="RoleUser_Delete">
        <sql>
          DELETE
          FROM CfgUserWmsRole
          WHERE IdUserWms = @idUser
        </sql>
        <parameters>
          <parameter type="Int">idUser</parameter>
        </parameters>
      </query>

      <query code="Role_Delete">
        <sql>
          DELETE FROM CfgPermission WHERE IdRole = @idRole;

          DELETE FROM CfgRole WHERE IdRole = @idRole
        </sql>
        <parameters>
          <parameter type="Int">idRole</parameter>
        </parameters>
      </query>

      <!--End ROLE -->

      <!-- PERMISSION section  -->
      <query code="Permission_GetByRole">
        <sql>
          SELECT
          COALESCE((SELECT DISTINCT p.IdPermission
          FROM CfgObject mnuPerm
          JOIN CfgPermission pPerm ON pPerm.IdObject = mnu.IdObject
          WHERE ObjectType = 'Menu Item'
          AND pPerm.IsEjecute = 1
          AND pPerm.IdRole = @idRole), -1) IdPermission,
          mnu.IdObject AS IdMenu,
          mnu.Name,
          COALESCE(t.TextValue, mnu.TextValue) AS TextValue,
          mnu.IdObjectContainer AS IdParentMenu,
          COALESCE((SELECT DISTINCT pag.IdObject
          FROM CfgObject pag
          JOIN CfgPermission p ON p.IdObject = pag.IdObject
          WHERE pag.ObjectType = 'aspx Page'
          AND pag.IdObjectContainer = mnu.IdObject
          AND p.IsEjecute = 1) , '') idMenuPage,
          COALESCE((SELECT DISTINCT pag.Name
          FROM CfgObject pag
          JOIN CfgPermission p ON p.IdObject = pag.IdObject
          WHERE pag.ObjectType = 'aspx Page'
          AND pag.IdObjectContainer = mnu.IdObject
          AND p.IsEjecute = 1) , '') aspxPage
          FROM CfgObject mnu
          JOIN CfgPermission p ON p.IdObject = mnu.IdObject
          LEFT JOIN CfgDictionary d ON mnu.IdDictionary = d.IdDictionary
          LEFT JOIN CfgTranslate t ON d.IdDictionary = t.IdDictionary
          AND COALESCE(t.IdLanguage, @idLanguage) = @idLanguage
          WHERE mnu.ObjectType = 'Menu Item'
          AND p.IsEjecute = 1
          AND p.IdRole = 1
          ORDER BY mnu.MenuOrder
        </sql>
        <parameters>
          <parameter type="Int">idRole</parameter>
          <parameter type="Int">idLanguage</parameter>
        </parameters>
      </query>

      <query code="Permission_Insert">
        <sql>
          INSERT INTO CfgPermission
          (IdPermission,
          IdRole,
          IdObject,
          IsView,
          IsCreate,
          IsUpdate,
          IsDelete,
          IsEjecute,
          DateCreated,
          UserCreated)

          VALUES
          (@idPermission,
          @idRole,
          @idObject,
          1,
          1,
          1,
          1,
          1,
          @dateCreated,
          @userCreated)

        </sql>
        <parameters>
          <parameter type="Int">idPermission</parameter>
          <parameter type="Int">idRole</parameter>
          <parameter type="Int">idObject</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="Permission_DeleteByRole">
        <sql>
          DELETE FROM CfgPermission
          WHERE IdRole = @idRole;
        </sql>
        <parameters>
          <parameter type="Int">idRole</parameter>
        </parameters>
      </query>
      <!-- End PERMISSION section  -->

      <!-- DEVICE section  -->
      <!-- Terminal section  -->

      <query code="Terminal_FindAll">
        <sql>
          SELECT  IdMobileDevice,
          dt.IdDisplayType,
          dt.Name AS DisplayType,
          Code,
          md.Name,
          Type,
          CodStatus
          FROM CfgMobileDevices md
          INNER JOIN CfgDisplayType dt ON md.IdDisplayType = dt.IdDisplayType
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">Code</filter>
          <filter name="Name" type="textLike">md.Name</filter>
          <filter name="Status" type="numericEqual">CodStatus</filter>
        </filters>
      </query>

      <query code="Terminal_Insert">
        <sql>
          INSERT INTO CfgMobileDevices
          (IdMobileDevice
          , IdDisplayType
          , Code
          , Name
          , Type
          , CodStatus
          , DateCreated
          , UserCreated)


          VALUES
          (@idMobileDevice,
          @idDisplayType,
          @code,
          @name,
          @type,
          @codStatus,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idMobileDevice</parameter>
          <parameter type="Int">idDisplayType</parameter>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="String">type</parameter>
          <parameter type="Boolean">codStatus</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="Terminal_Delete">
        <sql>
          DELETE
          FROM CfgMobileDevices
          WHERE IdMobileDevice = @idTerminal;
        </sql>
        <parameters>
          <parameter type="Int">idTerminal</parameter>
        </parameters>
      </query>

      <query code="Terminal_Update">
        <sql>
          UPDATE CfgMobileDevices SET
          IdDisplayType = @idDisplayType,
          Code = @code,
          Name = @name,
          Type = @type,
          CodStatus = @codStatus,
          DateModified = @dateModified,
          UserModified = @userModified
          WHERE
          IdMobileDevice = @idTerminal
        </sql>
        <parameters>
          <parameter type="Int">idTerminal</parameter>
          <parameter type="Int">idDisplayType</parameter>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="String">type</parameter>
          <parameter type="Boolean">codStatus</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="GetTerminalByCode">
        <sql>
          SELECT t.IdMobileDevice
          ,t.Code
          ,t.Name
          ,t.Type
          ,t.CodStatus
          FROM CfgMobileDevices t
          WHERE t.Code = @terminalCode
        </sql>
        <parameters>
          <parameter type="String">terminalCode</parameter>
        </parameters>
      </query>

      <query code="DisplayType_FindAll">
        <sql>
          SELECT  IdDisplayType,
          Name,
          MaxLines,
          MaxColumns,
          IdModule
          FROM dbo.CfgDisplayType
        </sql>
      </query>
      <!-- End Terminal section  -->

      <!-- Printer section  -->
      <query code="Printer_FindAll">
        <sql>
          SELECT
          P.IdPrinter
          ,P.PrinterName
          ,P.Description
          ,P.IdWhs
          ,W.WhsCode
          ,W.WhsName
          ,P.DateCreated
          ,P.UserCreated
          ,P.DateModified
          ,P.UserModified
          FROM Printer P
          LEFT JOIN Warehouse W ON P.IdWhs = W.IdWhs
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">P.IdWhs</filter>
          <filter name="Name" type="textLike">P.PrinterName</filter>
        </filters>
      </query>


      <query code="GetPrinterByName">
        <sql>
          SELECT IdPrinter
          ,PrinterName
          ,Description
          ,IdWhs
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM Printer
          WHERE PrinterName = @Name;
        </sql>
        <parameters>
          <parameter type="String">Name</parameter>
        </parameters>
      </query>

      <query code="GetPrinterByIdFromUserRelation">
        <sql>
          SELECT IdPrinter
          FROM UserPrinter
          WHERE IdPrinter = @IdPrinter
        </sql>
        <parameters>
          <parameter type="Int">IdPrinter</parameter>
        </parameters>
      </query>

      <query code="Printer_Insert">
        <sql>
          INSERT INTO Printer
          (IdPrinter
          ,PrinterName
          ,Description
          ,IdWhs
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdPrinter
          ,@PrinterName
          ,@Description
          ,@IdWhs
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdPrinter</parameter>
          <parameter type="String">PrinterName</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="Printer_Update">
        <sql>
          UPDATE Printer
          SET PrinterName = @PrinterName
          ,Description = @Description
          ,IdWhs = @IdWhs
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdPrinter = @IdPrinter
        </sql>
        <parameters>
          <parameter type="Int">IdPrinter</parameter>
          <parameter type="String">PrinterName</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query code="Printer_Delete">
        <sql>
          DELETE FROM Printer
          WHERE IdPrinter = @IdPrinter
        </sql>
        <parameters>
          <parameter type="Int">IdPrinter</parameter>
        </parameters>
      </query>
      <!-- End Printer section  -->
      <!-- End DEVICE section  -->

      <!-- Company section  -->
      <query code="Company_FindAll">
        <sql>
          SELECT
          co.IdCompany,
          co.CompanyCode,
          co.CompanyName,
          co.ShortCompanyName,
          co.TradeName,
          co.Address1,
          co.Address2,
          co.IdCountry,
          cou.CountryName,
          co.IdState,
          st.StateName,
          co.IdCity,
          ci.CityName,
          co.Phone1,
          co.Phone2,
          co.Fax1,
          co.Fax2,
          co.Email,
          co.ZipCode,
          co.RulePutCode,
          co.RulePickCode,
          co.RuleRplCode,
          co.RuleCDockCode,
          co.DateCreated,
          co.UserCreated,
          co.DateModified,
          co.UserModified
          FROM	Company co

          INNER JOIN Country cou ON cou.IdCountry = co.IdCountry
          INNER JOIN State st ON st.IdState = co.IdState
          INNER JOIN City	ci ON ci.IdCity = co.IdCity;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="Company_Update">
        <sql>
          UPDATE Company
          SET CompanyCode = @CompanyCode
          ,CompanyName = @CompanyName
          ,ShortCompanyName = @ShortCompanyName
          ,TradeName = @TradeName
          ,Address1 = @Address1
          ,Address2 = @Address2
          ,IdCountry = @IdCountry
          ,IdState = @IdState
          ,IdCity = @IdCity
          ,Phone1 = @Phone1
          ,Phone2 = @Phone2
          ,Fax1 = @Fax1
          ,Fax2 = @Fax2
          ,Email = @Email
          ,ZipCode = @ZipCode
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdCompany = @IdCompany
        </sql>
        <parameters>
          <parameter type="Int">IdCompany</parameter>
          <parameter type="String">CompanyCode</parameter>
          <parameter type="String">CompanyName</parameter>
          <parameter type="String">ShortCompanyName</parameter>
          <parameter type="String">TradeName</parameter>
          <parameter type="String">Address1</parameter>
          <parameter type="String">Address2</parameter>
          <parameter type="Int">IdCountry</parameter>
          <parameter type="Int">IdState</parameter>
          <parameter type="Int">IdCity</parameter>
          <parameter type="String">Phone1</parameter>
          <parameter type="String">Phone2</parameter>
          <parameter type="String">Fax1</parameter>
          <parameter type="String">Fax2</parameter>
          <parameter type="String">Email</parameter>
          <parameter type="String">ZipCode</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>
      <!-- End  Company section  -->

      <!--Begin Country-->
      <query code="Country_FindAll">
        <sql>
          SELECT IdCountry,
          CountryName
          FROM COUNTRY
        </sql>
      </query>
      <!--End Country-->

      <!--Begin State-->
      <query code="State_FindAll">
        <sql>
          SELECT IdState
          ,IdCountry
          ,StateName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM State;
        </sql>
      </query>

      <query code="State_GetByCountry">
        <sql>
          SELECT IdState
          ,IdCountry
          ,StateName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM State
          WHERE IdCountry = @idCountry;
        </sql>
      </query>
      <!--End State-->

      <!--Begin City-->
      <query code="city_FindAll">
        <sql>
          SELECT IdCity
          ,IdState
          ,IdCountry
          ,CityName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM City;
        </sql>
      </query>
      <query code="city_FindByStateAndCountry">
        <sql>
          SELECT IdCity,
          CityName
          FROM CITY CI
          WHERE CI.IdState = @idState
          AND CI.IdCountry = @idCountry;
        </sql>
        <parameters>
          <parameter type="Int">idCountry</parameter>
          <parameter type="Int">idState</parameter>
        </parameters>
      </query>
      <!--End City-->

      <!-- WAREHOUSE section  -->
      <query code="Warehouse_FindAll">
        <sql>
          SELECT  w.IdWhs,
          w.WhsCode,
          w.WhsName,
          w.ShortWhsName,
          w.Address1,
          w.Address2,
          w.IdCountry,
          co.CountryName,
          w.IdState,
          st.StateName,
          w.IdCity,
          ci.CityName,
          w.Phone1,
          w.Phone2,
          w.Fax1,
          w.Fax2,
          w.Email,
          w.ZipCode,
          w.CodStatus
          FROM dbo.Warehouse w
          INNER JOIN Country co ON co.IdCountry = w.IdCountry
          INNER JOIN State st ON st.IdState = w.IdState
          INNER JOIN City	ci ON ci.IdCity = w.IdCity
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">w.WhsCode</filter>
          <filter name="Name" type="textLike">w.ShortWhsName</filter>
          <filter name="Status" type="numericEqual">w.CodStatus</filter>
        </filters>
      </query>

      <query code="Warehouse_Update">
        <sql>
          UPDATE Warehouse
          SET WhsName = @name
          ,ShortWhsName = @shortName
          ,Address1 = @address1
          ,Address2 = @address2
          ,IdCountry = @idCountry
          ,IdState = @idState
          ,IdCity = @idCity
          ,Phone1 = @phone1
          ,Phone2 = @Phone2
          ,Fax1 = @fax1
          ,Fax2 = @fax2
          ,Email = @email
          ,ZipCode = @zipCode
          ,CodStatus = @codStatus
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdWhs = @idWarehouse
        </sql>
        <parameters>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="String">name</parameter>
          <parameter type="String">shortName</parameter>
          <parameter type="String">address1</parameter>
          <parameter type="String">address2</parameter>
          <parameter type="Int">idCountry</parameter>
          <parameter type="Int">idState</parameter>
          <parameter type="Int">idCity</parameter>
          <parameter type="String">phone1</parameter>
          <parameter type="String">phone2</parameter>
          <parameter type="String">fax1</parameter>
          <parameter type="String">fax2</parameter>
          <parameter type="String">email</parameter>
          <parameter type="String">zipCode</parameter>
          <parameter type="Boolean">codStatus</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="Warehouse_Insert">
        <sql>
          INSERT INTO Warehouse
          (IdWhs
          ,WhsCode
          ,WhsName
          ,ShortWhsName
          ,Address1
          ,Address2
          ,IdCountry
          ,IdState
          ,IdCity
          ,Phone1
          ,Phone2
          ,Fax1
          ,Fax2
          ,Email
          ,ZipCode
          ,CodStatus
          ,DateCreated
          ,UserCreated)

          VALUES
          (@idWhs
          ,@code
          ,@name
          ,@shortName
          ,@address1
          ,@address2
          ,@idCountry
          ,@idState
          ,@idCity
          ,@phone1
          ,@phone2
          ,@fax1
          ,@fax2
          ,@email
          ,@zipCode
          ,@codStatus
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idWhs</parameter>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="String">shortName</parameter>
          <parameter type="String">address1</parameter>
          <parameter type="String">address2</parameter>
          <parameter type="Int">idCountry</parameter>
          <parameter type="Int">idState</parameter>
          <parameter type="Int">idCity</parameter>
          <parameter type="String">phone1</parameter>
          <parameter type="String">phone2</parameter>
          <parameter type="String">fax1</parameter>
          <parameter type="String">fax2</parameter>
          <parameter type="String">email</parameter>
          <parameter type="String">zipCode</parameter>
          <parameter type="Boolean">codStatus</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="Warehouse_Delete">
        <sql>
          DELETE
          FROM Warehouse
          WHERE IdWhs = @idWhs;
        </sql>
        <parameters>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="GetWarehouseByCode">
        <sql>
          SELECT w.IdWhs, w.WhsCode, w.ShortWhsName, w.WhsName
          FROM Warehouse w
          WHERE w.WhsCode = @warehouseCode
        </sql>
        <parameters>
          <parameter type="String">warehouseCode</parameter>
        </parameters>
      </query>
 

      <query code="GetWarehouseByUser">
        <sql>
          SELECT u.IdWhs
          ,w.WhsCode
          ,w.ShortWhsName
          ,w.WhsName
          ,u.DefaultWhs
          FROM WarehouseUserWms u
          INNER JOIN Warehouse w ON w.IdWhs = u.IdWhs
          WHERE IdUserWms = @IdUserWms
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
        </parameters>
      </query>

      <query code="GetRelationWhsUserByWhs">
        <sql>
          SELECT u.IdWhs
          ,w.WhsCode
          ,w.ShortWhsName
          ,w.WhsName
          ,u.DefaultWhs
          FROM WarehouseUserWms u
          INNER JOIN Warehouse w ON w.IdWhs = u.IdWhs
          WHERE u.IdWhs = @IdWhs
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="GetRelationWhsWorkZoneByWhs">
        <sql>
          SELECT IdWhs
          ,IdWorkZone
          ,WorkZoneName
          FROM WorkZone
          WHERE IdWhs = @IdWhs
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="GetRelationWhsInboundByWhs">
        <sql>
          SELECT IdWhs
          FROM InboundOrder
          WHERE IdWhs = @IdWhs
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="GetRelationWhsOutBoundByWhs">
        <sql>
          SELECT IdWhs
          FROM OutboundOrder
          WHERE IdWhs = @IdWhs
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="GetRelationWhsReceiptByWhs">
        <sql>
          SELECT IdWhs
          FROM Receipt
          WHERE IdWhs = @IdWhs
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="WarehouseUser_Insert">
        <sql>
          INSERT INTO WarehouseUserWms
          (IdUserWms
          ,IdWhs
          ,DefaultWhs
          ,DateCreated
          ,UserCreated)

          VALUES
          (@IdUserWms
          ,@IdWhs
          ,@DefaultWhs
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdUserWms</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">DefaultWhs</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="GrpItem1_FindAll">
        <sql>
          SELECT G1.IdGrpItem1
          ,G1.GrpItem1Code
          ,G1.GrpItem1Name
          ,G1.DateCreated
          ,G1.UserCreated
          ,G1.DateModified
          ,G1.UserModified
          FROM GroupItem1 G1
          WHERE (EXISTS
          (SELECT * FROM Item I
          WHERE G1.IdGrpItem1 = I.IdGrpItem1 AND I.IdOwn = @idOwn) OR @withItems = 0)
        </sql>
        <parameters>
          <parameter type="Int">withItems</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="GrpItem1_GetByCode">
        <sql>
          SELECT G1.IdGrpItem1
          ,G1.GrpItem1Code
          ,G1.GrpItem1Name
          ,G1.DateCreated
          ,G1.UserCreated
          ,G1.DateModified
          ,G1.UserModified
          FROM GroupItem1 G1
          WHERE GrpItem1Code = @grpItem1Code
        </sql>
        <parameters>
          <parameter type="String">grpItem1Code</parameter>
        </parameters>
      </query>


      <query code="GrpItem1_Insert">
        <sql>
          INSERT INTO GroupItem1
          (IdGrpItem1
          ,GrpItem1Code
          ,GrpItem1Name
          ,DateCreated
          ,UserCreated)
          VALUES
          (@idGrpItem1
          ,@grpItem1Code
          ,@grpItem1Name
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idGrpItem1</parameter>
          <parameter type="String">grpItem1Code</parameter>
          <parameter type="String">grpItem1Name</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>          
        </parameters>
      </query>

      <query code="GrpItem1_Update">
        <sql>
          UPDATE GrpItem1
          SET GrpItem1Code = @grpItem1Code
          ,GrpItem1Name = @grpItem1Name
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdGrpItem1 = @idGrpItem1
        </sql>
        <parameters>
          <parameter type="String">grpItem1Code</parameter>
          <parameter type="String">grpItem1Name</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="Int">idGrpItem1</parameter>
        </parameters>
      </query>


      <query code="GrpItem2_FindAll">
        <sql>
          SELECT G2.IdGrpItem2
          ,G2.GrpItem2Code
          ,G2.GrpItem2Name
          ,G1.IdGrpItem1
          ,G1.GrpItem1Name
          ,G1.GrpItem1Code
          ,G2.DateCreated
          ,G2.UserCreated
          ,G2.DateModified
          ,G2.UserModified
          FROM GroupItem2 G2
          INNER JOIN GroupItem1 G1 ON G2.IdGrpItem1 = G1.IdGrpItem1
          WHERE (EXISTS
          (SELECT * FROM Item I
          WHERE G1.IdGrpItem1 = I.IdGrpItem1 AND G2.IdGrpItem2 = I.IdGrpItem2 AND I.IdOwn = @idOwn) OR @withItems=0)
        </sql>
        <parameters>
          <parameter type="Int">withItems</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="GrpItem2_GetByCode">
        <sql>
          SELECT G2.IdGrpItem2
          ,G2.GrpItem2Code
          ,G2.GrpItem2Name
          ,G2.DateCreated
          ,G2.UserCreated
          ,G2.DateModified
          ,G2.UserModified
          FROM GroupItem2 G2
          WHERE GrpItem2Code = @grpItem2Code
          AND IdGrpItem1 = @idGrpItem1
        </sql>
        <parameters>
          <parameter type="String">grpItem2Code</parameter>
          <parameter type="Int">idGrpItem1</parameter>
        </parameters>
      </query>

      <query code="GrpItem2_Insert">
        <sql>
          INSERT INTO GroupItem2
          (IdGrpItem2
          ,GrpItem2Code
          ,GrpItem2Name
          ,IdGrpItem1
          ,DateCreated
          ,UserCreated)
          VALUES
          (@idGrpItem2
          ,@grpItem2Code
          ,@grpItem2Name
          ,@idGrpItem1
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idGrpItem2</parameter>
          <parameter type="String">grpItem2Code</parameter>
          <parameter type="String">grpItem2Name</parameter>
          <parameter type="Int">idGrpItem1</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="GrpItem2_Update">
        <sql>
          UPDATE GroupItem2
          SET GrpItem2Code = @grpItem2Code
          ,GrpItem2Name = @grpItem2Name
          ,IdGrpItem1 = @idGrpItem1
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdGrpItem2 = @idGrpItem2
        </sql>
        <parameters>
          <parameter type="String">grpItem2Code</parameter>
          <parameter type="String">grpItem2Name</parameter>
          <parameter type="Int">idGrpItem1</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="Int">idGrpItem2</parameter>
        </parameters>
      </query>



      <query code="GrpItem3_FindAll">
        <sql>
          SELECT G3.IdGrpItem3
          ,G3.GrpItem3Code
          ,G3.GrpItem3Name
          ,G3.IdGrpItem1
          ,G3.IdGrpItem2
          ,G3.DateCreated
          ,G3.UserCreated
          ,G3.DateModified
          ,G3.UserModified
          FROM GroupItem3 G3
          INNER JOIN GroupItem2 G2 ON G3.IdGrpItem2 = G2.IdGrpItem2
          INNER JOIN GroupItem1 G1 ON G2.IdGrpItem1 = G1.IdGrpItem1
          WHERE (EXISTS
          (SELECT * FROM Item I
          WHERE G1.IdGrpItem1 = I.IdGrpItem1 AND G2.IdGrpItem2 = I.IdGrpItem2 AND G3.IdGrpItem3 = I.IdGrpItem3 AND I.IdOwn = @idOwn)
          OR @withItems=0)
        </sql>
        <parameters>
          <parameter type="Int">withItems</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="GrpItem3_GetByCode">
        <sql>
          SELECT G3.IdGrpItem3
          ,G3.GrpItem3Code
          ,G3.GrpItem3Name
          ,G3.DateCreated
          ,G3.UserCreated
          ,G3.DateModified
          ,G3.UserModified
          FROM GroupItem3 G3
          WHERE GrpItem3Code = @grpItem3Code
          AND IdGrpItem2 = @idGrpItem2
        </sql>
        <parameters>
          <parameter type="String">grpItem3Code</parameter>
          <parameter type="Int">idGrpItem2</parameter>
        </parameters>
      </query>

      <query code="GrpItem3_Insert">
        <sql>
          INSERT INTO GroupItem3
          (IdGrpItem3
          ,GrpItem3Code
          ,GrpItem3Name
          ,IdGrpItem1
          ,IdGrpItem2
          ,DateCreated
          ,UserCreated)
          VALUES
          (@idGrpItem3
          ,@grpItem3Code
          ,@grpItem3Name
          ,@idGrpItem1
          ,@idGrpItem2
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idGrpItem3</parameter>
          <parameter type="String">grpItem3Code</parameter>
          <parameter type="String">grpItem3Name</parameter>
          <parameter type="Int">idGrpItem1</parameter>
          <parameter type="Int">idGrpItem2</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="GrpItem3_Update">
        <sql>
          UPDATE GroupItem3
          SET GrpItem3Code = @grpItem3Code
          ,GrpItem3Name = @grpItem3Name
          ,IdGrpItem1 = @idGrpItem1
          ,IdGrpItem2 = @idGrpItem2
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdGrpItem3 = @idGrpItem3
        </sql>
        <parameters>
          <parameter type="String">grpItem3Code</parameter>
          <parameter type="String">grpItem3Name</parameter>
          <parameter type="Int">idGrpItem1</parameter>
          <parameter type="Int">idGrpItem2</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="Int">idGrpItem3</parameter>
        </parameters>
      </query>
      
      

      <query code="GrpItem4_FindAll">
        <sql>
          SELECT G4.IdGrpItem4
          ,G4.GrpItem4Code
          ,G4.GrpItem4Name
          ,G4.IdGrpItem1
          ,G4.IdGrpItem2
          ,G4.IdGrpItem3
          ,G4.DateCreated
          ,G4.UserCreated
          ,G4.DateModified
          ,G4.UserModified
          FROM GroupItem4 G4
          INNER JOIN GroupItem3 G3 ON G4.IdGrpItem3 = G3.IdGrpItem3
          INNER JOIN GroupItem2 G2 ON G3.IdGrpItem2 = G2.IdGrpItem2
          INNER JOIN GroupItem1 G1 ON G2.IdGrpItem1 = G1.IdGrpItem1
          WHERE (EXISTS
          (SELECT * FROM Item I
          WHERE G1.IdGrpItem1 = I.IdGrpItem1 AND G2.IdGrpItem2 = I.IdGrpItem2 AND G3.IdGrpItem3 = I.IdGrpItem3 AND G4.IdGrpItem4 = I.IdGrpItem4 AND I.IdOwn = @idOwn)
          OR @withItems=0)
        </sql>
        <parameters>
          <parameter type="Int">withItems</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <!--Inicio Treeview-->

      <query code="GrpItem1_GetTreeview">
        <sql>
          SELECT IdOwn
          ,OwnName
          ,IdGrpItem1
          ,GrpItem1Name
          ,CantItems
          FROM v_Cfg_WmsSummaryGroupItem1
          WHERE IdOwn = @IdOwn
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="GrpItem2_GetTreeview">
        <sql>
          SELECT IdOwn
          ,OwnName
          ,IdGrpItem1
          ,IdGrpItem2
          ,GrpItem2Name
          ,CantItems
          FROM v_Cfg_WmsSummaryGroupItem2
          WHERE IdOwn = @IdOwn
          AND IdGrpItem1 = @IdGrpItem1;
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
        </parameters>
      </query>

      <query code="GrpItem3_GetTreeview">
        <sql>
          SELECT IdOwn
          ,IdGrpItem1
          ,IdGrpItem2
          ,OwnName
          ,IdGrpItem3
          ,GrpItem3Name
          ,CantItems
          FROM v_Cfg_WmsSummaryGroupItem3
          WHERE IdOwn = @IdOwn
          AND IdGrpItem1 = @IdGrpItem1
          AND IdGrpItem2 = @IdGrpItem2;
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
        </parameters>
      </query>

      <query code="GrpItem4_GetTreeview">
        <sql>
          SELECT IdOwn
          ,IdGrpItem1
          ,IdGrpItem2
          ,IdGrpItem3
          ,OwnName
          ,IdGrpItem4
          ,GrpItem4Name
          ,CantItems
          FROM v_Cfg_WmsSummaryGroupItem4
          WHERE IdOwn = @IdOwn
          AND IdGrpItem1 = @IdGrpItem1
          AND IdGrpItem2 = @IdGrpItem2
          AND IdGrpItem3 = @IdGrpItem3;
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
          <parameter type="Int">IdGrpItem3</parameter>
        </parameters>
      </query>

      <!--fin treeview-->
      <!-- End WAREHOUSE section  -->


      <!-- VENDOR section Begin  -->

      <query code="Vendor_FindAll">
        <sql>
          SELECT IdVendor
          ,o.IdOwn
          ,o.OwnCode
          ,o.OwnName
          ,o.TradeName
          ,v.VendorCode
          ,v.VendorName
          ,v.Address1
          ,v.Address2
          ,co.IdCountry
          ,co.CountryName
          ,s.IdState
          ,s.StateName
          ,ci.IdCity
          ,ci.CityName
          ,v.Phone
          ,v.Fax
          ,v.Email
          ,v.HasInspection
          ,v.SpecialField1
          ,v.SpecialField2
          ,v.SpecialField3
          ,v.SpecialField4
          ,v.DateCreated
          ,v.UserCreated
          ,v.DateModified
          ,v.UserModified
          FROM Vendor v
          LEFT JOIN Country co ON co.IdCountry = v.IdCountry
          LEFT JOIN State s ON s.IdState = v.IdState
          LEFT JOIN City ci ON ci.IdCity = v.IdCity
          JOIN Owner o ON o.idOwn = v.idOwn
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">v.VendorCode</filter>
          <filter name="Name" type="textLike">v.VendorName</filter>
          <filter name="Owner" type="numericIn">o.IdOwn</filter>
        </filters>
      </query>

      <query code="Vendor_GetById">
        <sql>
          SELECT IdVendor
          ,IdOwn
          ,VendorCode
          ,VendorName
          ,Address1
          ,Address2
          ,co.IdCountry
          ,co.CountryName
          ,s.IdState
          ,s.StateName
          ,ci.IdCity
          ,ci.CityName
          ,Phone
          ,Fax
          ,Email
          ,HasInspection
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4
          ,v.DateCreated
          ,v.UserCreated
          ,v.DateModified
          ,v.UserModified
          FROM Vendor v
          INNER JOIN Country co ON co.IdCountry = v.IdCountry
          INNER JOIN State s ON s.IdState = s.IdState
          INNER JOIN City ci ON ci.IdCity = v.IdCity
          WHERE IdVendor = @idVendor;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idVendor</parameter>

        </parameters>
      </query>

      <query code="Vendor_GetByOwner">
        <sql>
          SELECT IdVendor
          ,IdOwn
          ,VendorCode
          ,VendorName
          FROM Vendor v
          WHERE (idOwn = @idOwn OR @idOwn = -2)
        </sql>
        <parameters>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="Vendor_GetByCodeAndOwner">
        <sql>
          SELECT IdVendor
          ,IdOwn
          ,VendorCode
          ,VendorName
          FROM Vendor v
          WHERE VendorCode = @vendorCode
          AND idOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="String">vendorCode</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="Vendor_GetByIdAndOwner">
        <sql>
          SELECT IdVendor
          ,IdOwn
          ,VendorCode
          ,VendorName
          FROM Vendor v
          WHERE IdVendor = @idVendor
          AND idOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="Int">idVendor</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="Vendor_GetByNameAndOwner">
        <sql>
          SELECT IdVendor
          ,IdOwn
          ,VendorCode
          ,VendorName
          FROM Vendor v
          WHERE VendorName LIKE @vendorName
          AND (idOwn = @idOwn OR @idOwn = -2)
        </sql>
        <parameters>
          <parameter type="String">vendorName</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="Vendor_Update">
        <sql>
          UPDATE Vendor
          SET IdVendor = @idVendor
          ,IdOwn = @idOwn
          ,VendorCode = @vendorCode
          ,VendorName = @vendorName
          ,Address1 = @address1
          ,Address2 = @address2
          ,IdCountry = @idCountry
          ,IdState = @idState
          ,IdCity = @idCity
          ,Phone = @phone
          ,Fax = @fax
          ,Email = @email
          ,HasInspection = @hasInspection
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdVendor = @idVendor
        </sql>
        <parameters>
          <parameter type="Int">idVendor</parameter>
          <parameter type="String">vendorCode</parameter>
          <parameter type="String">vendorName</parameter>
          <parameter type="String">address1</parameter>
          <parameter type="String">address2</parameter>
          <parameter type="Int">idCountry</parameter>
          <parameter type="Int">idState</parameter>
          <parameter type="Int">idCity</parameter>
          <parameter type="String">phone</parameter>
          <parameter type="String">fax</parameter>
          <parameter type="String">email</parameter>
          <parameter type="Int">hasInspection</parameter>
          <parameter type="Int">idOwn</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="Vendor_Insert">
        <sql>
          INSERT INTO Vendor
          (IdVendor
          ,IdOwn
          ,VendorCode
          ,VendorName
          ,Address1
          ,Address2
          ,IdCountry
          ,IdState
          ,IdCity
          ,Phone
          ,Fax
          ,Email
          ,HasInspection
          ,DateCreated
          ,UserCreated)

          VALUES
          (@idVendor
          ,@idOwn
          ,@vendorCode
          ,@vendorName
          ,@address1
          ,@address2
          ,@idCountry
          ,@idState
          ,@idCity
          ,@phone
          ,@fax
          ,@email
          ,@hasInspection
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idVendor</parameter>
          <parameter type="Int">idOwn</parameter>
          <parameter type="String">vendorCode</parameter>
          <parameter type="String">vendorName</parameter>
          <parameter type="String">address1</parameter>
          <parameter type="String">address2</parameter>
          <parameter type="Int">idCountry</parameter>
          <parameter type="Int">idState</parameter>
          <parameter type="Int">idCity</parameter>
          <parameter type="String">phone</parameter>
          <parameter type="String">fax</parameter>
          <parameter type="String">email</parameter>
          <parameter type="Int">hasInspection</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="Vendor_Delete">
        <sql>
          DELETE
          FROM Vendor
          WHERE idVendor = @idVendor;
        </sql>

        <parameters>
          <parameter type="Int">idVendor</parameter>
        </parameters>
      </query>
      <!-- End VENDOR section  -->

      <!-- Owner section  -->
      <query code="Owner_FindAll">
        <sql>
          SELECT   o.IdOwn
          ,o.OwnCode
          ,o.OwnName
          ,o.TradeName
          ,o.Address1
          ,o.Address2
          ,co.IdCountry
          ,co.CountryName
          ,s.IdState
          ,s.StateName
          ,ci.IdCity
          ,ci.CityName
          ,o.Phone1
          ,o.Phone2
          ,o.Fax1
          ,o.Fax2
          ,o.Email
          ,o.DateCreated
          ,o.UserCreated
          ,o.DateModified
          ,o.UserModified
          FROM Owner o
          LEFT JOIN Country co ON co.IdCountry = o.IdCountry
          LEFT JOIN State s ON s.IdState = o.IdState
          LEFT JOIN City ci ON ci.IdCity = o.IdCity
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">o.OwnCode</filter>
          <filter name="Name" type="textLike">o.OwnName</filter>
        </filters>
      </query>

      <query code="owner_GetById">
        <sql>
          SELECT   o.IdOwn
          ,o.OwnCode
          ,o.OwnName
          ,o.TradeName
          ,o.Address1
          ,o.Address2
          ,co.IdCountry
          ,co.CountryName
          ,s.IdState
          ,s.StateName
          ,ci.IdCity
          ,ci.CityName
          ,o.Phone1
          ,o.Phone2
          ,o.Fax1
          ,o.Fax2
          ,o.Email
          ,o.DateCreated
          ,o.UserCreated
          ,o.DateModified
          ,o.UserModified

          FROM Owner o
          INNER JOIN Country co ON co.IdCountry = o.IdCountry
          INNER JOIN State s ON s.IdState = o.IdState
          INNER JOIN City ci ON ci.IdCity = o.IdCity

          WHERE IdOwn = @IdOwn;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="GetOwnerByCode">
        <sql>
          SELECT IdOwn
          ,OwnCode
          FROM owner
          WHERE OwnCode = @ownerCode
        </sql>
        <parameters>
          <parameter type="String">ownerCode</parameter>
        </parameters>
      </query>

      <query code="Owner_Insert">
        <sql>
          INSERT INTO Owner
          (IdOwn
          ,OwnCode
          ,OwnName
          ,TradeName
          ,Address1
          ,Address2
          ,IdCountry
          ,IdState
          ,IdCity
          ,Phone1
          ,Phone2
          ,Fax1
          ,Fax2
          ,Email
          ,DateCreated
          ,UserCreated)

          VALUES
          (@IdOwn
          ,@OwnCode
          ,@OwnName
          ,@TradeName
          ,@Address1
          ,@Address2
          ,@IdCountry
          ,@IdState
          ,@IdCity
          ,@Phone1
          ,@Phone2
          ,@Fax1
          ,@Fax2
          ,@Email
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">OwnCode</parameter>
          <parameter type="String">OwnName</parameter>
          <parameter type="String">TradeName</parameter>
          <parameter type="String">Address1</parameter>
          <parameter type="String">Address2</parameter>
          <parameter type="Int">IdCountry</parameter>
          <parameter type="Int">IdState</parameter>
          <parameter type="Int">IdCity</parameter>
          <parameter type="String">Phone1</parameter>
          <parameter type="String">Phone2</parameter>
          <parameter type="String">Fax1</parameter>
          <parameter type="String">Fax2</parameter>
          <parameter type="String">Email</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="Owner_Update">
        <sql>
          UPDATE Owner
          SET OwnCode = @OwnCode
          ,OwnName = @OwnName
          ,TradeName = @TradeName
          ,Address1 = @Address1
          ,Address2 = @Address2
          ,IdCountry = @IdCountry
          ,IdState = @IdState
          ,IdCity = @IdCity
          ,Phone1 = @Phone1
          ,Phone2 = @Phone2
          ,Fax1 = @Fax1
          ,Fax2 = @Fax2
          ,Email = @Email
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdOwn = @IdOwn
        </sql>
        <parameters>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">OwnCode</parameter>
          <parameter type="String">OwnName</parameter>
          <parameter type="String">TradeName</parameter>
          <parameter type="String">Address1</parameter>
          <parameter type="String">Address2</parameter>
          <parameter type="Int">IdCountry</parameter>
          <parameter type="Int">IdState</parameter>
          <parameter type="Int">IdCity</parameter>
          <parameter type="String">Phone1</parameter>
          <parameter type="String">Phone2</parameter>
          <parameter type="String">Fax1</parameter>
          <parameter type="String">Fax2</parameter>
          <parameter type="String">Email</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="Owner_Delete">
        <sql>
          DELETE FROM Owner
          WHERE IdOwn = @IdOwn
        </sql>
        <parameters>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="GetAllOwners">
        <sql>
          SELECT IdOwn
          ,OwnCode
          ,OwnName
          ,TradeName
          ,Address1
          ,Address2
          ,IdCountry
          ,IdState
          ,IdCity
          ,Phone1
          ,Phone2
          ,Fax1
          ,Fax2
          ,Email
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM Owner
        </sql>
        <parameters>
        </parameters>
      </query>

      <query code="GetOwnerById">
        <sql>
          SELECT IdOwn
          ,OwnCode
          ,OwnName
          ,TradeName
          ,Address1
          ,Address2
          ,IdCountry
          ,IdState
          ,IdCity
          ,Phone1
          ,Phone2
          ,Fax1
          ,Fax2
          ,Email
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM Owner
          WHERE IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>
      <!-- End Owner section  -->


      <!-- WorkZone section begin -->

      <query code="WorkZone_FindAll">
        <sql>

          SELECT wo.IdWorkZone
          ,wo.WorkZoneName
          ,wo.Description
          ,wo.CodStatus
          ,wa.IdWhs
          ,wa.WhsCode
          ,wa.ShortWhsName
          ,wa.WhsName
          FROM WorkZone wo
          INNER JOIN Warehouse wa ON wo.IdWhs = wa.IdWhs
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder

        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textLike">wo.WorkZoneName</filter>
          <filter name="Description" type="textLike">wo.Description</filter>
          <filter name="Status" type="numericEqual">wo.CodStatus</filter>
          <filter name="Warehouse" type="numericIn">wa.IdWhs</filter>
        </filters>
      </query>

      <query code="WorkZone_GetByWhs">
        <sql>
          SELECT DISTINCT IdWorkZone, WorkZoneName, IdWhs, Description, CodStatus
          FROM Workzone
          WHERE (IdWhs = @IdWhs OR @IdWhs = -2)
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="WorkZone_GetById">
        <sql>
          SELECT IdWorkZone, WorkZoneName
          FROM Workzone
          WHERE (IdWorkZone = @Id OR @Id = -2)
        </sql>
        <parameters>
          <parameter type="Int">Id</parameter>
        </parameters>
      </query>

      <query code="WorkZone_GetByLocationInTaskSimulation">
        <sql>
          SELECT
          wz.IdWorkZone
          ,wz.WorkZoneName
          ,wz.Description
          ,wz.CodStatus
          FROM workZone wz
          WHERE wz.CodStatus = 1
          AND wz.IdWhs = @idWhs
          AND wz.IdWorkZone IN
          (SELECT wzl.IdWorkZone
          FROM workzonelocation wzl
          INNER JOIN TaskDetailSimulation td ON td.IdLocSourceProposal = wzl.IdLocCode
          WHERE td.IdTask IN
          (SELECT t.IdTask
          FROM TaskSimulation t
          WHERE t.IdUser = @idUser
          AND t.TaskTypeCode = @taskTypeCode))
        </sql>
        <parameters>
          <parameter type="Int">idWhs</parameter>
          <parameter type="String">taskTypeCode</parameter>
          <parameter type="Int">idUser</parameter>
        </parameters>
      </query>

      <query code="WorkZone_GetByLocation">
        <sql>
          SELECT
          wz.IdWorkZone
          ,wz.WorkZoneName
          ,wz.Description
          ,wz.CodStatus
          FROM workZone wz
          WHERE wz.IdWorkZone IN
          (SELECT wzl.IdWorkZone
          FROM workzonelocation wzl
          WHERE wzl.IdLocCode = @idLocationCode)
          AND wz.IdWhs = @idWhs
          AND wz.CodStatus = 1
        </sql>
        <parameters>
          <parameter type="String">idLocationCode</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="WorkZone_GetByNameAndWarehouse">
        <sql>
          SELECT
          IdWhs,
          IdWorkZone,
          WorkZoneName
          FROM WorkZone
          WHERE WorkZoneName = @Name
          AND IdWhs = @IdWhs
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">Name</parameter>
        </parameters>
      </query>

      <query code="WorkZone_GetByItem">
        <sql>
          SELECT DISTINCT W.IdWorkZone, W.WorkZoneName
          FROM Workzone W
          JOIN WorkZoneItem WI ON W.IdWorkZone = WI.IdWorkZone
          WHERE WI.IdItem = @idItem
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
        </parameters>
      </query>

      <query code="WorkZone_GetByNotInItem">
        <sql>
          SELECT DISTINCT IdWorkZone, WorkZoneName
          FROM Workzone
          WHERE IdWorkZone NOT IN
          (SELECT IdWorkZone FROM WorkZoneItem
          WHERE IdItem = @idItem)
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
        </parameters>
      </query>

      <query code="WorkZone_Insert">
        <sql>
          INSERT INTO WorkZone
          (IdWorkZone
          ,IdWhs
          ,WorkZoneName
          ,Description
          ,CodStatus
          ,DateCreated
          ,UserCreated)

          VALUES
          (@IdWorkZone
          ,@IdWhs
          ,@WorkZoneName
          ,@Description
          ,@CodStatus
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">WorkZoneName</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="Boolean">CodStatus</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="WorkZone_Update">
        <sql>
          UPDATE WorkZone
          SET IdWorkZone = @IdWorkZone
          ,IdWhs = @IdWhs
          ,WorkZoneName = @WorkZoneName
          ,Description = @Description
          ,CodStatus = @CodStatus
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdWorkZone = @IdWorkZone
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">WorkZoneName</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="Boolean">CodStatus</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="GetCountUserFromWorkZone">
        <sql>
          SELECT IdUserWms
          FROM UserWorkZone
          WHERE IdWorkZone = @IdWorkZone
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
        </parameters>
      </query>

      <query code="GetCountItemFromWorkZone">
        <sql>
          SELECT IdItem
          FROM WorkZoneItem
          WHERE IdWorkZone = @IdWorkZone
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
        </parameters>
      </query>

      <query code="GetCountLocationFromWorkZone">
        <sql>
          SELECT IdLocCode
          FROM WorkZoneLocation
          WHERE IdWorkZone = @IdWorkZone
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
        </parameters>
      </query>

      <query code="WorkZone_Delete">
        <sql>
          DELETE WorkZoneItem WHERE IdWorkZone = @IdWorkZone;

          DELETE UserWorkZone WHERE IdWorkZone = @IdWorkZone;

          DELETE WorkZone WHERE IdWorkZone = @IdWorkZone
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
        </parameters>
      </query>


      <query code="WorkZone_InsertLocations">
        <sql>
          INSERT INTO WorkZoneLocation
          (IdWorkZone
          ,IdLocCode
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdWorkZone
          ,@IdLocCode
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>


      <query code="WorkZoneLocation_Delete">
        <sql>
          DELETE FROM WorkZoneLocation
          WHERE IdWorkZone = @IdWorkZone
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
        </parameters>
      </query>

      <query code="WorkZoneLocation_DeleteByLoc">
        <sql>
          DELETE FROM WorkZoneLocation
          WHERE IdWorkZone = @IdWorkZone
          AND IdLocCode = @IdLocCode
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
          <parameter type="String">IdLocCode</parameter>
        </parameters>
      </query>

      <!-- WorkZone section end -->


      <!-- Hangar section begin-->
      <query code="hangar_FindAll">
        <sql>
          SELECT    H.IdHng
          , H.HngCode
          , H.HngName
          , H.PositionX
          , H.PositionY
          , H.PositionZ
          , H.Length
          , H.Width
          , H.Height
          , H.CodStatus
          , H.DateCreated
          , H.UserCreated
          , H.DateModified
          , H.UserModified
          , W.IdWhs
          , W.WhsCode
          , W.ShortWhsName
          , W.WhsName
          FROM Hangar H
          INNER JOIN Warehouse W ON H.IdWhs = W.IdWhs
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">H.HngCode</filter>
          <filter name="Name" type="textLike">H.HngName</filter>
          <filter name="Status" type="numericEqual">H.CodStatus</filter>
          <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
        </filters>
      </query>

      <query code="hangar_GetByCode">
        <sql>
          SELECT H.IdHng
          , H.HngCode
          , H.HngName
          , H.PositionX
          , H.PositionY
          , H.PositionZ
          , H.Length
          , H.Width
          , H.Height
          , H.CodStatus
          , H.DateCreated
          , H.UserCreated
          , H.DateModified
          , H.UserModified
          , W.IdWhs
          , W.WhsCode
          , W.ShortWhsName
          , W.WhsName
          FROM Hangar H INNER JOIN
          Warehouse W ON H.IdWhs = W.IdWhs
          WHERE H.HngCode = @code;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="String">code</parameter>
        </parameters>
      </query>

      <query code="hangar_GetById">
        <sql>
          SELECT H.IdHng
          , H.HngCode
          , H.HngName
          , H.PositionX
          , H.PositionY
          , H.PositionZ
          , H.Length
          , H.Width
          , H.Height
          , H.CodStatus
          , H.DateCreated
          , H.UserCreated
          , H.DateModified
          , H.UserModified
          , W.IdWhs
          , W.WhsCode
          , W.ShortWhsName
          , W.WhsName
          FROM Hangar H INNER JOIN
          Warehouse W ON H.IdWhs = W.IdWhs
          WHERE H.IdHng = @idHangar;
        </sql>
        <parameters>
          <parameter type="Int">idHangar</parameter>
        </parameters>
      </query>

      <query code="Hangar_GetFullByWhs">
        <sql>
          SELECT H.IdHng
          , H.HngCode
          , H.HngName
          , H.PositionX
          , H.PositionY
          , H.PositionZ
          , H.Length
          , H.Width
          , H.Height
          , H.CodStatus
          , H.DateCreated
          , H.UserCreated
          , H.DateModified
          , H.UserModified
          , W.IdWhs
          , W.WhsCode
          , W.ShortWhsName
          , W.WhsName
          FROM Hangar H INNER JOIN
          Warehouse W ON H.IdWhs = W.IdWhs
          WHERE H.IdWhs = @idWhs;
        </sql>
        <parameters>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="hangar_GetByWhs">
        <sql>
          SELECT DISTINCT IdHng, HngName
          FROM Hangar
          WHERE (IdWhs = @IdWhs OR @IdWhs = -2)
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="Hangar_Insert">
        <sql>
          INSERT INTO Hangar
          (IdHng
          ,IdWhs
          ,HngCode
          ,HngName
          ,PositionX
          ,PositionY
          ,PositionZ
          ,Length
          ,Width
          ,Height
          ,CodStatus
          ,DateCreated
          ,UserCreated)

          VALUES
          (@IdHng
          ,@IdWhs
          ,@HngCode
          ,@HngName
          ,@PositionX
          ,@PositionY
          ,@PositionZ
          ,@Length
          ,@Width
          ,@Height
          ,@CodStatus
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdHng</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">HngCode</parameter>
          <parameter type="String">HngName</parameter>
          <parameter type="Int">PositionX</parameter>
          <parameter type="Int">Positiony</parameter>
          <parameter type="Int">Positionz</parameter>
          <parameter type="Decimal">Length</parameter>
          <parameter type="Decimal">Width</parameter>
          <parameter type="Decimal">Height</parameter>
          <parameter type="Boolean">CodStatus</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="Hangar_Update">
        <sql>
          UPDATE Hangar
          SET IdWhs = @idWhs
          ,HngCode = @hngCode
          ,HngName = @hngName
          ,PositionX = @positionX
          ,PositionY = @positionY
          ,PositionZ = @positionZ
          ,Length = @length
          ,Width = @width
          ,Height = @height
          ,CodStatus = @codStatus
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdHng = @idHng
        </sql>
        <parameters>
          <parameter type="Int">idHng</parameter>
          <parameter type="Int">idWhs</parameter>
          <parameter type="String">hngCode</parameter>
          <parameter type="String">hngName</parameter>
          <parameter type="Int">positionX</parameter>
          <parameter type="Int">positiony</parameter>
          <parameter type="Int">positionz</parameter>
          <parameter type="Decimal">length</parameter>
          <parameter type="Decimal">width</parameter>
          <parameter type="Decimal">height</parameter>
          <parameter type="Boolean">codStatus</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="hangar_Delete">
        <sql>
          DELETE FROM Hangar
          WHERE IdHng = @idHng
        </sql>
        <parameters>
          <parameter type="Int">idHng</parameter>
        </parameters>
      </query>
      <!-- Hangar section end -->



      <!-- ITEM section begin -->
      <query code="Item_FindAll">
        <sql>
          SELECT IdItem
          ,i.ItemCode
          ,i.IdOwn
          ,own.OwnCode
          ,own.OwnName
          ,own.TradeName
          ,i.AltItemCode
          ,i.Description
          ,gr1.IdGrpItem1
          ,gr1.GrpItem1Name
          ,gr2.IdGrpItem2
          ,gr2.GrpItem2Name
          ,gr3.IdGrpItem3
          ,gr3.GrpItem3Name
          ,gr4.IdGrpItem4
          ,gr4.GrpItem4Name
          ,i.LongItemName
          ,i.ShortItemName
          ,i.Status
          ,i.ItemComment
          ,i.ShelfLife
          ,i.ExpirationDays
          ,i.CtrlSerialInbound
          ,i.CtrlSerialInternal
          ,i.CtrlSerialOutbound
          ,i.LotControlInbound
          ,i.LotControlInternal
          ,i.LotControlOutbound
          ,i.Weight
          ,i.Volume
          ,i.Length
          ,i.Width
          ,i.Height
          ,i.NestedVolume
          ,i.InspectionRequerid
          ,i.InspectionCode
          ,i.IdPutawayZone
          ,pz.WorkZoneName AS PutawayZoneName
          ,i.ControlExpDate
          ,i.ControlFabDate
          ,i.Acumulable
          ,i.ReOrderPoint
          ,i.ReOrderQty
          ,i.PalletQty
          ,i.CutMinimum
          ,i.Originator
          ,i.VASProfile
          ,i.Hazard
          ,i.Price
          ,i.InventoryType
          ,i.StackingSequence
          ,i.CommentControl
          ,i.CompatibilityCode
          ,i.MSDSUrl
          ,i.PictureUrl
          ,i.GrpClass1
          ,i.GrpClass2
          ,i.GrpClass3
          ,i.GrpClass4
          ,i.GrpClass5
          ,i.GrpClass6
          ,i.GrpClass7
          ,i.GrpClass8
          ,i.SpecialField1
          ,i.SpecialField2
          ,i.SpecialField3
          ,i.SpecialField4
          ,i.DateCreated
          ,i.UserCreated
          ,i.DateModified
          ,i.UserModified
          FROM Item i
          LEFT JOIN GroupItem1 gr1 ON gr1.IdGrpItem1 = i.IdGrpItem1
          LEFT JOIN GroupItem2 gr2 ON gr2.IdGrpItem2 = i.IdGrpItem2
          LEFT JOIN GroupItem3 gr3 ON gr3.IdGrpItem3 = i.IdGrpItem3
          LEFT JOIN GroupItem4 gr4 ON gr4.IdGrpItem4 = i.IdGrpItem4
          LEFT JOIN Owner own ON own.IdOwn = i.IdOwn
          LEFT JOIN WorkZone pz ON pz.IdWorkZone = i.IdPutawayZone
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Item" type="textLike">i.ItemCode</filter>
          <filter name="Name" type="textLike">i.LongItemName</filter>
          <filter name="Description" type="textLike">i.Description</filter>
          <filter name="Status" type="numericEqual">i.Status</filter>
          <filter name="Owner" type="numericIn">i.IdOwn</filter>
        </filters>
      </query>

      <query code="GetItemByIdAndOwner">
        <sql>
          SELECT
          IdItem
          ,ItemCode
          ,Description
          ,IdOwn
          ,ShortItemName
          ,Status
          ,CtrlSerialInbound
          ,CtrlSerialInternal
          ,CtrlSerialOutbound
          ,LotControlInbound
          ,LotControlInternal
          ,LotControlOutbound
          ,Weight
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NestedVolume
          ,IdPutawayZone
          ,ReOrderPoint
          ,ReOrderQty
          ,PalletQty
          FROM item i
          WHERE IdItem = @idItem
          AND IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="GetItemByCode">
        <sql>
          SELECT
          IdItem
          ,ItemCode
          ,Description
          ,IdOwn
          ,AltItemCode
          ,LongItemName
          ,ShortItemName
          ,Status
          ,ItemComment
          ,ShelfLife
          ,ExpirationDays
          ,CtrlSerialInbound
          ,CtrlSerialInternal
          ,CtrlSerialOutbound
          ,LotControlInbound
          ,LotControlInternal
          ,LotControlOutbound
          ,Weight
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NestedVolume
          ,InspectionRequerid
          ,InspectionCode
          ,IdPutawayZone
          ,ControlExpDate
          ,ControlFabDate
          ,Acumulable
          ,ReOrderPoint
          ,ReOrderQty
          ,PalletQty
          ,CutMinimum
          ,Originator
          ,VASProfile
          ,Hazard
          ,Price
          ,InventoryType
          ,StackingSequence
          ,CommentControl
          ,CompatibilityCode
          FROM item
          WHERE ItemCode LIKE @ItemCode
        </sql>
        <parameters>
          <parameter type="String">ItemCode</parameter>
        </parameters>
      </query>

      <query code="GetItemByCodeNotInKit">
        <sql>
          SELECT
          IdItem
          ,ItemCode
          ,Description
          ,IdOwn
          ,AltItemCode
          ,LongItemName
          ,ShortItemName
          ,Status
          ,ItemComment
          ,ShelfLife
          ,ExpirationDays
          ,CtrlSerialInbound
          ,CtrlSerialInternal
          ,CtrlSerialOutbound
          ,LotControlInbound
          ,LotControlInternal
          ,LotControlOutbound
          ,Weight
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NestedVolume
          ,InspectionRequerid
          ,InspectionCode
          ,IdPutawayZone
          ,ControlExpDate
          ,ControlFabDate
          ,Acumulable
          ,ReOrderPoint
          ,ReOrderQty
          ,PalletQty
          ,CutMinimum
          ,Originator
          ,VASProfile
          ,Hazard
          ,Price
          ,InventoryType
          ,StackingSequence
          ,CommentControl
          ,CompatibilityCode
          FROM item
          WHERE ItemCode LIKE @ItemCode
          AND IdItem NOT IN (SELECT IdItemKit FROM Kit)
        </sql>
        <parameters>
          <parameter type="String">ItemCode</parameter>
        </parameters>
      </query>


      <query code="GetItemByCodeAndOwner">
        <sql>
          SELECT
          IdItem
          ,ItemCode
          ,Description
          ,IdOwn
          ,AltItemCode
          ,LongItemName
          ,ShortItemName
          ,Status
          ,ItemComment
          ,ShelfLife
          ,ExpirationDays
          ,CtrlSerialInbound
          ,CtrlSerialInternal
          ,CtrlSerialOutbound
          ,LotControlInbound
          ,LotControlInternal
          ,LotControlOutbound
          ,Weight
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NestedVolume
          ,InspectionRequerid
          ,InspectionCode
          ,IdPutawayZone
          ,ControlExpDate
          ,ControlFabDate
          ,Acumulable
          ,ReOrderPoint
          ,ReOrderQty
          ,PalletQty
          ,CutMinimum
          ,Originator
          ,VASProfile
          ,Hazard
          ,Price
          ,InventoryType
          ,StackingSequence
          ,CommentControl
          ,CompatibilityCode
          FROM item
          WHERE ItemCode LIKE @ItemCode
          AND IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="String">ItemCode</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="GetItemByOwner">
        <sql>
          SELECT
          IdItem
          ,ItemCode
          ,Description
          ,IdOwn
          ,AltItemCode
          ,LongItemName
          ,ShortItemName
          ,Status
          ,ItemComment
          ,ShelfLife
          ,ExpirationDays
          ,CtrlSerialInbound
          ,CtrlSerialInternal
          ,CtrlSerialOutbound
          ,LotControlInbound
          ,LotControlInternal
          ,LotControlOutbound
          ,Weight
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NestedVolume
          ,InspectionRequerid
          ,InspectionCode
          ,IdPutawayZone
          ,ControlExpDate
          ,ControlFabDate
          ,Acumulable
          ,ReOrderPoint
          ,ReOrderQty
          ,PalletQty
          ,CutMinimum
          ,Originator
          ,VASProfile
          ,Hazard
          ,Price
          ,InventoryType
          ,StackingSequence
          ,CommentControl
          ,CompatibilityCode
          FROM item
          WHERE  IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="GetItemByCodeAndOwnerFilter">
        <sql>
          SELECT
          IdItem
          ,ItemCode
          ,Description
          ,IdOwn
          ,AltItemCode
          ,LongItemName
          ,ShortItemName
          ,Status
          ,ItemComment
          ,ShelfLife
          ,ExpirationDays
          ,CtrlSerialInbound
          ,CtrlSerialInternal
          ,CtrlSerialOutbound
          ,LotControlInbound
          ,LotControlInternal
          ,LotControlOutbound
          ,Weight
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NestedVolume
          ,InspectionRequerid
          ,InspectionCode
          ,IdPutawayZone
          ,ControlExpDate
          ,ControlFabDate
          ,Acumulable
          ,ReOrderPoint
          ,ReOrderQty
          ,PalletQty
          ,CutMinimum
          ,Originator
          ,VASProfile
          ,Hazard
          ,Price
          ,InventoryType
          ,StackingSequence
          ,CommentControl
          ,CompatibilityCode
          FROM item
          WHERE ItemCode LIKE @code
          AND LongItemName LIKE @name
          AND IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="GetItemByCodeAndOwnerFilterNotInKit">
        <sql>
          SELECT
          IdItem
          ,ItemCode
          ,Description
          ,IdOwn
          ,AltItemCode
          ,LongItemName
          ,ShortItemName
          ,Status
          ,ItemComment
          ,ShelfLife
          ,ExpirationDays
          ,CtrlSerialInbound
          ,CtrlSerialInternal
          ,CtrlSerialOutbound
          ,LotControlInbound
          ,LotControlInternal
          ,LotControlOutbound
          ,Weight
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NestedVolume
          ,InspectionRequerid
          ,InspectionCode
          ,IdPutawayZone
          ,ControlExpDate
          ,ControlFabDate
          ,Acumulable
          ,ReOrderPoint
          ,ReOrderQty
          ,PalletQty
          ,CutMinimum
          ,Originator
          ,VASProfile
          ,Hazard
          ,Price
          ,InventoryType
          ,StackingSequence
          ,CommentControl
          ,CompatibilityCode
          FROM item
          WHERE ItemCode LIKE @code
          AND LongItemName LIKE @name
          AND IdOwn = @idOwn
          AND IdItem NOT IN (SELECT IdItemKit FROM Kit)
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="GetItemByCodeAndFilter">
        <sql>
          SELECT
          IdItem
          ,ItemCode
          ,Description
          ,IdOwn
          ,AltItemCode
          ,LongItemName
          ,ShortItemName
          ,Status
          ,ItemComment
          ,ShelfLife
          ,ExpirationDays
          ,CtrlSerialInbound
          ,CtrlSerialInternal
          ,CtrlSerialOutbound
          ,LotControlInbound
          ,LotControlInternal
          ,LotControlOutbound
          ,Weight
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NestedVolume
          ,InspectionRequerid
          ,InspectionCode
          ,IdPutawayZone
          ,ControlExpDate
          ,ControlFabDate
          ,Acumulable
          ,ReOrderPoint
          ,ReOrderQty
          ,PalletQty
          ,CutMinimum
          ,Originator
          ,VASProfile
          ,Hazard
          ,Price
          ,InventoryType
          ,StackingSequence
          ,CommentControl
          ,CompatibilityCode
          ,IdGrpItem1
          ,IdGrpItem2
          ,IdGrpItem3
          ,IdGrpItem4
          FROM item
          WHERE ItemCode LIKE @code
          AND LongItemName LIKE @name;
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
        </parameters>
      </query>

      <query code="Item_Insert">
        <sql>
          INSERT INTO Item
          (IdItem
          ,ItemCode
          ,IdOwn
          ,AltItemCode
          ,Description
          ,IdGrpItem1
          ,IdGrpItem2
          ,IdGrpItem3
          ,IdGrpItem4
          ,LongItemName
          ,ShortItemName
          ,Status
          ,ItemComment
          ,ShelfLife
          ,ExpirationDays
          ,CtrlSerialInbound
          ,CtrlSerialInternal
          ,CtrlSerialOutbound
          ,LotControlInbound
          ,LotControlInternal
          ,LotControlOutbound
          ,Weight
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NestedVolume
          ,InspectionRequerid
          ,InspectionCode
          ,IdPutawayZone
          ,ControlExpDate
          ,ControlFabDate
          ,Acumulable
          ,ReOrderPoint
          ,ReOrderQty
          ,PalletQty
          ,CutMinimum
          ,Originator
          ,VASProfile
          ,Hazard
          ,Price
          ,InventoryType
          ,StackingSequence
          ,CommentControl
          ,CompatibilityCode
          ,MSDSUrl
          ,PictureUrl
          ,DateCreated
          ,UserCreated)

          VALUES
          (@IdItem
          ,@ItemCode
          ,@IdOwn
          ,@AltItemCode
          ,@Description
          ,@IdGrpItem1
          ,@IdGrpItem2
          ,@IdGrpItem3
          ,@IdGrpItem4
          ,@LongItemName
          ,@ShortItemName
          ,@Status
          ,@ItemComment
          ,@ShelfLife
          ,@ExpirationDays
          ,@CtrlSerialInbound
          ,@CtrlSerialInternal
          ,@CtrlSerialOutbound
          ,@LotControlInbound
          ,@LotControlInternal
          ,@LotControlOutbound
          ,@Weight
          ,@Volume
          ,@Length
          ,@Width
          ,@Height
          ,@NestedVolume
          ,@InspectionRequerid
          ,@InspectionCode
          ,@IdPutawayZone
          ,@ControlExpDate
          ,@ControlFabDate
          ,@Acumulable
          ,@ReOrderPoint
          ,@ReOrderQty
          ,@PalletQty
          ,@CutMinimum
          ,@Originator
          ,@VASProfile
          ,@Hazard
          ,@Price
          ,@InventoryType
          ,@StackingSequence
          ,@CommentControl
          ,@CompatibilityCode
          ,@MSDSUrl
          ,@PictureUrl
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
          <parameter type="String">ItemCode</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">AltItemCode</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
          <parameter type="Int">IdGrpItem3</parameter>
          <parameter type="Int">IdGrpItem4</parameter>
          <parameter type="String">LongItemName</parameter>
          <parameter type="String">ShortItemName</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">ItemComment</parameter>
          <parameter type="Int">ShelfLife</parameter>
          <parameter type="Int">ExpirationDays</parameter>
          <parameter type="Int">CtrlSerialInbound</parameter>
          <parameter type="Int">CtrlSerialInternal</parameter>
          <parameter type="Int">CtrlSerialOutbound</parameter>
          <parameter type="Int">LotControlInbound</parameter>
          <parameter type="Int">LotControlInternal</parameter>
          <parameter type="Int">LotControlOutbound</parameter>
          <parameter type="Decimal">Weight</parameter>
          <parameter type="Decimal">Volume</parameter>
          <parameter type="Decimal">Length</parameter>
          <parameter type="Decimal">Width</parameter>
          <parameter type="Decimal">Height</parameter>
          <parameter type="Decimal">NestedVolume</parameter>
          <parameter type="Int">InspectionRequerid</parameter>
          <parameter type="String">InspectionCode</parameter>
          <parameter type="Int">IdPutawayZone</parameter>
          <parameter type="Boolean">ControlExpDate</parameter>
          <parameter type="Boolean">ControlFabDate</parameter>
          <parameter type="Boolean">Acumulable</parameter>
          <parameter type="Decimal">ReOrderPoint</parameter>
          <parameter type="Decimal">ReOrderQty</parameter>
          <parameter type="Int">PalletQty</parameter>
          <parameter type="Int">CutMinimum</parameter>
          <parameter type="String">Originator</parameter>
          <parameter type="String">VASProfile</parameter>
          <parameter type="Boolean">Hazard</parameter>
          <parameter type="Decimal">Price</parameter>
          <parameter type="String">InventoryType</parameter>
          <parameter type="Int">StackingSequence</parameter>
          <parameter type="Boolean">CommentControl</parameter>
          <parameter type="String">CompatibilityCode</parameter>
          <parameter type="String">MSDSUrl</parameter>
          <parameter type="String">PictureUrl</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="Item_Update">
        <sql>
          UPDATE Item
          SET ItemCode = @ItemCode
          ,IdOwn = @IdOwn
          ,AltItemCode = @AltItemCode
          ,Description = @Description
          ,IdGrpItem1 = @IdGrpItem1
          ,IdGrpItem2 = @IdGrpItem2
          ,IdGrpItem3 = @IdGrpItem3
          ,IdGrpItem4 = @IdGrpItem4
          ,LongItemName = @LongItemName
          ,ShortItemName = @ShortItemName
          ,Status = @Status
          ,ItemComment = @ItemComment
          ,ShelfLife = @ShelfLife
          ,ExpirationDays = @ExpirationDays
          ,CtrlSerialInbound = @CtrlSerialInbound
          ,CtrlSerialInternal = @CtrlSerialInternal
          ,CtrlSerialOutbound = @CtrlSerialOutbound
          ,LotControlInbound = @LotControlInbound
          ,LotControlInternal = @LotControlInternal
          ,LotControlOutbound = @LotControlOutbound
          ,Weight = @Weight
          ,Volume = @Volume
          ,Length = @Length
          ,Width = @Width
          ,Height = @Height
          ,NestedVolume = @NestedVolume
          ,InspectionRequerid = @InspectionRequerid
          ,InspectionCode = @InspectionCode
          ,IdPutawayZone = @IdPutawayZone
          ,ControlExpDate = @ControlExpDate
          ,ControlFabDate = @ControlFabDate
          ,Acumulable = @Acumulable
          ,ReOrderPoint = @ReOrderPoint
          ,ReOrderQty = @ReOrderQty
          ,PalletQty = @PalletQty
          ,CutMinimum = @CutMinimum
          ,Originator = @Originator
          ,VASProfile = @VASProfile
          ,Hazard = @Hazard
          ,Price = @Price
          ,InventoryType = @InventoryType
          ,StackingSequence = @StackingSequence
          ,CommentControl = @CommentControl
          ,CompatibilityCode = @CompatibilityCode
          ,MSDSUrl = @MSDSUrl
          ,PictureUrl = @PictureUrl
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdItem = @IdItem

        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
          <parameter type="String">ItemCode</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">AltItemCode</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
          <parameter type="Int">IdGrpItem3</parameter>
          <parameter type="Int">IdGrpItem4</parameter>
          <parameter type="String">LongItemName</parameter>
          <parameter type="String">ShortItemName</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">ItemComment</parameter>
          <parameter type="Int">ShelfLife</parameter>
          <parameter type="Int">ExpirationDays</parameter>
          <parameter type="Int">CtrlSerialInbound</parameter>
          <parameter type="Int">CtrlSerialInternal</parameter>
          <parameter type="Int">CtrlSerialOutbound</parameter>
          <parameter type="Int">LotControlInbound</parameter>
          <parameter type="Int">LotControlInternal</parameter>
          <parameter type="Int">LotControlOutbound</parameter>
          <parameter type="Decimal">Weight</parameter>
          <parameter type="Decimal">Volume</parameter>
          <parameter type="Decimal">Length</parameter>
          <parameter type="Decimal">Width</parameter>
          <parameter type="Decimal">Height</parameter>
          <parameter type="Decimal">NestedVolume</parameter>
          <parameter type="Int">InspectionRequerid</parameter>
          <parameter type="String">InspectionCode</parameter>
          <parameter type="Int">IdPutawayZone</parameter>
          <parameter type="Boolean">ControlExpDate</parameter>
          <parameter type="Boolean">ControlFabDate</parameter>
          <parameter type="Boolean">Acumulable</parameter>
          <parameter type="Decimal">ReOrderPoint</parameter>
          <parameter type="Decimal">ReOrderQty</parameter>
          <parameter type="Int">PalletQty</parameter>
          <parameter type="Int">CutMinimum</parameter>
          <parameter type="String">Originator</parameter>
          <parameter type="String">VASProfile</parameter>
          <parameter type="Boolean">Hazard</parameter>
          <parameter type="Decimal">Price</parameter>
          <parameter type="String">InventoryType</parameter>
          <parameter type="Int">StackingSequence</parameter>
          <parameter type="Boolean">CommentControl</parameter>
          <parameter type="String">CompatibilityCode</parameter>
          <parameter type="String">MSDSUrl</parameter>
          <parameter type="String">PictureUrl</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="GetCountItemFromInbound">
        <sql>
          SELECT COUNT(I.IDITEM)AS COUNT
          FROM INBOUNDDETAIL I
          WHERE I.IDITEM = @idItem
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
        </parameters>
      </query>

      <query code="GetCountItemFromStock">
        <sql>
          SELECT COUNT(S.IDITEM)AS COUNT
          FROM STOCK S
          WHERE S.IDITEM = @idItem
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
        </parameters>
      </query>

      <query code="Item_Delete">
        <sql>
          DELETE FROM WorkZoneItem WHERE IdItem = @IdItem;

          DELETE FROM ItemUom WHERE idItem = @IdItem;

          DELETE FROM Item WHERE IdItem = @IdItem
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
        </parameters>
      </query>
      <query code="GetItemUomByBarCode">
        <sql>
          SELECT
          iu.IdUom
          ,iu.IdItem
          ,iu.UomCode
          ,iu.ConversionFactor
          ,iu.BarCode
          ,iu.UomName
          ,iu.Length
          ,iu.Width
          ,iu.Height
          ,iu.Volume
          ,iu.Weight
          ,iu.Status
          ,iu.LayoutUomQty
          ,iu.LayoutUnitQty
          ,iu.LayoutMaxWeightUpon
          ,iu.PutawayZone
          ,iu.PickArea
          ,i.IdItem
          ,i.ItemCode
          ,i.Description
          ,i.IdOwn
          ,o.OwnName
          ,i.ShortItemName
          ,i.Status
          ,i.CtrlSerialInbound
          ,i.CtrlSerialInternal
          ,i.CtrlSerialOutbound
          ,i.LotControlInbound
          ,i.LotControlInternal
          ,i.LotControlOutbound
          ,i.Weight
          ,i.Volume
          ,i.Length
          ,i.Width
          ,i.Height
          ,i.NestedVolume
          ,i.IdPutawayZone
          ,i.ReOrderPoint
          ,i.ReOrderQty
          ,i.PalletQty
          FROM ItemUom iu
          INNER JOIN item i ON i.IdItem = iu.IdItem
          INNER JOIN Owner o ON o.IdOwn = i.IdOwn
          WHERE iu.BarCode = @BarCode
          AND i.Status = 1
        </sql>
        <parameters>
          <parameter type="String">BarCode</parameter>
        </parameters>
      </query>

      <query code="ItemUom_FindAll">
        <sql>
          SELECT
          iu.IdUom
          ,iu.IdItem
          ,iu.UomCode
          ,iu.ConversionFactor
          ,iu.BarCode
          ,iu.UomName
          ,iu.Length
          ,iu.Width
          ,iu.Height
          ,iu.Volume
          ,iu.Weight
          ,iu.Status
          ,iu.LayoutUomQty
          ,iu.LayoutUnitQty
          ,iu.LayoutMaxWeightUpon
          ,iu.PutawayZone
          ,iu.PickArea
          ,i.IdItem
          ,i.ItemCode
          ,i.Description
          ,i.IdOwn
          ,o.TradeName
          ,o.OwnCode
          ,o.OwnName
          ,i.ShortItemName
          ,i.Status
          ,i.CtrlSerialInbound
          ,i.CtrlSerialInternal
          ,i.CtrlSerialOutbound
          ,i.LotControlInbound
          ,i.LotControlInternal
          ,i.LotControlOutbound
          ,i.Weight
          ,i.Volume
          ,i.Length
          ,i.Width
          ,i.Height
          ,i.NestedVolume
          ,i.IdPutawayZone
          ,i.ReOrderPoint
          ,i.ReOrderQty
          ,i.PalletQty
          FROM ItemUom iu
          INNER JOIN item i ON i.IdItem = iu.IdItem
          INNER JOIN Owner o ON o.IdOwn = i.IdOwn
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Item" type="textLike">i.ItemCode</filter>
          <filter name="Name" type="textLike">i.LongItemName</filter>
          <filter name="Description" type="textLike">i.Description</filter>
          <filter name="Status" type="numericEqual">i.Status</filter>
          <filter name="Owner" type="numericIn">i.IdOwn</filter>
        </filters>
      </query>

      <query code="GetItemUomByCode">
        <sql>
          SELECT DISTINCT
          iu.IdUom
          ,iu.IdItem
          ,iu.UomCode
          ,iu.ConversionFactor
          ,iu.BarCode
          ,iu.UomName
          ,iu.Length
          ,iu.Width
          ,iu.Height
          ,iu.Volume
          ,iu.Weight
          ,iu.Status
          ,iu.LayoutUomQty
          ,iu.LayoutUnitQty
          ,iu.LayoutMaxWeightUpon
          ,iu.PutawayZone
          ,iu.PickArea
          ,i.ItemCode
          ,i.Description
          ,i.Status
          ,i.LotControlInbound
          ,i.IdOwn
          FROM ItemUom iu
          INNER JOIN item i ON i.IdItem = iu.IdItem
          WHERE iu.UomCode = @UomCode
        </sql>
        <parameters>
          <parameter type="String">UomCode</parameter>
        </parameters>
      </query>

      <query code="ItemUom_GetByCodeAndOwner">
        <sql>
          SELECT DISTINCT
          iu.IdUom
          ,iu.IdItem
          ,iu.UomCode
          ,iu.ConversionFactor
          ,iu.BarCode
          ,iu.UomName
          ,iu.Length
          ,iu.Width
          ,iu.Height
          ,iu.Volume
          ,iu.Weight
          ,iu.Status
          ,iu.LayoutUomQty
          ,iu.LayoutUnitQty
          ,iu.LayoutMaxWeightUpon
          ,iu.PutawayZone
          ,iu.PickArea
          ,i.ItemCode
          ,i.Description
          ,i.Status
          ,i.LotControlInbound
          ,i.IdOwn
          FROM ItemUom iu
          INNER JOIN item i ON i.IdItem = iu.IdItem
          WHERE iu.UomCode = @code
          AND i.IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="ItemUom_GetByBarCodeAndOwner">
        <sql>
          SELECT DISTINCT
          iu.IdUom
          ,iu.IdItem
          ,iu.UomCode
          ,iu.ConversionFactor
          ,iu.BarCode
          ,iu.UomName
          ,iu.Length
          ,iu.Width
          ,iu.Height
          ,iu.Volume
          ,iu.Weight
          ,iu.Status
          ,iu.LayoutUomQty
          ,iu.LayoutUnitQty
          ,iu.LayoutMaxWeightUpon
          ,iu.PutawayZone
          ,iu.PickArea
          ,i.ItemCode
          ,i.Description
          ,i.Status
          ,i.LotControlInbound
          ,i.IdOwn
          FROM ItemUom iu
          INNER JOIN item i ON i.IdItem = iu.IdItem
          WHERE iu.BarCode = @barCode
          AND i.IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="String">barCode</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="ItemUom_Insert">
        <sql>
          INSERT INTO ItemUom
          (IdUom
          ,IdItem
          ,UomCode
          ,ConversionFactor
          ,BarCode
          ,IdUomType
          ,UomName
          ,Length
          ,Width
          ,Height
          ,Volume
          ,Weight
          ,Status
          ,LayoutUomQty
          ,LayoutUnitQty
          ,LayoutMaxWeightUpon
          ,PutawayZone
          ,PickArea
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdUom
          ,@IdItem
          ,@UomCode
          ,@ConversionFactor
          ,@BarCode
          ,@IdUomType
          ,@UomName
          ,@Length
          ,@Width
          ,@Height
          ,@Volume
          ,@Weight
          ,@Status
          ,@LayoutUomQty
          ,@LayoutUnitQty
          ,@LayoutMaxWeightUpon
          ,@PutawayZone
          ,@PickArea
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdUom</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="String">UomCode</parameter>
          <parameter type="Decimal">ConversionFactor"</parameter>
          <parameter type="String">BarCode"</parameter>
          <parameter type="Int">IdUomType</parameter>
          <parameter type="String">UomName"</parameter>
          <parameter type="Decimal" >Length"</parameter>
          <parameter type="Decimal">Width"</parameter>
          <parameter type="Decimal">Height"</parameter>
          <parameter type="Decimal">Volume"</parameter>
          <parameter type="Decimal">Weight"</parameter>
          <parameter type="Boolean">Status"</parameter>
          <parameter type="Int">LayoutUomQty"</parameter>
          <parameter type="Int">LayoutUnitQty"</parameter>
          <parameter type="Decimal">LayoutMaxWeightUpon"</parameter>
          <parameter type="String">PutawayZone"</parameter>
          <parameter type="String">PickArea</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="ItemUom_Update">
        <sql>
          UPDATE ItemUom
          SET IdUom = @IdUom
          ,IdItem = @IdItem
          ,UomCode = @UomCode
          ,ConversionFactor = @ConversionFactor
          ,BarCode = @BarCode
          ,IdUomType = @IdUomType
          ,UomName = @UomName
          ,Length = @Length
          ,Width = @Width
          ,Height = @Height
          ,Volume = @Volume
          ,Weight = @Weight
          ,Status = @Status
          ,LayoutUomQty = @LayoutUomQty
          ,LayoutUnitQty = @LayoutUnitQty
          ,LayoutMaxWeightUpon = @LayoutMaxWeightUpon
          ,PutawayZone = @PutawayZone
          ,PickArea = @PickArea
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdUom = @IdUom
        </sql>

        <parameters>
          <parameter type="Int">IdUom</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="String">UomCode</parameter>
          <parameter type="Decimal">ConversionFactor"</parameter>
          <parameter type="String">BarCode"</parameter>
          <parameter type="Int">IdUomType</parameter>
          <parameter type="String">UomName"</parameter>
          <parameter type="Decimal" >Length"</parameter>
          <parameter type="Decimal">Width"</parameter>
          <parameter type="Decimal">Height"</parameter>
          <parameter type="Decimal">Volume"</parameter>
          <parameter type="Decimal">Weight"</parameter>
          <parameter type="Boolean">Status"</parameter>
          <parameter type="Int">LayoutUomQty"</parameter>
          <parameter type="Int">LayoutUnitQty"</parameter>
          <parameter type="Decimal">LayoutMaxWeightUpon"</parameter>
          <parameter type="String">PutawayZone"</parameter>
          <parameter type="String">PickArea</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="ItemUom_Delete">
        <sql>
          DELETE
          FROM ItemUom
          WHERE idUom = @idUom;
        </sql>
        <parameters>
          <parameter type="Int">IdUom</parameter>
        </parameters>
      </query>

      <query code="ItemUom_GetItemUomByIdItem">
        <sql>
          SELECT
          iu.IdUom
          ,iu.IdItem
          ,i.Description
          ,iu.UomCode
          ,iu.ConversionFactor
          ,iu.BarCode
          ,iu.IdUomType
          ,iu.UomName
          ,iu.Length
          ,iu.Width
          ,iu.Height
          ,iu.Volume
          ,iu.Weight
          ,iu.Status
          ,iu.LayoutUomQty
          ,iu.LayoutUnitQty
          ,iu.LayoutMaxWeightUpon
          ,iu.PutawayZone
          ,iu.PickArea
          ,i.ItemCode
          ,i.Description
          ,i.Status
          ,i.LotControlInbound
          ,i.IdOwn
          FROM ItemUom iu
          INNER JOIN item i ON i.IdItem = iu.IdItem
          WHERE iu.IdItem = @IdItem
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
        </parameters>
      </query>

      <query code="ItemUom_GetItemUomByIdItemAndIdUom">
        <sql>
          SELECT
          iu.IdUom
          ,iu.IdItem
          ,iu.UomCode
          ,iu.ConversionFactor
          ,iu.BarCode
          ,iu.UomName
          ,iu.Length
          ,iu.Width
          ,iu.Height
          ,iu.Volume
          ,iu.Weight
          ,iu.Status
          ,iu.LayoutUomQty
          ,iu.LayoutUnitQty
          ,iu.LayoutMaxWeightUpon
          ,iu.PutawayZone
          ,iu.PickArea
          ,i.ItemCode
          ,i.Description
          ,i.Status
          ,i.LotControlInbound
          ,i.IdOwn
          FROM ItemUom iu
          INNER JOIN item i ON i.IdItem = iu.IdItem
          WHERE iu.IdItem = @IdItem
          AND iu.IdItemUom = @IdUom
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdUom</parameter>
        </parameters>
      </query>


      <query code="ItemUom_GetByIdUomType">
        <sql>
          SELECT
          iu.IdUom
          ,iu.IdItem
          ,ut.IdUomType
          ,ut.UomName
          ,iu.UomCode
          ,iu.ConversionFactor
          ,iu.BarCode
          ,iu.UomName
          ,iu.Length
          ,iu.Width
          ,iu.Height
          ,iu.Volume
          ,iu.Weight
          ,iu.Status
          ,iu.LayoutUomQty
          ,iu.LayoutUnitQty
          ,iu.LayoutMaxWeightUpon
          ,iu.PutawayZone
          ,iu.PickArea
          FROM ItemUom iu
          INNER JOIN UomType ut ON ut.IdUomType = iu.IdUomType
          WHERE iu.IdUomType = @IdUomType
        </sql>
        <parameters>
          <parameter type="Int">IdUomType</parameter>
        </parameters>
      </query>      
      
      <query code="Item_DeleteWorkZone">
        <sql>
          DELETE FROM WorkZoneItem
          WHERE IdItem = @idItem
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
        </parameters>
      </query>

      <query code="Item_InsertWorkZones">
        <sql>
          INSERT INTO WorkZoneItem
          (IdItem,
          IdWorkZone,
          DateCreated,
          UserCreated)
          VALUES
          (@idItem,
          @idWorkZone,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idWorkZone</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>



      <query code="Item_GetBy_SpecialParameters">
        <sql>
          SELECT I.IdItem
          ,I.ItemCode
          ,I.IdOwn
          ,I.AltItemCode
          ,I.Description
          ,I.IdGrpItem1
          ,I.IdGrpItem2
          ,I.IdGrpItem3
          ,I.IdGrpItem4
          ,I.LongItemName
          ,I.ShortItemName
          ,I.Status
          ,I.ItemComment
          FROM Item I
          LEFT JOIN GroupItem1 Grp1 ON I.IdGrpItem1 = Grp1.IdGrpItem1
          LEFT JOIN GroupItem2 Grp2 ON I.IdGrpItem2 = Grp2.IdGrpItem2
          LEFT JOIN GroupItem3 Grp3 ON I.IdGrpItem3 = Grp3.IdGrpItem3
          LEFT JOIN GroupItem4 Grp4 ON I.IdGrpItem4 = Grp4.IdGrpItem4
          WHERE ((I.IdGrpItem1 = @idGrpItem1 AND @idGrpItem1 &lt;&gt; -2) OR (@idGrpItem1 = -2))
          AND ((I.IdGrpItem2 = @idGrpItem2 AND @idGrpItem2 &lt;&gt; -2) OR (@idGrpItem2 = -2))
          AND ((I.IdGrpItem3 = @idGrpItem3 AND @idGrpItem3 &lt;&gt; -2) OR (@idGrpItem3 = -2))
          AND ((I.IdGrpItem4 = @idGrpItem4 AND @idGrpItem4 &lt;&gt; -2) OR (@idGrpItem4 = -2))
          AND I.ItemCode LIKE @code
          AND I.LongItemName LIKE @name
          AND I.Description LIKE @description
          AND I.IdOwn = @idOwn

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idOwn</parameter>
          <parameter type="Int">idGrpItem1</parameter>
          <parameter type="Int">idGrpItem2</parameter>
          <parameter type="Int">idGrpItem3</parameter>
          <parameter type="Int">idGrpItem4</parameter>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="String">description</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="Item_GetBy_SpecialParametersAndParameterValue">
        <sql>
          SELECT I.IdItem
          ,I.ItemCode
          ,I.IdOwn
          ,I.AltItemCode
          ,I.Description
          ,I.IdGrpItem1
          ,I.IdGrpItem2
          ,I.IdGrpItem3
          ,I.IdGrpItem4
          ,I.LongItemName
          ,I.ShortItemName
          ,I.Status
          ,I.ItemComment
          FROM Item I
          LEFT JOIN ItemParameter IP ON IP.IdItem = I.IdItem
          LEFT JOIN GroupItem1 Grp1 ON I.IdGrpItem1 = Grp1.IdGrpItem1
          LEFT JOIN GroupItem2 Grp2 ON I.IdGrpItem2 = Grp2.IdGrpItem2
          LEFT JOIN GroupItem3 Grp3 ON I.IdGrpItem3 = Grp3.IdGrpItem3
          LEFT JOIN GroupItem4 Grp4 ON I.IdGrpItem4 = Grp4.IdGrpItem4
          WHERE (I.IdGrpItem1 = @idGrpItem1 AND @idGrpItem1 &lt;&gt; -2 OR I.IdGrpItem1 is null AND @idGrpItem1 = -2)
          AND (I.IdGrpItem2 = @idGrpItem2 AND @idGrpItem2 &lt;&gt; -2 OR I.IdGrpItem2 is null AND @idGrpItem2 = -2)
          AND (I.IdGrpItem3 = @idGrpItem3 AND @idGrpItem3 &lt;&gt; -2 OR I.IdGrpItem3 is null AND @idGrpItem3 = -2)
          AND (I.IdGrpItem4 = @idGrpItem4 AND @idGrpItem4 &lt;&gt; -2 OR I.IdGrpItem4 is null AND @idGrpItem4 = -2)
          AND I.ItemCode LIKE @code
          AND I.LongItemName LIKE @name
          AND I.Description LIKE @description
          AND I.IdOwn = @idOwn
          AND IP.IdParameter = @idParameter
          AND IP.ParameterValue = @parameterValue

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew ,VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idOwn</parameter>
          <parameter type="Int">idGrpItem1</parameter>
          <parameter type="Int">idGrpItem2</parameter>
          <parameter type="Int">idGrpItem3</parameter>
          <parameter type="Int">idGrpItem4</parameter>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="String">description</parameter>
          <parameter type="Int">idParameter</parameter>
          <parameter type="String">parameterValue</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="Kit_GetCountItemFromOutbound">
        <sql>

          SELECT COUNT(O.IdItem) AS COUNT
          FROM OutboundDetail O
          WHERE O.IDITEM = @idItem
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
        </parameters>
      </query>
      <query code="Kit_GetCountItemKitFromStock">
        <sql>
          SELECT COUNT(StockId) AS COUNT
          FROM STOCK
          WHERE IdItem in
          (SELECT IdItemBase from KIT Where IdItemKit = @IdItemKit)
        </sql>
        <parameters>
          <parameter type="Int">IdItemKit</parameter>
        </parameters>
      </query>
      <query code="Kit_GetCountKitFromStock">
        <sql>
          SELECT COUNT(StockId) AS COUNT
          FROM STOCK
          WHERE IdItem in
          (SELECT IdItemKit from KIT Where IdItemKit = @IdItemKit)
        </sql>
        <parameters>
          <parameter type="Int">IdItemKit</parameter>
        </parameters>
      </query>
      <query code="Item_Kit_GetByItemCodeItemName">
        <sql>
          <!--TRAE LOS Items pero solo los que estan asociados a Kits-->
          <!--Se Usa en UnKiting-->
          SELECT I.IdItem IdItemKit
          ,I.ItemCode
          ,I.LongItemName
          ,I.ShortItemName
          ,I.Description
          ,I.ShortItemName
          ,I.IdItem
          FROM ITEM I
          INNER JOIN KIT K ON I.IdItem = K.IdItemBase
          AND Status = 1
          AND IdItem IN (SELECT IdItemBase FROM Kit)
          WHERE ItemCode LIKE @code
          AND LongItemName LIKE @name
          AND IdOwn = @IdOwn
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>


      <!-- ITEM section end -->


      <!--Category ITEM Section Begin-->
      <query code="CategoryItem_FindAll">
        <sql>
          SELECT
          Ca.IdCtgItem
          ,Ca.IdOwn
          ,o.OwnName
          ,Ca.CtgCode
          ,Ca.CtgName
          ,Ca.DateCreated
          ,Ca.UserCreated
          ,Ca.DateModified
          ,Ca.UserModified
          FROM CategoryItem Ca
          INNER JOIN Owner o ON Ca.IdOwn = o.IdOwn
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">Ca.CtgCode</filter>
          <filter name="Name" type="textLike">Ca.CtgName</filter>
          <filter name="Owner" type="numericIn">Ca.IdOwn</filter>
        </filters>
      </query>

      <query code="CategoryItem_Insert">
        <sql>
          INSERT INTO CategoryItem
          (IdCtgItem
          ,IdOwn
          ,CtgCode
          ,CtgName
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdCtgItem
          ,@IdOwn
          ,@CtgCode
          ,@CtgName
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdCtgItem</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">CtgCode</parameter>
          <parameter type="String">CtgName</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="CategoryItem_Update">
        <sql>
          UPDATE CategoryItem
          SET IdOwn = @IdOwn
          ,CtgCode = @CtgCode
          ,CtgName = @CtgName
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdCtgItem = @IdCtgItem
        </sql>
        <parameters>
          <parameter type="Int">IdCtgItem</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">CtgCode</parameter>
          <parameter type="String">CtgName</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query code="CategoryItem_Delete">
        <sql>
          DELETE CategoryItem
          WHERE IdCtgItem = @IdCtgItem
        </sql>
        <parameters>
          <parameter type="Int">IdCtgItem</parameter>
        </parameters>
      </query>

      <query code="CategoryItem_GetByOwner">
        <sql>
          SELECT IdCtgItem,
          IdOwn,
          CtgCode,
          CtgName
          FROM CategoryItem
          WHERE (IdOwn = @idOwn OR idOwn = -2)
        </sql>
        <parameters>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="CategoryItem_GetByCodeAndOwn">
        <sql>
          SELECT IdCtgItem,
          IdOwn,
          CtgCode,
          CtgName
          FROM CategoryItem
          WHERE CtgCode = @ctgCode
          AND IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="String">ctgCode</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="GetCategoryItemByCode">
        <sql>
          SELECT IdCtgItem,
          IdOwn,
          CtgCode,
          CtgName
          FROM CategoryItem
          WHERE CtgCode = @ctgCode
        </sql>
        <parameters>
          <parameter type="String">ctgCode</parameter>
        </parameters>
      </query>

      <query code="GetCategoryItemByTaskDetail">
        <sql>
          SELECT IdCtgItem
          FROM TaskDetail
          WHERE IdCtgItem = @IdCtgItem
        </sql>
        <parameters>
          <parameter type="Int">IdCtgItem</parameter>
        </parameters>
      </query>

      <query code="GetCategoryItemByStock">
        <sql>
          SELECT IdCtgItem
          FROM Stock
          WHERE IdCtgItem = @IdCtgItem
        </sql>
        <parameters>
          <parameter type="Int">IdCtgItem</parameter>
        </parameters>
      </query>
      <!--Category ITEM Section FIN-->




      <!--KIT ITEM Section Begin-->
      <query code="Kits_GetByOwner">
        <sql>
          <!--TRAE LA INFORMACION DE UN KIT-->
          SELECT I.IdItem IdItemKit
          ,I.ItemCode
          ,I.LongItemName
          ,I.ShortItemName
          ,I.Description
          ,I.ShortItemName
          ,I.IdGrpItem1
          ,G1.GrpItem1Name
          ,I.IdGrpItem2
          ,G2.GrpItem2Name
          ,I.IdGrpItem3
          ,G3.GrpItem3Name
          ,I.IdGrpItem4
          ,G4.GrpItem4Name
          FROM ITEM I
          INNER JOIN KIT K ON I.IdItem = K.IdItemKit
          LEFT JOIN GroupItem1 G1 ON G1.IdGrpItem1 = I.IdGrpItem1
          LEFT JOIN GroupItem2 G2 ON G2.IdGrpItem2 = I.IdGrpItem2
          LEFT JOIN GroupItem3 G3 ON G3.IdGrpItem3 = I.IdGrpItem3
          LEFT JOIN GroupItem4 G4 ON G4.IdGrpItem4 = I.IdGrpItem4
          AND Status = 1
          AND IdItem IN (SELECT IdItemKit FROM Kit)
          @SQLPart
          GROUP By I.IdItem
          ,I.ItemCode
          ,I.LongItemName
          ,I.ShortItemName
          ,I.Description
          ,I.ShortItemName
          ,I.IdGrpItem1
          ,G1.GrpItem1Name
          ,I.IdGrpItem2
          ,G2.GrpItem2Name
          ,I.IdGrpItem3
          ,G3.GrpItem3Name
          ,I.IdGrpItem4
          ,G4.GrpItem4Name;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Owner" type="numericIn">IdOwn</filter>
          <filter name="Item" type="textLike">i.ItemCode</filter>
          <filter name="Name" type="textLike">i.LongItemName</filter>
        </filters>
      </query>




      <query code="Kits_GetDetail">
        <sql>
          <!--TRAE LOS ITEMS (DETALLE) CORRESPONDIENTES A UN KIT-->
          SELECT
          K.IdItemKit
          ,K.IdItemBase
          ,I.ItemCode
          ,I.LongItemName
          ,I.Description
          ,I.ShortItemName
          ,I.IdGrpItem1
          ,G1.GrpItem1Name
          ,I.IdGrpItem2
          ,G2.GrpItem2Name
          ,I.IdGrpItem3
          ,G3.GrpItem3Name
          ,I.IdGrpItem4
          ,G4.GrpItem4Name
          ,K.ItemQty
          FROM Item I
          JOIN Kit K ON I.IdItem = K.IdItemBase
          LEFT JOIN GroupItem1 G1 ON G1.IdGrpItem1 = I.IdGrpItem1
          LEFT JOIN GroupItem2 G2 ON G2.IdGrpItem2 = I.IdGrpItem2
          LEFT JOIN GroupItem3 G3 ON G3.IdGrpItem3 = I.IdGrpItem3
          LEFT JOIN GroupItem4 G4 ON G4.IdGrpItem4 = I.IdGrpItem4
          WHERE K.IdItemKit = @IdItemKit;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdItemKit</parameter>
        </parameters>
      </query>

      <query code="Kits_GetByItemCodeItemName">
        <sql>
          <!--TRAE LOS KIT-->
          SELECT I.IdItem IdItemKit
          ,I.ItemCode
          ,I.LongItemName
          ,I.ShortItemName
          ,I.Description
          ,I.ShortItemName
          FROM ITEM I
          INNER JOIN KIT K ON I.IdItem = K.IdItemKit
          AND Status = 1
          AND IdItem IN (SELECT IdItemKit FROM Kit)
          WHERE ItemCode LIKE @code
          AND LongItemName LIKE @name
          AND IdOwn = @idOwn
          GROUP By I.IdItem
          ,I.ItemCode
          ,I.LongItemName
          ,I.ShortItemName
          ,I.Description
          ,I.ShortItemName
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>




      <query code="Kits_GetById">
        <sql>
          <!--TRAE LOS ITEMS (DETALLE) CORRESPONDIENTES A UN KIT-->
          SELECT IdItemKit FROM Kit
          WHERE IdItemKit = @IdItemKit
          AND IdItemBase = @IdItemBase
        </sql>
        <parameters>
          <parameter type="Int">IdItemKit</parameter>
          <parameter type="Int">IdItemBase</parameter>
        </parameters>
      </query>

      <query code="Kits_Insert">
        <sql>
          INSERT INTO Kit
          (IdItemKit
          ,IdItemBase
          ,ItemQty
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdItemKit
          ,@IdItemBase
          ,@ItemQty
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdItemKit</parameter>
          <parameter type="Int">IdItemBase</parameter>
          <parameter type="Decimal">ItemQty</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="Kits_Update">
        <sql>
          UPDATE Kit
          SET ItemQty = @ItemQty
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdItemKit = @IdItemKit
          AND IdItemBase = @IdItemBase;
        </sql>
        <parameters>
          <parameter type="Int">IdItemKit</parameter>
          <parameter type="Int">IdItemBase</parameter>
          <parameter type="Decimal">ItemQty</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query code="Kits_DeleteByItem">
        <sql>
          DELETE FROM Kit
          WHERE IdItemKit = @IdItemKit
          AND IdItemBase = @IdItemBase
        </sql>
        <parameters>
          <parameter type="Int">IdItemKit</parameter>
          <parameter type="Int">IdItemBase</parameter>
        </parameters>
      </query>

      <query code="Kits_Delete">
        <sql>
          DELETE FROM Kit
          WHERE IdItemKit = @IdItemKit
        </sql>
        <parameters>
          <parameter type="Int">IdItemKit</parameter>
        </parameters>
      </query>

      <!--KIT ITEM Section FIN-->

      <!-- Company Parameters section begin -->
      <query code="CfgParameter_GetByUser">
        <sql>
          SELECT
          cp.IdParameter,
          m.IdModule,
          m.Name ModuleName,
          cp.ParameterCode,
          cp.Description,
          cp.ParameterValue,
          cp.Type,
          cp.MinValue,
          cp.MaxValue,
          cp.DefaultValue,
          cp.AllowEdit,
          cp.AllowDisplay,
          cp.Scope
          FROM CompanyParameter cp
          INNER JOIN CfgModule m ON cp.IdModule = m.IdModule

          <!-- TODO:  - por ahora solo trae la configuracion a nivel de Company. -->
          <!--		- mas adelante hay que traer la configuracion a nivel de User -> Warehouse -> Company . -->
          <!--		- empezando por el nivel de mayor detalle (User) y subiendo si no esta configurado . -->
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>



      <query code="CfgParameter_FindAll">
        <sql>
          SELECT
          cp.IdParameter,
          m.IdModule,
          m.Name ModuleName,
          cp.ParameterCode,
          cp.Description,
          cp.ParameterValue,
          cp.Type,
          cp.MinValue,
          cp.MaxValue,
          cp.DefaultValue,
          cp.AllowEdit,
          cp.AllowDisplay,
          cp.Scope
          FROM CompanyParameter cp
          INNER JOIN CfgModule m ON cp.IdModule = m.IdModule
          WHERE cp.IdModule = 1
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Scope" type="textEqual">cp.Scope</filter>
          <filter name="Name" type="textLike">cp.ParameterCode</filter>
          <filter name="Description" type="textLike">cp.Description</filter>
        </filters>
      </query>

      <!--Region Item parameters-->
      <query code="CfgParameterItemsCompany_FindAll">
        <sql>
          SELECT IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,Diferencias
          FROM v_Cfg_WmsItemParamByCmp
          ORDER BY IdParameter;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
      </query>

      <query code="CfgParameterOwnerItems_FindAll">
        <sql>
          SELECT IdOwn
          ,OwnName
          ,IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,Diferencias
          FROM v_Cfg_WmsItemParamByOwn
          WHERE IdOwn = @IdOwn
          ORDER BY IdParameter;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="CfgParameterOwnAndWhs_FindAll">
        <sql>
          SELECT IdOwn
          ,OwnName
          ,IdWhs
          ,WhsName
          ,IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,Diferencias
          FROM v_Cfg_WmsItemParamByWhs
          WHERE IdOwn = @IdOwn
          AND IdWhs = @IdWhs
          ORDER BY IdParameter;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="CfgParamItemByOwnWhsItems_FindAll">
        <sql>
          SELECT IdOwn
          ,OwnName
          ,IdWhs
          ,WhsName
          ,IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,Diferencias
          FROM v_Cfg_WmsItemParamByWhs
          WHERE IdOwn = @IdOwn
          AND IdWhs = @IdWhs
          ORDER BY IdParameter;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>


      <query code="Cfg_GetParamItemByOwnWhsGrp1">
        <sql>
          SELECT IdOwn
          ,OwnName
          ,IdWhs
          ,WhsName
          ,IdGrpItem1
          ,GrpItem1Name
          ,IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,Diferencias
          FROM v_Cfg_WmsItemParamByGrp1
          WHERE IdOwn = @IdOwn
          AND IdWhs = @IdWhs
          AND IdGrpItem1 = @IdGrpItem1
          ORDER BY IdParameter;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
        </parameters>
      </query>

      <query code="Cfg_GetParamItemByOwnWhsGrp2">
        <sql>
          SELECT IdOwn
          ,OwnName
          ,IdWhs
          ,WhsName
          ,IdGrpItem1
          ,GrpItem1Name
          ,IdGrpItem2
          ,GrpItem2Name
          ,IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,Diferencias
          FROM v_Cfg_WmsItemParamByGrp2
          WHERE IdOwn = @IdOwn
          AND IdWhs = @IdWhs
          AND IdGrpItem1 = @IdGrpItem1
          AND IdGrpItem2 = @IdGrpItem2
          ORDER BY IdParameter;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
        </parameters>
      </query>

      <query code="Cfg_GetParamItemByOwnWhsGrp3">
        <sql>
          SELECT IdOwn
          ,OwnName
          ,IdWhs
          ,WhsName
          ,IdGrpItem1
          ,GrpItem1Name
          ,IdGrpItem2
          ,GrpItem2Name
          ,IdGrpItem3
          ,GrpItem3Name
          ,IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,Diferencias
          FROM v_Cfg_WmsItemParamByGrp3
          WHERE IdOwn = @IdOwn
          AND IdWhs = @IdWhs
          AND IdGrpItem1 = @IdGrpItem1
          AND IdGrpItem2 = @IdGrpItem2
          AND IdGrpItem3 = @IdGrpItem3
          ORDER BY IdParameter;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
          <parameter type="Int">IdGrpItem3</parameter>
        </parameters>
      </query>

      <query code="Cfg_GetParamItemByOwnWhsGrp4">
        <sql>
          SELECT IdOwn
          ,OwnName
          ,IdWhs
          ,WhsName
          ,IdGrpItem1
          ,GrpItem1Name
          ,IdGrpItem2
          ,GrpItem2Name
          ,IdGrpItem3
          ,GrpItem3Name
          ,IdGrpItem4
          ,GrpItem4Name
          ,IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,Diferencias
          FROM v_Cfg_WmsItemParamByGrp4
          WHERE IdOwn = @IdOwn
          AND IdWhs = @IdWhs
          AND IdGrpItem1 = @IdGrpItem1
          AND IdGrpItem2 = @IdGrpItem2
          AND IdGrpItem3 = @IdGrpItem3
          AND IdGrpItem4 = @IdGrpItem4
          ORDER BY IdParameter;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
          <parameter type="Int">IdGrpItem3</parameter>
          <parameter type="Int">IdGrpItem4</parameter>
        </parameters>
      </query>

      <query code="CfgParam_InsertItemParameterGrp1">
        <sql>
          DELETE FROM GroupItem1Parameter
          WHERE IdParameter = @IdParameter
          AND IdWhs = @IdWhs
          AND IdOwn = @IdOwn
          AND IdGrpItem1 = @IdGrpItem1;

          INSERT INTO GroupItem1Parameter
          (IdParameter
          ,IdOwn
          ,IdWhs
          ,IdGrpItem1
          ,ParameterValue
          ,DateCreated
          ,UserCreated)
          VALUES (
          @IdParameter
          ,@IdOwn
          ,@IdWhs
          ,@IdGrpItem1
          ,@ParameterValue
          ,@DateCreated
          ,@UserCreated)

        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="String">ParameterValue</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="CfgParam_InsertItemParameterGrp2">
        <sql>
          DELETE FROM GroupItem2Parameter
          WHERE IdParameter = @IdParameter
          AND IdWhs = @IdWhs
          AND IdOwn = @IdOwn
          AND IdGrpItem1 = @IdGrpItem1
          AND IdGrpItem2 = @IdGrpItem2;

          INSERT INTO GroupItem2Parameter
          (IdParameter
          ,IdOwn
          ,IdWhs
          ,IdGrpItem1
          ,IdGrpItem2
          ,ParameterValue
          ,DateCreated
          ,UserCreated)
          VALUES (
          @IdParameter
          ,@IdOwn
          ,@IdWhs
          ,@IdGrpItem1
          ,@IdGrpItem2
          ,@ParameterValue
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
          <parameter type="String">ParameterValue</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="CfgParam_InsertItemParameterGrp3">
        <sql>
          DELETE FROM GroupItem3Parameter
          WHERE IdParameter = @IdParameter
          AND IdWhs = @IdWhs
          AND IdOwn = @IdOwn
          AND IdGrpItem1 = @IdGrpItem1
          AND IdGrpItem2 = @IdGrpItem2
          AND IdGrpItem3 = @IdGrpItem3;

          INSERT INTO GroupItem3Parameter
          (IdParameter
          ,IdOwn
          ,IdWhs
          ,IdGrpItem1
          ,IdGrpItem2
          ,IdGrpItem3
          ,ParameterValue
          ,DateCreated
          ,UserCreated)
          VALUES (
          @IdParameter
          ,@IdOwn
          ,@IdWhs
          ,@IdGrpItem1
          ,@IdGrpItem2
          ,@IdGrpItem3
          ,@ParameterValue
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
          <parameter type="Int">IdGrpItem3</parameter>
          <parameter type="String">ParameterValue</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="CfgParam_InsertItemParameterGrp4">
        <sql>
          DELETE FROM GroupItem4Parameter
          WHERE IdParameter = @IdParameter
          AND IdWhs = @IdWhs
          AND IdOwn = @IdOwn
          AND IdGrpItem1 = @IdGrpItem1
          AND IdGrpItem2 = @IdGrpItem2
          AND IdGrpItem3 = @IdGrpItem3
          AND IdGrpItem4 = @IdGrpItem4;

          INSERT INTO GroupItem4Parameter
          (IdParameter
          ,IdOwn
          ,IdWhs
          ,IdGrpItem1
          ,IdGrpItem2
          ,IdGrpItem3
          ,IdGrpItem4
          ,ParameterValue
          ,DateCreated
          ,UserCreated)
          VALUES (
          @IdParameter
          ,@IdOwn
          ,@IdWhs
          ,@IdGrpItem1
          ,@IdGrpItem2
          ,@IdGrpItem3
          ,@IdGrpItem4
          ,@ParameterValue
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
          <parameter type="Int">IdGrpItem3</parameter>
          <parameter type="Int">IdGrpItem4</parameter>
          <parameter type="String">ParameterValue</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="CfgParam_InsertParameterByItem">
        <sql>
          DELETE FROM ItemParameter
          WHERE IdParameter = @IdParameter
          AND   IdWhs = @IdWhs
          AND IdItem IN (SELECT IdItem from Item I @SQLPart);

          INSERT INTO ItemParameter
          (IdParameter
          ,IdWhs
          ,IdItem
          ,ParameterValue
          ,DateCreated
          ,UserCreated)
          SELECT @IdParameter
          ,@IdWhs
          ,IdItem
          ,@ParameterValue
          ,@DateCreated
          ,@UserCreated
          FROM Item I
          @SQLPart
          AND (I.IdGrpItem1 = @IdGrpItem1 OR @IdGrpItem1 = -2)
          AND (I.IdGrpItem2 = @IdGrpItem2 OR @IdGrpItem2 = -2)
          AND (I.IdGrpItem3 = @IdGrpItem3 OR @IdGrpItem3 = -2)
          AND (I.IdGrpItem4 = @IdGrpItem4 OR @IdGrpItem4 = -2)
          AND I.IdOwn = @idOwn

        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdGrpItem1</parameter>
          <parameter type="Int">IdGrpItem2</parameter>
          <parameter type="Int">IdGrpItem3</parameter>
          <parameter type="Int">IdGrpItem4</parameter>
          <parameter type="String">ParameterValue</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Item" type="numericIn">I.IdItem</filter>
        </filters>
      </query>

      <query code="CfgParameter_DeleteParamCompanyOverwrite">
        <sql>
          DELETE FROM OwnerParameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM WarehouseParameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem1Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem2Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem3Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem4Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM ItemParameter
          WHERE IdParameter = @IdParameter;
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
        </parameters>
      </query>

      <query code="CfgParameter_DeleteParamOwnerOverwrite">
        <sql>
          DELETE FROM WarehouseParameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem1Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem2Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem3Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem4Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM ItemParameter
          WHERE IdParameter = @IdParameter;
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
        </parameters>
      </query>

      <query code="CfgParameter_DeleteParamWarehouseOverwrite">
        <sql>
          DELETE FROM GroupItem1Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem2Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem3Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem4Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM ItemParameter
          WHERE IdParameter = @IdParameter;
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
        </parameters>
      </query>

      <query code="CfgParameter_DeleteParamGroupItem1Overwrite">
        <sql>
          DELETE FROM GroupItem2Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem3Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem4Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM ItemParameter
          WHERE IdParameter = @IdParameter;
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
        </parameters>
      </query>

      <query code="CfgParameter_DeleteParamGroupItem2Overwrite">
        <sql>
          DELETE FROM GroupItem3Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM GroupItem4Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM ItemParameter
          WHERE IdParameter = @IdParameter;
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
        </parameters>
      </query>

      <query code="CfgParameter_DeleteParamGroupItem3Overwrite">
        <sql>
          DELETE FROM GroupItem4Parameter
          WHERE IdParameter = @IdParameter;

          DELETE FROM ItemParameter
          WHERE IdParameter = @IdParameter;
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
        </parameters>
      </query>

      <query code="CfgParameter_DeleteParamGroupItem4Overwrite">
        <sql>
          DELETE FROM ItemParameter
          WHERE IdParameter = @IdParameter;
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
        </parameters>
      </query>
      <!--end Regtion Item parameters-->

      <!--Region LPNs parameters-->
      <query code="CfgParameterLPNCompany_FindAll">
        <sql>
          SELECT
          cp.IdParameter,
          m.IdModule,
          m.Name ModuleName,
          cp.ParameterCode,
          cp.Description,
          cp.ParameterValue,
          cp.Type,
          cp.MinValue,
          cp.MaxValue,
          cp.DefaultValue,
          cp.AllowEdit,
          cp.AllowDisplay,
          cp.Scope
          FROM v_Cfg_WmsLpnParamByCmp cp
          INNER JOIN CfgModule m ON cp.IdModule = m.IdModule
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textLike">cp.ParameterCode</filter>
          <filter name="Description" type="textLike">cp.Description</filter>
        </filters>
      </query>

      <query code="CfgParameterOwnerLPN_FindAll">
        <sql>
          SELECT     Wo.IdOwn
          ,Wo.OwnName
          ,Wo.IdParameter
          ,Wo.IdModule
          ,m.Name ModuleName
          ,Wo.ParameterCode
          ,Wo.Description
          ,Wo.ParameterValue
          ,Wo.Type
          ,Wo.MinValue
          ,Wo.MaxValue
          ,Wo.DefaultValue
          ,Wo.AllowEdit
          ,Wo.AllowDisplay
          ,Wo.Scope
          ,Wo.DateCreated
          ,Wo.UserCreated
          ,Wo.DateModified
          ,Wo.UserModified
          FROM v_Cfg_WmsLpnParamByOwn Wo
          INNER JOIN CfgModule m ON Wo.IdModule = m.IdModule
          WHERE IdOwn = @IdOwn
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
        <filters>
          <filter name="Scope" type="textEqual">Scope</filter>
          <filter name="Name" type="textLike">ParameterCode</filter>
          <filter name="Description" type="textLike">Description</filter>
        </filters>
      </query>

      <query code="CfgParameterWarehouseLPN_FindAll">
        <sql>
          SELECT
          V.IdOwn
          ,V.OwnName
          ,V.IdWhs
          ,V.WhsName
          ,V.IdParameter
          ,V.ParameterCode
          ,V.Description
          ,V.ParameterValue
          ,V.Type
          ,V.MinValue
          ,V.MaxValue
          ,V.DefaultValue
          ,V.AllowEdit
          ,V.AllowDisplay
          ,V.IdModule
          ,m.Name ModuleName
          ,V.Scope
          ,V.DateCreated
          ,V.UserCreated
          ,V.DateModified
          ,V.UserModified
          FROM v_Cfg_WmsLpnParamByOwnWhs V
          INNER JOIN CfgModule m ON V.IdModule = m.IdModule
          WHERE IdOwn = @IdOwn
          AND IdWhs = @IdWhs
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
        <filters>
          <filter name="Scope" type="textEqual">Scope</filter>
          <filter name="Name" type="textLike">ParameterCode</filter>
          <filter name="Description" type="textLike">Description</filter>
        </filters>
      </query>

      <query code="CfgParameter_InsertParamOwn">
        <sql>
          DELETE FROM OwnerParameter
          WHERE IdParameter = @IdParameter
          AND IdOwn = @IdOwn;

          INSERT INTO OwnerParameter
          (IdParameter
          ,IdOwn
          ,ParameterValue
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdParameter
          ,@IdOwn
          ,@ParameterValue
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">ParameterValue</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="CfgParameter_InsertParamOwnWhs">
        <sql>
          DELETE FROM WarehouseParameter
          WHERE IdParameter = @IdParameter
          AND IdOwn = @IdOwn
          AND IdWhs = @IdWhs;

          INSERT INTO WarehouseParameter
          (IdParameter
          ,IdOwn
          ,IdWhs
          ,ParameterValue
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdParameter
          ,@IdOwn
          ,@IdWhs
          ,@ParameterValue
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">ParameterValue</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <!--end Region LPNs parameters-->

      <!--Region Location parameters-->
      <query code="CfgParamLocationCompany_FindAll">
        <sql>
          SELECT IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,IdModule
          ,Scope
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM v_Cfg_WmsLocParamByCmp cp
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textLike">cp.ParameterCode</filter>
          <filter name="Description" type="textLike">cp.Description</filter>
        </filters>
      </query>


      <query code="GetParamLocByWhs">
        <sql>
          SELECT IdOwn
          ,Ownname
          ,IdWhs
          ,WhsName
          ,IdParameter
          ,ParameterCode
          ,Description
          ,ParameterValue
          ,Type
          ,MinValue
          ,MaxValue
          ,DefaultValue
          ,AllowEdit
          ,AllowDisplay
          ,IdModule
          ,Scope
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM v_Cfg_WmsLocParamByWhs
          WHERE IdWhs = @IdWhs

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>
      <!--end Region Locations parameters-->



      <query code="CfgParameter_UpdateParameterValue">
        <sql>
          UPDATE CompanyParameter
          SET  ParameterValue = @ParameterValue
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE ParameterCode = @Code
        </sql>
        <parameters>
          <parameter type="String">Code</parameter>
          <parameter type="String">ParameterValue</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>

        </parameters>
      </query>

      <query code="CfgParameter_GetScopes">
        <sql>
          SELECT Distinct Scope
          FROM CompanyParameter
          Where IdModule = 1
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="ParameterHistory_Insert">
        <sql>
          INSERT INTO ParameterHistory
          (IdParameterHistory
          ,ChangeDate
          ,ChangeUser
          ,IdOwn
          ,IdWhs
          ,IdLocation
          ,IdItem
          ,ParameterCode
          ,ParamValueBefore
          ,ParamValueAfter)
          VALUES
          (@IdParameter
          ,@ChangeDate
          ,@ChangeUser
          ,@IdOwn
          ,@IdWhs
          ,@IdLocation
          ,@IdItem
          ,@ParameterCode
          ,@ParamValueBefore
          ,@ParamValueAfter)
        </sql>
        <parameters>
          <parameter type="Int">IdParameter</parameter>
          <parameter type="DateTime">ChangeDate</parameter>
          <parameter type="String">ChangeUser</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">IdLocation</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="String">ParameterCode</parameter>
          <parameter type="String">ParamValueBefore</parameter>
          <parameter type="String">ParamValueAfter</parameter>
        </parameters>
      </query>



      <!-- Company Parameters section end-->

      <!-- OutboundType section begin-->
      <query code="OutboundType_FindAll">
        <sql>
          SELECT IdOutboundType
          ,OutboudTypeCode
          ,OutboundTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM OutboundType
          @SQLPart
          ORDER BY IdOutboundType
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="OutboundType" type="numericIn">IdOutboundType</filter>
        </filters>

      </query>
      
      <query code="OutboundType_GetByCode">
        <sql>
          SELECT IdOutboundType
          ,OutboudTypeCode
          ,OutboundTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM OutboundType
          WHERE OutboudTypeCode = @outboundTypeCode
        </sql>
        <parameters>
          <parameter type="String">outboundTypeCode</parameter>
        </parameters>
      </query>

      <!-- OutboundType section End-->

      <!-- STOCK section  -->
      
      <query code="Stock_GetStockReplenishment">
        <sql>
          SELECT IL.ReOrderQty - COALESCE(S.ItemQty,0) - COALESCE(TD.ProposalQty,0) FieldName
          FROM ItemLocation IL
          LEFT JOIN Stock S
          ON IL.IdItem = S.IdItem
          AND IL.IdLocCode = S.IdLocCode
          LEFT JOIN  TaskDetail TD
          ON TD.IdLocTargetProposal = IL.IdLocCode
          AND TD.IdItem = IL.IdItem
          LEFT JOIN  Task T
          ON T.TaskTypeCode = 'REPL'
          AND T.IdTask = TD.IdTask
          AND T.IsComplete = 0
          WHERE IL.IdLocCode = @IdLocCode
          AND IL.IdItem = @IdItem
        </sql>
        <parameters>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="Int">IdItem</parameter>
        </parameters>
      </query>
      
      <query code="Stock_FindAll">
        <sql>
          -- STOCK agrupado por WHS, OWN, ITEM y CATEGORY

          SELECT
          whs.IdWhs
          ,whs.WhsCode
          ,whs.ShortWhsName
          ,whs.WhsName
          ,s.FifoDate
          ,s.LotNumber
          ,s.FabricationDate
          ,s.ExpirationDate
          ,INO.InboundNumber
          ,own.IdOwn
          ,own.OwnCode
          ,own.OwnName
          ,own.TradeName
          ,s.IdCtgItem
          ,ci.CtgCode
          ,ci.CtgName
          ,i.IdItem
          ,i.ItemCode
          ,i.LongItemName
          ,SUM(s.ItemQty) AS ItemQty
          ,RS.ReasonName HoldCode

          FROM Stock s
          INNER JOIN item i on s.IdItem = i.IdItem
          INNER JOIN Owner own ON s.IdOwn = own.IdOwn
          INNER JOIN Warehouse whs ON s.IdWhs = whs.IdWhs
          INNER JOIN Location l ON s.idLocCode = l.idLocCode
          LEFT JOIN GroupItem1 G1 ON G1.IdGrpItem1 = i.IdGrpItem1
          LEFT JOIN GroupItem2 G2 ON G2.IdGrpItem2 = i.IdGrpItem2
          LEFT JOIN GroupItem3 G3 ON G3.IdGrpItem3 = i.IdGrpItem3
          LEFT JOIN GroupItem4 G4 ON G4.IdGrpItem4 = i.IdGrpItem4
          LEFT JOIN WorkzoneLocation wl ON s.idLocCode = wl.idLocCode
          LEFT JOIN CategoryItem ci ON s.IdCtgItem = ci.IdCtgItem
          LEFT JOIN InboundOrder INO ON s.IdInboundOrder = INO.IdInboundOrder
          LEFT JOIN Receipt r ON r.IdInboundOrder = INO.IdInboundOrder
          LEFT JOIN Driver D ON r.DriverCode = D.DriverCode
          LEFT JOIN Reason RS ON s.HoldCode = RS.ReasonCode

          @SQLPart

          GROUP BY whs.IdWhs, whs.WhsCode, whs.ShortWhsName, INO.InboundNumber, s.FifoDate,
          whs.WhsName ,own.IdOwn, own.OwnCode, own.TradeName ,own.OwnName ,s.IdCtgItem, ci.CtgCode
          ,ci.CtgName ,i.IdItem ,i.ItemCode ,i.LongItemName, i.Status ,s.Status, RS.ReasonName,s.LotNumber ,s.FabricationDate
          ,s.ExpirationDate;



          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>

        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>

        <filters>
          <filter name="Warehouse" type="numericIn">whs.IdWhs</filter>
          <filter name="DateRange" type="textBetween">s.FifoDate</filter>
          <filter name="Item" type="textLike">i.ItemCode</filter>
          <filter name="Owner" type="numericIn">own.IdOwn</filter>
          <filter name="DocumentNbr" type="textLike">INO.InboundNumber</filter>
          <filter name="Location" type="textEqual">s.idLocCode</filter>
          <filter name="LocationRange" type="textBetween">s.idLocCode</filter>
          <filter name="Hangar" type="numericIn">l.IdHng</filter>
          <filter name="WorkZone" type="numericIn">wl.IdWorkZone</filter>
          <filter name="LocationType" type="textIn">l.LocTypeCode</filter>
          <filter name="LocationRow" type="numericEqual">l.RowLoc</filter>
          <filter name="LocationColumn" type="numericEqual">l.ColumnLoc</filter>
          <filter name="LocationLevel" type="numericEqual">l.LevelLoc</filter>
          <filter name="LocationAisle" type="textEqual">l.Aisle</filter>
          <filter name="ExpirationDateRange" type="textBetween">s.ExpirationDate</filter>
          <filter name="FabricationDateRange" type="textBetween">s.FabricationDate</filter>
          <filter name="LotNumberRange" type="textBetween">s.LotNumber</filter>
          <filter name="GroupItem1" type="numericEqual">I.IdGrpItem1</filter>
          <filter name="GroupItem2" type="numericEqual">I.IdGrpItem2</filter>
          <filter name="GroupItem3" type="numericEqual">I.IdGrpItem3</filter>
          <filter name="GroupItem4" type="numericEqual">I.IdGrpItem4</filter>
          <filter name="DocumentType" type="numericIn">INO.IdInboundType</filter>
          <filter name="Vendor" type="numericIn">INO.IdVendor</filter>
          <filter name="Carrier" type="numericIn">r.IdCarrier</filter>
          <filter name="Driver" type="numericIn">D.IdDriver</filter>
        </filters>
      </query>

      <query code="Stock_FindAllLocation">
        <sql>
          -- STOCK agrupado por WHS, OWN, ITEM, CATEGORY, ZONE, LOCTYPE, LOCATION y HOLDCODE

          SELECT
          whs.IdWhs
          ,whs.WhsCode
          ,whs.ShortWhsName
          ,whs.WhsName

          ,s.FifoDate
          ,INO.InboundNumber

          ,own.IdOwn
          ,own.OwnCode
          ,own.TradeName
          ,own.OwnName
          ,own.TradeName

          ,s.IdCtgItem
          ,ci.CtgCode
          ,ci.CtgName

          ,i.IdItem
          ,i.ItemCode
          ,i.Description
          ,i.LongItemName
          ,SUM(s.ItemQty) AS ItemQty

          ,wz.WorkZoneName

          ,l.LocTypeCode
          ,l.idLocCode

          ,RS.ReasonName HoldCode
          ,s.IdLpnCode
          ,RL.ReasonName LocHoldName

          FROM Stock s
          INNER JOIN item i on s.IdItem = i.IdItem
          INNER JOIN Owner own ON s.IdOwn = own.IdOwn
          INNER JOIN Warehouse whs ON s.IdWhs = whs.IdWhs
          INNER JOIN location l on l.IdLocCode = s.IdLocCode
          LEFT JOIN GroupItem1 G1 ON G1.IdGrpItem1 = i.IdGrpItem1
          LEFT JOIN GroupItem2 G2 ON G2.IdGrpItem2 = i.IdGrpItem2
          LEFT JOIN GroupItem3 G3 ON G3.IdGrpItem3 = i.IdGrpItem3
          LEFT JOIN GroupItem4 G4 ON G4.IdGrpItem4 = i.IdGrpItem4
          LEFT JOIN WorkzoneLocation wl ON s.idLocCode = wl.idLocCode
          LEFT JOIN WorkZone wz ON wz.IdWorkZone = wl.IdWorkZone
          LEFT JOIN CategoryItem ci ON s.IdCtgItem = ci.IdCtgItem
          LEFT JOIN InboundOrder INO ON s.IdInboundOrder = INO.IdInboundOrder
          --LEFT JOIN Receipt r ON r.IdInboundOrder = INO.IdInboundOrder
          --LEFT JOIN Driver D ON r.DriverCode = D.DriverCode
          LEFT JOIN Reason RL ON l.HoldCode = RL.ReasonCode
          LEFT JOIN Reason RS ON s.HoldCode = RS.ReasonCode

          WHERE whs.IdWhs IN (1)
          AND own.IdOwn IN (1)
          GROUP BY whs.IdWhs, whs.WhsCode, whs.ShortWhsName, 	s.FifoDate
          ,INO.InboundNumber, whs.WhsName ,own.IdOwn, own.OwnCode, own.TradeName ,own.OwnName ,l.idLocCode ,l.Status ,l.LocTypeCode
          ,wz.WorkZoneName ,s.IdCtgItem, ci.CtgCode, ci.CtgName ,i.IdItem ,i.ItemCode  ,i.Description, i.LongItemName, RS.ReasonName, s.IdLpnCode, RL.ReasonName;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>

        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>

        <filters>
          <filter name="Warehouse" type="numericIn">whs.IdWhs</filter>
          <filter name="DateRange" type="textBetween">s.FifoDate</filter>
          <filter name="Item" type="textLike">i.ItemCode</filter>
          <filter name="Owner" type="numericIn">own.IdOwn</filter>
          <filter name="DocumentNbr" type="textLike">INO.InboundNumber</filter>
          <filter name="Location" type="textEqual">s.idLocCode</filter>

          <filter name="Hangar" type="numericIn">l.IdHng</filter>
          <filter name="WorkZone" type="numericIn">wl.IdWorkZone</filter>
          <filter name="LocationType" type="textIn">l.LocTypeCode</filter>

          <filter name="LocationRange" type="textBetween">s.idLocCode</filter>
          <filter name="LocationRow" type="numericEqual">l.RowLoc</filter>
          <filter name="LocationColumn" type="numericEqual">l.ColumnLoc</filter>
          <filter name="LocationLevel" type="numericEqual">l.LevelLoc</filter>
          <filter name="LocationAisle" type="textEqual">l.Aisle</filter>

          <filter name="ExpirationDateRange" type="textBetween">s.ExpirationDate</filter>
          <filter name="FabricationDateRange" type="textBetween">s.FabricationDate</filter>
          <filter name="LotNumberRange" type="textBetween">s.LotNumber</filter>

          <filter name="GroupItem1" type="numericEqual">I.IdGrpItem1</filter>
          <filter name="GroupItem2" type="numericEqual">I.IdGrpItem2</filter>
          <filter name="GroupItem3" type="numericEqual">I.IdGrpItem3</filter>
          <filter name="GroupItem4" type="numericEqual">I.IdGrpItem4</filter>

          <filter name="DocumentType" type="numericIn">INO.IdInboundType</filter>
          <filter name="Vendor" type="numericIn">INO.IdVendor</filter>
          <filter name="Carrier" type="numericIn">r.IdCarrier</filter>
          <filter name="Driver" type="numericIn">D.IdDriver</filter>
        </filters>
      </query>

      <query code="GetStockById">
        <sql>
          SELECT
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode
          ,S.IdInboundOrder
          ,S.InboundLineNumber
          ,S.IdOutboundOrder
          ,S.OutboundLineNumber
          ,I.IdItem
          ,I.ItemCode
          ,I.Weight
          ,I.Description
          ,I.Status
          ,L.IdWhs
          ,L.LocCode
          ,L.Status
          ,L.LocTypeCode
          ,LP.IdLpnCode
          ,LP.FifoDate
          ,LP.IdLpnType
          ,LP.Status
          FROM Stock S
          INNER JOIN LPN LP ON S.IdLpnCode = LP.IdLpnCode
          INNER JOIN Item I ON S.IdItem = I.IdItem
          INNER JOIN LPNType LPT ON LP.IdLpnType = LPT.IdLpnType
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          WHERE S.StockId = @stockId
        </sql>
        <parameters>
          <parameter type="Int">stockId</parameter>
        </parameters>
      </query>

      <query code="InsertStock">
        <sql>
          INSERT INTO Stock
          (StockId,
          IdWhs,
          IdOwn,
          IdLocCode,
          IdItem,
          IdCtgItem,
          ItemQty,
          TotalWeight,
          TotalVolumen,
          Status,
          FifoDate,
          ExpirationDate,
          FabricationDate,
          LotNumber,
          IdLpnCode,
          LpnTypeCode,
          IdLpnCodeContainer,
          Price,
          IdReceipt,
          SealNumber,
          ReasonCode,
          HoldCode,
          IdInboundOrder,
          InboundLineNumber,
          IdOutboundOrder,
          OutboundLineNumber,
          DateCreated,
          UserCreated)

          VALUES
          (@StockId,
          @IdWhs,
          @IdOwn,
          @IdLocCode,
          @IdItem,
          @IdCtgItem,
          @ItemQty,
          @TotalWeight,
          @TotalVolumen,
          @Status,
          @FifoDate,
          @ExpirationDate,
          @FabricationDate,
          @LotNumber,
          @IdLpnCode,
          @LpnTypeCode,
          @IdLpnCodeContainer,
          @Price,
          @IdReceipt,
          @SealNumber,
          @ReasonCode,
          @HoldCode,
          @IdInboundOrder,
          @InboundLineNumber,
          @IdOutboundOrder,
          @OutboundLineNumber,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>
          <parameter type="Int">StockId</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdCtgItem</parameter>
          <parameter type="Decimal">ItemQty</parameter>
          <parameter type="Decimal">TotalWeight</parameter>
          <parameter type="Decimal">TotalVolumen</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="DateTime">FifoDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="DateTime">FabricationDate</parameter>
          <parameter type="String">LotNumber</parameter>
          <parameter type="String">IdLpnCode</parameter>
          <parameter type="String">LpnTypeCode</parameter>
          <parameter type="String">IdLpnCodeContainer</parameter>
          <parameter type="Decimal">Price</parameter>
          <parameter type="Int">IdReceipt</parameter>
          <parameter type="String">SealNumber</parameter>
          <parameter type="String">ReasonCode</parameter>
          <parameter type="String">HoldCode</parameter>
          <parameter type="Int">IdInboundOrder</parameter>
          <parameter type="Int">InboundLineNumber</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="Int">OutboundLineNumber</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="UpdateStock">
        <sql>
          UPDATE Stock
          SET IdWhs = @IdWhs,
          IdOwn = @IdOwn,
          IdLocCode = @IdLocCode,
          IdItem = @IdItem,
          IdCtgItem = @IdCtgItem,
          ItemQty = @ItemQty,
          TotalWeight = @TotalWeight,
          TotalVolumen = @TotalVolumen,
          Status = @Status,
          FifoDate = @FifoDate,
          FabricationDate = @FabricationDate,
          ExpirationDate = @ExpirationDate,
          LotNumber = @LotNumber,
          IdLpnCode = @IdLpnCode,
          LpnTypeCode = @LpnTypeCode,
          IdLpnCodeContainer = @IdLpnCodeContainer,
          LpnTypeCodeContainer = @LpnTypeCodeContainer,
          Price = @Price,
          IdReceipt = @IdReceipt,
          IdInboundOrder = @IdInboundOrder,
          InboundLineNumber = @InboundLineNumber,
          IdOutboundOrder = @IdOutboundOrder,
          OutboundLineNumber = @OutboundLineNumber,
          SealNumber = @SealNumber,
          ReasonCode = @ReasonCode,
          HoldCode = @HoldCode,
          DateModified = @dateModified,
          UserModified = @userModified
          WHERE StockId = @StockId
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdCtgItem</parameter>
          <parameter type="Decimal">ItemQty</parameter>
          <parameter type="Decimal">TotalWeight</parameter>
          <parameter type="Decimal">TotalVolumen</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="DateTime">FifoDate</parameter>
          <parameter type="DateTime">FabricationDate</parameter>
          <parameter type="DateTime">ExpirationDate</parameter>
          <parameter type="String">LotNumber</parameter>
          <parameter type="String">IdLpnCode</parameter>
          <parameter type="String">LpnTypeCode</parameter>
          <parameter type="String">IdLpnCodeContainer</parameter>
          <parameter type="String">LpnTypeCodeContainer</parameter>
          <parameter type="Decimal">Price</parameter>
          <parameter type="Int">IdReceipt</parameter>
          <parameter type="Int">IdInboundOrder</parameter>
          <parameter type="Int">InboundLineNumber</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="Int">OutboundLineNumber</parameter>
          <parameter type="String">SealNumber</parameter>
          <parameter type="String">ReasonCode</parameter>
          <parameter type="String">HoldCode</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
          <parameter type="Int">StockId</parameter>
        </parameters>
      </query>

      <query code="DeleteStock">
        <sql>
          DELETE Stock
          WHERE StockId = @stockId
        </sql>
        <parameters>
          <parameter type="Int">stockId</parameter>
        </parameters>
      </query>

      <query code="ExpirationConsult_FindAll">
        <!-- Query utilizada en:
				- Consulta de Vencimientos
				- Consulta de Permanencia -->
        <sql>
          SELECT S.StockId
          ,S.IdWhs
          ,W.ShortWhsName
          ,W.WhsCode
          ,S.IdOwn
          ,O.OwnCode
          ,O.OwnName
          ,O.TradeName
          ,S.IdItem
          ,I.Description
          ,I.ItemCode
          ,S.IdCtgItem
          ,C.CtgName
          ,C.CtgCode
          ,S.ItemQty
          ,S.ExpirationDate
          ,S.FifoDate
          ,S.FabricationDate
          ,S.IdLocCode
          ,S.LotNumber
          ,S.IdLpnCode
          ,S.LpnTypeCode
          ,S.IdLpnCodeContainer
          ,S.LpnTypeCodeContainer
          ,S.Price
          ,S.IdReceipt
          ,S.IdInboundOrder
          ,INO.InboundNumber
          ,S.InboundLineNumber
          ,I.IdGrpItem1
          ,G1.GrpItem1Name
          ,I.IdGrpItem2
          ,G2.GrpItem2Name
          ,I.IdGrpItem3
          ,G3.GrpItem3Name
          ,I.IdGrpItem4
          ,G4.GrpItem4Name
          ,I.LongItemName
          ,I.ShortItemName
          ,S.SealNumber
          ,S.ReasonCode
          ,RS.ReasonName HoldCode
          ,RL.ReasonName LocHoldName
          FROM Stock S
          INNER JOIN Owner O ON S.IdOwn = O.IdOwn
          INNER JOIN Warehouse W ON S.IdWhs = W.IdWhs
          INNER JOIN Item I ON S.IdItem = I.IdItem
          INNER JOIN Location l ON S.idLocCode = l.idLocCode
          LEFT JOIN WorkzoneLocation wl ON S.idLocCode = wl.idLocCode
          LEFT JOIN CategoryItem C ON S.IdCtgItem = C.IdCtgItem
          LEFT JOIN InboundOrder INO ON S.IdInboundOrder = INO.IdInboundOrder
          LEFT JOIN Receipt r ON r.IdInboundOrder = INO.IdInboundOrder
          LEFT JOIN GroupItem1 G1 ON G1.IdGrpItem1 = I.IdGrpItem1
          LEFT JOIN GroupItem2 G2 ON G2.IdGrpItem2 = I.IdGrpItem2
          LEFT JOIN GroupItem3 G3 ON G3.IdGrpItem3 = I.IdGrpItem3
          LEFT JOIN GroupItem4 G4 ON G4.IdGrpItem4 = I.IdGrpItem4
          LEFT JOIN Driver D ON r.DriverCode = D.DriverCode
          LEFT JOIN Reason RL ON L.HoldCode = RL.ReasonCode
          LEFT JOIN Reason RS ON S.HoldCode = RS.ReasonCode
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Owner" type="numericIn">O.IdOwn</filter>
          <filter name="DocumentNbr" type="textLike">INO.InboundNumber</filter>
          <filter name="DateRange" type="textBetween">S.FifoDate</filter>

          <filter name="Hangar" type="numericIn">l.IdHng</filter>
          <filter name="WorkZone" type="numericIn">wl.IdWorkZone</filter>
          <filter name="LocationType" type="textIn">l.LocTypeCode</filter>

          <filter name="Location" type="textEqual">S.idLocCode</filter>
          <filter name="LocationRange" type="textBetween">S.idLocCode</filter>
          <filter name="LocationRow" type="numericEqual">l.RowLoc</filter>
          <filter name="LocationColumn" type="numericEqual">l.ColumnLoc</filter>
          <filter name="LocationLevel" type="numericEqual">l.LevelLoc</filter>
          <filter name="LocationAisle" type="textEqual">l.Aisle</filter>

          <filter name="GroupItem1" type="numericEqual">I.IdGrpItem1</filter>
          <filter name="GroupItem2" type="numericEqual">I.IdGrpItem2</filter>
          <filter name="GroupItem3" type="numericEqual">I.IdGrpItem3</filter>
          <filter name="GroupItem4" type="numericEqual">I.IdGrpItem4</filter>

          <filter name="ExpirationDateRange" type="textBetween">S.ExpirationDate</filter>
          <filter name="FabricationDateRange" type="textBetween">S.FabricationDate</filter>
          <filter name="LotNumberRange" type="textBetween">S.LotNumber</filter>

          <filter name="DocumentType" type="numericIn">INO.IdInboundType</filter>
          <filter name="Vendor" type="numericIn">INO.IdVendor</filter>
          <filter name="Carrier" type="numericIn">r.IdCarrier</filter>
          <filter name="Driver" type="numericIn">D.IdDriver</filter>
        </filters>
      </query>

      <query code="MaxAndMin_FindAll">
        <sql>
          Select I.IdItem
          ,LPIC.IdWhs
          ,W.ShortWhsName
          ,W.WhsCode
          ,I.ItemCode
          ,Own.OwnCode
          ,Own.TradeName
          ,I.AltItemCode
          ,I.Description
          ,COALESCE(IL.ReorderPoint, I.ReorderPoint, 0) ReorderPoint
          ,COALESCE(IL.ReorderQty, I.ReorderQty, 0) ReorderQty
          ,IL.LevelConfig
          ,IL.IdLocCode
          ,ISNULL(SPIC.ItemQty,0) AS ItemQty
          ,COALESCE(IL.ReorderQty, I.ReorderQty, 0) - COALESCE(SPIC.ItemQty,0) 'Replenishment'
          ,SPUT.StockInPut AS 'PutawayQty'
          ,INO.InboundNumber
          ,SPIC.FifoDate
          ,I.IdGrpItem1
          ,G1.GrpItem1Name
          ,I.IdGrpItem2
          ,G2.GrpItem2Name
          ,I.IdGrpItem3
          ,G3.GrpItem3Name
          ,I.IdGrpItem4
          ,G4.GrpItem4Name
          ,I.LongItemName
          ,I.ShortItemName
          ,I.Status
          ,I.ShelfLife
          ,I.ExpirationDays
          FROM Item I
          INNER  JOIN Owner Own ON Own.IdOwn = I.IdOwn
          INNER  JOIN (SELECT ItemLocation.IdItem, ItemLocation.IdLocCode, Location.IdWhs,
          ItemLocation.ReorderPoint, ItemLocation.ReorderQty , 'Location' AS                LevelConfig
          FROM ItemLocation INNER JOIN Location ON ItemLocation.IdLocCode = Location.IdLocCode
          UNION
          SELECT Stock.IdItem, Stock.IdLocCode, Stock.IdWhs,
          Item.ReorderPoint, Item.ReorderQty, 'Item' AS             LevelConfig
          FROM Stock INNER JOIN Item ON Item.IdItem = Stock.IdItem
          WHERE Stock.IdLocCode NOT IN (SELECT IdLocCode FROM ItemLocation)) AS IL
          ON IL.IdItem = I.IdItem
          INNER  JOIN Location LPIC ON IL.IdLocCode = LPIC.IdLocCode AND LPIC.LocTypeCode = 'PICK'
          INNER  JOIN Warehouse W ON W.IdWhs = LPIC.IdWhs
          LEFT  JOIN Stock SPIC ON SPIC.IdItem = I.IdItem And SPIC.IdLocCode = IL.IdLocCode
          LEFT  JOIN InboundOrder INO ON SPIC.IdInboundOrder = INO.IdInboundOrder
          LEFT  JOIN GroupItem1 G1 ON G1.IdGrpItem1 = I.IdGrpItem1
          LEFT  JOIN GroupItem2 G2 ON G2.IdGrpItem2 = I.IdGrpItem2
          LEFT  JOIN GroupItem3 G3 ON G3.IdGrpItem3 = I.IdGrpItem3
          LEFT  JOIN GroupItem4 G4 ON G4.IdGrpItem4 = I.IdGrpItem4
          LEFT  JOIN (SELECT S.IdItem, S.IdWhs, SUM(ItemQty) StockInPut
          FROM Stock S
          INNER JOIN Location L On S.IdLocCode = L.IdLocCode AND L.LocTypeCode = 'PUT'
          Group By S.idItem, S.IdWhs) SPUT
          ON SPUT.IdItem = I.IdItem AND SPUT.IdWhs = IL.IdWhs
          LEFT JOIN WorkZoneLocation wl ON IL.IdLocCode = wl.IdLocCode
          LEFT JOIN Receipt r ON r.IdInboundOrder = INO.IdInboundOrder
          LEFT JOIN Driver D ON r.DriverCode = D.DriverCode
          @SQLPart
          ORDER BY LPIC.IdWhs, Own.OwnCode, IL.IdLocCode, I.ItemCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView,
          VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>

        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Owner" type="numericIn">Own.IdOwn</filter>
          <filter name="DocumentNbr" type="textLike">INO.InboundNumber</filter>
          <filter name="DateRange" type="textBetween">SPIC.FifoDate</filter>

          <filter name="Hangar" type="numericIn">LPIC.IdHng</filter>
          <filter name="WorkZone" type="numericIn">wl.IdWorkZone</filter>
          <filter name="LocationType" type="textIn">LPIC.LocTypeCode</filter>

          <filter name="Location" type="textEqual">SPIC.idLocCode</filter>
          <filter name="LocationRange" type="textBetween">SPIC.idLocCode</filter>
          <filter name="LocationRow" type="numericEqual">LPIC.RowLoc</filter>
          <filter name="LocationColumn" type="numericEqual">LPIC.ColumnLoc</filter>
          <filter name="LocationLevel" type="numericEqual">LPIC.LevelLoc</filter>
          <filter name="LocationAisle" type="textEqual">LPIC.Aisle</filter>

          <filter name="GroupItem1" type="numericEqual">I.IdGrpItem1</filter>
          <filter name="GroupItem2" type="numericEqual">I.IdGrpItem2</filter>
          <filter name="GroupItem3" type="numericEqual">I.IdGrpItem3</filter>
          <filter name="GroupItem4" type="numericEqual">I.IdGrpItem4</filter>

          <filter name="ExpirationDateRange" type="textBetween">SPIC.ExpirationDate</filter>
          <filter name="FabricationDateRange" type="textBetween">SPIC.FabricationDate</filter>
          <filter name="LotNumberRange" type="textBetween">SPIC.LotNumber</filter>

          <filter name="DocumentType" type="numericIn">INO.IdInboundType</filter>
          <filter name="Vendor" type="numericIn">INO.IdVendor</filter>
          <filter name="Carrier" type="numericIn">r.IdCarrier</filter>
          <filter name="Driver" type="numericIn">D.IdDriver</filter>
        </filters>
      </query>

      <query code="GetStockByIdLPNCode">
        <sql>
          SELECT S.StockId
          ,S.IdItem
          ,I.Description
          ,I.ItemCode
          ,S.IdCtgItem
          ,C.CtgName
          ,C.CtgCode
          ,S.ItemQty
          ,S.ExpirationDate
          ,S.FifoDate
          ,S.FabricationDate
          ,S.IdLocCode
          ,S.LotNumber
          ,S.IdLpnCode
          ,S.LpnTypeCode
          ,S.Price
          ,S.IdReceipt
          ,S.IdInboundOrder
          ,INO.InboundNumber
          ,S.InboundLineNumber
          ,S.IdOutboundOrder
          ,S.OutboundLineNumber
          ,S.Status
          ,S.TotalVolumen
          ,S.TotalWeight
          ,I.IdGrpItem1
          ,G1.GrpItem1Name
          ,I.IdGrpItem2
          ,G2.GrpItem2Name
          ,I.IdGrpItem3
          ,G3.GrpItem3Name
          ,I.IdGrpItem4
          ,G4.GrpItem4Name
          ,I.LongItemName
          ,I.ShortItemName
          ,S.SealNumber
          ,S.ReasonCode
          ,S.HoldCode
          FROM Stock S
          INNER JOIN Owner O ON S.IdOwn = O.IdOwn
          INNER JOIN Warehouse W ON S.IdWhs = W.IdWhs
          INNER JOIN Item I ON S.IdItem = I.IdItem
          LEFT JOIN CategoryItem C ON S.IdCtgItem = C.IdCtgItem
          LEFT JOIN InboundOrder INO ON S.IdInboundOrder = INO.IdInboundOrder
          LEFT JOIN GroupItem1 G1 ON G1.IdGrpItem1 = I.IdGrpItem1
          LEFT JOIN GroupItem2 G2 ON G2.IdGrpItem2 = I.IdGrpItem2
          LEFT JOIN GroupItem3 G3 ON G3.IdGrpItem3 = I.IdGrpItem3
          LEFT JOIN GroupItem4 G4 ON G4.IdGrpItem4 = I.IdGrpItem4
          WHERE S.IdLpnCode = @IdLpn

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="String">IdLpn</parameter>
        </parameters>
      </query>

      <!--ProductivitySummary SECTION-->
      <query code="ProductivitySummary_ToReception">
        <sql>
          SELECT
          COUNT(IdInboundOrder)Documents
          ,ISNULL(SUM(QtyInboundDetail),0)Lines
          ,ISNULL(SUM(ItemQty),0)Qty
          FROM
          (SELECT IO.IdWhs
          ,IO.IdOwn
          ,IO.IdInboundOrder
          ,COUNT(ID.IdInboundDetail) QtyInboundDetail
          ,SUM(ID.ItemQty) ItemQty
          FROM InboundOrder IO
          INNER JOIN InboundDetail ID
          ON ID.IdInboundOrder = IO.IdInboundOrder
          LEFT JOIN v_Inb_LatestTrack LT
          ON LT.IdInboundOrder = IO.IdInboundOrder
          WHERE LT.IdTrackInboundType = 1
          @SQLPart
          GROUP BY IO.IdWhs,IO.IdOwn,IO.IdInboundOrder) A

        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IO.IdWhs</filter>
          <filter name="Owner" type="numericIn">IO.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_Receptioned">
        <sql>
          SELECT
          COUNT(IdInboundOrder)Documents
          ,ISNULL(SUM(QtyReceiptDetail),0)Lines
          ,ISNULL(SUM(ItemQtyReceiptDetail),0)Qty
          FROM
          (SELECT IO.IdWhs
          ,IO.IdOwn
          ,IO.IdInboundOrder
          ,COUNT(RD.IdReceiptDetail) QtyReceiptDetail
          ,SUM(RD.ItemQty) ItemQtyReceiptDetail
          FROM InboundOrder IO
          INNER JOIN Receipt R ON R.IdInboundOrder = IO.IdInboundOrder
          INNER JOIN ReceiptDetail RD ON RD.IdReceipt = R.IdReceipt
          INNER JOIN InboundDetail ID ON ID.IdInboundOrder = IO.IdInboundOrder
          AND ID.LineNumber = RD.LineNumber
          WHERE 1 = 1
          @SQLPart
          GROUP BY IO.IdWhs,IO.IdOwn,IO.IdInboundOrder) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IO.IdWhs</filter>
          <filter name="Owner" type="numericIn">IO.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_ToCollect">
        <sql>
          SELECT 
          COUNT(IdDocumentBound)Documents, 
          ISNULL(SUM(IdTaskDetail),0)Lines, 
          ISNULL(SUM(PickQty),0)Qty
          FROM
          (SELECT T.IdOwn
                  ,T.IdWhs
                  ,COUNT(TD.IdTaskDetail) IdTaskDetail
                  ,TD.IdDocumentBound
                  ,SUM(TD.ProposalQty) PickQty
          FROM Task T	
          LEFT JOIN TaskDetail TD 
          ON TD.IdTask = T.IdTask
          WHERE T.TaskTypeCode IN('PIKOR','PIKBT','PIKWV','PIKPS','PIKIT','PIUNK','PIKVA')
          AND TD.IsComplete = 0 
          AND T.IsComplete = 0 
          AND T.IdTrackTaskType = 11
          @SQLPart
          GROUP BY TD.IdDocumentBound,T.IdOwn,T.IdWhs) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_Collecting">
        <sql>
          SELECT 
          COUNT(IdDocumentBound)Documents
          ,ISNULL(SUM(IdTaskDetail),0)Lines
          ,ISNULL(SUM(PickQty),0)Qty
          ,ISNULL(SUM(UserAssigned),0)Users
          FROM
          (SELECT COUNT(TD.UserAssigned)UserAssigned
                  ,T.IdOwn
                  ,T.IdWhs
                  ,COUNT(TD.IdTaskDetail) IdTaskDetail
                  ,TD.IdDocumentBound
                  ,SUM(TD.RealQty) PickQty
            FROM Task T	
            LEFT JOIN TaskDetail TD 
            ON TD.IdTask = T.IdTask
            WHERE T.TaskTypeCode IN('PIKOR','PIKBT','PIKWV','PIKPS','PIKIT','PIUNK','PIKVA')
            AND T.IsComplete = 0 
            AND T.IdTrackTaskType = 21
            @SQLPart
            GROUP BY TD.IdDocumentBound,T.IdOwn,T.IdWhs) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_Collected">
        <sql>
          SELECT 
          COUNT(IdDocumentBound)Documents
          ,ISNULL(SUM(IdTaskDetail),0)Lines
          ,ISNULL(SUM(PickQty),0)Qty
          FROM
          (SELECT T.IdOwn
                  ,T.IdWhs
                  ,COUNT(TD.IdTaskDetail) IdTaskDetail
                  ,TD.IdDocumentBound
                  ,SUM(TD.RealQty) PickQty
            FROM Task T	
            LEFT JOIN TaskDetail TD 
            ON TD.IdTask = T.IdTask
            WHERE T.TaskTypeCode IN('PIKOR','PIKBT','PIKWV','PIKPS','PIKIT','PIUNK','PIKVA')
            AND TD.IsComplete = 1  
            AND T.IsComplete = 1 
            AND T.IdTrackTaskType = 101
            @SQLPart
            GROUP BY TD.IdDocumentBound,T.IdOwn,T.IdWhs) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_ToPack">
        <sql>
          SELECT 
          COUNT(IdDocumentBound)Documents
          ,ISNULL(SUM(IdTaskDetail),0)Lines
          ,ISNULL(SUM(PackQty),0)Qty
          ,COUNT(IdLpnSourceProposal)Lpn
          FROM
          (SELECT TD.IdLpnSourceProposal
                  ,T.IdOwn
                  ,T.IdWhs
                  ,COUNT(TD.IdTaskDetail) IdTaskDetail
                  ,TD.IdDocumentBound
                  ,SUM(TD.ProposalQty) PackQty
            FROM Task T
            LEFT JOIN TaskDetail TD 
            ON TD.IdTask = T.IdTask
            WHERE T.TaskTypeCode = 'PAKOR'
            AND TD.IsComplete = 0 
            AND T.IsComplete = 0 
            AND T.IdTrackTaskType = 11
            @SQLPart
            GROUP BY TD.IdDocumentBound,T.IdOwn,T.IdWhs,TD.IdLpnSourceProposal) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_Packing">
        <sql>
          SELECT
          COUNT(IdDocumentBound)Documents
          ,ISNULL(SUM(IdTaskDetail),0)Lines
          ,ISNULL(SUM(PackQty),0)Qty
          ,COUNT(IdLpnSourceProposal)Lpn
          ,ISNULL(SUM(UserAssigned),0)Users
          FROM
          (SELECT
          COUNT(TD.UserAssigned)UserAssigned
          ,TD.IdLpnSourceProposal
          ,T.IdOwn
          ,T.IdWhs
          ,COUNT(TD.IdTaskDetail)IdTaskDetail
          ,TD.IdDocumentBound
          ,SUM(TD.RealQty)PackQty
          FROM Task T
          LEFT JOIN TaskDetail TD
          ON TD.IdTask = T.IdTask
          WHERE T.TaskTypeCode = 'PAKOR'
          AND T.IsComplete = 0
          AND T.IdTrackTaskType = 21
          @SQLPart
          GROUP BY TD.IdDocumentBound,T.IdOwn,T.IdWhs,TD.IdLpnSourceProposal) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_Packed">
        <sql>
          SELECT
          COUNT(IdDocumentBound)Documents
          ,ISNULL(SUM(IdTaskDetail),0)Lines
          ,ISNULL(SUM(PackQty),0)Qty
          ,COUNT(IdLpnSourceProposal)Lpn
          FROM
          (SELECT TD.IdLpnSourceProposal
          ,T.IdOwn
          ,T.IdWhs
          ,COUNT(TD.IdTaskDetail)IdTaskDetail
          ,TD.IdDocumentBound
          ,SUM(TD.RealQty)PackQty
          FROM Task T
          LEFT JOIN TaskDetail TD
          ON TD.IdTask = T.IdTask
          WHERE T.TaskTypeCode = 'PAKOR'
          AND TD.IsComplete = 1
          AND T.IsComplete = 1
          AND T.IdTrackTaskType = 101
          @SQLPart
          GROUP BY TD.IdDocumentBound,T.IdOwn,T.IdWhs,TD.IdLpnSourceProposal) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_Dispatch">
        <sql>
          SELECT
          COUNT(IdDocumentBound)Documents
          ,ISNULL(SUM(IdTaskDetail),0)Lines
          ,ISNULL(SUM(PackQty),0)Qty
          ,COUNT(IdLpnSourceProposal)Lpn
          FROM
          (SELECT TD.IdLpnSourceProposal
          ,T.IdOwn
          ,T.IdWhs
          ,COUNT(TD.IdTaskDetail)IdTaskDetail
          ,TD.IdDocumentBound
          ,SUM(TD.RealQty)PackQty
          FROM Task T
          LEFT JOIN TaskDetail TD
          ON TD.IdTask = T.IdTask
          WHERE T.TaskTypeCode = 'RUTEO'
          AND TD.IsComplete = 1
          AND T.IsComplete = 1
          AND T.IdTrackTaskType = 101
          @SQLPart
          GROUP BY TD.IdDocumentBound,T.IdOwn,T.IdWhs,TD.IdLpnSourceProposal) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_Load">
        <sql>
          SELECT
          COUNT(IdDocumentBound)Documents
          ,ISNULL(SUM(IdTaskDetail),0)Lines
          ,ISNULL(SUM(PackQty),0)Qty
          ,COUNT(IdLpnSourceProposal)Lpn
          FROM
          (SELECT TD.IdLpnSourceProposal
          ,T.IdOwn
          ,T.IdWhs
          ,COUNT(TD.IdTaskDetail)IdTaskDetail
          ,TD.IdDocumentBound
          ,SUM(TD.RealQty)PackQty
          FROM Task T
          LEFT JOIN TaskDetail TD
          ON TD.IdTask = T.IdTask
          WHERE T.TaskTypeCode = 'LOAD'
          AND TD.IsComplete = 1
          AND T.IsComplete = 1
          AND T.IdTrackTaskType = 101
          @SQLPart
          GROUP BY TD.IdDocumentBound,T.IdOwn,T.IdWhs,TD.IdLpnSourceProposal) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_TaskPending_CycleCount">
        <sql>
          SELECT
          COUNT(TaskTypeCode)Documents
          FROM Task
          WHERE TaskTypeCode = 'CCNT'
          AND IsComplete = 0
          AND IdTrackTaskType = 11
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="Owner" type="numericIn">IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_TaskPending_Adjust">
        <sql>
          SELECT
          COUNT(TaskTypeCode)Documents
          FROM Task
          WHERE TaskTypeCode = 'AJU'
          AND IsComplete = 0
          AND IdTrackTaskType = 11
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="Owner" type="numericIn">IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_TaskPending_Replenish">
        <sql>
          SELECT
          COUNT(TaskTypeCode)Documents
          FROM Task
          WHERE TaskTypeCode = 'REPL'
          AND IsComplete = 0
          AND IdTrackTaskType = 11
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="Owner" type="numericIn">IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_TaskCompleted_CycleCount">
        <sql>
          SELECT
          COUNT(TaskTypeCode)Documents
          FROM Task
          WHERE TaskTypeCode = 'CCNT'
          AND IsComplete = 1
          AND IdTrackTaskType = 101
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="Owner" type="numericIn">IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_TaskCompleted_Adjust">
        <sql>
          SELECT
          COUNT(TaskTypeCode)Documents
          FROM Task
          WHERE TaskTypeCode = 'AJU'
          AND IsComplete = 1
          AND IdTrackTaskType = 101
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="Owner" type="numericIn">IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_TaskCompleted_Replenish">
        <sql>
          SELECT
          COUNT(TaskTypeCode)Documents
          FROM Task
          WHERE TaskTypeCode = 'REPL'
          AND IsComplete = 1
          AND IdTrackTaskType = 101
          @SQLPart
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="Owner" type="numericIn">IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_ReleaseOrder">
        <sql>
          SELECT
          COUNT(IdOutboundOrder)Documents
          ,ISNULL(SUM(WeightTotal),0)Weight
          ,ISNULL(SUM(VolumeTotal),0)Volume
          ,ISNULL(SUM(ItemQty),0)Qty
          FROM
          (SELECT OO.IdOwn
          ,D.IdWhs
          ,D.IdOutboundOrder
          ,SUM(L.WeightTotal)WeightTotal
          ,SUM(L.VolumeTotal)VolumeTotal
          ,SUM(DT.ItemQty)ItemQty
          FROM Dispatch D
          INNER JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = D.IdOutboundOrder
          INNER JOIN OutboundType OT
          ON OO.IdOutboundType = OT.IdOutboundType
          LEFT JOIN DispatchDetail DT
          ON D.IdDispatch = DT.IdDispatch
          INNER JOIN LPN L
          ON L.IdLpnCode = DT.IdLpnCode
          WHERE D.IdDispatchType = 6
          AND OT.OutboudTypeCode = 'SO'
          @SQLPart
          GROUP BY OO.IdOwn, D.IdWhs,D.IdOutboundOrder) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">D.IdWhs</filter>
          <filter name="Owner" type="numericIn">OO.IdOwn</filter>
        </filters>
      </query>

      <query code="ProductivitySummary_Transfer">
        <sql>
          SELECT
          COUNT(IdOutboundOrder)Documents
          ,ISNULL(SUM(WeightTotal),0)Weight
          ,ISNULL(SUM(VolumeTotal),0)Volume
          ,ISNULL(SUM(ItemQty),0)Qty
          FROM
          (SELECT OO.IdOwn
          ,D.IdWhs
          ,D.IdOutboundOrder
          ,SUM(L.WeightTotal)WeightTotal
          ,SUM(L.VolumeTotal)VolumeTotal
          ,SUM(DT.ItemQty)ItemQty
          FROM Dispatch D
          INNER JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = D.IdOutboundOrder
          INNER JOIN OutboundType OT
          ON OO.IdOutboundType = OT.IdOutboundType
          LEFT JOIN DispatchDetail DT
          ON D.IdDispatch = DT.IdDispatch
          INNER JOIN LPN L
          ON L.IdLpnCode = DT.IdLpnCode
          WHERE D.IdDispatchType = 6
          AND OT.OutboudTypeCode = 'TR'
          @SQLPart
          GROUP BY OO.IdOwn, D.IdWhs,D.IdOutboundOrder) A
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">D.IdWhs</filter>
          <filter name="Owner" type="numericIn">OO.IdOwn</filter>
        </filters>
      </query>
      <!--End ProductivitySummary Section-->

      <!-- End STOCK section  -->

      <!-- INVENTORY section  -->

      <query code="Inventory_FindAll">
        <sql>
          SELECT
          CASE WHEN I.IdInventoryOrder =
          -- El mas reciente
          (SELECT TOP 1 I2.IdInventoryOrder
          FROM InventoryOrder I2
          WHERE I2.IdWhs = I.IdWhs
          ORDER BY CreateDate DESC)
          -- En estado pendiente
          AND I.IdTrackInventoryType = 1
          THEN 1 ELSE 0 END AS LatestPending,
          I.IdInventoryOrder,
          W.IdWhs,
          W.WhsCode,
          W.ShortWhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          I.InventoryNumber,
          I.CreateDate,
          I.StartDate,
          I.EndDate,
          I.IsFullWhs,
          I.IdTrackInventoryType,
          TI.NameTrackInventoryType,
          I.IdUserCreate,
          U1.UserName AS UserCreate,
          I.IdUserApproval,
          U2.UserName AS UserApproval,
          I.CountQty,
          I.Status,
          I.Description
          FROM InventoryOrder I
          INNER JOIN Warehouse W ON I.IdWhs = W.IdWhs
          LEFT JOIN Owner Own ON I.IdOwn = Own.IdOwn
          INNER JOIN CfgUserWms U1 ON I.IdUserCreate = U1.IdUserWms
          INNER JOIN CfgUserWms U2 ON I.IdUserApproval = U2.IdUserWms
          INNER JOIN TrackInventoryType TI ON I.IdTrackInventoryType = TI.IdTrackInventoryType @SQLPart
          ORDER BY I.CreateDate;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdModule = @idModule
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">idModule</parameter>
          <parameter type="String">idPage</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">I.IdWhs</filter>
          <filter name="DateRange" type="textBetween">I.CreateDate</filter>
          <filter name="Owner" type="numericIn">own.IdOwn</filter>
          <filter name="Description" type="textLike">I.Description</filter>
          <filter name="Status" type="numericEqual">I.Status</filter>
        </filters>
      </query>


      <query code="Inventory_GetById">
        <sql>
          SELECT IdInventoryOrder
          ,IdWhs
          ,IdOwn
          ,InventoryNumber
          ,CreateDate
          ,StartDate
          ,EndDate
          ,IsFullWhs
          ,IdTrackInventoryType
          ,IdUserCreate
          ,IdUserApproval
          ,CountQty
          ,Status
          ,Description
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM InventoryOrder
          WHERE IdInventoryOrder = @IdInventory
        </sql>
        <parameters>
          <parameter type="Int">IdInventory</parameter>
        </parameters>
      </query>

      <query code="GetInventoryByWhs">
        <sql>
          SELECT IdInventoryOrder
          ,IdWhs
          ,IdOwn
          ,InventoryNumber
          ,CreateDate
          ,StartDate
          ,EndDate
          ,IsFullWhs
          ,IdTrackInventoryType
          ,IdUserCreate
          ,IdUserApproval
          ,CountQty
          ,Status
          ,Description
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM InventoryOrder
          WHERE IdWhs = @idWhs
        </sql>
        <parameters>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="Inventory_GetNextNumber">
        <sql>
          SELECT (COALESCE(MAX(InventoryNumber), 0) + 1) AS InventoryNumber
          FROM InventoryOrder
          <!--WHERE IdWhs = @idWhs-->
        </sql>
        <parameters>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="Inventory_Insert">
        <sql>
          INSERT INTO InventoryOrder
          (IdInventoryOrder,
          IdWhs,
          IdOwn,
          InventoryNumber,
          CreateDate,
          StartDate,
          EndDate,
          IsFullWhs,
          IdTrackInventoryType,
          IdUserCreate,
          IdUserApproval,
          CountQty,
          Status,
          Description,
          DateCreated,
          UserCreated)

          VALUES
          (@idInventoryOrder,
          @idWhs,
          @idOwn,
          @inventoryNumber,
          @createDate,
          @startDate,
          @endDate,
          @isFullWhs,
          @idTrackInventoryType,
          @idUserCreate,
          @idUserApproval,
          @countQty,
          @status,
          @description,
          @dateCreated,
          @userCreated)
        </sql>
        <parameters>
          <parameter type="Int">idInventoryOrder</parameter>
          <parameter type="Int">idWhs</parameter>
          <parameter type="Int">idOwn</parameter>
          <parameter type="Int">inventoryNumber</parameter>
          <parameter type="DateTime">createDate</parameter>
          <parameter type="DateTime">startDate</parameter>
          <parameter type="DateTime">endDate</parameter>
          <parameter type="Boolean">isFullWhs</parameter>
          <parameter type="Int">idTrackInventoryType</parameter>
          <parameter type="Int">idUserCreate</parameter>
          <parameter type="Int">idUserApproval</parameter>
          <parameter type="Int">countQty</parameter>
          <parameter type="Boolean">status</parameter>
          <parameter type="String">description</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="Inventory_Delete">
        <sql>
          DELETE FROM InventoryOrder
          WHERE IdInventoryOrder = @idInventoryOrder
        </sql>
        <parameters>
          <parameter type="Int">idInventoryOrder</parameter>
        </parameters>
      </query>

      <query code="Inventory_Update">
        <sql>
          UPDATE InventoryOrder
          SET
          IdWhs = @idWhs
          ,IdOwn = @idOwn
          ,StartDate = @startDate
          ,EndDate = @endDate
          ,IsFullWhs = @isFullWhs
          ,IdUserApproval = @idUserApproval
          ,CountQty = @countQty
          ,Status = @status
          ,Description = @description
          ,IdTrackInventoryType = @idTrackInventoryType
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdInventoryOrder = @IdInventoryOrder
        </sql>
        <parameters>
          <parameter type="Int">idInventoryOrder</parameter>
          <parameter type="Int">idWhs</parameter>
          <parameter type="Int">idOwn</parameter>
          <parameter type="DateTime">startDate</parameter>
          <parameter type="DateTime">endDate</parameter>
          <parameter type="Boolean">isFullWhs</parameter>
          <parameter type="Int">idUserApproval</parameter>
          <parameter type="Int">countQty</parameter>
          <parameter type="Boolean">status</parameter>
          <parameter type="String">description</parameter>
          <parameter type="Int">idTrackInventoryType</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="GetInventoryStockById">
        <sql>
          SELECT IdInventoryDetail
          ,IdInventoryOrder
          ,IdWhs
          ,IsEmptyLocation
          ,UserInventory
          ,RetryQty
          ,ActionCode
          ,ActionName
          ,InvIdLocCode
          ,InvIdLpnCode
          ,InvLPNTypeCode
          ,InvIdItem
          ,InvIdOwn
          ,InvIdCtgItem
          ,InvItemQty
          ,InvLotNumber
          ,InvFifoDate
          ,InvExpirationDate
          ,InvFabricationDate
          ,StkId
          ,StkIdLocCode
          ,StkIdLpnCode
          ,StkIdItem
          ,StkIdOwn
          ,StkIdCtgItem
          ,StkItemQty
          ,StkLotNumber
          ,StkFifoDate
          ,StkExpirationDate
          ,StkFabricationDate
          FROM v_Inv_ApplyInventoryProcess
          Where IdInventoryOrder = @IdInventoryOrder;
        </sql>
        <parameters>
          <parameter type="Int">IdInventoryOrder</parameter>
        </parameters>
      </query>

      <query code="GetInventoryDetailByIdIsFullWhs">
        <sql>
          SELECT IdInventoryDetail
          ,IdInventoryOrder
          ,IdLocCode
          ,LocTypeCode
          ,IsEmptyLocation
          ,IdItem
          ,ItemCode
          ,LongItemName
          ,InvQty
          ,StockQty
          ,Dif_Qty
          ,Dif_Amount
          ,LotNumber
          ,SealNumber
          ,FifoDate
          ,ExpirationDate
          ,FabricationDate
          ,IdCtgItem
          ,CtgName
          ,UserInventory
          ,RetryQty
          ,IdLpnCode
          ,IdWhs
          ,IdOwn
          ,OwnName
          FROM v_Inv_DiffInventDetailFull
          Where IdInventoryOrder = @IdInventoryOrder  @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdInventoryOrder</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>

        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="Code" type="textLeft">IdLocCode</filter>
          <filter name="LocationType" type="textIn">LocTypeCode</filter>
          <filter name="Counted" type="isNull">IdInventoryDetail</filter>
          <filter name="Empty" type="numericEqual">IsEmptyLocation</filter>
          <filter name="DifQty" type="numericGreater">Dif_Qty</filter>
          <filter name="DifAmount" type="numericGreater">Dif_Amount</filter>
          <filter name="Item" type="textLike">ItemCode</filter>
        </filters>
      </query>

      <query code="GetInventoryDetailByIdNotFullWhs">
        <sql>
          SELECT IdInventoryDetail
          ,IdInventoryOrder
          ,IdLocCode
          ,LocTypeCode
          ,IsEmptyLocation
          ,IdItem
          ,ItemCode
          ,LongItemName
          ,InvQty
          ,StockQty
          ,Dif_Qty
          ,Dif_Amount
          ,LotNumber
          ,SealNumber
          ,FifoDate
          ,ExpirationDate
          ,FabricationDate
          ,IdCtgItem
          ,CtgName
          ,UserInventory
          ,RetryQty
          ,IdLpnCode
          ,IdWhs
          ,IdOwn
          ,OwnName
          FROM v_Inv_DiffInventDetPartial
          Where IdInventoryOrder = @IdInventoryOrder  @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="Int">IdInventoryOrder</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>

        <filters>
          <filter name="Warehouse" type="numericIn">IdWhs</filter>
          <filter name="Code" type="textLeft">IdLocCode</filter>
          <filter name="LocationType" type="textIn">LocTypeCode</filter>
          <filter name="Counted" type="isNull">IdInventoryDetail</filter>
          <filter name="Empty" type="numericEqual">IsEmptyLocation</filter>
          <filter name="DifQty" type="numericGreater">Dif_Qty</filter>
          <filter name="DifAmount" type="numericGreater">Dif_Amount</filter>
          <filter name="Item" type="textLike">ItemCode</filter>
        </filters>
      </query>

      <query code="GetInventoryDetail_SpecialAll">
        <sql>
          SELECT ID.IdInventoryDetail,
          ID.IdInventoryOrder,
          INV.InventoryNumber,
          INV.IdWhs,
          W.WhsName,
          ID.IdLocCode,
          ID.IsEmptyLocation,
          ID.IdItem,
          ITEM.ItemCode,
          ITEM.LongItemName,
          ITEM.IdOwn,
          ITEM.IdGrpItem1,
          ITEM.IdGrpItem2,
          ITEM.IdGrpItem3,
          ITEM.IdGrpItem4,
          O.OwnName,
          ID.LotNumber,
          ID.SerialNumber,
          ID.FifoDate,
          ID.ExpirationDate,
          ID.FabricationDate,
          ID.QtyActual StockQty,
          ID.ItemQty InvQty,
          ID.IdCtgItem,
          CI.CtgName,
          ID.UserInventory,
          ID.RetryQty,
          ID.IdLpnCode,
          LOC.RowLoc,
          LOC.ColumnLoc,
          LOC.LevelLoc,
          LOC.Aisle,
          INV.CreateDate
          FROM InventoryDetail ID
          INNER JOIN InventoryOrder INV
          ON INV.IdInventoryOrder = ID.IdInventoryOrder
          INNER JOIN Warehouse W
          ON W.IdWhs = INV.IdWhs
          INNER JOIN Item ITEM
          ON ITEM.IdItem = ID.IdItem
          INNER JOIN Owner O
          ON O.IdOwn = ITEM.IdOwn
          INNER JOIN CategoryItem CI
          ON CI.IdCtgItem = ID.IdCtgItem
          INNER JOIN Location LOC
          ON LOC.IdLocCode = ID.IdLocCode
          @SQLPart
          ORDER BY ID.IdLocCode, ID.IdItem, ID.IdInventoryDetail;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>

        <filters>
          <filter name="Warehouse" type="numericIn">INV.IdWhs</filter>
          <filter name="CodeNumeric" type="numericIn">INV.InventoryNumber</filter>
          <filter name="Owner" type="numericIn">ITEM.IdOwn</filter>
          <filter name="Location" type="textLeft">ID.IdLocCode</filter>
          <filter name="LocationRange" type="textBetween">ID.IdLocCode</filter>
          <filter name="LocationRow" type="numericIn">LOC.RowLoc</filter>
          <filter name="LocationColumn" type="numericIn">LOC.ColumnLoc</filter>
          <filter name="LocationLevel" type="numericIn">LOC.LevelLoc</filter>
          <filter name="LocationAisle" type="textEqual">LOC.Aisle</filter>
          <filter name="Item" type="textLike">ITEM.ItemCode</filter>
          <filter name="FabricationDateRange" type="textBetween">ID.FabricationDate</filter>
          <filter name="ExpirationDateRange" type="textBetween">ID.ExpirationDate</filter>
          <filter name="GroupItem1" type="numericIn">ITEM.IdGrpItem1</filter>
          <filter name="GroupItem2" type="numericIn">ITEM.IdGrpItem2</filter>
          <filter name="GroupItem3" type="numericIn">ITEM.IdGrpItem3</filter>
          <filter name="GroupItem4" type="numericIn">ITEM.IdGrpItem4</filter>
          <filter name="DateRange" type="textBetween">INV.CreateDate</filter>
        </filters>
      </query>

      <query code="InventoryLocation_GetByLevelColumnAndRow">
        <sql>
          SELECT IdInventory
          ,IdLocCode
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM InventoryLocation
          WHERE IdLocCode IN (
          SELECT IdLocCode
          FROM	Location
          WHERE	IdWhs = @IdWhs
          AND		LevelLoc &gt;= @LevelLocFrom AND LevelLoc &lt;= @LevelLocTo
          AND		Rowloc &gt;= @RowlocFrom AND Rowloc &lt;= @RowlocTo
          AND		ColumnLoc &gt;= @ColumnLocFrom AND ColumnLoc &lt;= @ColumnLocTo)
        </sql>
        <parameters>
          <parameter type="Int">LevelLocFrom</parameter>
          <parameter type="Int">LevelLocTo</parameter>
          <parameter type="Int">RowlocFrom</parameter>
          <parameter type="Int">RowlocTo</parameter>
          <parameter type="Int">ColumnLocFrom</parameter>
          <parameter type="Int">ColumnLocTo</parameter>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="GetCountLocationForInventory">
        <sql>
          SELECT COUNT(IdInventory)AS COUNT
          FROM InventoryLocation
          WHERE IdInventory = @IdInventory
        </sql>
        <parameters>
          <parameter type="Int">IdInventory</parameter>
        </parameters>
      </query>
      <!-- END INVENTORY section  -->

      <!-- TASK SIMULATION section  -->
      <query code="TaskSimulation_GetByUserAndType">
        <sql>
          SELECT
          t.IdTask,
          t.IdUser,
          t.IdWhs,
          Whs.WhsCode,
          Whs.ShortWhsName,
          Whs.WhsName,
          Own.IdOwn,
          Own.OwnCode,
          Own.OwnName,
          Own.TradeName,
          Out.IdOutboundOrder,
          Out.OutboundNumber,
          Out.Priority,
          Out.FullShipment
          FROM TaskSimulation t
          LEFT JOIN OutboundOrder Out ON t.IdDocumentBound = Out.IdOutboundOrder
          INNER JOIN Warehouse Whs ON t.IdWhs = Whs.IdWhs
          INNER JOIN Owner Own ON t.IdOwn = Own.IdOwn
          WHERE t.IdUser = @idUser
          AND t.TaskTypeCode = @taskTypeCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idUser</parameter>
          <parameter type="String">taskTypeCode</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="TaskSimulation_Delete">
        <sql>
          DELETE FROM TaskOutboundOrderSimulation
          WHERE IdTask IN
          (SELECT IdTask FROM TaskSimulation
          WHERE IdUser = @idUser
          AND TaskTypeCode = @taskTypeCode);

          DELETE FROM TaskDetailSimulation
          WHERE IdTask IN
          (SELECT IdTask FROM TaskSimulation
          WHERE IdUser = @idUser
          AND TaskTypeCode = @taskTypeCode);

          DELETE FROM TaskSimulation
          WHERE IdUser = @idUser
          AND TaskTypeCode = @taskTypeCode
        </sql>
        <parameters>
          <parameter type="Int">idUser</parameter>
          <parameter type="String">taskTypeCode</parameter>
        </parameters>
      </query>

      <query code="TaskSimulation_Insert">
        <sql>
          INSERT INTO TaskSimulation
          (IdTask
          ,IdWhs
          ,IdOwn
          ,IdUser
          ,TaskTypeCode
          ,IdDocumentBound
          ,Priority
          ,CreateDate
          ,DateCreated
          ,UserCreated)

          VALUES
          (@IdTask
          ,@IdWhs
          ,@IdOwn
          ,@IdUser
          ,@TaskTypeCode
          ,@IdDocumentBound
          ,@Priority
          ,@CreateDate
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdTask</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdUser</parameter>
          <parameter type="String">TaskTypeCode</parameter>
          <parameter type="Int">IdDocumentBound</parameter>
          <parameter type="Int">Priority</parameter>
          <parameter type="DateTime">CreateDate</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="TaskSimulation_InsertOutboundOrderRelation">
        <sql>
          INSERT INTO TaskOutboundOrderSimulation
          (IdTask
          ,IdOutbound
          ,IdOutboundDetail)

          VALUES
          (@IdTask
          ,@IdOutbound
          ,@IdOutboundDetail)
        </sql>
        <parameters>
          <parameter type="Int">IdTask</parameter>
          <parameter type="Int">IdOutbound</parameter>
          <parameter type="Int">IdOutboundDetail</parameter>
        </parameters>
      </query>

      <query code="TaskDetailSimulation_Insert">
        <sql>
          INSERT INTO TaskDetailSimulation
          (IdTaskDetail
          ,IdTask
          ,IdDocumentBound
          ,IdDetailBound
          ,LineNumber
          ,IdItem
          ,IdCtgItem
          ,ProposalQty
          ,RealQty
          ,TotalQty
          ,IdLocSourceProposal
          ,DateCreated
          ,UserCreated)

          VALUES
          (@IdTaskDetail
          ,@IdTaskSimulation
          ,@IdDocumentBound
          ,@IdDetailBound
          ,@LineNumber
          ,@IdItem
          ,@IdCategoryItem
          ,@ProposalQty
          ,@RealQty
          ,@TotalQty
          ,@IdLocSourceProposal
          ,@dateCreated
          ,@userCreated)

        </sql>
        <parameters>
          <parameter type="Int">IdTaskDetail</parameter>
          <parameter type="Int">IdTaskSimulation</parameter>
          <parameter type="Int">IdDocumentBound</parameter>
          <parameter type="Int">IdDetailBound</parameter>
          <parameter type="Int">LineNumber</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdCategoryItem</parameter>
          <parameter type="Decimal">ProposalQty</parameter>
          <parameter type="Decimal">RealQty</parameter>
          <parameter type="Decimal">TotalQty</parameter>
          <parameter type="String">IdLocSourceProposal</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="TaskDetailSimulation_GetByTask">
        <sql>
          SELECT
          td.IdDetailBound,
          td.LineNumber,
          td.IdItem,
          i.ItemCode,
          i.Description,
          td.IdCtgItem,
          ca.CtgName,
          MAX(td.ProposalQty) AS ProposalQty,
          SUM(td.RealQty) AS RealQty,
          SUM(td.TotalQty) AS TotalQty
          FROM TaskDetailSimulation td
          INNER JOIN Item i ON td.IdItem = i.IdItem
          INNER JOIN categoryitem ca ON td.IdCtgItem = ca.IdCtgItem
          WHERE td.IdTask = @idTask
          GROUP BY
          td.IdDetailBound, td.LineNumber, td.IdItem, i.ItemCode,
          i.Description, td.IdCtgItem, ca.CtgName;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>

        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <query code="TaskDetailSimulation_GetByTaskKit">
        <sql>
          SELECT
          td.IdDetailBound,
          td.LineNumber,
          i.IdItem,
          i.ItemCode,
          i.Description,
          td.IdCtgItem,
          ca.CtgName,
          MAX(td.ProposalQty) AS ProposalQty,
          AVG(td.RealQty) AS RealQty,
          AVG(td.TotalQty) AS TotalQty
          FROM TaskDetailSimulation td
          INNER JOIN Kit ON td.IdItem = kit.IdItemBase
          INNER JOIN Item i ON kit.IdItemKit = i.IdItem
          LEFT JOIN categoryitem ca ON td.IdCtgItem = ca.IdCtgItem
          WHERE td.IdTask = @idTask
          GROUP BY
          td.IdDetailBound, td.LineNumber, i.IdItem, i.ItemCode, i.Description, td.IdCtgItem, ca.CtgName;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>

        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <!-- End TASK SIMULATION section  -->

      <!-- TASK section  -->
      <query code="InsertTask">
        <sql>
          INSERT INTO Task
          (IdTask,
          IdWhs,
          IdOwn,
          IsComplete,
          TaskTypeCode,
          Description,
          IdDocumentBound,
          Priority,
          CreateDate,
          CloseDate,
          ProposalStartDate,
          ProposalEndDate,
          RealStartDate,
          RealEndDate,
          Status,
          IdTrackTaskType,
          DateTrackTask,
          IdLocStageSource,
          IdLocStageTarget,
          WorkersRequired,
          WorkersAssigned,
          DateCreated,
          UserCreated)

          VALUES
          (@IdTask
          ,@IdWhs
          ,@IdOwn
          ,@IsComplete
          ,@TaskTypeCode
          ,@Description
          ,@IdDocumentBound
          ,@Priority
          ,@CreateDate
          ,@CloseDate
          ,@ProposalStartDate
          ,@ProposalEndDate
          ,@RealStartDate
          ,@RealEndDate
          ,@Status
          ,@IdTrackTaskType
          ,@DateTrackTask
          ,@IdLocStageSource
          ,@IdLocStageTarget
          ,@WorkersRequired
          ,@WorkersAssigned
          ,@dateCreated
          ,@userCreated)

        </sql>
        <parameters>
          <parameter type="Int">IdTask</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Boolean">IsComplete</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="String">TaskTypeCode</parameter>
          <parameter type="Int">IdDocumentBound</parameter>
          <parameter type="Int">Priority</parameter>
          <parameter type="DateTime">CreateDate</parameter>
          <parameter type="DateTime">CloseDate</parameter>
          <parameter type="DateTime">ProposalStartDate</parameter>
          <parameter type="DateTime">ProposalEndDate</parameter>
          <parameter type="DateTime">RealStartDate</parameter>
          <parameter type="DateTime">RealEndDate</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="Int">IdTrackTaskType</parameter>
          <parameter type="DateTime">DateTrackTask</parameter>
          <parameter type="String">IdLocStageSource</parameter>
          <parameter type="String">IdLocStageTarget</parameter>
          <parameter type="Int">WorkersRequired</parameter>
          <parameter type="Int">WorkersAssigned</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="InsertTaskDetail">
        <sql>
          INSERT INTO TaskDetail
          (IdTaskDetail,
          IdWhs,
          IdTask,
          IsComplete,
          IdDocumentBound,
          IdDetailBound,
          LineNumber,
          IdItem,
          IdCtgItem,
          Priority,
          IdLocSourceProposal,
          IdLocForkLiftProposal,
          IdLocTargetProposal,
          IdLocSourceUsed,
          IdLocForkLiftUsed,
          IdLocTargetUsed,
          IdLpnSourceProposal,
          IdLpnTargetProposal,
          IdLpnTargetUsed,
          IdLpnSourceUsed,
          Status,
          ProposalQty,
          RealQty,
          IdPlanedProcess,
          WaveCode,
          LabelCode,
          LoadCode,
          LoadSeq,
          UserAssigned,
          SerialNumber,
          DateCreated,
          UserCreated)

          VALUES
          (@IdTaskDetail
          ,@IdWhs
          ,@IdTask
          ,@IsComplete
          ,@IdDocumentBound
          ,@IdDetailBound
          ,@LineNumber
          ,@IdItem
          ,@IdCtgItem
          ,@Priority
          ,@IdLocSourceProposal
          ,@IdLocForkLiftProposal
          ,@IdLocTargetProposal
          ,@IdLocSourceUsed
          ,@IdLocForkLiftUsed
          ,@IdLocTargetUsed
          ,@IdLpnSourceProposal
          ,@IdLpnTargetProposal
          ,@IdLpnTargetUsed
          ,@IdLpnSourceUsed
          ,@Status
          ,@ProposalQty
          ,@RealQty
          ,@IdPlanedProcess
          ,@WaveCode
          ,@LabelCode
          ,@LoadCode
          ,@LoadSeq
          ,@UserAssigned
          ,@SerialNumber
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdTaskDetail</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdTask</parameter>
          <parameter type="Boolean">IsComplete</parameter>
          <parameter type="Int">IdDocumentBound</parameter>
          <parameter type="Int">IdDetailBound</parameter>
          <parameter type="Int">LineNumber</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">IdCtgItem</parameter>
          <parameter type="Int">Priority</parameter>
          <parameter type="String">IdLocSourceProposal</parameter>
          <parameter type="String">IdLocForkLiftProposal</parameter>
          <parameter type="String">IdLocTargetProposal</parameter>
          <parameter type="String">IdLocSourceUsed</parameter>
          <parameter type="String">IdLocForkLiftUsed</parameter>
          <parameter type="String">IdLocTargetUsed</parameter>
          <parameter type="String">IdLpnSourceProposal</parameter>
          <parameter type="String">IdLpnTargetProposal</parameter>
          <parameter type="String">IdLpnTargetUsed</parameter>
          <parameter type="String">IdLpnSourceUsed</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="Decimal">ProposalQty</parameter>
          <parameter type="Decimal">RealQty</parameter>
          <parameter type="Int">IdPlanedProcess</parameter>
          <parameter type="String">WaveCode</parameter>
          <parameter type="String">LabelCode</parameter>
          <parameter type="String">LoadCode</parameter>
          <parameter type="Int">LoadSeq</parameter>
          <parameter type="String">UserAssigned</parameter>
          <parameter type="String">SerialNumber</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="Task_Delete">
        <sql>
          DELETE FROM Task
          WHERE IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
        </parameters>
      </query>

      <query code="Task_InsertOutboundOrderRelation">
        <sql>
          INSERT INTO TaskOutboundOrder
          (IdTask
          ,IdOutboundOrder
          ,IdOutboundDetail)

          VALUES
          (@IdTask
          ,@IdOutboundOrder
          ,@IdOutboundDetail)
        </sql>
        <parameters>
          <parameter type="Int">IdTask</parameter>
          <parameter type="Int">IdOutboundOrder</parameter>
          <parameter type="Int">IdOutboundDetail</parameter>
        </parameters>
      </query>

      <!--Utilizado en las siguientes consultas:
		 - Tareas de Reposición - TaskType: 'REPL'
		 - Tareas de Ajuste - TaskType: 'AJU'
		 - Tareas de Conteo Cíclico - TaskType: 'CCNT'-->
      <query code="TaskConsult_FindAll">
        <sql>
          SELECT
          t.IdTask,
          whs.WhsCode,
          whs.ShortWhsName,
          own.OwnCode,
          own.TradeName,
          t.TaskTypeCode,
          t.Description AS TaskDescription,
          t.Priority,
          t.CreateDate,
          t.ProposalStartDate,
          t.RealStartDate,
          t.Status,
          t.WorkersRequired,
          t.WorkersAssigned,
          td.IdTaskDetail,
          td.IsComplete,
          ci.CtgName,
          i.ItemCode,
          i.Description AS ItemDescription,
          i.LongItemName,
          td.IdLocSourceProposal,
          td.IdLpnSourceProposal,
          td.ProposalQty,
          td.RealQty,
          td.UserAssigned
          FROM Task t
          INNER JOIN TaskDetail td ON t.IdTask = td.IdTask
          INNER JOIN Warehouse whs ON t.IdWhs = whs.Idwhs
          INNER JOIN Owner own ON t.IdOwn = own.IdOwn
          INNER JOIN Item i ON td.IdItem = i.IdItem
          LEFT OUTER JOIN CategoryItem AS ci ON td.IdCtgItem = ci.IdCtgItem
          WHERE t.TaskTypeCode = @taskType
          @SQLPart
          ORDER BY t.CreateDate DESC;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          AND IdPage = @idPage
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="String">@taskType</parameter>
          <parameter type="String">idPage</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">t.IdWhs</filter>
          <filter name="DateRange" type="textBetween">t.CreateDate</filter>
          <filter name="Item" type="textLike">i.ItemCode</filter>
          <filter name="Owner" type="numericIn">own.IdOwn</filter>
        </filters>
      </query>

      <query code="TaskPackage_FindAll">
        <sql>
          SELECT
          T.IdTask,
          T.IdWhs,
          W.WhsName,
          T.IdOwn,
          O.OwnName,
          T.IsComplete,
          T.TaskTypeCode,
          TT.TaskTypeName TaskDescription,
          T.IdDocumentBound,
          OO.OutboundNumber,
          T.Priority,
          T.CreateDate,
          T.CloseDate,
          T.ProposalStartDate,
          T.ProposalEndDate,
          T.RealStartDate,
          T.RealEndDate,
          T.Status,
          T.IdTrackTaskType,
          TTT.NameTrackTasktype,
          T.DateTrackTask,
          T.IdLocStageSource,
          T.IdLocStageTarget,
          T.WorkersRequired,
          T.WorkersAssigned,
          T.AllowCrossDock
          FROM Task T
          INNER JOIN Warehouse W
          ON W.IdWhs = T.IdWhs
          INNER JOIN TaskType TT
          ON TT.TaskTypeCode = T.TaskTypeCode
          INNER JOIN TrackTaskType TTT
          ON TTT.IdTrackTaskType = T.IdTrackTaskType
          LEFT JOIN Owner O
          ON O.IdOwn = T.IdOwn
          LEFT JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = T.IdDocumentBound
          @SQLPart
          ORDER BY T.IdTask;


          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
          <filter name="TaskType" type="textIn">T.TaskTypeCode</filter>
          <filter name="DateRange" type="textBetween">T.CreateDate</filter>
          <filter name="IsComplete" type="numericIn">T.IsComplete</filter>
        </filters>
      </query>

      <query code="TaskPackageDetail_FindAll">
        <sql>
          SELECT
          T.IdTask,
          T.IdWhs,
          W.WhsName,
          T.IdOwn,
          O.OwnName,
          T.IdTrackTaskType,
          TTT.NameTrackTasktype,
          TD.IdTaskDetail,
          TD.IsComplete IsCompleteDetail,
          TD.StartDate,
          TD.EndDate,
          TD.IdDocumentBound IdDocumentBoundDetail,
          OO.OutboundNumber,
          TD.IdDetailBound,
          TD.LineNumber,
          TD.IdItem,
          I.ItemCode,
          I.LongItemName,
          TD.ProposalQty,
          TD.RealQty,
          TD.IdCtgItem,
          CI.CtgName,
          TD.Priority PriorityDetail,
          TD.MadeCrossDock,
          TD.IdLocSourceProposal,
          TD.IdLocForkLiftProposal,
          TD.IdLocTargetProposal,
          TD.IdLocSourceUsed,
          TD.IdLocForkLiftUsed,
          TD.IdLocTargetUsed,
          TD.IdLpnSourceProposal,
          TD.IdLpnTargetProposal,
          TD.IdLpnTargetUsed,
          TD.IdLpnSourceUsed,
          TD.Status StatusDetail,
          TD.IdPlanedProcess,
          TD.WaveCode,
          TD.LabelCode,
          TD.LoadCode,
          TD.LoadSeq,
          TD.UserAssigned,
          TD.SerialNumber
          FROM TaskDetail TD
          INNER JOIN Task T
          ON T.IdTask = TD.IdTask
          INNER JOIN TrackTaskType TTT
          ON TTT.IdTrackTaskType = T.IdTrackTaskType
          INNER JOIN Warehouse W
          ON W.IdWhs = TD.IdWhs
          LEFT JOIN Owner O
          ON O.IdOwn = T.IdOwn
          LEFT JOIN Item I
          ON I.IdItem = TD.IdItem
          LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = TD.IdCtgItem
          LEFT JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = TD.IdDocumentBound
          @SQLPart
          ORDER BY T.IdTask;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
          <filter name="TaskType" type="textIn">T.TaskTypeCode</filter>
          <filter name="DateRange" type="textBetween">T.CreateDate</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Description" type="textLike">I.LongItemName</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="Driver" type="textLike">TD.UserAssigned</filter>
          <filter name="LocationSource" type="textLike">TD.IdLocSourceProposal</filter>
          <filter name="LocationTarget" type="textLike">TD.IdLocTargetProposal</filter>
          <filter name="LpnSource" type="textLike">TD.IdLpnSourceProposal</filter>
          <filter name="LpnTarget" type="textLike">TD.IdLpnTargetProposal</filter>
          <filter name="IsComplete" type="numericIn">TD.IsComplete</filter>
        </filters>
      </query>

      <query code="TaskPicking_FindAll">
        <sql>
          SELECT
          T.IdTask,
          T.IdWhs,
          W.WhsName,
          T.IdOwn,
          O.OwnName,
          T.IsComplete,
          T.TaskTypeCode,
          TT.TaskTypeName TaskDescription,
          T.IdDocumentBound,
          OO.OutboundNumber,
          T.Priority,
          T.CreateDate,
          T.CloseDate,
          T.ProposalStartDate,
          T.ProposalEndDate,
          T.RealStartDate,
          T.RealEndDate,
          T.Status,
          T.IdTrackTaskType,
          TTT.NameTrackTasktype,
          T.DateTrackTask,
          T.IdLocStageSource,
          T.IdLocStageTarget,
          T.WorkersRequired,
          T.WorkersAssigned,
          T.AllowCrossDock
          FROM Task T
          INNER JOIN Warehouse W
          ON W.IdWhs = T.IdWhs
          INNER JOIN TaskType TT
          ON TT.TaskTypeCode = T.TaskTypeCode
          INNER JOIN TrackTaskType TTT
          ON TTT.IdTrackTaskType = T.IdTrackTaskType
          LEFT JOIN Owner O
          ON O.IdOwn = T.IdOwn
          LEFT JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = T.IdDocumentBound
          @SQLPart
          ORDER BY T.IdTask;


          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
          <filter name="TaskType" type="textIn">T.TaskTypeCode</filter>
          <filter name="DateRange" type="textBetween">T.CreateDate</filter>
          <filter name="IsComplete" type="numericIn">T.IsComplete</filter>
        </filters>
      </query>

      <query code="TaskPickingDetail_FindAll">
        <sql>
          SELECT
          T.IdTask,
          T.IdWhs,
          W.WhsName,
          T.IdOwn,
          O.OwnName,
          T.IdTrackTaskType,
          TTT.NameTrackTasktype,
          TD.IdTaskDetail,
          TD.IsComplete IsCompleteDetail,
          TD.StartDate,
          TD.EndDate,
          TD.IdDocumentBound IdDocumentBoundDetail,
          OO.OutboundNumber,
          TD.IdDetailBound,
          TD.LineNumber,
          TD.IdItem,
          I.ItemCode,
          I.LongItemName,
          TD.ProposalQty,
          TD.RealQty,
          TD.IdCtgItem,
          CI.CtgName,
          TD.Priority PriorityDetail,
          TD.MadeCrossDock,
          TD.IdLocSourceProposal,
          TD.IdLocForkLiftProposal,
          TD.IdLocTargetProposal,
          TD.IdLocSourceUsed,
          TD.IdLocForkLiftUsed,
          TD.IdLocTargetUsed,
          TD.IdLpnSourceProposal,
          TD.IdLpnTargetProposal,
          TD.IdLpnTargetUsed,
          TD.IdLpnSourceUsed,
          TD.Status StatusDetail,
          TD.IdPlanedProcess,
          TD.WaveCode,
          TD.LabelCode,
          TD.LoadCode,
          TD.LoadSeq,
          TD.UserAssigned,
          TD.SerialNumber
          FROM TaskDetail TD
          INNER JOIN Task T
          ON T.IdTask = TD.IdTask
          INNER JOIN TrackTaskType TTT
          ON TTT.IdTrackTaskType = T.IdTrackTaskType
          INNER JOIN Warehouse W
          ON W.IdWhs = TD.IdWhs
          LEFT JOIN Owner O
          ON O.IdOwn = T.IdOwn
          LEFT JOIN Item I
          ON I.IdItem = TD.IdItem
          LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = TD.IdCtgItem
          LEFT JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = TD.IdDocumentBound
          @SQLPart
          ORDER BY T.IdTask;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
          <filter name="TaskType" type="textIn">T.TaskTypeCode</filter>
          <filter name="DateRange" type="textBetween">T.CreateDate</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Description" type="textLike">I.LongItemName</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="Driver" type="textLike">TD.UserAssigned</filter>
          <filter name="LocationSource" type="textLike">TD.IdLocSourceProposal</filter>
          <filter name="LocationTarget" type="textLike">TD.IdLocTargetProposal</filter>
          <filter name="LpnSource" type="textLike">TD.IdLpnSourceProposal</filter>
          <filter name="LpnTarget" type="textLike">TD.IdLpnTargetProposal</filter>
          <filter name="IsComplete" type="numericIn">TD.IsComplete</filter>
        </filters>
      </query>
      
      <!--Filtro Task Type -->
      <query code="TaskType_FindAll">
        <sql>
          SELECT IdTaskType
          ,TaskTypeCode
          ,TaskTypeName
          FROM TaskType
          @SQLPart
          ORDER BY IdTaskType
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="TaskType" type="textIn">TaskTypeCode</filter>
        </filters>

      </query>

      <query code="TaskType_GetByCode">
        <sql>
          SELECT IdTaskType
          ,TaskTypeCode
          ,TaskTypeName
          FROM TaskType
          WHERE TaskTypeCode = @TaskTypeCode
          ORDER BY IdTaskType
        </sql>
        <parameters>
          <parameter type="String">TaskTypeCode</parameter>
        </parameters>


      </query>

      <query code="GetTaskPickingByOrder">
        <sql>
          SELECT T1.IdTask,
          T1.IdWhs,
          T1.IdOwn,
          T1.IsComplete,
          T1.TaskTypeCode,
          T1.Description,
          T1.IdDocumentBound,
          T1.Priority,
          T1.CreateDate,
          T1.CloseDate,
          T1.ProposalStartDate,
          T1.ProposalEndDate,
          T1.RealStartDate,
          T1.RealEndDate,
          T1.Status,
          T1.IdTrackTaskType,
          T1.DateTrackTask,
          T1.IdLocStageSource,
          T1.IdLocStageTarget,
          T1.WorkersRequired,
          T1.WorkersAssigned
          FROM task T1
          INNER JOIN tasktype T2 on T1.TaskTypeCode = T2.TaskTypeCode
          WHERE T1.IsComplete = 0
          AND T2.TaskTypeCode = @TaskTypeCode
          AND (SELECT (T3.WorkersRequired - T3.WorkersAssigned)
          FROM task T3
          WHERE T3.IdTask = T1.IdTask) > 0
          AND T1.IdDocumentBound = @IdDocumentBound
          AND T1.IdOwn = @IdOwn
          ORDER BY Priority DESC
        </sql>
        <parameters>
          <parameter type="Int">IdDocumentBound</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">TaskTypeCode</parameter>
        </parameters>
      </query>

      <query code="GetTaskById">
        <sql>
          SELECT
          T0.IdTask,
          T0.IdWhs,
          T0.IdOwn,
          T0.IsComplete,
          T0.TaskTypeCode,
          T0.Description,
          T0.IdDocumentBound,
          T0.Priority,
          T0.CreateDate,
          T0.CloseDate,
          T0.ProposalStartDate,
          T0.ProposalEndDate,
          T0.RealStartDate,
          T0.RealEndDate,
          T0.Status,
          T0.IdTrackTaskType,
          T0.DateTrackTask,
          T0.WorkersRequired,
          T0.WorkersAssigned,
          T0.IdLocStageSource,
          T0.IdLocStageTarget
          FROM task T0
          WHERE T0.IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
        </parameters>
      </query>

      <!-- Prioridad de tareas  -->
      <query code="TaskPriority_FindAll">
        <sql>
          SELECT
          T.IdTask,
          T.IdWhs,
          W.WhsName,
          T.IdOwn,
          O.OwnName,
          T.IdTrackTaskType,
          TTT.NameTrackTasktype,
          T.CreateDate,
          T.TaskTypeCode,
          TT.TaskTypeName TaskDescription,
          T.Priority,
          T.IsComplete,
          T.IdDocumentBound,
          TD.IdTaskDetail,
          TD.IsComplete IsCompleteDetail,
          TD.Priority PriorityDetail,
          TD.IdDocumentBound IdDocumentBoundDetail,
          OO.OutboundNumber,
          TD.IdItem,
          I.ItemCode,
          I.LongItemName,
          TD.ProposalQty,
          TD.IdCtgItem,
          CI.CtgName,
          TD.UserAssigned,
          TD.IdLocSourceProposal,
          TD.IdLocTargetProposal
          FROM TaskDetail TD
          INNER JOIN Task T
          ON T.IdTask = TD.IdTask
          INNER JOIN TaskType TT
          ON TT.TaskTypeCode = T.TaskTypeCode
          INNER JOIN TrackTaskType TTT
          ON TTT.IdTrackTaskType = T.IdTrackTaskType
          INNER JOIN Warehouse W
          ON W.IdWhs = TD.IdWhs
          LEFT JOIN Owner O
          ON O.IdOwn = T.IdOwn
          LEFT JOIN Item I
          ON I.IdItem = TD.IdItem
          LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = TD.IdCtgItem
          LEFT JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = TD.IdDocumentBound
          WHERE T.IdTrackTaskType &lt; 30 
          AND TD.IsComplete = 0
          @SQLPart
          ORDER BY T.IdTask;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
          <filter name="TaskType" type="textIn">T.TaskTypeCode</filter>
          <filter name="DateRange" type="textBetween">T.CreateDate</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Description" type="textLike">I.LongItemName</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="Driver" type="textLike">TD.UserAssigned</filter>
          <filter name="LocationSource" type="textLike">TD.IdLocSourceProposal</filter>
          <filter name="LocationTarget" type="textLike">TD.IdLocTargetProposal</filter>
          <filter name="PriorityTask" type="textEqual">T.Priority</filter>
        </filters>
      </query>

      <query code="Task_UpdatePriority">
        <sql>
          UPDATE Task SET
          Priority = @Priority
          ,DateModified = @fechaActual
          ,UserModified = @usuario
          WHERE
          IdTask = @idTask

          UPDATE TaskDetail SET
          Priority = @Priority
          ,DateModified = @fechaActual
          ,UserModified = @usuario
          WHERE
          IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="Int">Priority</parameter>
          <parameter type="DateTime">fechaActual</parameter>
          <parameter type="String">usuario</parameter>
        </parameters>
      </query>

      <!-- Mantenedor de tareas  -->
      <query code="TaskMgr_FindAll">
        <sql>
          SELECT
          T.IdTask,
          T.IdWhs,
          W.WhsName,
          T.IdOwn,
          O.OwnName,
          T.IdTrackTaskType,
          TTT.NameTrackTasktype,
          T.CreateDate,
          T.TaskTypeCode,
          TT.TaskTypeName,
          T.Description TaskDescription,
          T.Priority,
          T.IdLocStageSource,
          T.IdLocStageTarget,
          T.WorkersRequired,
          T.AllowCrossDock,
          T.UserCreated,
          T.UserModified,
          T.DateModified,
          T.DateCreated,
          T.IsComplete,
          T.RealStartDate,
          T.DateTrackTask,
          T.Status,
          TD.IdTaskDetail,
          TD.IsComplete IsCompleteDetail,
          TD.IdDocumentBound IdDocumentBoundDetail,
          OO.OutboundNumber,
          TD.IdItem,
          I.ItemCode,
          I.LongItemName,
          TD.ProposalQty,
          TD.IdCtgItem,
          CI.CtgName,
          TD.UserAssigned,
          TD.IdLocSourceProposal,
          TD.IdLocTargetProposal,
          TD.IdLocForkLiftProposal,
          TD.Priority PriorityDetail,
          TD.Status StatusDetail,
          TD.StartDate,
          TD.MadeCrossDock,
          TD.DateCreated DateCreatedDetail,
          TD.UserCreated UserCreatedDetail,
          TD.DateModified DateModifiedDetail,
          TD.UserModified UserModifiedDetail
          FROM TaskDetail TD
          INNER JOIN Task T
          ON T.IdTask = TD.IdTask
          INNER JOIN TaskType TT
          ON TT.TaskTypeCode = T.TaskTypeCode
          INNER JOIN TrackTaskType TTT
          ON TTT.IdTrackTaskType = T.IdTrackTaskType
          INNER JOIN Warehouse W
          ON W.IdWhs = TD.IdWhs
          LEFT JOIN Owner O
          ON O.IdOwn = T.IdOwn
          LEFT JOIN Item I
          ON I.IdItem = TD.IdItem
          LEFT JOIN CategoryItem CI
          ON CI.IdCtgItem = TD.IdCtgItem
          LEFT JOIN OutboundOrder OO
          ON OO.IdOutboundOrder = TD.IdDocumentBound
          WHERE T.IdTrackTaskType &lt; 100
          @SQLPart
          ORDER BY T.IdTask;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">T.IdWhs</filter>
          <filter name="Owner" type="numericIn">T.IdOwn</filter>
          <filter name="TaskType" type="textIn">T.TaskTypeCode</filter>
          <filter name="DateRange" type="textBetween">T.CreateDate</filter>
          <filter name="Item" type="textLike">I.ItemCode</filter>
          <filter name="Description" type="textLike">I.LongItemName</filter>
          <filter name="DocumentNbr" type="textLike">OO.OutboundNumber</filter>
          <filter name="Driver" type="textLike">TD.UserAssigned</filter>
          <filter name="LocationSource" type="textLike">TD.IdLocSourceProposal</filter>
          <filter name="LocationTarget" type="textLike">TD.IdLocTargetProposal</filter>
          <filter name="PriorityTask" type="textEqual">T.Priority</filter>
        </filters>
      </query>

      <query code="TaskMgr_Update">
        <sql>
          UPDATE Task SET
          IsComplete = @isComplete
          ,Description = @description
          ,Priority = @priority
          ,Status = @status
          ,IdTrackTaskType = @idTrackTaskType
          ,IdLocStageSource = @idLocStageSource
          ,IdLocStageTarget = @idLocStageTarget
          ,WorkersRequired = @workersRequired
          ,AllowCrossDock = @allowCrossDock
          ,DateModified = @fechaActual
          ,UserModified = @usuario
          WHERE
          IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="Boolean">isComplete</parameter>
          <parameter type="String">description</parameter>
          <parameter type="Int">priority</parameter>
          <parameter type="Boolean">status</parameter>
          <parameter type="Int">idTrackTaskType</parameter>
          <parameter type="String">idLocStageSource</parameter>
          <parameter type="String">idLocStageTarget</parameter>
          <parameter type="Int">workersRequired</parameter>
          <parameter type="Boolean">allowCrossDock</parameter>
          <parameter type="DateTime">fechaActual</parameter>
          <parameter type="String">usuario</parameter>
        </parameters>
      </query>
      
      <query code="TaskMgr_UpdateIsComplete">
        <sql>
          UPDATE TaskDetail SET
          IsComplete = @isComplete
          ,DateModified = @fechaActual
          ,UserModified = @usuario
          WHERE
          IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="Boolean">isComplete</parameter>
          <parameter type="DateTime">fechaActual</parameter>
          <parameter type="String">usuario</parameter>
        </parameters>
      </query>

      <query code="TaskMgr_UpdatePriority">
        <sql>
          UPDATE TaskDetail SET
          Priority = @priority
          ,DateModified = @fechaActual
          ,UserModified = @usuario
          WHERE
          IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="Int">priority</parameter>
          <parameter type="DateTime">fechaActual</parameter>
          <parameter type="String">usuario</parameter>
        </parameters>
      </query>

      <query code="TaskMgr_UpdateStatus">
        <sql>
          UPDATE TaskDetail SET
          Status = @status
          ,DateModified = @fechaActual
          ,UserModified = @usuario
          WHERE
          IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="Boolean">status</parameter>
          <parameter type="DateTime">fechaActual</parameter>
          <parameter type="String">usuario</parameter>
        </parameters>
      </query>

      <query code="TaskMgr_UpdateIdTrackTaskType">
        <sql>
          UPDATE Task SET
          CloseDate = @fechaActual
          WHERE
          IdTask = @idTask

          UPDATE TaskDetail SET
          IsComplete = 1
          ,DateModified = @fechaActual
          ,UserModified = @usuario
          WHERE
          IdTask = @idTask
        </sql>
        <parameters>
          <parameter type="Int">idTask</parameter>
          <parameter type="DateTime">fechaActual</parameter>
          <parameter type="String">usuario</parameter>
        </parameters>
      </query>

      <query code="TaskDetailMgr_Update">
        <sql>
          UPDATE TaskDetail SET
          IsComplete = @isComplete
          ,Priority = @priority
          ,IdLocForkLiftProposal = @idLocForkLiftProposal
          ,Status = @status
          ,UserAssigned = @userAssigned
          ,DateModified = @fechaActual
          ,UserModified = @usuario
          WHERE
          IdTaskDetail = @idTaskDetail
        </sql>
        <parameters>
          <parameter type="Int">idTaskDetail</parameter>
          <parameter type="Boolean">isComplete</parameter>
          <parameter type="Int">priority</parameter>
          <parameter type="String">idLocForkLiftProposal</parameter>
          <parameter type="Boolean">status</parameter>
          <parameter type="String">userAssigned</parameter>
          <parameter type="DateTime">fechaActual</parameter>
          <parameter type="String">usuario</parameter>
        </parameters>
      </query>

      <!--Track Task Type -->
      <query code="TrackTaskType_FindAll">
        <sql>
          SELECT IdTrackTaskType
          ,NameTrackTaskType
          ,DateCreated DateCreatedTrackTaskType
          ,UserCreated UserCreatedTrackTaskType
          ,DateModified DateModifiedTrackTaskType
          ,UserModified UserModifiedTrackTaskType
          FROM TrackTaskType
          ORDER BY IdTrackTaskType
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
        </parameters>
      </query>

      <!--Building Replacement Task-->
      <query code="BuildingReplacementTaskConsult">
        <sql>
          SELECT L.IdWhs 
          , W.WhsName
          , I.IdOwn
          , O.OwnName
          , I.IdItem
          , I.ItemCode
          , I.LongItemName
          , L.IdLocCode
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , IL.ReOrderPoint
          , IL.ReOrderQty
          , COALESCE(TPEND.RepoPending,0) AS RepoPending
          , STK.ItemQty
          , STK.IdCtgItem
          , STK.CtgName
          , STK.FifoDate
          , STK.ExpirationDate
          , STK.FabricationDate
          , STK.LotNumber
          , STK.IdLpnCode
          FROM ItemLocation IL
          INNER JOIN Item I ON I.IdItem = IL.IdItem
          INNER JOIN Location L ON L.IdLocCode = IL.IdLocCode
          INNER JOIN Owner O ON O.IdOwn = I.IdOwn
          INNER JOIN Warehouse W ON W.IdWhs = L.IdWhs
          LEFT  JOIN(SELECT TD.IdLocTargetProposal, TD.IdItem,
          COUNT(*) AS RepoPending
          FROM TaskDetail TD
          INNER JOIN TASK T ON TD.IdTask = T.IdTask
          WHERE T.IsComplete = 0
          AND TD.IsComplete = 0
          AND T.TaskTypeCode =  'REPL'
          GROUP BY TD.IdLocTargetProposal, TD.IdItem) AS TPEND
          ON I.IdItem = TPEND.IdItem
          AND IL.IdLocCode = TPEND.IdLocTargetProposal
          LEFT JOIN (SELECT S.IdLocCode, S.IdItem, S.IdCtgItem, CI.CtgName,
          S.ItemQty, FifoDate, ExpirationDate, FabricationDate, LotNumber, IdLpnCode
          FROM Stock S
          INNER JOIN CategoryItem CI
          ON CI.IdCtgItem = S.IdCtgItem) AS STK
          ON STK.IdItem = I.IdItem
          AND STK.IdLocCode = L.IdLocCode
          @SQLPart
          ORDER BY I.IdOwn, I.ItemCode, L.IdLocCode


          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder;
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericEqual">W.IdWhs</filter>
          <filter name="Owner" type="numericIn">O.IdOwn</filter>
          <filter name="Code" type="textLike">I.ItemCode</filter>
          <filter name="Name" type="textLike">I.LongItemName</filter>
          <filter name="LocationRowRange" type="numericBetween">L.RowLoc</filter>
          <filter name="LocationColumnRange" type="numericBetween">L.ColumnLoc</filter>
          <filter name="LocationLevelRange" type="numericBetween">L.LevelLoc</filter>
        </filters>
      </query>

      <!--End Building Replacement Task-->
      
      
      
      <!-- End TASK section  -->

      <!-- RULES section  -->
      <query code="GetRulesByItemAndWmsProcess">
        <sql>
          SELECT R.IdRule,R.RuleCode,R.Status,R.[Name],R.NameSpace
          FROM [Rule] R
          INNER JOIN GroupRule GR ON GR.IdRule = R.IdRule
          INNER JOIN CustomRule CR ON CR.IdCustomRule = GR.IdCustomRule
          INNER JOIN CustomRuleItem CRI ON CRI.IdCustomRule = CR.IdCustomRule
          WHERE CRI.IdItem = @IdItem
          AND CR.IdWmsProcessCode = @IdWmsProcessCode
          ORDER BY GR.SequenceExecution ASC
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
          <parameter type="String">IdWmsProcessCode</parameter>
        </parameters>
      </query>
      <query code="GetStockByLocAndItemGreaterLifo">
        <sql>
          SELECT S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber
          ,L.IdLocCode
          ,L.LocCode
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          ,S.ExpirationDate
          ,S.ItemQty
          FROM Location L
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
          WHERE L.IdWhs = @idWarehouse
          AND S.IdItem = @idItem
          AND S.IdLocCode = @idLocCode
          AND S.HoldCode IS NULL
          ORDER BY S.FifoDate DESC
        </sql>
        <parameters>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="String">idLocCode</parameter>
        </parameters>
      </query>
      <query code="GetStockByItemLessFifo">
        <sql>
          SELECT S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber
          ,L.IdLocCode
          ,L.LocCode
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          ,S.ExpirationDate
          ,S.ItemQty
          FROM Location L
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
          WHERE S.IdWhs = @idWarehouse
          AND L.LocTypeCode = 'PUT'
          AND S.IdItem = @idItem
          AND S.HoldCode IS NULL
          ORDER BY S.FifoDate ASC
        </sql>
        <parameters>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="Int">idItem</parameter>
        </parameters>
      </query>
      <query code="GetStockByItemGreaterFifo">
        <sql>
          SELECT S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber
          ,L.IdLocCode
          ,L.LocCode
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          ,S.ExpirationDate
          ,S.ItemQty
          FROM Location L
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
          WHERE S.IdWhs = @idWarehouse
          AND L.LocTypeCode = 'PUT'
          AND S.IdItem = @idItem
          AND S.HoldCode IS NULL
          ORDER BY S.FifoDate DESC
        </sql>
        <parameters>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="Int">idItem</parameter>
        </parameters>
      </query>
      <query code="GetStockByLocAndItemLessFifo">
        <sql>
          SELECT S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber
          ,L.IdLocCode
          ,L.LocCode
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          ,S.ExpirationDate
          ,S.ItemQty
          FROM Location L
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
          WHERE L.IdWhs = @idWarehouse
          AND S.IdItem = @idItem
          AND S.IdLocCode = @idLocCode
          AND S.HoldCode IS NULL
          ORDER BY S.FifoDate ASC
        </sql>
        <parameters>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="String">idLocCode</parameter>
        </parameters>
      </query>
      <query code="GetStockByLocAndItemLessFefo">
        <sql>
          SELECT S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber
          ,L.IdLocCode
          ,L.LocCode
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          ,S.ExpirationDate
          ,S.ItemQty
          FROM Location L
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
          WHERE L.IdWhs = @idWarehouse
          AND S.IdItem = @idItem
          AND S.IdLocCode = @idLocCode
          AND S.HoldCode IS NULL
          ORDER BY S.ExpirationDate ASC
        </sql>
        <parameters>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="String">idLocCode</parameter>
        </parameters>
      </query>
      <query code="GetStockByLocAndItemLessFefo">
        <sql>
          SELECT S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber
          ,L.IdLocCode
          ,L.LocCode
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          ,S.ExpirationDate
          ,S.ItemQty
          FROM Location L
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
          WHERE L.IdWhs = @idWarehouse
          AND S.IdItem = @idItem
          AND S.IdLocCode = @idLocCode
          AND S.HoldCode IS NULL
          ORDER BY S.ExpirationDate ASC
        </sql>
        <parameters>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="String">idLocCode</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPickingFefoStrict">
        <sql>
          SELECT TOP 1 ABS(L.PickingFlow - @pickingFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) as ItemQty ,
          S.IdCtgItem,
          S.IdItem,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          L.IdLocCode,
          L.LocCode,
          L.RowLoc,
          L.ColumnLoc,
          L.LevelLoc,
          L.Aisle,L.Status,
          L.Description,
          L.SharedItem,
          L.OnlyLPN,
          L.PickingFlow,
          L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          FROM Stock S
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          INNER JOIN Item I ON I.IdItem = S.IdItem
          LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem AND S.IdLocCode = OLP.IdLocSourceProposal

          -- Stock en Tareas Simuladas
          LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem AND S.IdLocCode = OLPS.IdLocSourceProposal

          WHERE S.IdWhs = L.IdWhs
          AND S.IdItem = @idItem
          AND S.IdCtgItem = @idCtgItem
          AND S.IdWhs = @idWhs
          AND S.ExpirationDate = @fefo
          AND L.LocTypeCode = 'PICK'
          AND L.Status = 1
          AND S.HoldCode IS NULL
          GROUP BY S.StockId,S.IdWhs, S.IdOwn,S.IdCtgItem,S.IdItem, S.Status,S.FifoDate,S.ExpirationDate,S.FabricationDate,
          S.LotNumber,S.IdLpnCode,S.LpnTypeCode,S.IdLpnCodeContainer,S.LpnTypeCodeContainer,S.Price,S.IdReceipt,S.IdInboundOrder,
          S.InboundLineNumber,S.IdOutboundOrder,S.OutboundLineNumber,S.SealNumber,S.ReasonCode,S.HoldCode,L.PickingFlow,S.IdItem,
          L.IdLocCode,L.LocCode,L.RowLoc,L.ColumnLoc,L.LevelLoc,L.Aisle,L.Status,L.Description,L.SharedItem,L.OnlyLPN,L.PickingFlow,L.PutawayFlow
          ,L.CapacityLPN,L.CapacityUnit,L.Length,L.Width,L.Height,L.Volume,L.Weight,LT.IdLocType,LT.LocTypeCode,LT.LocTypeName,LT.Status
          ORDER BY  Ruta ASC
        </sql>
        <parameters>
          <parameter type="Int">pickingFlow</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idCtgItem</parameter>
          <parameter type="Int">idWhs</parameter>
          <parameter type="DateTime">fefo</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPickingFifoStrict">
        <sql>
          SELECT TOP 1 ABS(L.PickingFlow - @pickingFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) as ItemQty ,
          S.IdCtgItem,
          S.IdItem,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          L.IdLocCode,
          L.LocCode,
          L.RowLoc,
          L.ColumnLoc,
          L.LevelLoc,
          L.Aisle,L.Status,
          L.Description,
          L.SharedItem,
          L.OnlyLPN,
          L.PickingFlow,
          L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          FROM Stock S
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          INNER JOIN Item I ON I.IdItem = S.IdItem
          -- Stock en Tareas Pendientes
          LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem AND S.IdLocCode = OLP.IdLocSourceProposal

          -- Stock en Tareas Simuladas
          LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem AND S.IdLocCode = OLPS.IdLocSourceProposal

          WHERE S.IdWhs = L.IdWhs
          AND S.IdItem = @idItem
          AND S.IdCtgItem = @idCtgItem
          AND S.IdWhs = @idWhs
          AND S.FifoDate = @fifo
          AND L.LocTypeCode = 'PICK'
          AND L.Status = 1
          AND S.HoldCode IS NULL
          GROUP BY S.StockId,S.IdWhs, S.IdOwn,S.IdCtgItem,S.IdItem, S.Status,S.FifoDate,S.ExpirationDate,S.FabricationDate,
          S.LotNumber,S.IdLpnCode,S.LpnTypeCode,S.IdLpnCodeContainer,S.LpnTypeCodeContainer,S.Price,S.IdReceipt,S.IdInboundOrder,
          S.InboundLineNumber,S.IdOutboundOrder,S.OutboundLineNumber,S.SealNumber,S.ReasonCode,S.HoldCode,L.PickingFlow,S.IdItem,
          L.IdLocCode,L.LocCode,L.RowLoc,L.ColumnLoc,L.LevelLoc,L.Aisle,L.Status,L.Description,L.SharedItem,L.OnlyLPN,L.PickingFlow,L.PutawayFlow
          ,L.CapacityLPN,L.CapacityUnit,L.Length,L.Width,L.Height,L.Volume,L.Weight,LT.IdLocType,LT.LocTypeCode,LT.LocTypeName,LT.Status
          ORDER BY  Ruta ASC
        </sql>
        <parameters>
          <parameter type="Int">pickingFlow</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idCtgItem</parameter>
          <parameter type="Int">idWhs</parameter>
          <parameter type="DateTime">fifo</parameter>
        </parameters>
      </query>
      <query code="GetStockByItemLessFefo">
        <sql>
          SELECT S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber
          ,L.IdLocCode
          ,L.LocCode
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          ,S.ExpirationDate
          ,S.ItemQty
          FROM Location L
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
          WHERE S.IdWhs = @idWarehouse
          AND L.LocTypeCode = 'PUT'
          AND S.IdItem = @idItem
          AND S.HoldCode IS NULL
          ORDER BY S.ExpirationDate ASC
        </sql>
        <parameters>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="Int">idItem</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPickingFifoNotStrict">
        <sql>
          SELECT TOP 1 ABS(L.PickingFlow - @pickingFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) as ItemQty ,
          S.IdCtgItem,
          S.IdItem,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          L.IdLocCode,
          L.LocCode,
          L.RowLoc,
          L.ColumnLoc,
          L.LevelLoc,
          L.Aisle,L.Status,
          L.Description,
          L.SharedItem,
          L.OnlyLPN,
          L.PickingFlow,
          L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          FROM Stock S
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          INNER JOIN Item I ON I.IdItem = S.IdItem
          -- Stock en Tareas Pendientes
          LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem AND S.IdLocCode = OLP.IdLocSourceProposal

          -- Stock en Tareas Simuladas
          LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem AND S.IdLocCode = OLPS.IdLocSourceProposal

          WHERE S.IdWhs = L.IdWhs
          AND S.IdItem = @idItem
          AND S.IdCtgItem = @idCtgItem
          AND S.IdWhs = @idWhs
          AND S.FifoDate BETWEEN @fifo AND @fifoRange
          AND L.LocTypeCode = 'PICK'
          AND L.Status = 1
          AND S.HoldCode IS NULL
          GROUP BY S.StockId,S.IdWhs, S.IdOwn,S.IdCtgItem,S.IdItem, S.Status,S.FifoDate,S.ExpirationDate,S.FabricationDate,
          S.LotNumber,S.IdLpnCode,S.LpnTypeCode,S.IdLpnCodeContainer,S.LpnTypeCodeContainer,S.Price,S.IdReceipt,S.IdInboundOrder,
          S.InboundLineNumber,S.IdOutboundOrder,S.OutboundLineNumber,S.SealNumber,S.ReasonCode,S.HoldCode,L.PickingFlow,S.IdItem,
          L.IdLocCode,L.LocCode,L.RowLoc,L.ColumnLoc,L.LevelLoc,L.Aisle,L.Status,L.Description,L.SharedItem,L.OnlyLPN,L.PickingFlow,L.PutawayFlow
          ,L.CapacityLPN,L.CapacityUnit,L.Length,L.Width,L.Height,L.Volume,L.Weight,LT.IdLocType,LT.LocTypeCode,LT.LocTypeName,LT.Status
          ORDER BY Ruta ASC
        </sql>
        <parameters>
          <parameter type="Int">pickingFlow</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idCtgItem</parameter>
          <parameter type="Int">idWhs</parameter>
          <parameter type="DateTime">fifo</parameter>
          <parameter type="DateTime">fifoRange</parameter>
        </parameters>
      </query>
      <query code="GetItemParams">
        <sql>
          SELECT  IP.IdParameter,
          IP.ParameterCode + '#' + CAST(IP.IdWhs AS VARCHAR(3))+ '#' + CAST(IP.IdItem AS VARCHAR(10))AS ParameterKey,
          IP.ParameterValue,
          IP.IdModule,
          IP.Scope,
          IP.[Type]
          FROM v_Cfg_WmsItemParamInStock IP
          ORDER BY ParameterKey
        </sql>
        <parameters>
        </parameters>
      </query>
      <query code="GetLPNParams">
        <sql>
          SELECT IdParameter,
          ParameterCode + '#' + CAST(IdWhs AS VARCHAR(3))+ '#' + CAST(IdOwn AS VARCHAR(10))AS ParameterKey ,
          ParameterValue,
          IdModule,
          Scope,
          [Type]
          FROM v_Cfg_WmsLpnParamByOwnWhs
        </sql>
        <parameters>
        </parameters>
      </query>
      <query code="GetLocParams">
        <sql>
          SELECT IdParameter,
          ParameterCode + '#' + CAST(IdWhs AS VARCHAR(3))AS ParameterKey ,
          ParameterValue,
          IdModule,
          Scope,
          [Type]
          FROM v_Cfg_WmsLocParamByWhs
        </sql>
        <parameters>
        </parameters>
      </query>
      <query code="GetAllRulesCode">
        <sql>
          SELECT R.RuleCode, R.NameSpace
          FROM [Rule] R
          WHERE R.Status = 1
        </sql>
        <parameters>
        </parameters>
      </query>
      <query code="GetStockLocationPickingIsGreaterQtyAndLifo">
        <sql>
          SELECT TOP 1 ABS(L.PickingFlow - @pickingFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) as ItemQty ,
          S.IdCtgItem,
          S.IdItem,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          L.IdLocCode,
          L.LocCode,
          L.RowLoc,
          L.ColumnLoc,
          L.LevelLoc,
          L.Aisle,L.Status,
          L.Description,
          L.SharedItem,
          L.OnlyLPN,
          L.PickingFlow,
          L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          FROM Stock S
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          INNER JOIN Item I ON I.IdItem = S.IdItem

          -- Stock en Tareas Pendientes
          LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem AND S.IdLocCode = OLP.IdLocSourceProposal

          -- Stock en Tareas Simuladas
          LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem AND S.IdLocCode = OLPS.IdLocSourceProposal

          WHERE S.IdWhs = L.IdWhs
          AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt;= @ItemQty
          AND S.IdItem = @idItem
          AND S.IdCtgItem = @idCtgItem
          AND S.IdWhs = @idWhs
          AND L.LocTypeCode = 'PICK'
          AND L.Status = 1
          AND S.HoldCode IS NULL
          GROUP BY S.StockId,S.IdWhs, S.IdOwn,S.IdCtgItem,S.IdItem, S.Status,S.FifoDate,S.ExpirationDate,S.FabricationDate,
          S.LotNumber,S.IdLpnCode,S.LpnTypeCode,S.IdLpnCodeContainer,S.LpnTypeCodeContainer,S.Price,S.IdReceipt,S.IdInboundOrder,
          S.InboundLineNumber,S.IdOutboundOrder,S.OutboundLineNumber,S.SealNumber,S.ReasonCode,S.HoldCode,L.PickingFlow,S.IdItem,
          L.IdLocCode,L.LocCode,L.RowLoc,L.ColumnLoc,L.LevelLoc,L.Aisle,L.Status,L.Description,L.SharedItem,L.OnlyLPN,L.PickingFlow,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          ORDER BY  ItemQty DESC, Ruta ASC, S.FifoDate DESC
        </sql>
        <parameters>
          <parameter type="Int">pickingFlow</parameter>
          <parameter type="Decimal">itemQty</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idCtgItem</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPickingIsLessQtyAndLifo">
        <sql>
          SELECT TOP 1 ABS(L.PickingFlow - @pickingFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) as ItemQty ,
          S.IdCtgItem,
          S.IdItem,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          L.IdLocCode,
          L.LocCode,
          L.RowLoc,
          L.ColumnLoc,
          L.LevelLoc,
          L.Aisle,L.Status,
          L.Description,
          L.SharedItem,
          L.OnlyLPN,
          L.PickingFlow,
          L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          FROM Stock S
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          INNER JOIN Item I ON I.IdItem = S.IdItem

          -- Stock en Tareas Pendientes
          LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem AND S.IdLocCode = OLP.IdLocSourceProposal

          -- Stock en Tareas Simuladas
          LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem AND S.IdLocCode = OLPS.IdLocSourceProposal

          WHERE S.IdWhs = L.IdWhs
          AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt; 0
          AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &lt;= @itemQty
          AND S.IdItem = @idItem
          AND S.IdCtgItem = @idCtgItem
          AND S.IdWhs = @idWhs
          AND L.LocTypeCode = 'PICK'
          AND L.Status = 1
          AND S.HoldCode IS NULL
          GROUP BY S.StockId,S.IdWhs, S.IdOwn,S.IdCtgItem,S.IdItem, S.Status,S.FifoDate,S.ExpirationDate,S.FabricationDate,
          S.LotNumber,S.IdLpnCode,S.LpnTypeCode,S.IdLpnCodeContainer,S.LpnTypeCodeContainer,S.Price,S.IdReceipt,S.IdInboundOrder,
          S.InboundLineNumber,S.IdOutboundOrder,S.OutboundLineNumber,S.SealNumber,S.ReasonCode,S.HoldCode,L.PickingFlow,S.IdItem,
          L.IdLocCode,L.LocCode,L.RowLoc,L.ColumnLoc,L.LevelLoc,L.Aisle,L.Status,L.Description,L.SharedItem,L.OnlyLPN,L.PickingFlow,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          ORDER BY  ItemQty ASC, Ruta ASC, S.FifoDate DESC
        </sql>
        <parameters>
          <parameter type="Int">pickingFlow</parameter>
          <parameter type="Decimal">itemQty</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idCtgItem</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPickingLifoNotStrict">
        <sql>
          SELECT TOP 1 ABS(L.PickingFlow - @pickingFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) as ItemQty ,
          S.IdCtgItem,
          S.IdItem,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          L.IdLocCode,
          L.LocCode,
          L.RowLoc,
          L.ColumnLoc,
          L.LevelLoc,
          L.Aisle,L.Status,
          L.Description,
          L.SharedItem,
          L.OnlyLPN,
          L.PickingFlow,
          L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          FROM Stock S
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          INNER JOIN Item I ON I.IdItem = S.IdItem
          -- Stock en Tareas Pendientes
          LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem AND S.IdLocCode = OLP.IdLocSourceProposal

          -- Stock en Tareas Simuladas
          LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem AND S.IdLocCode = OLPS.IdLocSourceProposal

          WHERE S.IdWhs = L.IdWhs
          AND S.IdItem = @idItem
          AND S.IdCtgItem = @idCtgItem
          AND S.IdWhs = @idWhs
          AND S.FifoDate BETWEEN @fifo AND @fifoRange
          AND L.LocTypeCode = 'PICK'
          AND L.Status = 1
          AND S.HoldCode IS NULL
          GROUP BY S.StockId,S.IdWhs, S.IdOwn,S.IdCtgItem,S.IdItem, S.Status,S.FifoDate,S.ExpirationDate,S.FabricationDate,
          S.LotNumber,S.IdLpnCode,S.LpnTypeCode,S.IdLpnCodeContainer,S.LpnTypeCodeContainer,S.Price,S.IdReceipt,S.IdInboundOrder,
          S.InboundLineNumber,S.IdOutboundOrder,S.OutboundLineNumber,S.SealNumber,S.ReasonCode,S.HoldCode,L.PickingFlow,S.IdItem,
          L.IdLocCode,L.LocCode,L.RowLoc,L.ColumnLoc,L.LevelLoc,L.Aisle,L.Status,L.Description,L.SharedItem,L.OnlyLPN,L.PickingFlow,L.PutawayFlow
          ,L.CapacityLPN,L.CapacityUnit,L.Length,L.Width,L.Height,L.Volume,L.Weight,LT.IdLocType,LT.LocTypeCode,LT.LocTypeName,LT.Status
          ORDER BY Ruta ASC
        </sql>
        <parameters>
          <parameter type="Int">pickingFlow</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idCtgItem</parameter>
          <parameter type="Int">idWhs</parameter>
          <parameter type="DateTime">fifo</parameter>
          <parameter type="DateTime">fifoRange</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPickingLifoStrict">
        <sql>
          SELECT TOP 1 ABS(L.PickingFlow - @pickingFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) as ItemQty ,
          S.IdCtgItem,
          S.IdItem,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          L.IdLocCode,
          L.LocCode,
          L.RowLoc,
          L.ColumnLoc,
          L.LevelLoc,
          L.Aisle,L.Status,
          L.Description,
          L.SharedItem,
          L.OnlyLPN,
          L.PickingFlow,
          L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          FROM Stock S
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          INNER JOIN Item I ON I.IdItem = S.IdItem
          -- Stock en Tareas Pendientes
          LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem AND S.IdLocCode = OLP.IdLocSourceProposal

          -- Stock en Tareas Simuladas
          LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem AND S.IdLocCode = OLPS.IdLocSourceProposal

          WHERE S.IdWhs = L.IdWhs
          AND S.IdItem = @idItem
          AND S.IdCtgItem = @idCtgItem
          AND S.IdWhs = @idWhs
          AND S.FifoDate = @fifo
          AND L.LocTypeCode = 'PICK'
          AND L.Status = 1
          AND S.HoldCode IS NULL
          GROUP BY S.StockId,S.IdWhs, S.IdOwn,S.IdCtgItem,S.IdItem, S.Status,S.FifoDate,S.ExpirationDate,S.FabricationDate,
          S.LotNumber,S.IdLpnCode,S.LpnTypeCode,S.IdLpnCodeContainer,S.LpnTypeCodeContainer,S.Price,S.IdReceipt,S.IdInboundOrder,
          S.InboundLineNumber,S.IdOutboundOrder,S.OutboundLineNumber,S.SealNumber,S.ReasonCode,S.HoldCode,L.PickingFlow,S.IdItem,
          L.IdLocCode,L.LocCode,L.RowLoc,L.ColumnLoc,L.LevelLoc,L.Aisle,L.Status,L.Description,L.SharedItem,L.OnlyLPN,L.PickingFlow,L.PutawayFlow
          ,L.CapacityLPN,L.CapacityUnit,L.Length,L.Width,L.Height,L.Volume,L.Weight,LT.IdLocType,LT.LocTypeCode,LT.LocTypeName,LT.Status
          ORDER BY  Ruta ASC
        </sql>
        <parameters>
          <parameter type="Int">pickingFlow</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idCtgItem</parameter>
          <parameter type="Int">idWhs</parameter>
          <parameter type="DateTime">fifo</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPickingIsGreaterQtyAndFifo">
        <sql>
          SELECT TOP 1 ABS(L.PickingFlow - @pickingFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) as ItemQty ,
          S.IdCtgItem,
          S.IdItem,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          L.IdLocCode,
          L.LocCode,
          L.RowLoc,
          L.ColumnLoc,
          L.LevelLoc,
          L.Aisle,L.Status,
          L.Description,
          L.SharedItem,
          L.OnlyLPN,
          L.PickingFlow,
          L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          FROM Stock S
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          INNER JOIN Item I ON I.IdItem = S.IdItem
          -- Stock en Tareas Pendientes
          LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem AND S.IdLocCode = OLP.IdLocSourceProposal

          -- Stock en Tareas Simuladas
          LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem AND S.IdLocCode = OLPS.IdLocSourceProposal

          WHERE S.IdWhs = L.IdWhs
          AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt;= @itemQty
          AND S.IdItem = @idItem
          AND S.IdCtgItem = @idCtgItem
          AND S.IdWhs = @idWhs
          AND L.LocTypeCode = 'PICK'
          AND L.Status = 1
          AND S.HoldCode IS NULL
          GROUP BY S.StockId,S.IdWhs, S.IdOwn,S.IdCtgItem,S.IdItem, S.Status,S.FifoDate,S.ExpirationDate,S.FabricationDate,
          S.LotNumber,S.IdLpnCode,S.LpnTypeCode,S.IdLpnCodeContainer,S.LpnTypeCodeContainer,S.Price,S.IdReceipt,S.IdInboundOrder,
          S.InboundLineNumber,S.IdOutboundOrder,S.OutboundLineNumber,S.SealNumber,S.ReasonCode,S.HoldCode,L.PickingFlow,S.IdItem,
          L.IdLocCode,L.LocCode,L.RowLoc,L.ColumnLoc,L.LevelLoc,L.Aisle,L.Status,L.Description,L.SharedItem,L.OnlyLPN,L.PickingFlow,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          ORDER BY  ItemQty DESC, Ruta ASC, S.FifoDate ASC
        </sql>
        <parameters>
          <parameter type="Int">pickingFlow</parameter>
          <parameter type="Decimal">itemQty</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idCtgItem</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPickingIsLessQtyAndFifo">
        <sql>
          SELECT TOP 1 ABS(L.PickingFlow - @pickingFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) as ItemQty ,
          S.IdCtgItem,
          S.IdItem,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          L.IdLocCode,
          L.LocCode,
          L.RowLoc,
          L.ColumnLoc,
          L.LevelLoc,
          L.Aisle,L.Status,
          L.Description,
          L.SharedItem,
          L.OnlyLPN,
          L.PickingFlow,
          L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          FROM Stock S
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          INNER JOIN Item I ON I.IdItem = S.IdItem
          -- Stock en Tareas Pendientes
          LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem AND S.IdLocCode = OLP.IdLocSourceProposal

          -- Stock en Tareas Simuladas
          LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem AND S.IdLocCode = OLPS.IdLocSourceProposal

          WHERE S.IdWhs = L.IdWhs
          AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt; 0
          AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &lt;= @ItemQty
          AND S.IdItem = @idItem
          AND S.IdCtgItem = @idCtgItem
          AND S.IdWhs = @idWhs
          AND L.LocTypeCode = 'PICK'
          AND L.Status = 1
          AND S.HoldCode IS NULL
          GROUP BY S.StockId,S.IdWhs, S.IdOwn,S.IdCtgItem,S.IdItem, S.Status,S.FifoDate,S.ExpirationDate,S.FabricationDate,
          S.LotNumber,S.IdLpnCode,S.LpnTypeCode,S.IdLpnCodeContainer,S.LpnTypeCodeContainer,S.Price,S.IdReceipt,S.IdInboundOrder,
          S.InboundLineNumber,S.IdOutboundOrder,S.OutboundLineNumber,S.SealNumber,S.ReasonCode,S.HoldCode,L.PickingFlow,S.IdItem,
          L.IdLocCode,L.LocCode,L.RowLoc,L.ColumnLoc,L.LevelLoc,L.Aisle,L.Status,L.Description,L.SharedItem,L.OnlyLPN,L.PickingFlow,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          ORDER BY  ItemQty ASC, Ruta ASC, S.FifoDate ASC
        </sql>
        <parameters>
          <parameter type="Int">pickingFlow</parameter>
          <parameter type="Decimal">itemQty</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idCtgItem</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPickingIsGreaterQtyAndFefo">
        <sql>
          SELECT TOP 1 ABS(L.PickingFlow - @pickingFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) as ItemQty ,
          S.IdCtgItem,
          S.IdItem,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          L.IdLocCode,
          L.LocCode,
          L.RowLoc,
          L.ColumnLoc,
          L.LevelLoc,
          L.Aisle,L.Status,
          L.Description,
          L.SharedItem,
          L.OnlyLPN,
          L.PickingFlow,
          L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          FROM Stock S
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          INNER JOIN Item I ON I.IdItem = S.IdItem
          -- Stock en Tareas Pendientes
          LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem AND S.IdLocCode = OLP.IdLocSourceProposal

          -- Stock en Tareas Simuladas
          LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem AND S.IdLocCode = OLPS.IdLocSourceProposal

          WHERE S.IdWhs = L.IdWhs
          AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt;= @itemQty
          AND S.IdItem = @idItem
          AND S.IdCtgItem = @idCtgItem
          AND S.IdWhs = @idWhs
          AND L.LocTypeCode = 'PICK'
          AND L.Status = 1
          AND S.HoldCode IS NULL
          GROUP BY S.StockId,S.IdWhs, S.IdOwn,S.IdCtgItem,S.IdItem, S.Status,S.FifoDate,S.ExpirationDate,S.FabricationDate,
          S.LotNumber,S.IdLpnCode,S.LpnTypeCode,S.IdLpnCodeContainer,S.LpnTypeCodeContainer,S.Price,S.IdReceipt,S.IdInboundOrder,
          S.InboundLineNumber,S.IdOutboundOrder,S.OutboundLineNumber,S.SealNumber,S.ReasonCode,S.HoldCode,L.PickingFlow,S.IdItem,
          L.IdLocCode,L.LocCode,L.RowLoc,L.ColumnLoc,L.LevelLoc,L.Aisle,L.Status,L.Description,L.SharedItem,L.OnlyLPN,L.PickingFlow,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          ORDER BY  ItemQty DESC, Ruta ASC, S.ExpirationDate ASC
        </sql>
        <parameters>
          <parameter type="Int">pickingFlow</parameter>
          <parameter type="Decimal">itemQty</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idCtgItem</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPickingIsLessQtyAndFefo">
        <sql>
          SELECT TOP 1 ABS(L.PickingFlow - @pickingFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) as ItemQty ,
          S.IdCtgItem,
          S.IdItem,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          L.IdLocCode,
          L.LocCode,
          L.RowLoc,
          L.ColumnLoc,
          L.LevelLoc,
          L.Aisle,L.Status,
          L.Description,
          L.SharedItem,
          L.OnlyLPN,
          L.PickingFlow,
          L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          FROM Stock S
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          INNER JOIN Item I ON I.IdItem = S.IdItem

          -- Stock en Tareas Pendientes
          LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem AND S.IdLocCode = OLP.IdLocSourceProposal

          -- Stock en Tareas Simuladas
          LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem AND S.IdLocCode = OLPS.IdLocSourceProposal

          WHERE S.IdWhs = L.IdWhs
          AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt; 0
          AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &lt;= @itemQty

          AND S.IdItem = @idItem
          AND S.IdCtgItem = @idCtgItem
          AND S.IdWhs = @idWhs
          AND L.LocTypeCode = 'PICK'
          AND L.Status = 1
          AND S.HoldCode IS NULL
          GROUP BY S.StockId,S.IdWhs, S.IdOwn,S.IdCtgItem,S.IdItem, S.Status,S.FifoDate,S.ExpirationDate,S.FabricationDate,
          S.LotNumber,S.IdLpnCode,S.LpnTypeCode,S.IdLpnCodeContainer,S.LpnTypeCodeContainer,S.Price,S.IdReceipt,S.IdInboundOrder,
          S.InboundLineNumber,S.IdOutboundOrder,S.OutboundLineNumber,S.SealNumber,S.ReasonCode,S.HoldCode,L.PickingFlow,S.IdItem,
          L.IdLocCode,L.LocCode,L.RowLoc,L.ColumnLoc,L.LevelLoc,L.Aisle,L.Status,L.Description,L.SharedItem,L.OnlyLPN,L.PickingFlow,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          ORDER BY  ItemQty ASC, Ruta ASC, S.ExpirationDate ASC
        </sql>
        <parameters>
          <parameter type="Int">pickingFlow</parameter>
          <parameter type="Decimal">itemQty</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idCtgItem</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPutawayFefoNotStrict">
        <sql>
          SELECT TOP 1ABS(L.PutawayFlow - @putawayFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber
          ,L.IdLocCode
          ,L.LocCode
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          ,S.ExpirationDate
          FROM Location L
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          --INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
          --INNER JOIN WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
          INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
          WHERE L.IdWhs = 1
          AND L.LocTypeCode = 'PUT'
          AND S.IdItem = @idItem
          AND S.ExpirationDate BETWEEN @fefo AND @fefoRange
          AND S.IdCtgItem = @idCtgItem
          --AND WZI.IdItem = S.IdItem
          AND S.HoldCode IS NULL
          ORDER BY Ruta ASC
        </sql>
        <parameters>
          <parameter type="Int">putawayFlow</parameter>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="DateTime">fefo</parameter>
          <parameter type="DateTime">fefoRange</parameter>
          <parameter type="Int">idCtgItem</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationIsLessQtyPick">
        <sql>
          SELECT TOP 1 L.PickingFlow as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) as ItemQty ,
          S.IdCtgItem,
          S.IdItem,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          L.IdLocCode,
          L.LocCode,
          L.RowLoc,
          L.ColumnLoc,
          L.LevelLoc,
          L.Aisle,L.Status,
          L.Description,
          L.SharedItem,
          L.OnlyLPN,
          L.PickingFlow,
          L.PutawayFlow
          FROM Stock S
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          INNER JOIN Item I ON I.IdItem = S.IdItem

          -- Stock en Tareas Pendientes
          LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem AND S.IdLocCode = OLP.IdLocSourceProposal

          -- Stock en Tareas Simuladas
          LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem AND S.IdLocCode = OLPS.IdLocSourceProposal

          WHERE S.IdWhs = L.IdWhs
          AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt; 0
          AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &lt;= @ItemQty
          AND S.IdItem = @IdItem
          AND S.IdCtgItem = @idCtgItem
          AND S.IdWhs = @idWhs
          AND L.LocTypeCode = 'PICK'
          AND L.Status = 1
          AND S.HoldCode IS NULL
          GROUP BY S.StockId,S.IdWhs, S.IdOwn,S.IdCtgItem,S.IdItem, S.Status,S.FifoDate,S.ExpirationDate,S.FabricationDate,
          S.LotNumber,S.IdLpnCode,S.LpnTypeCode,S.IdLpnCodeContainer,S.LpnTypeCodeContainer,S.Price,S.IdReceipt,S.IdInboundOrder,
          S.InboundLineNumber,S.IdOutboundOrder,S.OutboundLineNumber,S.SealNumber,S.ReasonCode,S.HoldCode,L.PickingFlow,S.IdItem,
          L.IdLocCode,L.LocCode,L.RowLoc,L.ColumnLoc,L.LevelLoc,L.Aisle,L.Status,L.Description,L.SharedItem,L.OnlyLPN,L.PickingFlow,L.PutawayFlow
          ORDER BY  ItemQty ASC, Ruta ASC
        </sql>
        <parameters>
          <parameter type="Int">pickingFlow</parameter>
          <parameter type="Decimal">ItemQty</parameter>
          <parameter type="Int">IdItem</parameter>
          <parameter type="Int">idCtgItem</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationIsGreaterQtyPick">
        <sql>
          SELECT TOP 1 L.PickingFlow as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          SUM(S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) as ItemQty ,
          S.IdCtgItem,
          S.IdItem,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          L.IdLocCode,
          L.LocCode,
          L.RowLoc,
          L.ColumnLoc,
          L.LevelLoc,
          L.Aisle,L.Status,
          L.Description,
          L.SharedItem,
          L.OnlyLPN,
          L.PickingFlow,
          L.PutawayFlow
          FROM Stock S
          INNER JOIN Location L ON L.IdLocCode = S.IdLocCode
          INNER JOIN Item I ON I.IdItem = S.IdItem

          -- Stock en Tareas Pendientes
          LEFT OUTER JOIN v_Other_LocationPicking AS OLP ON S.IdItem = OLP.IdItem AND S.IdLocCode = OLP.IdLocSourceProposal

          -- Stock en Tareas Simuladas
          LEFT OUTER JOIN v_Other_LocationPicking_Sim AS OLPS ON S.IdItem = OLPS.IdItem AND S.IdLocCode = OLPS.IdLocSourceProposal

          WHERE S.IdWhs = L.IdWhs
          AND (S.ItemQty - COALESCE(OLP.ItemQty,0) - COALESCE(OLPS.ItemQty,0)) &gt;= @ItemQty
          AND S.IdItem = @IdItem
          AND S.IdCtgItem = @idCtgItem
          AND S.IdWhs = @idWhs
          AND L.LocTypeCode = 'PICK'
          AND L.Status = 1
          AND S.HoldCode IS NULL
          GROUP BY S.StockId,S.IdWhs, S.IdOwn,S.IdCtgItem,S.IdItem, S.Status,S.FifoDate,S.ExpirationDate,S.FabricationDate,
          S.LotNumber,S.IdLpnCode,S.LpnTypeCode,S.IdLpnCodeContainer,S.LpnTypeCodeContainer,S.Price,S.IdReceipt,S.IdInboundOrder,
          S.InboundLineNumber,S.IdOutboundOrder,S.OutboundLineNumber,S.SealNumber,S.ReasonCode,S.HoldCode,L.PickingFlow,S.IdItem,
          L.IdLocCode,L.LocCode,L.RowLoc,L.ColumnLoc,L.LevelLoc,L.Aisle,L.Status,L.Description,L.SharedItem,L.OnlyLPN,L.PickingFlow,L.PutawayFlow
          ORDER BY  ItemQty ASC, Ruta ASC
        </sql>
        <parameters>
          <parameter type="Int">pickingFlow</parameter>
          <parameter type="Decimal">itemQty</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idCtgItem</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>


      <!-- RULES Replenishment section  -->
      <query code="GetStockLocationPutawayIsLessQty">
        <sql>
          SELECT TOP 1 ABS(L.PutawayFlow - @putawayFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty - COALESCE(TD.ProposalQty,0) AS ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber
          ,L.IdLocCode
          ,L.LocCode
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          FROM Location L
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          --INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
          --INNER JOIN WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
          INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
            LEFT JOIN TaskDetail TD
            ON TD.IdLocSourceProposal = S.IdlocCode
              AND TD.IdItem = S.IdItem
              AND Td.IdCtgItem = S.IdCtgItem
              AND TD.IdLpnSourceProposal = S.IdLpnCode
              AND TD.IsComplete = 0
          WHERE L.IdWhs = @idWarehouse
          AND L.LocTypeCode = 'PUT'
          AND S.IdItem = @idItem
          AND S.ItemQty &lt;= @itemQty
          AND S.IdCtgItem = @idCtgItem
          --AND WZI.IdItem = S.IdItem
          AND S.HoldCode IS NULL
          ORDER BY  Ruta ASC,S.ItemQty ASC
        </sql>
        <parameters>
          <parameter type="Int">putawayFlow</parameter>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="Decimal">itemQty</parameter>
          <parameter type="Int">idCtgItem</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPutawayIsGreaterQty">
        <sql>
          SELECT TOP 1 ABS(L.PutawayFlow - @putawayFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty - COALESCE(TD.ProposalQty,0) AS ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber
          ,L.IdLocCode
          ,L.LocCode
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          FROM Location L
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          --INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
          --INNER JOIN WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
          INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
          LEFT JOIN TaskDetail TD
          ON TD.IdLocSourceProposal = S.IdlocCode
          AND TD.IdItem = S.IdItem
          AND Td.IdCtgItem = S.IdCtgItem
          AND TD.IsComplete = 0
          WHERE L.IdWhs = @idWarehouse
          AND L.LocTypeCode = 'PUT'
          AND S.IdItem = @idItem
          AND S.ItemQty >= @itemQty
          AND S.IdCtgItem = @idCtgItem
          --AND WZI.IdItem = S.IdItem
          AND S.HoldCode IS NULL
          ORDER BY  Ruta ASC,S.ItemQty DESC
        </sql>
        <parameters>
          <parameter type="Int">putawayFlow</parameter>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="Decimal">itemQty</parameter>
          <parameter type="Int">idCtgItem</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPutawayFefoStrict">
        <sql>
          SELECT TOP 1 ABS(L.PutawayFlow - @putawayFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty - COALESCE(TD.ProposalQty,0) AS ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber
          ,L.IdLocCode
          ,L.LocCode
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          ,S.ExpirationDate
          FROM Location L
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          --INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
          --INNER JOIN WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
          INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
            LEFT JOIN TaskDetail TD
              ON TD.IdLocSourceProposal = S.IdlocCode
              AND TD.IdItem = S.IdItem
              AND Td.IdCtgItem = S.IdCtgItem
              AND TD.IsComplete = 0
          WHERE L.IdWhs = @idWarehouse
          AND L.LocTypeCode = 'PUT'
          AND S.IdItem = @idItem
          AND S.ExpirationDate = @fefo
          AND S.IdCtgItem = @idCtgItem
          --AND WZI.IdItem = S.IdItem
          AND S.HoldCode IS NULL
          ORDER BY  Ruta ASC
        </sql>
        <parameters>
          <parameter type="Int">putawayFlow</parameter>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="DateTime">fefo</parameter>
          <parameter type="Int">idCtgItem</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPutawayIsLessQtyAndFefo">
        <sql>
          SELECT TOP 1 ABS(L.PutawayFlow - @putawayFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty - COALESCE(TD.ProposalQty,0) AS ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber
          ,L.IdLocCode
          ,L.LocCode
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          FROM Location L
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          --INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
          --INNER JOIN WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
          INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
            LEFT JOIN TaskDetail TD
            ON TD.IdLocSourceProposal = S.IdlocCode
              AND TD.IdItem = S.IdItem
              AND Td.IdCtgItem = S.IdCtgItem
              AND TD.IsComplete = 0
          WHERE L.IdWhs = @idWarehouse
          AND L.LocTypeCode = 'PUT'
          AND S.IdItem = @idItem
          AND S.ItemQty &lt;= @itemQty
          AND S.IdCtgItem = @idCtgItem
          --AND WZI.IdItem = S.IdItem
          AND S.HoldCode IS NULL
          ORDER BY  Ruta ASC,S.ItemQty ASC,S.ExpirationDate ASC
        </sql>
        <parameters>
          <parameter type="Int">putawayFlow</parameter>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="Decimal">itemQty</parameter>
          <parameter type="Int">idCtgItem</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPutawayIsGreaterQtyAndFefo">
        <sql>
          SELECT TOP 1 ABS(L.PutawayFlow - @putawayFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty - COALESCE(TD.ProposalQty,0) AS ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber
          ,L.IdLocCode
          ,L.LocCode
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          FROM Location L
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          --INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
          --INNER JOIN WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
          INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
            LEFT JOIN TaskDetail TD
              ON TD.IdLocSourceProposal = S.IdlocCode
                AND TD.IdItem = S.IdItem
                AND Td.IdCtgItem = S.IdCtgItem
                AND TD.IsComplete = 0
          WHERE L.IdWhs = @idWarehouse
          AND L.LocTypeCode = 'PUT'
          AND S.IdItem = @idItem
          AND S.ItemQty >= @itemQty
          AND S.IdCtgItem = @idCtgItem
          --AND WZI.IdItem = S.IdItem
          AND S.HoldCode IS NULL
          ORDER BY  Ruta ASC,S.ItemQty DESC, S.ExpirationDate ASC
        </sql>
        <parameters>
          <parameter type="Int">putawayFlow</parameter>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="Decimal">itemQty</parameter>
          <parameter type="Int">idCtgItem</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPutawayFifoStrict">
        <sql>
          SELECT TOP 1 ABS(L.PutawayFlow - @putawayFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty - COALESCE(TD.ProposalQty,0) AS ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber
          ,L.IdLocCode
          ,L.LocCode
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          ,S.ExpirationDate
          FROM Location L
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          --INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
          --INNER JOIN WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
          INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
          LEFT JOIN TaskDetail TD
            ON TD.IdLocSourceProposal = S.IdlocCode
              AND TD.IdItem = S.IdItem
              AND Td.IdCtgItem = S.IdCtgItem
              AND TD.IsComplete = 0
          WHERE L.IdWhs = @idWarehouse
          AND L.LocTypeCode = 'PUT'
          AND S.IdItem = @idItem
          AND S.FifoDate = @fifo
          AND S.IdCtgItem = @idCtgItem
          --AND WZI.IdItem = S.IdItem
          AND S.HoldCode IS NULL
          ORDER BY  Ruta ASC
        </sql>
        <parameters>
          <parameter type="Int">putawayFlow</parameter>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="DateTime">fifo</parameter>
          <parameter type="Int">idCtgItem</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPutawayFifoNotStrict">
        <sql>
          SELECT TOP 1ABS(L.PutawayFlow - @putawayFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty - COALESCE(TD.ProposalQty,0) AS ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber
          ,L.IdLocCode
          ,L.LocCode
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          ,S.ExpirationDate
          FROM Location L
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          --INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
          --INNER JOIN WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
          INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
          LEFT JOIN TaskDetail TD
              ON TD.IdLocSourceProposal = S.IdlocCode
              AND TD.IdItem = S.IdItem
              AND Td.IdCtgItem = S.IdCtgItem
              AND TD.IsComplete = 0
          WHERE L.IdWhs = 1
          AND L.LocTypeCode = 'PUT'
          AND S.IdItem = @idItem
          AND S.ExpirationDate BETWEEN @fifo AND @fifoRange
          AND S.IdCtgItem = @idCtgItem
          --AND WZI.IdItem = S.IdItem
          AND S.HoldCode IS NULL
          ORDER BY Ruta ASC
        </sql>
        <parameters>
          <parameter type="Int">putawayFlow</parameter>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="DateTime">fifo</parameter>
          <parameter type="DateTime">fifoRange</parameter>
          <parameter type="Int">idCtgItem</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPutawayIsLessQtyAndFifo">
        <sql>
          SELECT TOP 1 ABS(L.PutawayFlow - @putawayFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty - COALESCE(TD.ProposalQty,0) AS ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber
          ,L.IdLocCode
          ,L.LocCode
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          FROM Location L
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          --INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
          --INNER JOIN WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
          INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
            LEFT JOIN TaskDetail TD
              ON TD.IdLocSourceProposal = S.IdlocCode
              AND TD.IdItem = S.IdItem
              AND Td.IdCtgItem = S.IdCtgItem
              AND TD.IsComplete = 0
          WHERE L.IdWhs = @idWarehouse
          AND L.LocTypeCode = 'PUT'
          AND S.IdItem = @idItem
          AND S.ItemQty &lt;= @itemQty
          AND S.IdCtgItem = @idCtgItem
          --AND WZI.IdItem = S.IdItem
          AND S.HoldCode IS NULL
          ORDER BY  Ruta ASC,S.ItemQty ASC,S.FifoDate ASC
        </sql>
        <parameters>
          <parameter type="Int">putawayFlow</parameter>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="Decimal">itemQty</parameter>
          <parameter type="Int">idCtgItem</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPutawayIsGreaterQtyAndFifo">
        <sql>
          SELECT TOP 1 ABS(L.PutawayFlow - @putawayFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty - COALESCE(TD.ProposalQty,0) AS ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber
          ,L.IdLocCode
          ,L.LocCode
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          FROM Location L
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          --INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
          --INNER JOIN WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
          INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
            LEFT JOIN TaskDetail TD
            ON TD.IdLocSourceProposal = S.IdlocCode
              AND TD.IdItem = S.IdItem
              AND Td.IdCtgItem = S.IdCtgItem
              AND TD.IsComplete = 0
          WHERE L.IdWhs = @idWarehouse
          AND L.LocTypeCode = 'PUT'
          AND S.IdItem = @idItem
          AND S.ItemQty >= @itemQty
          AND S.IdCtgItem = @idCtgItem
          --AND WZI.IdItem = S.IdItem
          AND S.HoldCode IS NULL
          ORDER BY  Ruta ASC,S.ItemQty DESC, S.FifoDate ASC
        </sql>
        <parameters>
          <parameter type="Int">putawayFlow</parameter>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="Decimal">itemQty</parameter>
          <parameter type="Int">idCtgItem</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPutawayLifoStrict">
        <sql>
          SELECT TOP 1 ABS(L.PutawayFlow - @putawayFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty - COALESCE(TD.ProposalQty,0) AS ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber
          ,L.IdLocCode
          ,L.LocCode
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          ,S.ExpirationDate
          FROM Location L
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          --INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
          --INNER JOIN WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
          INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
            LEFT JOIN TaskDetail TD
              ON TD.IdLocSourceProposal = S.IdlocCode
              AND TD.IdItem = S.IdItem
              AND Td.IdCtgItem = S.IdCtgItem
              AND TD.IsComplete = 0
          WHERE L.IdWhs = @idWarehouse
          AND L.LocTypeCode = 'PUT'
          AND S.IdItem = @idItem
          AND S.FifoDate = @fifo
          AND S.IdCtgItem = @idCtgItem
          --AND WZI.IdItem = S.IdItem
          AND S.HoldCode IS NULL
          ORDER BY  Ruta ASC
        </sql>
        <parameters>
          <parameter type="Int">putawayFlow</parameter>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="DateTime">fifo</parameter>
          <parameter type="Int">idCtgItem</parameter>
        </parameters>
      </query>
      <query code="GetStockLocationPutawayLifoNotStrict">
        <sql>
          SELECT TOP 1ABS(L.PutawayFlow - @putawayFlow) as Ruta,
          S.StockId,
          S.IdWhs,
          S.IdOwn,
          S.IdLocCode,
          S.IdItem,
          S.IdCtgItem,
          S.ItemQty - COALESCE(TD.ProposalQty,0) AS ItemQty,
          S.TotalWeight,
          S.TotalVolumen,
          S.Status,
          S.FifoDate,
          S.ExpirationDate,
          S.FabricationDate,
          S.LotNumber,
          S.IdLpnCode,
          S.LpnTypeCode,
          S.IdLpnCodeContainer,
          S.LpnTypeCodeContainer,
          S.Price,
          S.IdReceipt,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber,
          S.SealNumber,
          S.ReasonCode,
          S.HoldCode,
          S.IdInboundOrder,
          S.InboundLineNumber,
          S.IdOutboundOrder,
          S.OutboundLineNumber
          ,L.IdLocCode
          ,L.LocCode
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          ,LT.IdLocType
          ,LT.LocTypeCode
          ,LT.LocTypeName
          ,LT.Status
          ,S.ExpirationDate
          FROM Location L
          INNER JOIN LocationType LT ON L.LocTypeCode = LT.LocTypeCode
          --INNER JOIN WorkZoneLocation WZL ON L.IdLocCode = WZL.IdLocCode
          --INNER JOIN WorkZoneItem WZI ON WZL.IdWorkZone = WZI.IdWorkZone
          INNER JOIN Stock S ON L.IdLocCode = S.IdLocCode
            LEFT JOIN TaskDetail TD
              ON TD.IdLocSourceProposal = S.IdlocCode
              AND TD.IdItem = S.IdItem
              AND Td.IdCtgItem = S.IdCtgItem
              AND TD.IsComplete = 0
          WHERE L.IdWhs = 1
          AND L.LocTypeCode = 'PUT'
          AND S.IdItem = @idItem
          AND S.ExpirationDate BETWEEN @fifo AND @fifoRange
          AND S.IdCtgItem = @idCtgItem
          --AND WZI.IdItem = S.IdItem
          AND S.HoldCode IS NULL
          ORDER BY Ruta ASC
        </sql>
        <parameters>
          <parameter type="Int">putawayFlow</parameter>
          <parameter type="Int">idWarehouse</parameter>
          <parameter type="Int">idItem</parameter>
          <parameter type="DateTime">fifo</parameter>
          <parameter type="DateTime">fifoRange</parameter>
          <parameter type="Int">idCtgItem</parameter>
        </parameters>
      </query>
      <!-- End RULES Replenishment section  -->
      
      
      <!-- End RULES section  -->

      <!-- MAP 2D section  -->

      <query code="Location_GetByHangarMap">
        <sql>
          SELECT
          L.IdLocCode
          , L.Status
          , L.LocTypeCode
          , L.LevelLoc
          , L.PositionX
          , L.PositionY
          , I.ItemCode
          , I.LongItemName
          , CI.CtgName
          , SUM(S.ItemQty) AS ItemQty
          , S.LotNumber
          , S.IdLpnCode

          FROM Location L
          LEFT JOIN Stock S on S.IdLocCode = L.IdLocCode
          LEFT JOIN Item I on S.IdItem = I.IdItem
          LEFT JOIN CategoryItem CI ON S.IdCtgItem = CI.IdCtgItem
          WHERE L.IdHng = @idHangar
          GROUP BY L.IdLocCode, L.Status, L.LocTypeCode, L.LevelLoc, L.PositionX, L.PositionY, I.ItemCode, I.LongItemName, CI.CtgName, S.LotNumber, S.IdLpnCode
          ORDER BY L.PositionX, L.PositionY, L.LevelLoc
        </sql>
        <parameters>
          <parameter type="Int">idHangar</parameter>
        </parameters>
      </query>

      <query code="Location_GetColumnByHangar">
        <sql>
          SELECT
          L.RowLoc
          , L.ColumnLoc
          , MAX(L.Length) Length
          , MAX(L.Width) Width
          , L.PositionX
          , L.PositionY
          , SUM(CASE WHEN S.IdLocCode IS NOT NULL THEN 1 ELSE 0 END) WithStock
          , COUNT(L.ColumnLoc) Count
          FROM dbo.Location L
          LEFT JOIN Stock S on S.IdLocCode = L.IdLocCode
          WHERE L.IdHng = @idHangar
          GROUP BY L.RowLoc, L.ColumnLoc, L.PositionX, L.PositionY
          ORDER BY L.PositionX, L.PositionY
        </sql>
        <parameters>
          <parameter type="Int">idHangar</parameter>
        </parameters>
      </query>

      <query code="MapLayout_FindAll">
        <sql>
          SELECT
          ML.IdMapLayout,
          ML.BackColor,
          ML.Margin,
          ML.HangarBackColor,
          ML.HangarBorderColor,
          ML.HangarBorder,
          ML.ColumnBackColorActive,
          ML.ColumnBackColorItem,
          ML.ColumnBorderColor,
          ML.ColumnBorderColorActive,
          ML.ColumnBorder,
          ML.ColumnDetailBackColor,
          ML.ColumnDetailBorderColor,
          ML.ColumnDetailBorder,
          ML.ColumnDetailPadding,
          ML.ColumnDetailMinHeight,
          ML.ColumnDetailMaxHeight,
          ML.ColumnDetailMinWidth,
          ML.ColumnDetailMaxWidth,
          ML.LocationDetailBorder,
          ML.LocationDetailBorderColor,
          ML.LocationDetailMaxHeight,
          ML.LocationDetailMinHeight,
          ML.LocationDetailPadding
          FROM MapLayout ML
        </sql>
        <parameters></parameters>
      </query>

      <query code="MapColor_FindAll">
        <sql>
          SELECT
          MC.idMapColor,
          MC.idMapLayout,
          MC.MapLevel,
          MC.StockColor,
          MC.LevelColor
          FROM MapColor MC
        </sql>
        <parameters></parameters>
      </query>

      <query code="MapColor_FindAll">
        <sql>
          SELECT
          MC.idMapColor,
          MC.idMapLayout,
          MC.MapLevel,
          MC.StockColor,
          MC.LevelColor
          FROM MapColor MC
        </sql>
        <parameters></parameters>
      </query>

      <query code="MapLayout_Update">
        <sql>
          UPDATE MapLayout SET
          BackColor = @backColor,
          Margin = @margin,
          HangarBackColor = @hangarBackColor,
          HangarBorderColor = @hangarBorderColor,
          HangarBorder = @hangarBorder,
          ColumnBorderColor = @columnBorderColor,
          ColumnBorder = @columnBorder,
          ColumnBackColorActive = @columnBackColorActive,
          ColumnBorderColorActive = @columnBorderColorActive,
          ColumnBackColorItem = @columnBackColorItem,
          ColumnDetailBackColor = @columnDetailBackColor,
          ColumnDetailBorder = @columnDetailBorder,
          ColumnDetailBorderColor = @columnDetailBorderColor,
          ColumnDetailPadding = @columnDetailPadding,
          ColumnDetailMaxHeight = @columnDetailMaxHeight,
          ColumnDetailMinHeight = @columnDetailMinHeight,
          ColumnDetailMaxWidth = @columnDetailMaxWidth,
          ColumnDetailMinWidth = @columnDetailMinWidth,
          LocationDetailBorder = @locationDetailBorder,
          LocationDetailBorderColor = @locationDetailBorderColor,
          LocationDetailPadding = @locationDetailPadding,
          LocationDetailMaxHeight = @locationDetailMaxHeight,
          LocationDetailMinHeight = @locationDetailMinHeight,

          DateModified = @dateModified,
          UserModified = @userModified
        </sql>
        <parameters>
          <parameter type="String">backColor</parameter>
          <parameter type="Int">margin</parameter>
          <parameter type="String">hangarBackColor</parameter>
          <parameter type="String">hangarBorderColor</parameter>
          <parameter type="Int">hangarBorder</parameter>
          <parameter type="String">columnBorderColor</parameter>
          <parameter type="Int">columnBorder</parameter>
          <parameter type="String">columnBackColorActive</parameter>
          <parameter type="String">columnBorderColorActive</parameter>
          <parameter type="String">columnBackColorItem</parameter>
          <parameter type="String">columnDetailBackColor</parameter>
          <parameter type="Int">columnDetailBorder</parameter>
          <parameter type="String">columnDetailBorderColor</parameter>
          <parameter type="Int">columnDetailPadding</parameter>
          <parameter type="Int">columnDetailMaxHeight</parameter>
          <parameter type="Int">columnDetailMinHeight</parameter>
          <parameter type="Int">columnDetailMaxWidth</parameter>
          <parameter type="Int">columnDetailMinWidth</parameter>
          <parameter type="Int">locationDetailBorder</parameter>
          <parameter type="String">locationDetailBorderColor</parameter>
          <parameter type="Int">locationDetailPadding</parameter>
          <parameter type="Int">locationDetailMaxHeight</parameter>
          <parameter type="Int">locationDetailMinHeight</parameter>

          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="MapColor_Update">
        <sql>
          UPDATE MapColor SET
          StockColor = @stockColor,
          LevelColor = @levelColor,

          DateModified = @dateModified,
          UserModified = @userModified

          WHERE MapLevel = @level
        </sql>
        <parameters>
          <parameter type="Int">level</parameter>
          <parameter type="String">stockColor</parameter>
          <parameter type="String">levelColor</parameter>

          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <!-- End MAP 2D section  -->

      <!-- LOCATION section  -->
      <query code="Location_FindAll">
        <sql>
          SELECT IdLocCode
          , W.IdWhs
          , W.WhsCode
          , W.ShortWhsName
          , L.LocCode
          , L.IdHng
          , H.HngCode
          , H.HngName
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.Aisle
          , L.Status
          , T.IdLocType
          , T.LocTypeCode
          , T.LocTypeName
          , L.Description
          , L.SharedItem
          , L.OnlyLPN
          , O.IdOwn
          , O.OwnCode
          , O.OwnName
          , O.TradeName
          , L.DedicatedOwner
          , L.PickingFlow
          , L.PutawayFlow
          , L.CapacityLPN
          , L.CapacityUnit
          , L.Length
          , L.Width
          , L.Height
          , L.Volume
          , L.Weight
          , L.PositionX
          , L.PositionY
          , L.PositionZ
          , L.HoldCode
          , R.ReasonName
          FROM Location L
          INNER JOIN Warehouse W ON L.IdWhs = W.IdWhs
          INNER JOIN LocationType T ON L.LocTypeCode = T.LocTypeCode
          INNER JOIN Hangar H ON L.IdHng = H.IdHng
          LEFT JOIN Owner O ON L.IdOwn = O.IdOwn
          LEFT JOIN Reason R ON L.HoldCode = R.ReasonCode
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLeft">IdLocCode</filter>
          <filter name="Name" type="textLeft">L.LocCode</filter>
          <filter name="Status" type="numericEqual">L.Status</filter>
          <filter name="Owner" type="numericIn" includeNulls="true">O.IdOwn</filter>
          <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
          <filter name="LocationType" type="textIn">T.LocTypeCode</filter>
          <filter name="Hangar" type="numericIn">L.IdHng</filter>
        </filters>
      </query>

      <query code="Location_Insert">
        <sql>
          INSERT INTO Location
          (IdLocCode
          , IdWhs
          , LocCode
          , IdHng
          , RowLoc
          , ColumnLoc
          , LevelLoc
          , Aisle
          , Status
          , LocTypeCode
          , Description
          , SharedItem
          , OnlyLPN
          , IdOwn
          , DedicatedOwner
          , PickingFlow
          , PutawayFlow
          , CapacityLPN
          , CapacityUnit
          , Length
          , Width
          , Height
          , Volume
          , Weight
          , PositionX
          , PositionY
          , PositionZ
          , HoldCode
          , DateCreated
          , UserCreated)

          VALUES
          (@IdLocCode
          , @IdWhs
          , @LocCode
          , @IdHng
          , @RowLoc
          , @ColumnLoc
          , @LevelLoc
          , @Aisle
          , @Status
          , @LocTypeCode
          , @Description
          , @SharedItem
          , @OnlyLPN
          , @IdOwn
          , @DedicatedOwner
          , @PickingFlow
          , @PutawayFlow
          , @CapacityLPN
          , @CapacityUnit
          , @Length
          , @Width
          , @Height
          , @Volume
          , @Weight
          , @PositionX
          , @PositionY
          , @PositionZ
          , @HoldCode
          , @dateCreated
          , @userCreated)
        </sql>
        <parameters>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">LocCode</parameter>
          <parameter type="Int">IdHng</parameter>
          <parameter type="Int">RowLoc</parameter>
          <parameter type="Int">ColumnLoc</parameter>
          <parameter type="Int">LevelLoc</parameter>
          <parameter type="String">Aisle</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">LocTypeCode</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="Boolean">SharedItem</parameter>
          <parameter type="Boolean">OnlyLPN</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Boolean">DedicatedOwner</parameter>
          <parameter type="Int">PickingFlow</parameter>
          <parameter type="Int">PutawayFlow</parameter>
          <parameter type="Int">CapacityLPN</parameter>
          <parameter type="Decimal">CapacityUnit</parameter>
          <parameter type="Decimal">Length</parameter>
          <parameter type="Decimal">Width</parameter>
          <parameter type="Decimal">Height</parameter>
          <parameter type="Decimal">Volume</parameter>
          <parameter type="Decimal">Weight</parameter>
          <parameter type="Int">PositionX</parameter>
          <parameter type="Int">PositionY</parameter>
          <parameter type="Int">PositionZ</parameter>
          <parameter type="String">HoldCode</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericIn">W.IdWhs</filter>
          <filter name="Owner" type="numericIn">O.IdOwn</filter>
        </filters>
      </query>

      <query code="Location_Update">
        <sql>
          UPDATE Location
          SET IdWhs = @IdWhs
          , LocCode = @LocCode
          , IdHng = @IdHng
          , RowLoc = @RowLoc
          , ColumnLoc = @ColumnLoc
          , LevelLoc = @LevelLoc
          , Aisle = @Aisle
          , Status = @Status
          , LocTypeCode = @LocTypeCode
          , Description = @Description
          , SharedItem = @SharedItem
          , OnlyLPN = @OnlyLPN
          , IdOwn = @IdOwn
          , DedicatedOwner = @DedicatedOwner
          , PickingFlow = @PickingFlow
          , PutawayFlow = @PutawayFlow
          , CapacityLPN = @CapacityLPN
          , CapacityUnit = @CapacityUnit
          , Length = @Length
          , Width = @Width
          , Height = @Height
          , Volume = @Volume
          , Weight = @Weight
          , PositionX = @PositionX
          , PositionY = @PositionY
          , PositionZ = @PositionZ
          , HoldCode = @HoldCode
          , DateModified = @dateModified
          , UserModified = @userModified
          WHERE IdLocCode = @IdLocCode
        </sql>
        <parameters>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="String">LocCode</parameter>
          <parameter type="Int">IdHng</parameter>
          <parameter type="Int">RowLoc</parameter>
          <parameter type="Int">ColumnLoc</parameter>
          <parameter type="Int">LevelLoc</parameter>
          <parameter type="String">Aisle</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">LocTypeCode</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="Boolean">SharedItem</parameter>
          <parameter type="Boolean">OnlyLPN</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Boolean">DedicatedOwner</parameter>
          <parameter type="Int">PickingFlow</parameter>
          <parameter type="Int">PutawayFlow</parameter>
          <parameter type="Int">CapacityLPN</parameter>
          <parameter type="Decimal">CapacityUnit</parameter>
          <parameter type="Decimal">Length</parameter>
          <parameter type="Decimal">Width</parameter>
          <parameter type="Decimal">Height</parameter>
          <parameter type="Decimal">Volume</parameter>
          <parameter type="Decimal">Weight</parameter>
          <parameter type="Int">PositionX</parameter>
          <parameter type="Int">PositionY</parameter>
          <parameter type="Int">PositionZ</parameter>
          <parameter type="String">HoldCode</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="Location_Delete">
        <sql>
          DELETE FROM WorkZoneLocation WHERE IdLocCode = @IdLocCode;

          DELETE FROM Location WHERE IdLocCode = @IdLocCode
        </sql>
        <parameters>
          <parameter type="String">IdLocCode</parameter>
        </parameters>
      </query>

      <query code="Location_InsertWorkZones">
        <sql>
          INSERT INTO WorkZoneLocation
          (IdWorkZone
          ,IdLocCode
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdWorkZone
          ,@IdLocCode
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="InventoryLocation_Insert">
        <sql>
          INSERT INTO InventoryLocation
          (IdInventory
          , IdLocCode
          , DateCreated
          , UserCreated)

          VALUES
          (@IdInventory
          , @IdLocCode
          , @DateCreated
          , @UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdInventory</parameter>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="InventoryLocation_Delete">
        <sql>
          DELETE InventoryLocation
          WHERE IdInventory = @IdInventory
          AND IdLocCode = @IdLocCode
        </sql>
        <parameters>
          <parameter type="Int">IdInventory</parameter>
          <parameter type="String">IdLocCode</parameter>
        </parameters>
      </query>

      <query code="GetStock_ByLocation">
        <sql>
          SELECT StockId
          FROM STOCK
          WHERE IdLocCode = @IdLocCode
        </sql>
        <parameters>
          <parameter type="String">IdLocCode</parameter>
        </parameters>
      </query>

      <query code="Location_GetByType">
        <sql>
          SELECT IdLocCode,LocCode,Status,LocTypeCode,RowLoc,ColumnLoc,
          LevelLoc,Aisle,Description,SharedItem,OnlyLPN,PickingFlow,PutawayFlow,IdWhs
          FROM dbo.Location l
          WHERE l.LocTypeCode = @locationType
          AND l.IdWhs = @idWhs
          AND l.Status = 1
        </sql>
        <parameters>
          <parameter type="String">locationType</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="Location_GetByHangar">
        <sql>
          SELECT
          L.IdLocCode
          , L.LocCode
          , L.Status
          , L.LocTypeCode
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.Aisle
          , L.Description
          , L.SharedItem
          , L.OnlyLPN
          , L.PickingFlow
          , L.PutawayFlow
          , L.IdWhs
          , L.Length
          , L.Width
          , L.Height
          , L.Volume
          , L.Weight
          , L.PositionX
          , L.PositionY
          , L.PositionZ
          FROM dbo.Location L
          WHERE L.IdHng = @idHangar
        </sql>
        <parameters>
          <parameter type="Int">idHangar</parameter>
        </parameters>
      </query>

      <query code="Location_GetByTypeAndWorkZone">
        <sql>
          SELECT l.IdLocCode,l.LocCode,l.Status,l.LocTypeCode,l.RowLoc,l.ColumnLoc,
          l.LevelLoc,l.Aisle,l.Description,l.SharedItem,l.OnlyLPN,l.PickingFlow,l.PutawayFlow,l.IdWhs
          FROM dbo.Location l
          INNER JOIN WorkZoneLocation wz ON l.IdLocCode = wz.IdLocCode
          WHERE l.LocTypeCode = @locationType
          AND l.IdWhs = @idWhs
          AND wz.IdWorkZone = @idWorkZone
          AND l.Status = 1
        </sql>
        <parameters>
          <parameter type="String">locationType</parameter>
          <parameter type="Int">idWhs</parameter>
          <parameter type="Int">idWorkZone</parameter>
        </parameters>
      </query>

      <query code="Location_GetForCicleCount">
        <sql>
          SELECT L.IdLocCode
          , L.LocCode
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , S.StockId
          , S.IdOwn
          , O.OwnName
          , S.IdItem
          , I.ItemCode
          , I.LongItemName
          , S.IdCtgItem
          , CI.CtgName
          , S.ItemQty
          , TPS.CountTaskSource
          , TPT.CountTaskTarget

          FROM Location L
          LEFT JOIN Stock S ON S.IdLocCode = L.IdLocCode
          LEFT JOIN [Owner] O ON O.IdOwn = S.IdOwn
          LEFT JOIN Item I ON I.IdItem = S.IdItem
          LEFT JOIN CategoryItem CI ON CI.IdCtgItem = S.IdCtgItem
          LEFT JOIN (SELECT IdLocSourceProposal, Count(*) AS CountTaskSource
          FROM TaskDetail
          WHERE Status = 1 AND IsComplete = 0
          GROUP BY IdLocSourceProposal) AS TPS
          ON TPS.IdLocSourceProposal = L.IdLocCode
          LEFT JOIN (SELECT IdLocTargetProposal, Count(*) AS CountTaskTarget
          FROM TaskDetail
          WHERE Status = 1
          AND IsComplete = 0
          GROUP BY IdLocTargetProposal) AS TPT
          ON TPT.IdLocTargetProposal = L.IdLocCode
          @SQLPart
          AND S.IdOwn IS NOT NULL
          ORDER BY L.IdLocCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericEqual">L.IdWhs</filter>
          <filter name="Code" type="textEqual">I.ItemCode</filter>
          <filter name="Name" type="textEqual">I.LongItemName</filter>
          <filter name="LocationRowRange" type="numericBetween">L.RowLoc</filter>
          <filter name="LocationColumnRange" type="numericBetween">L.ColumnLoc</filter>
          <filter name="LocationLevelRange" type="numericBetween">L.LevelLoc</filter>
          <filter name="LocationRange" type="textBetween">L.IdLocCode</filter>
          <filter name="LocationAisle" type="textEqual">L.Aisle</filter>
          <filter name="Location" type="textEqual">L.idLocCode</filter>
        </filters>
      </query>

      <query code="GetLocationByIdCode">
        <sql>
          SELECT 
          IdLocCode
          ,LocCode
          ,Status
          ,LocTypeCode
          ,RowLoc
          ,ColumnLoc
          ,LevelLoc
          ,Aisle
          ,Description
          ,SharedItem
          ,OnlyLPN
          ,PickingFlow
          ,PutawayFlow
          ,IdWhs
          ,IdOwn
          ,HoldCode
          FROM dbo.Location l
          WHERE l.IdLocCode = @IdLocCode
          AND l.IdWhs = @idWhs
        </sql>
        <parameters>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="GetLocationByCodeAndTypePick">
        <sql>
          SELECT
          IdLocCode
          ,LocCode
          ,Status
          ,LocTypeCode
          ,RowLoc
          ,ColumnLoc
          ,LevelLoc
          ,Aisle
          ,Description
          ,SharedItem
          ,OnlyLPN
          ,PickingFlow
          ,PutawayFlow
          ,IdWhs
          ,IdOwn
          FROM dbo.Location l
          WHERE l.LocCode = @locCode
          AND l.IdWhs = @idWhs
          AND LocTypeCode = 'PICK'
        </sql>
        <parameters>
          <parameter type="String">locCode</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="GetLocationByCode">
        <sql>
          SELECT IdLocCode,LocCode,Status,LocTypeCode,RowLoc,ColumnLoc,
          LevelLoc,Aisle,Description,SharedItem,OnlyLPN,PickingFlow,PutawayFlow,IdWhs
          FROM dbo.Location l
          WHERE l.LocCode = @locationCode
          AND l.IdWhs = @idWhs
        </sql>
        <parameters>
          <parameter type="String">locationCode</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="Location_GetByNotInWorkZoneSimulation">
        <sql>
          SELECT l.IdLocCode, l.LocCode, l.Status, l.LocTypeCode, l.RowLoc, l.ColumnLoc, l.LevelLoc, l.Aisle, l.Description, l.SharedItem, l.OnlyLPN, l.PickingFlow, l.PutawayFlow, l.IdWhs
          FROM TaskDetailSimulation td
          INNER JOIN TaskSimulation t ON td.IdTask = t.IdTask
          INNER JOIN Location l ON td.idLocSourceProposal = l.IdLocCode
          WHERE t.TaskTypeCode = @taskTypeCode
          AND t.IdUser = @idUser
          AND td.idLocSourceProposal NOT IN
          (SELECT IdLocCode FROM WorkZoneLocation)
        </sql>
        <parameters>
          <parameter type="String">taskTypeCode</parameter>
          <parameter type="Int">idUser</parameter>
        </parameters>
      </query>

      <query code="GetRelationLocationWorkZoneByCode">
        <sql>
          SELECT IdWorkZone
          , IdLocCode
          , DateCreated
          , UserCreated
          , DateModified
          , UserModified
          FROM WORKZONELOCATION
          WHERE IdLocCode = @IdLocCode
        </sql>
        <parameters>
          <parameter type="String">IdLocCode</parameter>
        </parameters>
      </query>

      <query code="FindAllRowLocation">
        <sql>
          SELECT DISTINCT RowLoc
          FROM LOCATION
          WHERE IdWhs = @IdWhs
          ORDER BY RowLoc ASC
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="GetLocationByWhsAndInventory">
        <sql>
          SELECT L.IdLocCode
          ,L.IdWhs
          ,L.LocCode
          ,L.IdHng
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.LocTypeCode
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.IdOwn
          ,L.DedicatedOwner
          ,L.PickingFlow
          ,L.PutawayFlow
          ,L.CapacityLPN
          ,L.CapacityUnit
          ,L.Length
          ,L.Width
          ,L.Height
          ,L.Volume
          ,L.Weight
          FROM Location L
          INNER JOIN InventoryDetail I ON L.IdLocCOde = I.IdLocCode
          INNER JOIN InventoryOrder O ON I.IdInventoryOrder = O.IdInventoryOrder

          WHERE O.IdWhs = @IdWhs
          AND O.InventoryNumber = @InventoryNumber
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">InventoryNumber</parameter>
        </parameters>
      </query>

      <query code="GetLocationByWhs">
        <sql>
          SELECT
          L.IdLocCode
          , L.LocCode
          , COALESCE(I.IdInventory, 0) IdInventory
          , L.Status
          , L.LocTypeCode
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.Aisle
          , L.Description
          , L.SharedItem
          , L.OnlyLPN
          , L.PickingFlow
          , L.PutawayFlow
          , L.IdWhs
          , L.Length
          , L.Width
          , L.Height
          , L.Volume
          , L.Weight
          , L.PositionX
          , L.PositionY
          , L.PositionZ
          FROM Location L LEFT JOIN InventoryLocation I ON L.IdLocCode = I.IdLocCode
          WHERE L.IdWhs = @IdWhs
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="GetLocationByWhsAndRow">
        <sql>
          SELECT
          L.IdLocCode
          , L.LocCode
          , L.Status
          , L.LocTypeCode
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.Aisle
          , L.Description
          , L.SharedItem
          , L.OnlyLPN
          , L.PickingFlow
          , L.PutawayFlow
          , L.IdWhs
          , L.Length
          , L.Width
          , L.Height
          , L.Volume
          , L.Weight
          , L.PositionX
          , L.PositionY
          , L.PositionZ
          FROM dbo.Location L
          WHERE L.IdWhs = @IdWhs
          AND RowLoc = @RowLoc
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">RowLoc</parameter>
        </parameters>
      </query>

      <query code="Location_GetByWorkZone">
        <sql>
          SELECT
          L.IdLocCode
          , W.IdWhs
          , W.WhsCode
          , W.ShortWhsName
          , L.LocCode
          , L.IdHng
          , H.HngCode
          , H.HngName
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.Aisle
          , L.Status
          , T.IdLocType
          , T.LocTypeCode
          , T.LocTypeName
          , L.Description
          , L.SharedItem
          , L.OnlyLPN
          , O.IdOwn
          , O.OwnCode
          , O.OwnName
          , O.TradeName
          , L.DedicatedOwner
          , L.PickingFlow
          , L.PutawayFlow
          , L.CapacityLPN
          , L.CapacityUnit
          , L.Length
          , L.Width
          , L.Height
          , L.Volume
          , L.Weight
          , L.PositionX
          , L.PositionY
          , L.PositionZ
          FROM Location L
          INNER JOIN Warehouse W ON L.IdWhs = W.IdWhs
          INNER JOIN LocationType T ON L.LocTypeCode = T.LocTypeCode
          INNER JOIN Hangar H ON L.IdHng = H.IdHng
          LEFT JOIN Owner O ON L.IdOwn = O.IdOwn
          INNER JOIN WorkZoneLocation WL ON WL.IdLocCode = L.IdLocCode
          WHERE WL.IdWorkZone = @idWorkZone
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idWorkZone</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLeft">L.IdLocCode</filter>
          <filter name="LocationType" type="textIn">T.LocTypeCode</filter>
          <filter name="Hangar" type="numericIn">L.IdHng</filter>
          <filter name="LocationRow" type="numericEqual">L.RowLoc</filter>
          <filter name="LocationColumn" type="numericEqual">L.ColumnLoc</filter>
          <filter name="LocationLevel" type="numericEqual">L.LevelLoc</filter>
          <filter name="LocationAisle" type="textEqual">L.Aisle</filter>
          <filter name="Warehouse" type="numericEqual">W.IdWhs</filter>
        </filters>
      </query>

      <!--query utilizada en el mantenedor de workzones-->
      <query code="Location_GetByHngLevelColRow">
        <sql>
          SELECT
          L.IdLocCode
          , W.IdWhs
          , W.WhsCode
          , W.ShortWhsName
          , L.LocCode
          , L.IdHng
          , H.HngCode
          , H.HngName
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.Aisle
          , L.Status
          , T.IdLocType
          , T.LocTypeCode
          , T.LocTypeName
          , L.Description
          , L.SharedItem
          , L.OnlyLPN
          , O.IdOwn
          , O.OwnCode
          , O.OwnName
          , O.TradeName
          , L.DedicatedOwner
          , L.PickingFlow
          , L.PutawayFlow
          , L.CapacityLPN
          , L.CapacityUnit
          , L.Length
          , L.Width
          , L.Height
          , L.Volume
          , L.Weight
          , L.PositionX
          , L.PositionY
          , L.PositionZ
          FROM Location L

          INNER JOIN WorkZoneLocation WL ON L.IdLocCode = WL.IdLocCode
          INNER JOIN Warehouse W ON L.IdWhs = W.IdWhs
          INNER JOIN LocationType T ON L.LocTypeCode = T.LocTypeCode
          INNER JOIN Hangar H ON L.IdHng = H.IdHng
          LEFT JOIN Owner O ON L.IdOwn = O.IdOwn

          WHERE LevelLoc &gt;= @LevelLocFrom AND LevelLoc &lt;= @LevelLocTo
          AND Rowloc &gt;= @RowlocFrom AND Rowloc &lt;= @RowlocTo
          AND ColumnLoc &gt;= @ColumnLocFrom AND ColumnLoc &lt;= @ColumnLocTo
          AND WL.IdWorkZone = @IdWorkZone
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
          <parameter type="Int">LevelLocFrom</parameter>
          <parameter type="Int">LevelLocTo</parameter>
          <parameter type="Int">RowlocFrom</parameter>
          <parameter type="Int">RowlocTo</parameter>
          <parameter type="Int">ColumnLocFrom</parameter>
          <parameter type="Int">ColumnLocTo</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLeft">WL.IdLocCode</filter>
          <filter name="LocationType" type="textIn">T.LocTypeCode</filter>
          <filter name="Hangar" type="numericIn">L.IdHng</filter>
          <filter name="Warehouse" type="numericEqual">W.IdWhs</filter>
        </filters>
      </query>

      <query code="Location_GetByHngLevelColRowNotInWorkZone">
        <sql>
          SELECT
          L.IdLocCode
          , W.IdWhs
          , W.WhsCode
          , W.ShortWhsName
          , L.LocCode
          , L.IdHng
          , H.HngCode
          , H.HngName
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.Aisle
          , L.Status
          , T.IdLocType
          , T.LocTypeCode
          , T.LocTypeName
          , L.Description
          , L.SharedItem
          , L.OnlyLPN
          , O.IdOwn
          , O.OwnCode
          , O.OwnName
          , O.TradeName
          , L.DedicatedOwner
          , L.PickingFlow
          , L.PutawayFlow
          , L.CapacityLPN
          , L.CapacityUnit
          , L.Length
          , L.Width
          , L.Height
          , L.Volume
          , L.Weight
          , L.PositionX
          , L.PositionY
          , L.PositionZ
          FROM Location L
          INNER JOIN Warehouse W ON L.IdWhs = W.IdWhs
          INNER JOIN LocationType T ON L.LocTypeCode = T.LocTypeCode
          INNER JOIN Hangar H ON L.IdHng = H.IdHng
          LEFT JOIN Owner O ON L.IdOwn = O.IdOwn
          WHERE L.IdLocCode NOT IN
          (SELECT IdLocCode FROM WorkZoneLocation WHERE IdWorkZone = @IdWorkZone)
          AND LevelLoc &gt;= @LevelLocFrom AND LevelLoc &lt;= @LevelLocTo
          AND Rowloc &gt;= @RowlocFrom AND Rowloc &lt;= @RowlocTo
          AND ColumnLoc &gt;= @ColumnLocFrom AND ColumnLoc &lt;= @ColumnLocTo
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">IdWorkZone</parameter>
          <parameter type="Int">LevelLocFrom</parameter>
          <parameter type="Int">LevelLocTo</parameter>
          <parameter type="Int">RowlocFrom</parameter>
          <parameter type="Int">RowlocTo</parameter>
          <parameter type="Int">ColumnLocFrom</parameter>
          <parameter type="Int">ColumnLocTo</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLeft">L.IdLocCode</filter>
          <filter name="LocationType" type="textIn">T.LocTypeCode</filter>
          <filter name="Hangar" type="numericIn">L.IdHng</filter>
          <filter name="Warehouse" type="numericEqual">W.IdWhs</filter>
        </filters>
      </query>

      <query code="Location_GetByNotInWorkZone">
        <sql>
          SELECT
          L.IdLocCode
          , W.IdWhs
          , W.WhsCode
          , W.ShortWhsName
          , L.LocCode
          , L.IdHng
          , H.HngCode
          , H.HngName
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.Aisle
          , L.Status
          , T.IdLocType
          , T.LocTypeCode
          , T.LocTypeName
          , L.Description
          , L.SharedItem
          , L.OnlyLPN
          , O.IdOwn
          , O.OwnCode
          , O.OwnName
          , O.TradeName
          , L.DedicatedOwner
          , L.PickingFlow
          , L.PutawayFlow
          , L.CapacityLPN
          , L.CapacityUnit
          , L.Length
          , L.Width
          , L.Height
          , L.Volume
          , L.Weight
          , L.PositionX
          , L.PositionY
          , L.PositionZ
          FROM Location L
          INNER JOIN Warehouse W ON L.IdWhs = W.IdWhs
          INNER JOIN LocationType T ON L.LocTypeCode = T.LocTypeCode
          INNER JOIN Hangar H ON L.IdHng = H.IdHng
          LEFT JOIN Owner O ON L.IdOwn = O.IdOwn
          WHERE L.IdLocCode NOT IN
          (SELECT IdLocCode FROM WorkZoneLocation WHERE IdWorkZone = @idWorkZone)
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="Int">idWorkZone</parameter>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLeft">L.IdLocCode</filter>
          <filter name="LocationType" type="textIn">T.LocTypeCode</filter>
          <filter name="Hangar" type="numericIn">L.IdHng</filter>
          <filter name="LocationRow" type="numericEqual">L.RowLoc</filter>
          <filter name="LocationColumn" type="numericEqual">L.ColumnLoc</filter>
          <filter name="LocationLevel" type="numericEqual">L.LevelLoc</filter>
          <filter name="LocationAisle" type="textEqual">L.Aisle</filter>
          <filter name="Warehouse" type="numericEqual">W.IdWhs</filter>
        </filters>
      </query>

      <query code="Location_GetCountByWorkZone">
        <sql>
          SELECT Count(IdLocCode) AS Count FROM WorkZoneLocation
          WHERE IdWorkZone = @idWorkZone
        </sql>
        <parameters>
          <parameter type="Int">idWorkZone</parameter>
        </parameters>
      </query>

      <query code="Location_GetCountByNotInWorkZone">
        <sql>
          SELECT Count(L.IdLocCode) AS Count FROM Location L
          WHERE L.IdLocCode NOT IN
          (SELECT IdLocCode FROM WorkZoneLocation WHERE IdWorkZone = @idWorkZone)
          AND L.IdWhs = @idWhs
        </sql>
        <parameters>
          <parameter type="Int">idWorkZone</parameter>
          <parameter type="Int">idWhs</parameter>
        </parameters>
      </query>

      <query code="Location_GetAllLevel">
        <sql>
          Select Levelloc
          FROM Location
          group by Levelloc
          Order By Levelloc asc
        </sql>
      </query>

      <query code="Location_GetAllRow">
        <sql>
          SELECT Rowloc
          FROM Location
          group  by Rowloc
          Order By Rowloc asc
        </sql>
      </query>

      <query code="Location_GetAllColumn">
        <sql>
          SELECT ColumnLoc
          FROM Location
          group  by ColumnLoc
          Order By ColumnLoc asc
        </sql>
      </query>

      <query code="Location_GetLevelByWhsHngAndLocType">
        <sql>
          Select Levelloc
          FROM Location
          WHERE	IdHng = @IdHng
          AND LocTypeCode = @LocTypeCode
          group by Levelloc
          Order By Levelloc asc
        </sql>
        <parameters>
          <parameter type="Int">IdHng</parameter>
          <parameter type="String">LocTypeCode</parameter>
        </parameters>
      </query>

      <query code="Location_GetRowByWhsHngAndLocType">
        <sql>
          SELECT Rowloc
          FROM Location
          WHERE	IdHng = @IdHng
          AND LocTypeCode = @LocTypeCode
          group  by Rowloc
          Order By Rowloc asc
        </sql>
        <parameters>
          <parameter type="Int">IdHng</parameter>
          <parameter type="String">LocTypeCode</parameter>
        </parameters>
      </query>

      <query code="Location_GetColumnByWhsHngAndLocType">
        <sql>
          SELECT ColumnLoc
          FROM Location
          WHERE	IdHng = @IdHng
          AND LocTypeCode = @LocTypeCode
          group  by ColumnLoc
          Order By ColumnLoc asc
        </sql>
        <parameters>
          <parameter type="Int">IdHng</parameter>
          <parameter type="String">LocTypeCode</parameter>
        </parameters>
      </query>

      <query code="Location_GetByLevelColumnAndRow">
        <sql>
          SELECT
          L.IdLocCode
          ,L.IdWhs
          ,L.LocCode
          ,L.IdHng
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.LocTypeCode
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.IdOwn
          FROM	Location L
          WHERE	IdWhs = @IdWhs
          AND		LevelLoc &gt;= @LevelLocFrom AND LevelLoc &lt;= @LevelLocTo
          AND		Rowloc &gt;= @RowlocFrom AND Rowloc &lt;= @RowlocTo
          AND		ColumnLoc &gt;= @ColumnLocFrom AND ColumnLoc &lt;= @ColumnLocTo
          AND L.IdLocCode NOT IN(SELECT IdLocCode
          FROM InventoryLocation
          WHERE IdInventory = @IdInventory)
        </sql>
        <parameters>
          <parameter type="Int">LevelLocFrom</parameter>
          <parameter type="Int">LevelLocTo</parameter>
          <parameter type="Int">RowlocFrom</parameter>
          <parameter type="Int">RowlocTo</parameter>
          <parameter type="Int">ColumnLocFrom</parameter>
          <parameter type="Int">ColumnLocTo</parameter>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdInventory</parameter>
        </parameters>
      </query>

      <query code="LocationInventory_GetByIdInventoryAndWhs">
        <sql>
          SELECT
          L.IdLocCode
          ,L.IdWhs
          ,L.LocCode
          ,L.IdHng
          ,L.RowLoc
          ,L.ColumnLoc
          ,L.LevelLoc
          ,L.Aisle
          ,L.Status
          ,L.LocTypeCode
          ,L.Description
          ,L.SharedItem
          ,L.OnlyLPN
          ,L.IdOwn
          FROM	Location L
          WHERE	IdWhs = @IdWhs
          AND L.IdLocCode IN(SELECT IdLocCode
          FROM InventoryLocation
          WHERE IdInventory = @IdInventory)
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
          <parameter type="Int">IdInventory</parameter>
        </parameters>
      </query>
      <!-- End LOCATION section  -->

      <!-- ITEM-LOCATION section  -->

      <query code="ItemLocation_MaxAnMinByLocation">
        <sql>
          SELECT L.IdWhs
          , W.WhsName
          , I.IdOwn
          , O.OwnName
          , I.IdItem
          , I.ItemCode
          , I.LongItemName
          , L.IdLocCode
          , L.LocCode
          , L.RowLoc
          , L.ColumnLoc
          , L.LevelLoc
          , L.IdLocCode
          , IL.ReOrderPoint
          , IL.ReOrderQty
          FROM ItemLocation IL
          INNER JOIN Item I ON I.IdItem = IL.IdItem
          INNER JOIN Location L ON L.IdLocCode = IL.IdLocCode
          INNER JOIN Owner O ON O.IdOwn = I.IdOwn
          INNER JOIN Warehouse W ON W.IdWhs = L.IdWhs
          @SQLPart
          ORDER BY I.IdOwn, I.ItemCode, L.IdLocCode;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder;
        </sql>
        <parameters>
          <parameter type="String">queryName</parameter>
          <parameter type="SQLPart">@SQLPart</parameter>
        </parameters>
        <filters>
          <filter name="Warehouse" type="numericEqual">W.IdWhs</filter>
          <filter name="Owner" type="numericIn">O.IdOwn</filter>
          <filter name="Item" type="textEqual">I.ItemCode</filter>
          <filter name="Name" type="textLike">I.LongItemName</filter>
          <filter name="LocationRowRange" type="numericBetween">L.RowLoc</filter>
          <filter name="LocationColumnRange" type="numericBetween">L.ColumnLoc</filter>
          <filter name="LocationLevelRange" type="numericBetween">L.LevelLoc</filter>
        </filters>
      </query>

      <query code="ItemLocation_GetByItemAndLoc">
        <sql>
          SELECT
          IdItem
          ,IdLocCode
          ,ReOrderPoint
          ,ReOrderQty
          FROM ItemLocation
          Where IdItem = @IdItem
          AND IdLocCode = @LocCode
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
          <parameter type="String">LocCode</parameter>
        </parameters>
      </query>

      <query code="Item_GetByItemCodeAndOwn">
        <sql>
          SELECT IdItem,ItemCode
          FROM ITEM
          WHERE ItemCode = @ItemCode
          AND IdOwn = @IdOwn
          AND [Status]= 1
        </sql>
        <parameters>
          <parameter type="String">ItemCode</parameter>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>

      <query code="ItemLocation_Insert">
        <sql>
          INSERT INTO ItemLocation
          (IdItem
          ,IdLocCode
          ,ReOrderPoint
          ,ReOrderQty
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdItem
          ,@IdLocCode
          ,@ReOrderPoint
          ,@ReOrderQty
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="Decimal">ReOrderPoint</parameter>
          <parameter type="Decimal">ReOrderQty</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>
      

      <query code="ItemLocation_Update">
        <sql>
          UPDATE ItemLocation
          SET ReOrderPoint = @ReOrderPoint
          ,ReOrderQty = @ReOrderQty
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdItem = @IdItem
          AND IdLocCode = @IdLocCode
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
          <parameter type="String">IdLocCode</parameter>
          <parameter type="Int">ReOrderPoint</parameter>
          <parameter type="Int">ReOrderQty</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query  code="ItemLocation_Delete">
        <sql>
          DELETE ItemLocation
          WHERE IdItem = @IdItem
          AND IdLocCode = @IdLocCode
        </sql>
        <parameters>
          <parameter type="Int">IdItem</parameter>
          <parameter type="String">IdLocCode</parameter>
        </parameters>
      </query>
      <!-- End ITEM-LOCATION section  -->
      
      

      <!-- LOCATION TYPE section begin-->
      <query code="LocationType_GetByWhs">
        <sql>
          SELECT DISTINCT LocTypeCode FROM Location
          WHERE (IdWhs = @IdWhs OR @IdWhs = -2)
        </sql>
        <parameters>
          <parameter type="Int">IdWhs</parameter>
        </parameters>
      </query>

      <query code="LocationType_FindAll">
        <sql>
          SELECT IdLocType
          ,LocTypeCode
          ,LocTypeName
          ,Status
          ,DateCreated
          ,UserCreated
          FROM LocationType
        </sql>
      </query>
      <!-- End LOCATION_TYPE section  -->


      <!-- Begin Carrier section  -->
      <query code="Carrier_FindAll">
        <sql>
          SELECT Ca.IdCarrier
          ,Ca.CarrierCode
          ,Ca.CarrierName
          ,Ca.Status
          ,Ca.ContactName
          ,Ca.OrganizationName
          ,Ca.Address1
          ,Ca.Address2
          ,Ca.IdCity
          ,Ci.CityName
          ,Ca.IdState
          ,St.StateName
          ,Ca.IdCountry
          ,Co.CountryName
          ,Ca.Phone
          ,Ca.Fax
          ,Ca.Email
          ,Ca.SpecialField1
          ,Ca.SpecialField2
          ,Ca.SpecialField3
          ,Ca.SpecialField4
          ,Ca.DateCreated
          ,Ca.UserCreated
          ,Ca.DateModified
          ,Ca.UserModified
          FROM Carrier Ca
          LEFT JOIN  Country Co ON Ca.IdCountry = Co.IdCountry
          LEFT JOIN State St ON Ca.IdState = St.IdState
          LEFT JOIN City Ci ON Ca.IdCity = Ci.IdCity
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">Ca.CarrierCode</filter>
          <filter name="Name" type="textLike">Ca.CarrierName</filter>
          <filter name="Status" type="numericEqual">Ca.Status</filter>
        </filters>
      </query>

      <query code="GetCarrierByCode">
        <sql>
          SELECT IdCarrier
          ,CarrierCode
          ,CarrierName
          ,Status
          ,ContactName
          ,OrganizationName
          ,Address1
          ,Address2
          ,IdCity
          ,IdState
          ,IdCountry
          ,Phone
          ,Fax
          ,Email
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM Carrier
          WHERE CarrierCode = @CarrierCode
        </sql>
        <parameters>
          <parameter type="String">CarrierCode</parameter>
        </parameters>
      </query>

      <query code="GetCarrierByName">
        <sql>
          SELECT IdCarrier
          ,CarrierCode
          ,CarrierName
          ,Status
          ,ContactName
          ,OrganizationName
          ,Address1
          ,Address2
          ,IdCity
          ,IdState
          ,IdCountry
          ,Phone
          ,Fax
          ,Email
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM Carrier
          WHERE CarrierCode LIKE @CarrierName
        </sql>
        <parameters>
          <parameter type="String">CarrierName</parameter>
        </parameters>
      </query>

      <query code="Carrier_Insert">
        <sql>
          INSERT INTO Carrier
          (IdCarrier
          ,CarrierCode
          ,CarrierName
          ,Status
          ,ContactName
          ,OrganizationName
          ,Address1
          ,Address2
          ,IdCity
          ,IdState
          ,IdCountry
          ,Phone
          ,Fax
          ,Email
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4
          ,DateCreated
          ,UserCreated)

          VALUES
          (@IdCarrier
          ,@CarrierCode
          ,@CarrierName
          ,@Status
          ,@ContactName
          ,@OrganizationName
          ,@Address1
          ,@Address2
          ,@IdCity
          ,@IdState
          ,@IdCountry
          ,@Phone
          ,@Fax
          ,@Email
          ,@SpecialField1
          ,@SpecialField2
          ,@SpecialField3
          ,@SpecialField4
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdCarrier</parameter>
          <parameter type="String">CarrierCode</parameter>
          <parameter type="String">CarrierName</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">ContactName</parameter>
          <parameter type="String">OrganizationName</parameter>
          <parameter type="String">Address1</parameter>
          <parameter type="String">Address2</parameter>
          <parameter type="Int">IdCity</parameter>
          <parameter type="Int">IdState</parameter>
          <parameter type="Int">IdCountry</parameter>
          <parameter type="String">Phone</parameter>
          <parameter type="String">Fax</parameter>
          <parameter type="String">Email</parameter>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="String">SpecialField3</parameter>
          <parameter type="String">SpecialField4</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="Carrier_Update">
        <sql>
          UPDATE Carrier
          SET CarrierCode = @CarrierCode
          ,CarrierName = @CarrierName
          ,Status = @Status
          ,ContactName = @ContactName
          ,OrganizationName = @OrganizationName
          ,Address1 = @Address1
          ,Address2 = @Address2
          ,IdCity = @IdCity
          ,IdState = @IdState
          ,IdCountry = @IdCountry
          ,Phone = @Phone
          ,Fax = @Fax
          ,Email = @Email
          ,SpecialField1 = @SpecialField1
          ,SpecialField2 = @SpecialField2
          ,SpecialField3 = @SpecialField3
          ,SpecialField4 = @SpecialField4
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdCarrier = @IdCarrier
        </sql>
        <parameters>
          <parameter type="Int">IdCarrier</parameter>
          <parameter type="String">CarrierCode</parameter>
          <parameter type="String">CarrierName</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">ContactName</parameter>
          <parameter type="String">OrganizationName</parameter>
          <parameter type="String">Address1</parameter>
          <parameter type="String">Address2</parameter>
          <parameter type="Int">IdCity</parameter>
          <parameter type="Int">IdState</parameter>
          <parameter type="Int">IdCountry</parameter>
          <parameter type="String">Phone</parameter>
          <parameter type="String">Fax</parameter>
          <parameter type="String">Email</parameter>
          <parameter type="String">SpecialField1</parameter>
          <parameter type="String">SpecialField2</parameter>
          <parameter type="String">SpecialField3</parameter>
          <parameter type="String">SpecialField4</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query  code="Carrier_Delete">
        <sql>
          DELETE Carrier
          WHERE IdCarrier = @IdCarrier
        </sql>
        <parameters>
          <parameter type="Int">IdCarrier</parameter>
        </parameters>
      </query>


      <!-- End Carrier section  -->

      <!-- Customer section Start -->
      <query code="Customer_FindAll">
        <sql>
          SELECT
          CU.IdCustomer
          ,CU.CustomerCode
          ,CU.IdOwn
          ,Own.OwnCode
          ,Own.OwnName
          ,Own.TradeName
          ,CU.CustomerName
          ,CU.Address1Fact
          ,CU.Address2Fact
          ,CU.IdCityFact
          ,CI.CityName CityNameFact
          ,CU.IdStateFact
          ,ST.StateName StateNameFact
          ,CU.IdCountryFact
          ,CO.CountryName CountryNameFact
          ,CU.PhoneFact
          ,CU.FaxFact
          ,CU.Address1Delv
          ,CU.Address2Delv
          ,CU.IdCityDelv
          ,CI1.CityName CityNameDelv
          ,CU.IdStateDelv
          ,ST1.StateName StateNameDelv
          ,CU.IdCountryDelv
          ,CO1.CountryName CountryNameDelv
          ,CU.PhoneDelv
          ,CU.FaxDelv
          ,CU.Email
          ,CU.Priority
          ,CU.TimeExpected
          ,CU.ExpirationDays
          ,CU.SpecialField1
          ,CU.SpecialField2
          ,CU.SpecialField3
          ,CU.SpecialField4
          ,CU.DateCreated
          ,CU.UserCreated
          ,CU.DateModified
          ,CU.UserModified
          FROM Customer CU
          LEFT JOIN Country CO ON CO.IdCountry = CU.IdCountryFact
          LEFT JOIN State ST ON ST.IdState = CU.IdStateFact
          LEFT JOIN City CI ON CI.IdCity = CU.IdCityFact
          LEFT JOIN Country CO1 ON CO1.IdCountry = CU.IdCountryDelv
          LEFT JOIN State ST1 ON ST1.IdState = CU.IdStateDelv
          LEFT JOIN City CI1 ON CI1.IdCity = CU.IdCityDelv
          LEFT JOIN Owner Own ON Own.IdOwn = CU.IdOwn
          @SQLPart;


          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">CU.CustomerCode</filter>
          <filter name="Name" type="textLike">CU.CustomerName</filter>
          <filter name="Owner" type="numericIn">CU.IdOwn</filter>
        </filters>
      </query>

      <query code="Customer_Insert">
        <sql>
          INSERT INTO Customer
          (IdCustomer
          ,CustomerCode
          ,IdOwn
          ,CustomerName
          ,Address1Fact
          ,Address2Fact
          ,IdCityFact
          ,IdStateFact
          ,IdCountryFact
          ,PhoneFact
          ,FaxFact
          ,Address1Delv
          ,Address2Delv
          ,IdCityDelv
          ,IdStateDelv
          ,IdCountryDelv
          ,PhoneDelv
          ,FaxDelv
          ,Email
          ,Priority
          ,TimeExpected
          ,ExpirationDays
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdCustomer
          ,@CustomerCode
          ,@IdOwn
          ,@CustomerName
          ,@Address1Fact
          ,@Address2Fact
          ,@CityIdFact
          ,@StateIdFact
          ,@CountryIdFact
          ,@PhoneFact
          ,@FaxFact
          ,@Address1Delv
          ,@Address2Delv
          ,@CityIdDelv
          ,@StateIdDelv
          ,@CountryIdDelv
          ,@PhoneDelv
          ,@FaxDelv
          ,@Email
          ,@Priority
          ,@TimeExpected
          ,@ExpirationDays
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdCustomer</parameter>
          <parameter type="String">CustomerCode</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">CustomerName</parameter>
          <parameter type="String">Address1Fact</parameter>
          <parameter type="String">Address2Fact</parameter>
          <parameter type="Int">CityIdFact</parameter>
          <parameter type="Int">StateIdFact</parameter>
          <parameter type="Int">CountryIdFact</parameter>
          <parameter type="String">PhoneFact</parameter>
          <parameter type="String">FaxFact</parameter>
          <parameter type="String">Address1Delv</parameter>
          <parameter type="String">Address2Delv</parameter>
          <parameter type="Int">CityIdDelv</parameter>
          <parameter type="Int">StateIdDelv</parameter>
          <parameter type="Int">CountryIdDelv</parameter>
          <parameter type="String">PhoneDelv</parameter>
          <parameter type="String">FaxDelv</parameter>
          <parameter type="String">Email</parameter>
          <parameter type="Int">Priority</parameter>
          <parameter type="Int">TimeExpected</parameter>
          <parameter type="Int">ExpirationDays</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="Customer_Update">
        <sql>
          UPDATE Customer
          SET IdOwn = @IdOwn
          ,CustomerCode = @CustomerCode
          ,CustomerName = @CustomerName
          ,Address1Fact = @Address1Fact
          ,Address2Fact = @Address2Fact
          ,IdCityFact = @CityIdFact
          ,IdStateFact = @StateIdFact
          ,IdCountryFact = @CountryIdFact
          ,PhoneFact = @PhoneFact
          ,FaxFact = @FaxFact
          ,Address1Delv = @Address1Delv
          ,Address2Delv = @Address2Delv
          ,IdCityDelv = @CityIdDelv
          ,IdStateDelv = @StateIdDelv
          ,IdCountryDelv = @CountryIdDelv
          ,PhoneDelv = @PhoneDelv
          ,FaxDelv = @FaxDelv
          ,Email = @Email
          ,Priority = @Priority
          ,TimeExpected = @TimeExpected
          ,ExpirationDays = @ExpirationDays
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdCustomer = @IdCustomer
        </sql>
        <parameters>
          <parameter type="Int">IdCustomer</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">CustomerCode</parameter>
          <parameter type="String">CustomerName</parameter>
          <parameter type="String">Address1Fact</parameter>
          <parameter type="String">Address2Fact</parameter>
          <parameter type="Int">CityIdFact</parameter>
          <parameter type="Int">StateIdFact</parameter>
          <parameter type="Int">CountryIdFact</parameter>
          <parameter type="String">PhoneFact</parameter>
          <parameter type="String">FaxFact</parameter>
          <parameter type="String">Address1Delv</parameter>
          <parameter type="String">Address2Delv</parameter>
          <parameter type="Int">CityIdDelv</parameter>
          <parameter type="Int">StateIdDelv</parameter>
          <parameter type="Int">CountryIdDelv</parameter>
          <parameter type="String">PhoneDelv</parameter>
          <parameter type="String">FaxDelv</parameter>
          <parameter type="String">Email</parameter>
          <parameter type="Int">Priority</parameter>
          <parameter type="Int">TimeExpected</parameter>
          <parameter type="Int">ExpirationDays</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query code="Customer_Delete">
        <sql>
          DELETE
          FROM Customer
          WHERE IdCustomer = @IdCustomer
        </sql>
        <parameters>
          <parameter type="Int">IdCustomer</parameter>
        </parameters>
      </query>

      <query code="GetCustomerByCode">
        <sql>
          SELECT IdCustomer
          FROM Customer
          WHERE CustomerCode = @Code;
        </sql>
        <parameters>
          <parameter type="String">Code</parameter>
        </parameters>
      </query>

      <query code="GetCustomerById">
        <sql>
          SELECT IdCustomer, CustomerCode
          FROM Customer
          WHERE IdCustomer = @Id;
        </sql>
        <parameters>
          <parameter type="Int">Id</parameter>
        </parameters>
      </query>

      <query code="GetAllCustomerByOwner">
        <sql>
          SELECT IdCustomer
          ,IdOwn
          ,CustomerCode
          ,CustomerName
          ,Address1Fact
          ,Address2Fact
          ,IdCityFact
          ,IdStateFact
          ,IdCountryFact
          ,PhoneFact
          ,FaxFact
          ,Address1Delv
          ,Address2Delv
          ,IdCityDelv
          ,IdStateDelv
          ,IdCountryDelv
          ,PhoneDelv
          ,FaxDelv
          ,Email
          ,Priority
          ,TimeExpected
          ,ExpirationDays
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM Customer 
          WHERE IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="FindCustomerByOwnerLikeCode">
        <sql>
          SELECT C.IdCustomer
          ,O.OwnCode
          ,C.IdOwn
          ,C.CustomerCode
          ,C.CustomerName
          ,C.Address1Fact
          ,C.Address2Fact
          ,C.IdCityFact
          ,C.IdStateFact
          ,C.IdCountryFact
          ,C.PhoneFact
          ,C.FaxFact
          ,C.Address1Delv
          ,C.Address2Delv
          ,C.IdCityDelv
          ,C.IdStateDelv
          ,C.IdCountryDelv
          ,C.PhoneDelv
          ,C.FaxDelv
          ,C.Email
          ,C.Priority
          ,C.TimeExpected
          ,C.ExpirationDays
          ,C.SpecialField1
          ,C.SpecialField2
          ,C.SpecialField3
          ,C.SpecialField4
          ,C.DateCreated
          ,C.UserCreated
          ,C.DateModified
          ,C.UserModified
          FROM Customer C
          INNER JOIN Owner O ON O.IdOwn = C.IdOwn
          WHERE OwnCode LIKE @codeOwn
        </sql>
        <parameters>
          <parameter type="String">codeOwn</parameter>
        </parameters>
      </query>

      <query code="FindCustomerByOwnerLikeName">
        <sql>
          SELECT C.IdCustomer
          ,O.OwnCode
          ,O.OwnName
          ,C.IdOwn
          ,C.CustomerCode
          ,C.CustomerName
          ,C.Address1Fact
          ,C.Address2Fact
          ,C.IdCityFact
          ,C.IdStateFact
          ,C.IdCountryFact
          ,C.PhoneFact
          ,C.FaxFact
          ,C.Address1Delv
          ,C.Address2Delv
          ,C.IdCityDelv
          ,C.IdStateDelv
          ,C.IdCountryDelv
          ,C.PhoneDelv
          ,C.FaxDelv
          ,C.Email
          ,C.Priority
          ,C.TimeExpected
          ,C.ExpirationDays
          ,C.SpecialField1
          ,C.SpecialField2
          ,C.SpecialField3
          ,C.SpecialField4
          ,C.DateCreated
          ,C.UserCreated
          ,C.DateModified
          ,C.UserModified
          FROM Customer C
          INNER JOIN Owner O ON O.IdOwn = C.IdOwn
          WHERE OwnName LIKE @nameOwn
        </sql>
        <parameters>
          <parameter type="String">nameOwn</parameter>
        </parameters>
      </query>

      <query code="GetCustomerByOwnerLikeCodeAndName">
        <sql>
          SELECT C.IdCustomer
          ,O.OwnCode
          ,O.OwnName
          ,C.IdOwn
          ,C.CustomerCode
          ,C.CustomerName
          ,C.Address1Fact
          ,C.Address2Fact
          ,C.IdCityFact
          ,C.IdStateFact
          ,C.IdCountryFact
          ,C.PhoneFact
          ,C.FaxFact
          ,C.Address1Delv
          ,C.Address2Delv
          ,C.IdCityDelv
          ,C.IdStateDelv
          ,C.IdCountryDelv
          ,C.PhoneDelv
          ,C.FaxDelv
          ,C.Email
          ,C.Priority
          ,C.TimeExpected
          ,C.ExpirationDays
          FROM Customer C
          INNER JOIN Owner O ON O.IdOwn = C.IdOwn
          WHERE C.CustomerCode LIKE @code
          AND C.CustomerName LIKE @name
          AND O.IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="String">name</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>
      
      
      <query code="Customer_GetByCodeAndOwner">
        <sql>
          SELECT C.IdCustomer
          ,O.OwnCode
          ,O.OwnName
          ,C.IdOwn
          ,C.CustomerCode
          ,C.CustomerName
          ,C.Address1Fact
          ,C.Address2Fact
          ,C.IdCityFact
          ,C.IdStateFact
          ,C.IdCountryFact
          ,C.PhoneFact
          ,C.FaxFact
          ,C.Address1Delv
          ,C.Address2Delv
          ,C.IdCityDelv
          ,C.IdStateDelv
          ,C.IdCountryDelv
          ,C.PhoneDelv
          ,C.FaxDelv
          ,C.Email
          ,C.Priority
          ,C.TimeExpected
          ,C.ExpirationDays
          FROM Customer
          WHERE C.CustomerCode = @code
          AND C.IdOwn = @idOwn
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>
      <!-- End Customer section  -->

      <!--Driver section-->
      <query code="Driver_FindAll">
        <sql>
          SELECT IdDriver
          ,DriverCode
          ,Status
          ,DriverName
          ,Phone
          ,MovilePhone
          ,Fax
          ,Email
          ,SpecialField1
          ,SpecialField2
          ,SpecialField3
          ,SpecialField4
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM Driver
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">DriverCode</filter>
          <filter name="Name" type="textLike">DriverName</filter>
          <filter name="Status" type="numericEqual">Status</filter>
        </filters>
      </query>

      <query code="Driver_Insert">
        <sql>
          INSERT INTO Driver
          (IdDriver
          ,DriverCode
          ,Status
          ,DriverName
          ,Phone
          ,MovilePhone
          ,Fax
          ,Email
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdDriver
          ,@DriverCode
          ,@Status
          ,@DriverName
          ,@Phone
          ,@MovilePhone
          ,@Fax
          ,@Email
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdDriver</parameter>
          <parameter type="String">DriverCode</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">DriverName</parameter>
          <parameter type="String">Phone</parameter>
          <parameter type="String">MovilePhone</parameter>
          <parameter type="String">Fax</parameter>
          <parameter type="String">Email</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>

      <query code="Driver_Update">
        <sql>
          UPDATE Driver
          SET IdDriver = @IdDriver
          ,DriverCode = @DriverCode
          ,Status = @Status
          ,DriverName = @DriverName
          ,Phone = @Phone
          ,MovilePhone = @MovilePhone
          ,Fax = @Fax
          ,Email = @Email
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdDriver = @IdDriver
        </sql>
        <parameters>
          <parameter type="Int">IdDriver</parameter>
          <parameter type="String">DriverCode</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">DriverName</parameter>
          <parameter type="String">Phone</parameter>
          <parameter type="String">MovilePhone</parameter>
          <parameter type="String">Fax</parameter>
          <parameter type="String">Email</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="Driver_Delete">
        <sql>
          DELETE
          FROM Driver
          WHERE IdDriver = @IdDriver
        </sql>
        <parameters>
          <parameter type="Int">IdCustomer</parameter>
        </parameters>
      </query>

      <query code="GetDriverByCode">
        <sql>
          SELECT IdDriver
          FROM Driver
          WHERE DriverCode = @DriverCode;
        </sql>
        <parameters>
          <parameter type="String">Code</parameter>
        </parameters>
      </query>
     

      <query code="GetDriverById">
        <sql>
          SELECT IdDriver, DriverCode
          FROM Driver
          WHERE IdDriver = @IdDriver
        </sql>
        <parameters>
          <parameter type="Int">IdDriver</parameter>
        </parameters>
      </query>

      <query code="GetDriverByName">
        <sql>
          SELECT IdDriver, DriverCode, DriverName
          FROM Driver
          WHERE DriverCode LIKE @DriverName;
        </sql>
        <parameters>
          <parameter type="String">Name</parameter>
        </parameters>
      </query>
      <!--End Driver section-->


      <!--Start LPN section-->
      <query code="Lpn_FindAll">
        <sql>
          SELECT LPN.IdLpnCode
          ,LPN.IdOwn
          ,Own.OwnCode
          ,Own.TradeName
          ,LPN.IdLpnType
          ,Typ.LpnTypeCode
          ,Typ.LpnTypeName
          ,LPN.Status
          ,LPN.FifoDate
          ,LPN.WeightEmpty
          ,LPN.WeightTotal
          ,LPN.IsClosed
          ,LPN.SealNumber
          ,LPN.DateCreated
          ,LPN.UserCreated
          ,LPN.DateModified
          ,LPN.UserModified
          FROM LPN
          LEFT JOIN Owner Own ON LPN.IdOwn = Own.IdOwn
          INNER JOIN LpnType Typ ON LPN.IdLpnType = Typ.IdLpnType
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">LPN.IdLpnCode</filter>
          <filter name="Owner" type="numericIn">LPN.IdOwn</filter>
          <filter name="LpnType" type="numericIn">LPN.IdLpnType</filter>
        </filters>
      </query>

      <query code="InsertLpn">
        <sql>
          INSERT INTO LPN
          (IdLpnCode
          ,IdOwn
          ,IdLpnType
          ,Status
          ,FifoDate
          ,IsParent
          ,LpnParent
          ,WeightEmpty
          ,WeightTotal
          ,IsClosed
          ,SealNumber
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdLpnCode
          ,@IdOwn
          ,@IdLpnType
          ,@Status
          ,@FifoDate
          ,@IsParent
          ,@LpnParent
          ,@WeightEmpty
          ,@WeightTotal
          ,@IsClosed
          ,@SealNumber
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="String">IdLpnCode</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdLpnType</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="DateTime">FifoDate</parameter>
          <parameter type="Boolean">IsParent</parameter>
          <parameter type="String">LpnParent</parameter>
          <parameter type="Decimal">WeightEmpty</parameter>
          <parameter type="Decimal">WeightTotal</parameter>
          <parameter type="Int">IsClosed</parameter>
          <parameter type="String">SealNumber</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="UpdateLPN">
        <sql>
          UPDATE LPN
          SET IdOwn = @IdOwn
          ,IdLpnType = @IdLpnType
          ,Status = @Status
          ,FifoDate = @FifoDate
          ,IsParent = @IsParent
          ,LpnParent = @LpnParent
          ,WeightEmpty = @WeightEmpty
          ,WeightTotal = @WeightTotal
          ,IsClosed = @IsClosed
          ,SealNumber = @SealNumber
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdLpnCode = @IdLpnCode
        </sql>
        <parameters>
          <parameter type="String">IdLpnCode</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="Int">IdLpnType</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="DateTime">FifoDate</parameter>
          <parameter type="Boolean">IsParent</parameter>
          <parameter type="String">LpnParent</parameter>
          <parameter type="Decimal">WeightEmpty</parameter>
          <parameter type="Decimal">WeightTotal</parameter>
          <parameter type="Int">IsClosed</parameter>
          <parameter type="String">SealNumber</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query code="Lpn_Delete">
        <sql>
          DELETE LPN
          WHERE IdLpnCode = @IdLpnCode
        </sql>
        <parameters>
          <parameter type="String">IdLpnCode</parameter>
        </parameters>
      </query>

      <query code="GetLpn_ByIdCode">
        <sql>
          SELECT LPN.IdLpnCode
          ,LPN.IdOwn
          ,Own.OwnCode
          ,Own.TradeName
          ,LPN.IdLpnType
          ,Typ.LpnTypeCode
          ,Typ.LpnTypeName
          ,LPN.Status
          ,LPN.FifoDate
          ,LPN.WeightEmpty
          ,LPN.WeightTotal
          ,LPN.IsClosed
          ,LPN.SealNumber
          ,LPN.DateCreated
          ,LPN.UserCreated
          ,LPN.DateModified
          ,LPN.UserModified
          FROM LPN
          INNER JOIN Owner Own ON LPN.IdOwn = Own.IdOwn
          INNER JOIN LpnType Typ ON LPN.IdLpnType = Typ.IdLpnType
          WHERE IdLpnCode = @IdLpnCode;
        </sql>
        <parameters>
          <parameter type="String">IdLpnCode</parameter>
        </parameters>
      </query>

      <query code="GetLPNTypeById">
        <sql>
          SELECT IdLpnType
          ,LpnTypeCode
          ,IdOwn
          ,LpnTypeName
          ,Tare
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NextAvailableNumber
          ,WeightCapacity
          ,VolumeCapacity
          ,Status
          FROM LPNType
          WHERE IdLpnType = @idLpnType
        </sql>
        <parameters>
          <parameter type="Int">idLpnType</parameter>
        </parameters>
      </query>
      <!--End LPN section-->

      <!--End Driver section-->


      <!--Start LPN_TYPE section-->
      <query code="LpnType_FindAll">
        <sql>
          SELECT LT.IdLpnType
          ,LT.LpnTypeCode
          ,LT.IdOwn
          ,Own.OwnCode
          ,Own.TradeName
          ,LT.LpnTypeName
          ,LT.Tare
          ,LT.Volume
          ,LT.Length
          ,LT.Width
          ,LT.Height
          ,LT.NextAvailableNumber
          ,LT.WeightCapacity
          ,LT.VolumeCapacity
          ,LT.Status
          ,LT.SpecialField1
          ,LT.SpecialField2
          ,LT.SpecialField3
          ,LT.SpecialField4
          ,LT.DateCreated
          ,LT.UserCreated
          ,LT.DateModified
          ,LT.UserModified
          FROM LPNType LT
          LEFT JOIN Owner Own ON LT.IdOwn = Own.IdOwn
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">LT.LpnTypeCode</filter>
          <filter name="Name" type="textLike">LT.LpnTypeName</filter>
          <filter name="Owner" type="numericIn">LT.IdOwn</filter>
          <filter name ="Status" type="numericEqual">LT.Status</filter>
        </filters>
      </query>

      <query code="GetLpnTypeByCode">
        <sql>
          SELECT LT.IdLpnType
          ,LT.LpnTypeCode
          ,LT.IdOwn
          ,Own.OwnCode
          ,Own.TradeName
          ,LT.LpnTypeName
          ,LT.Tare
          ,LT.Volume
          ,LT.Length
          ,LT.Width
          ,LT.Height
          ,LT.NextAvailableNumber
          ,LT.WeightCapacity
          ,LT.VolumeCapacity
          ,LT.Status
          ,LT.SpecialField1
          ,LT.SpecialField2
          ,LT.SpecialField3
          ,LT.SpecialField4
          ,LT.DateCreated
          ,LT.UserCreated
          ,LT.DateModified
          ,LT.UserModified
          FROM LPNType LT
          LEFT JOIN Owner Own ON LT.IdOwn = Own.IdOwn
          WHERE LpnTypeCode = @Code;
        </sql>
        <parameters>
          <parameter type="String">Code</parameter>
        </parameters>
      </query>

      <query code="LpnType_GetByCodeAndOwner">
        <sql>
          SELECT LT.IdLpnType
          ,LT.LpnTypeCode
          ,LT.IdOwn
          ,Own.OwnCode
          ,Own.TradeName
          ,LT.LpnTypeName
          ,LT.Tare
          ,LT.Volume
          ,LT.Length
          ,LT.Width
          ,LT.Height
          ,LT.NextAvailableNumber
          ,LT.WeightCapacity
          ,LT.VolumeCapacity
          ,LT.Status
          ,LT.SpecialField1
          ,LT.SpecialField2
          ,LT.SpecialField3
          ,LT.SpecialField4
          ,LT.DateCreated
          ,LT.UserCreated
          ,LT.DateModified
          ,LT.UserModified
          FROM LPNType LT
          LEFT JOIN Owner Own ON LT.IdOwn = Own.IdOwn
          WHERE LpnTypeCode = @code
          AND LT.IdOwn = @idOwn;
        </sql>
        <parameters>
          <parameter type="String">code</parameter>
          <parameter type="Int">idOwn</parameter>
        </parameters>
      </query>

      <query code="LpnType_Insert">
        <sql>
          INSERT INTO LPNType
          (IdLpnType
          ,LpnTypeCode
          ,IdOwn
          ,LpnTypeName
          ,Tare
          ,Volume
          ,Length
          ,Width
          ,Height
          ,NextAvailableNumber
          ,WeightCapacity
          ,VolumeCapacity
          ,Status
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdLpnType
          ,@LpnTypeCode
          ,@IdOwn
          ,@LpnTypeName
          ,@Tare
          ,@Volume
          ,@Length
          ,@Width
          ,@Height
          ,@NextAvailableNumber
          ,@WeightCapacity
          ,@VolumeCapacity
          ,@Status
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdLpnType</parameter>
          <parameter type="String">LpnTypeCode</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">LpnTypeName</parameter>
          <parameter type="Decimal">Tare</parameter>
          <parameter type="Decimal">Volume</parameter>
          <parameter type="Decimal">Length</parameter>
          <parameter type="Decimal">Width</parameter>
          <parameter type="Decimal">Height</parameter>
          <parameter type="Int">NextAvailableNumber</parameter>
          <parameter type="Decimal">WeightCapacity</parameter>
          <parameter type="Decimal">VolumeCapacity</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>

      <query code="LpnType_Update">
        <sql>
          UPDATE LPNType
          SET LpnTypeCode = @LpnTypeCode
          ,IdOwn = @IdOwn
          ,LpnTypeName = @LpnTypeName
          ,Tare = @Tare
          ,Volume = @Volume
          ,Length = @Length
          ,Width = @Width
          ,Height = @Height
          ,NextAvailableNumber = @NextAvailableNumber
          ,WeightCapacity = @WeightCapacity
          ,VolumeCapacity = @VolumeCapacity
          ,Status = @Status
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdLpnType = @IdLpnType
        </sql>
        <parameters>
          <parameter type="Int">IdLpnType</parameter>
          <parameter type="String">LpnTypeCode</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">LpnTypeName</parameter>
          <parameter type="Decimal">Tare</parameter>
          <parameter type="Decimal">Volume</parameter>
          <parameter type="Decimal">Length</parameter>
          <parameter type="Decimal">Width</parameter>
          <parameter type="Decimal">Height</parameter>
          <parameter type="Int">NextAvailableNumber</parameter>
          <parameter type="Decimal">WeightCapacity</parameter>
          <parameter type="Decimal">VolumeCapacity</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query code="LpnType_Delete">
        <sql>
          DELETE FROM LPNType
          WHERE IdLpnType = @IdLpnType
        </sql>
        <parameters>
          <parameter type="Int">IdLpnCode</parameter>
        </parameters>
      </query>
      <!--END LPN_TYPE section-->


      <!--Begin Reason section-->
      <query code="Reason_FindAll">
        <sql>
          SELECT IdReason
          ,ReasonCode
          ,ReasonName
          ,TypeInOut
          ,CanBlock
          ,CanCount
          ,Status
          FROM Reason
          @SQLPart;
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">ReasonCode</filter>
          <filter name="Name" type="textLike">ReasonName</filter>
          <filter name="Status" type="numericEqual">Status</filter>
        </filters>
      </query>


      <query code="Reason_GetByCode">
        <sql>
          SELECT IdReason
          ,ReasonCode
          ,ReasonName
          ,TypeInOut
          ,CanBlock
          ,CanCount
          ,Status
          FROM Reason
          WHERE ReasonCode = @Code;
        </sql>
        <parameters>
          <parameter type="String">Code</parameter>
        </parameters>
      </query>

      <query code="Reason_MovementGetByCode">
        <sql>
          SELECT ReasonCode
          FROM MovementLog
          WHERE ReasonCode = @Code;
        </sql>
        <parameters>
          <parameter type="String">Code</parameter>
        </parameters>
      </query>

      <query code="Reason_StockGetByCode">
        <sql>
          SELECT ReasonCode
          FROM Stock
          WHERE ReasonCode = @Code;
        </sql>
        <parameters>
          <parameter type="String">Code</parameter>
        </parameters>
      </query>


      <query code="Reason_Insert">
        <sql>
          INSERT INTO Reason
          (IdReason
          ,ReasonCode
          ,ReasonName
          ,TypeInOut
          ,CanBlock
          ,CanCount
          ,Status
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdReason
          ,@ReasonCode
          ,@ReasonName
          ,@TypeInOut
          ,@CanBlock
          ,@CanCount
          ,@Status
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdReason</parameter>
          <parameter type="String">ReasonCode</parameter>
          <parameter type="String">ReasonName</parameter>
          <parameter type="Int">TypeInOut</parameter>
          <parameter type="Int">CanBlock</parameter>
          <parameter type="Int">CanCount</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>


      <query code="Reason_Update">
        <sql>
          UPDATE Reason
          SET ReasonCode = @ReasonCode
          ,ReasonName = @ReasonName
          ,TypeInOut = @TypeInOut
          ,CanBlock = @CanBlock
          ,CanCount = @CanCount
          ,Status = @Status
          ,DateModified = @dateModified
          ,UserModified = @userModified
          WHERE IdReason = @IdReason
        </sql>
        <parameters>
          <parameter type="Int">IdReason</parameter>
          <parameter type="String">ReasonCode</parameter>
          <parameter type="String">ReasonName</parameter>
          <parameter type="Int">TypeInOut</parameter>
          <parameter type="Int">CanBlock</parameter>
          <parameter type="Int">CanCount</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="DateTime">dateModified</parameter>
          <parameter type="String">userModified</parameter>
        </parameters>
      </query>

      <query code="Reason_Delete">
        <sql>
          DELETE FROM Reason
          WHERE IdReason = @IdReason
        </sql>
        <parameters>
          <parameter type="Int">IdReason</parameter>
        </parameters>
      </query>
      <!--END Reason section-->

      <!--Begin ReferenceDocType section-->
      <query code="ReferenceDocType_FindAll">
        <sql>
          SELECT IdReferenceDocType
          ,ReferenceDocTypeCode
          ,ReferenceDocTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM ReferenceDocType
          @SQLPart;


          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">ReferenceDocTypeCode</filter>
          <filter name="Name" type="textLike">ReferenceDocTypeName</filter>
        </filters>
      </query>
      <query code="ReferenceDocType_GetByCode">
        <sql>
          SELECT IdReferenceDocType
          ,ReferenceDocTypeCode
          ,ReferenceDocTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM ReferenceDocType
          WHERE ReferenceDocTypeCode = @ReferenceDocTypeCode
        </sql>
        <parameters>
          <parameter type="String">ReferenceDocTypeCode</parameter>
        </parameters>
      </query>

      <query code="ReferenceDocType_GetByDispatchId">
        <sql>
          SELECT IdReferenceDocType
          FROM Dispatch
          WHERE IdReferenceDocType = @IdDocType;
        </sql>
        <parameters>
          <parameter type="Int">IdDocType</parameter>
        </parameters>
      </query>

      <query code="ReferenceDocType_GetByReceiptId">
        <sql>
          SELECT IdReferenceDocType
          FROM Receipt
          WHERE IdReferenceDocType = @IdDocType;
        </sql>
        <parameters>
          <parameter type="Int">IdDocType</parameter>
        </parameters>
      </query>

      <query code="ReferenceDocType_Insert">
        <sql>
          INSERT INTO ReferenceDocType
          (IdReferenceDocType
          ,ReferenceDocTypeCode
          ,ReferenceDocTypeName
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdReferenceDocType
          ,@ReferenceDocTypeCode
          ,@ReferenceDocTypeName
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdReferenceDocType</parameter>
          <parameter type="String">ReferenceDocTypeCode</parameter>
          <parameter type="String">ReferenceDocTypeName</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>
      <query code="ReferenceDocType_Update">
        <sql>
          UPDATE ReferenceDocType
          SET ReferenceDocTypeCode = @ReferenceDocTypeCode
          ,ReferenceDocTypeName = @ReferenceDocTypeName
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdReferenceDocType = @IdReferenceDocType
        </sql>
        <parameters>
          <parameter type="Int">IdReferenceDocType</parameter>
          <parameter type="String">ReferenceDocTypeCode</parameter>
          <parameter type="String">ReferenceDocTypeName</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query code="ReferenceDocType_Delete">
        <sql>
          DELETE FROM ReferenceDocType
          WHERE IdReferenceDocType = @IdReferenceDocType
        </sql>
        <parameters>
          <parameter type="Int">IdReferenceDocType</parameter>
        </parameters>
      </query>
      <!--END ReferenceDocType section-->


      <!--Begin Truck section-->
      <query code="Truck_FindAll">
        <sql>
          SELECT Tr.IdTruckCode
          ,Tr.Status
          ,Tr.Description
          ,Tr.IdTruckType
          ,Tt.TruckTypeName
          ,Tr.TruckMark
          ,Tr.TruckModel
          ,Tr.FabricationYear
          FROM Truck Tr
          INNER JOIN TruckType Tt ON Tr.IdTruckType = Tt.IdTruckType
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder;
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name ="TruckType" type="numericIn">Tr.IdTruckType</filter>
          <filter name="Code" type="textLike">Tr.IdTruckCode</filter>
          <filter name ="Status" type="numericEqual">Tr.Status</filter>
          <filter name ="Description" type="textLike">Tr.Description</filter>
        </filters>
      </query>
      <query code="Truck_GetByCode">
        <sql>
          SELECT Tr.IdTruckCode
          ,Tr.Status
          ,Tr.Description
          ,Tr.IdTruckType
          ,Tt.TruckTypeName
          ,Tr.TruckMark
          ,Tr.TruckModel
          ,Tr.FabricationYear
          FROM Truck Tr
          INNER JOIN TruckType Tt ON Tr.IdTruckType = Tt.IdTruckType
          WHERE Tr.IdTruckCode = @IdTruckCode
        </sql>
        <parameters>
          <parameter type="String">IdTruckCode</parameter>
        </parameters>
      </query>

      <query code="GetTruckByCode">
        <sql>
          SELECT IdTruckCode,Status,Description,IdTruckType,TruckMark,TruckModel
          FROM truck
          WHERE IdTruckCode = @idTruckCode
        </sql>
        <parameters>
          <parameter type="String">idTruckCode</parameter>
        </parameters>
      </query>

      <query code="Truck_GetById">
        <sql>
          SELECT IdTruckType
          FROM truck
          WHERE IdTruckType = @IdTruckType
        </sql>
        <parameters>
          <parameter type="Int">IdTruckType</parameter>
        </parameters>
      </query>

      <query code="Truck_Insert">
        <sql>
          INSERT INTO Truck
          (IdTruckCode
          ,Status
          ,Description
          ,IdTruckType
          ,TruckMark
          ,TruckModel
          ,FabricationYear
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdTruckCode
          ,@Status
          ,@Description
          ,@IdTruckType
          ,@TruckMark
          ,@TruckModel
          ,@FabricationYear
          ,@dateCreated
          ,@userCreated)
        </sql>
        <parameters>
          <parameter type="String">IdTruckCode</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="Int">IdTruckType</parameter>
          <parameter type="String">TruckMark</parameter>
          <parameter type="String">TruckModel</parameter>
          <parameter type="Int">FabricationYear</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="String">userCreated</parameter>
        </parameters>
      </query>
      <query code="Truck_Update">
        <sql>
          UPDATE Truck
          SET Status = @Status
          ,Description = @Description
          ,IdTruckType = @IdTruckType
          ,TruckMark = @TruckMark
          ,TruckModel = @TruckModel
          ,FabricationYear = @FabricationYear
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdTruckCode = @IdTruckCode
        </sql>
        <parameters>
          <parameter type="String">IdTruckCode</parameter>
          <parameter type="Boolean">Status</parameter>
          <parameter type="String">Description</parameter>
          <parameter type="Int">IdTruckType</parameter>
          <parameter type="String">TruckMark</parameter>
          <parameter type="String">TruckModel</parameter>
          <parameter type="Int">FabricationYear</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>
      <query code="Truck_Delete">
        <sql>
          DELETE FROM Truck
          WHERE IdTruckCode = @IdTruckCode
        </sql>
        <parameters>
          <parameter type="String">IdTruckCode</parameter>
        </parameters>
      </query>
      <!--END Truck section-->

      <!--Begin TruckType  section-->
      <query code="TruckType_FindAll">
        <sql>
          SELECT IdTruckType
          ,TruckTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM TruckType
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textLike">TruckTypeName</filter>
        </filters>
      </query>
      <query code="TruckType_GetByName">
        <sql>
          SELECT IdTruckType
          ,TruckTypeName
          ,DateCreated
          ,UserCreated
          ,DateModified
          ,UserModified
          FROM TruckType
          WHERE TruckTypeName = @TruckTypeName
        </sql>
        <parameters>
          <parameter type="String">TruckTypeName</parameter>
        </parameters>
      </query>
      <query code="TruckType_Insert">
        <sql>
          INSERT INTO TruckType
          (IdTruckType
          ,TruckTypeName
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdTruckType
          ,@TruckTypeName
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdTruckType</parameter>
          <parameter type="String">TruckTypeName</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>
      <query code="TruckType_Update">
        <sql>
          UPDATE TruckType
          SET TruckTypeName = @TruckTypeName
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdTruckType  = @IdTruckType
        </sql>
        <parameters>
          <parameter type="Int">IdTruckType</parameter>
          <parameter type="String">TruckTypeName</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>
      <query code="TruckType_Delete">
        <sql>
          DELETE FROM TruckType
          WHERE IdTruckType  = @IdTruckType
        </sql>
        <parameters>
          <parameter type="Int">IdTruckType</parameter>
        </parameters>
      </query>
      <!--END TruckType  section-->
      
      <!--UomType Section-->
      <query code="UomType_Insert">
        <sql>
          INSERT INTO UomType
          (IdUomType
          ,IdOwn
          ,UomName
          ,DateCreated
          ,UserCreated)
          VALUES
          (@IdUomType
          ,@IdOwn
          ,@UomName
          ,@DateCreated
          ,@UserCreated)
        </sql>
        <parameters>
          <parameter type="Int">IdUomType</parameter>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">UomName</parameter>
          <parameter type="DateTime">DateCreated</parameter>
          <parameter type="String">UserCreated</parameter>
        </parameters>
      </query>
      
      <query code="UomType_Update">
        <sql>
          UPDATE UomType
          SET UomName = @UomName
          ,DateModified = @DateModified
          ,UserModified = @UserModified
          WHERE IdUomType  = @IdUomType

          UPDATE ItemUom SET UomName = @UomName
          WHERE IdUomType  = @IdUomType
        </sql>
        <parameters>
          <parameter type="Int">IdUomType</parameter>
          <parameter type="String">UomName</parameter>
          <parameter type="DateTime">DateModified</parameter>
          <parameter type="String">UserModified</parameter>
        </parameters>
      </query>

      <query code="UomType_Delete">
        <sql>
          DELETE FROM UomType
          WHERE IdUomType  = @IdUomType
        </sql>
        <parameters>
          <parameter type="Int">IdUomType</parameter>
        </parameters>
      </query>
      
      <query code="UomType_FindAll">
        <sql>
          SELECT UT.IdUomType
          ,O.IdOwn
          ,O.OwnName
          ,UT.UomName
          ,UT.DateCreated
          ,UT.UserCreated
          ,UT.DateModified
          ,UT.UserModified
          FROM UomType UT INNER JOIN OWNER O ON UT.IdOwn = O.IdOwn
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Name" type="textLike">UT.UomName</filter>
          <filter name="Owner" type="numericEqual">O.IdOwn</filter>
        </filters>
      </query>
      
      <query code="UomType_GetByOwn">
        <sql>
          SELECT UT.IdUomType
          ,O.IdOwn
          ,UT.UomName
          ,UT.DateCreated
          ,UT.UserCreated
          ,UT.DateModified
          ,UT.UserModified
          FROM UomType UT INNER JOIN OWNER O ON UT.IdOwn = O.IdOwn
          WHERE O.IdOwn = @IdOwn
        </sql>
        <parameters>
          <parameter type="Int">IdOwn</parameter>
        </parameters>
      </query>


      <query code="UomType_GetByIdOwnAndName">
        <sql>
          SELECT IdUomType
          ,O.IdOwn
          ,O.OwnName
          ,UomName
          FROM UomType UT INNER JOIN OWNER O ON UT.IdOwn = O.IdOwn
          WHERE O.IdOwn = @IdOwn
          AND UomName = @UomName
        </sql>
        <parameters>
          <parameter type="Int">IdOwn</parameter>
          <parameter type="String">UomName</parameter>
        </parameters>
      </query>
      <!--END UomType Section-->

      <query code="GetSecuencialByTableName">
        <sql>
          SELECT COALESCE(MAX(ColumnName),1) as ColumnName FROM TableName WITH(NOLOCK)
        </sql>
      </query>


      <!-- LABEL  -->
      <query code="GetLabelByCode">
        <sql>
          SELECT IdLabel, LabelCode, LabelName, IdOwn, PathTemplate, DateCreated, UserCreated, DateModified, UserModified
          FROM Label
          WHERE LabelCode = @labelCode
        </sql>
        <parameters>
          <parameter type="String">labelCode</parameter>
        </parameters>
      </query>

      <!-- LABELITEM  -->
      <query code="GetItemForLabel">
        <sql>
          SELECT I.IdOwn, O.OwnName, I.ItemCode, I.IdItem, I.Description, IU.IdUom, IU.UomName,
          IU.UomCode, IU.Barcode, IU.ConversionFactor
          FROM Item I
          INNER JOIN ItemUom IU ON I.IdItem = IU.IdItem
          INNER JOIN Owner O ON O.IdOwn = I.IdOwn
          WHERE	      I.IdItem = @idItem
          AND IU.IdUom = @idUom
        </sql>
        <parameters>
          <parameter type="Int">idItem</parameter>
          <parameter type="Int">idUom</parameter>
        </parameters>
      </query>


      <query code="GetIdLocCodeForLabel">
        <sql>
          SELECT W.IdWhs, W.WhsName, L.IdLocCode, L.LocCode, L.RowLoc, 
                 L.ColumnLoc, L.LevelLoc, L.Aisle, L.IdHng, L.LocTypeCode, 
                 L.Status, O.OwnCode, O.OwnName
          FROM Warehouse W
          INNER JOIN Location L ON W.IdWhs = L.IdWhs
          LEFT JOIN Owner O ON L.IdOwn = O.IdOwn
          WHERE IdLocCode = @idLocCode
        </sql>
        <parameters>
          <parameter type="String">idLocCode</parameter>
        </parameters>
      </query>

      <!-- LABELBULK  -->
      <query code="LabelBulk_FindAll">
        <sql>
          SELECT W.IdWhs, W.WhsCode, W.ShortWhsName, W.WhsName, O.IdOwn,  
                 O.OwnCode, O.TradeName, O.OwnName, OO.CustomerCode, 
                 OO.CustomerName, OO.DeliveryAddress1, C.IdCity, C.CityName, 
                 OO.DeliveryPhone, OO.OutboundNumber, Bultos.IdLpnCode, 
                 Bultos.WeightTotal
          FROM Warehouse W
          INNER JOIN OutboundOrder OO
          ON W.IdWhs = OO.IdWhs
          INNER JOIN (SELECT D.IdOutboundOrder, DD.IdDispatch, DD.IdLpnCode, L.WeightTotal
          FROM Lpn L
          INNER JOIN DispatchDetail DD
          ON L.IdLpnCode = DD.IdLpnCode
          INNER JOIN Dispatch D
          ON DD.IdDispatch =  D.IdDispatch
          Where D.IdDispatchType = 2
          GROUP BY D.IdOutboundOrder, DD.IdDispatch, DD.IdLpnCOde, L.WeightTotal) Bultos
          ON OO.IdOutboundOrder = Bultos.IdOutboundOrder
          INNER JOIN Owner O
          ON OO.IdOwn = O.IdOwn
          INNER JOIN City C
          ON OO.IdCityDelivery = C.IdCity
          @SQLPart;

          SELECT FieldName, Enabled, VisibleGrid, VisibleEditNew, VisibleView, VisibleReport, Required, DefaultValue, FieldOrder, FieldWidth
          FROM CfgEntityProperty qf
          JOIN CfgEntity q ON qf.IdCfgEntity = q.IdCfgEntity
          WHERE QueryName = @queryName
          ORDER BY FieldOrder
        </sql>
        <parameters>
          <parameter type="SQLPart">@SQLPart</parameter>
          <parameter type="String">queryName</parameter>
        </parameters>
        <filters>
          <filter name="Code" type="textLike">Bultos.IdLpnCode</filter>
          <filter name="Owner" type="numericIn">O.IdOwn</filter>
        </filters>
      </query>


      <query code="GetLpnForLabel">
        <sql>
          SELECT 
          W.IdWhs, 
          W.WhsName, 
          O.IdOwn, 
          O.OwnName,
          OO.CustomerCode, 
          OO.CustomerName,
          C.IdCity, C.CityName, 
          OO.DeliveryPhone, 
          OO.DeliveryAddress1,
          OO.OutboundNumber, 
          Bultos.IdLpnCOde, 
          Bultos.WeightTotal
          FROM Warehouse W INNER JOIN 
               OutboundOrder OO ON W.IdWhs = OO.IdWhs INNER JOIN 
               (SELECT D.IdOutboundOrder, DD.IdDispatch, DD.IdLpnCOde, L.WeightTotal
                FROM Lpn L INNER JOIN 
                     DispatchDetail DD ON L.IdLpnCode = DD.IdLpnCode INNER JOIN 
                     Dispatch D ON DD.IdDispatch =  D.IdDispatch
                GROUP BY D.IdOutboundOrder, DD.IdDispatch, DD.IdLpnCOde, L.WeightTotal) Bultos ON OO.IdOutboundOrder = Bultos.IdOutboundOrder INNER JOIN 
               Owner O ON OO.IdOwn = O.IdOwn INNER JOIN 
               City C ON OO.IdCityDelivery = C.IdCity
          WHERE Bultos.IdLpnCOde = @idLpnCOde
        </sql>
        <parameters>
          <parameter type="String">idLpnCOde</parameter>
        </parameters>
      </query>


      <query code="GetLpnForLabelSecuence">
        <sql>
          SELECT CompanyName, @idLpnCOde IdLpnCode
          FROM COMPANY
          WHERE IdCompany = 1
        </sql>
        <parameters>
          <parameter type="String">idLpnCOde</parameter>
        </parameters>
      </query>


      <!-- TASKLABEL  -->
      <query code="InsertTaskLabel">
        <sql>
          INSERT INTO TaskLabel
          (IdTaskLabel,
          IdLabel,
          IdPrinter,
          DateCreated,
          IdUserPrinted,
          DelayPrinted,
          IsPrinted,
          ParamString
          )
          VALUES
          (@idTaskLabel,
          @idLabel,
          @idPrinter,
          @dateCreated,
          @idUserPrinted,
          @delayPrinted,
          @isPrinted,
          @paramString
          )
        </sql>
        <parameters>
          <parameter type="Int">idTaskLabel</parameter>
          <parameter type="Int">idLabel</parameter>
          <parameter type="Int">idPrinter</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="Int">idUserPrinted</parameter>
          <parameter type="Int">delayPrinted</parameter>
          <parameter type="Int">isPrinted</parameter>
          <parameter type="String">paramString</parameter>
        </parameters>
      </query>

      <!--<query code="UpdateTaskLabel">
        <sql>
          UPDATE TaskLabel SET
          IdLabel = @idLabel,
          IdPrinter = @idPrinter,
          DateCreated = @dateCreated,
          IdUserPrinted = @idUserPrinted,
          DelayPrinted = @delayPrinted,
          IsPrinted = @isPrinted,
          ParamString = @paramString
          WHERE IdTaskLabel = @IdTaskLabel
        </sql>
        <parameters>
          <parameter type="Int">idTaskLabel</parameter>
          <parameter type="Int">idLabel</parameter>
          <parameter type="Int">idPrinter</parameter>
          <parameter type="DateTime">dateCreated</parameter>
          <parameter type="Int">idUserPrinted</parameter>
          <parameter type="Int">delayPrinted</parameter>
          <parameter type="Int">isPrinted</parameter>
          <parameter type="String">paramString</parameter>
        </parameters>
      </query>-->

      <query code="DeleteTaskLabel">
        <sql>
          DELETE FROM TaskLabel
          WHERE IdTaskLabel = @IdTaskLabel
        </sql>
        <parameters>
          <parameter type="Int">idTaskLabel</parameter>
        </parameters>
      </query>


      <!-- MOVEMENTIfz section  -->
      <query code="MovementIfz_Insert">
        <sql>
          INSERT INTO MovementIfz
          (
          IdMovIfz
          ,SourceUserName
          ,SourceAppName
          ,SourceHostName
          ,IdTicketTransfer
          ,Dateprocess
          ,WebServiceName
          ,TypeMovto
          ,RecordRequestQty
          ,RecordProcessQty
          ,RangeRequest
          ,StatusProcess
          ,StatusMessage
          )
          VALUES
          (
          @IdMovIfz
          ,@SourceUserName
          ,@SourceAppName
          ,@SourceHostName
          ,@IdTicketTransfer
          ,@Dateprocess
          ,@WebServiceName
          ,@TypeMovto
          ,@RecordRequestQty
          ,@RecordProcessQty
          ,@RangeRequest
          ,@StatusProcess
          ,@StatusMessage
          )

        </sql>
        <parameters>
          <parameter type="Int">IdMovIfz</parameter>
          <parameter type="String">SourceUserName</parameter>
          <parameter type="String">SourceAppName</parameter>
          <parameter type="String">SourceHostName</parameter>
          <parameter type="String">IdTicketTransfer</parameter>
          <parameter type="DateTime">Dateprocess</parameter>
          <parameter type="String">WebServiceName</parameter>
          <parameter type="Char">TypeMovto</parameter>
          <parameter type="Int">RecordRequestQty</parameter>
          <parameter type="Int">RecordProcessQty</parameter>
          <parameter type="String">RangeRequest</parameter>
          <parameter type="String">StatusProcess</parameter>
          <parameter type="String">StatusMessage</parameter>
        </parameters>
      </query>
      
      <query code="NonWorkingDay_FindAll">
        <sql>
          SELECT 
          DateNonWorking,
          Description,
          DATENAME(weekday,DateNonWorking) AS WeekDays
          FROM NonworkingDay
        </sql>
        <parameters>
        </parameters>
      </query>
      <!-- End MOVEMENTIfz section  -->

    </querys>
    <instances>

      <!--I18N-->
      <instance>
        <table_name>CfgDictionary</table_name>
        <column_name>IdDictionary</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.I18N.Dictionary</class_name>
      </instance>

      <!--LAYOUT-->

      <instance>
        <table_name>Hangar</table_name>
        <column_name>IdHng</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Layout.Hangar</class_name>
      </instance>
      <instance>
        <table_name>City</table_name>
        <column_name>IdCity</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Layout.City</class_name>
      </instance>
      <instance>
        <table_name>Company</table_name>
        <column_name>IdCompany</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Layout.Company</class_name>
      </instance>
      <instance>
        <table_name>Country</table_name>
        <column_name>IdCountry</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Layout.Country</class_name>
      </instance>
      <instance>
        <table_name>State</table_name>
        <column_name>IdState</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Layout.State</class_name>
      </instance>
      <instance>
        <table_name>Warehouse</table_name>
        <column_name>IdWhs</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Layout.Warehouse</class_name>
      </instance>
      <instance>
        <table_name>WorkZone</table_name>
        <column_name>IdWorkZone</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Layout.WorkZone</class_name>
      </instance>

      <!--DISPATCHING-->

      <instance>
        <table_name>Dispatch</table_name>
        <column_name>IdDispatch</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Dispatching.Dispatch</class_name>
      </instance>
      <instance>
        <table_name>DispatchDetail</table_name>
        <column_name>IdDispatchDetail</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Dispatching.DispatchDetail</class_name>
      </instance>
      <instance>
        <table_name>OutboundDetail</table_name>
        <column_name>IdOutboundDetail</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Dispatching.OutboundDetail</class_name>
      </instance>
      <instance>
        <table_name>OutboundOrder</table_name>
        <column_name>IdOutboundOrder</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Dispatching.OutboundOrder</class_name>
      </instance>
      <instance>
        <table_name>OutboundType</table_name>
        <column_name>IdOutboundType</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Dispatching.OutboundType</class_name>
      </instance>
      <instance>
        <table_name>TrackOutboundType</table_name>
        <column_name>IdTrackOutboundType</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Dispatching.TrackOutboundType</class_name>
      </instance>


      <!--DISPLAY-->

      <instance>
        <table_name>CfgDisplayType</table_name>
        <column_name>IdDisplayType</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Display.DisplayType</class_name>
      </instance>

      <!--DEVICES-->

      <instance>
        <table_name>CfgMobileDevices</table_name>
        <column_name>IdMobileDevice</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Devices.Terminal</class_name>
      </instance>

      <instance>
        <table_name>Printer</table_name>
        <column_name>IdPrinter</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Devices.Printer</class_name>
      </instance>


      <!--INVENTORY-->

      <instance>
        <table_name>InventoryDetail</table_name>
        <column_name>IdInventoryDetail</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Inventory.InventoryDetail</class_name>
      </instance>
      <instance>
        <table_name>InventoryOrder</table_name>
        <column_name>IdInventoryOrder</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Inventory.InventoryOrder</class_name>
      </instance>
      <instance>
        <table_name>TrackInventoryType</table_name>
        <column_name>IdTrackInventoryType</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Inventory.TrackInventoryType</class_name>
      </instance>

      <!--PROFILE-->

      <instance>
        <table_name>CfgUserWms</table_name>
        <column_name>IdUserWms</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Profile.User</class_name>
      </instance>
      <instance>
        <table_name>CfgRole</table_name>
        <column_name>IdRole</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Profile.Role</class_name>
      </instance>
      <instance>
        <table_name>CfgPermission</table_name>
        <column_name>IdPermission</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Profile.Permission</class_name>
      </instance>

      <!--RECEPTION-->

      <instance>
        <table_name>Receipt</table_name>
        <column_name>IdReceipt</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Reception.Receipt</class_name>
      </instance>
      <instance>
        <table_name>InboundOrder</table_name>
        <column_name>IdInboundOrder</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Reception.InboundOrder</class_name>
      </instance>
      <instance>
        <table_name>InboundDetail</table_name>
        <column_name>IdInboundDetail</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Reception.InboundDetail</class_name>
      </instance>
      <instance>
        <table_name>InboundType</table_name>
        <column_name>IdInboundType</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Reception.InboundType</class_name>
      </instance>
      <instance>
        <table_name>ReceiptDetail</table_name>
        <column_name>IdReceiptDetail</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Reception.ReceiptDetail</class_name>
      </instance>
      <instance>
        <table_name>TrackInboundType</table_name>
        <column_name>IdTrackInboundType</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Reception.TrackInboundType</class_name>
      </instance>

      <!--RULES-->

      <instance>
        <table_name>CustomRule</table_name>
        <column_name>IdCustomRule</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Rules.CustomRule</class_name>
      </instance>
      <instance>
        <table_name>[Rule]</table_name>
        <column_name>IdRule</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Rules.Rule</class_name>
      </instance>

      <!--TASKS-->

      <instance>
        <table_name>Task</table_name>
        <column_name>IdTask</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Tasks.Task</class_name>
      </instance>
      <instance>
        <table_name>TaskDetail</table_name>
        <column_name>IdTaskDetail</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Tasks.TaskDetail</class_name>
      </instance>

      <instance>
        <table_name>TaskSimulation</table_name>
        <column_name>IdTask</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Tasks.TaskSimulation</class_name>
      </instance>

      <instance>
        <table_name>TaskDetailSimulation</table_name>
        <column_name>IdTaskDetail</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Tasks.TaskDetailSimulation</class_name>
      </instance>

      <!--WAREHOUSING-->

      <instance>
        <table_name>Carrier</table_name>
        <column_name>IdCarrier</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Warehousing.Carrier</class_name>
      </instance>
      <instance>
        <table_name>CategoryItem</table_name>
        <column_name>IdCtgItem</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Warehousing.CategoryItem</class_name>
      </instance>
      <instance>
        <table_name>Item</table_name>
        <column_name>IdItem</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Warehousing.Item</class_name>
      </instance>
      <instance>
        <table_name>ItemUom</table_name>
        <column_name>IdUom</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Warehousing.ItemUom</class_name>
      </instance>
      <instance>
        <table_name>MovementLog</table_name>
        <column_name>IdMovement</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Warehousing.Movement</class_name>
      </instance>
      <instance>
        <table_name>MovementType</table_name>
        <column_name>IdMovementType</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Warehousing.MovementType</class_name>
      </instance>
      <instance>
        <table_name>Owner</table_name>
        <column_name>IdOwn</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Warehousing.Owner</class_name>
      </instance>
      <instance>
        <table_name>Reason</table_name>
        <column_name>IdReason</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Warehousing.Reason</class_name>
      </instance>
      <instance>
        <table_name>Stock</table_name>
        <column_name>StockId</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Warehousing.Stock</class_name>
      </instance>
      <instance>
        <table_name>Vendor</table_name>
        <column_name>IdVendor</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Warehousing.Vendor</class_name>
      </instance>
      <instance>
        <table_name>Customer</table_name>
        <column_name>IdCustomer</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Warehousing.Customer</class_name>
      </instance>
      <instance>
        <table_name>Driver</table_name>
        <column_name>IdDriver</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Warehousing.Driver</class_name>
      </instance>
      <instance>
        <table_name>LpnType</table_name>
        <column_name>IdLpnType</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Warehousing.LpnType</class_name>
      </instance>
      <instance>
        <table_name>ParameterHistory</table_name>
        <column_name>IdParameterHistory</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Configuration.ParameterHistory</class_name>
      </instance>

      <!--TASK LABEL-->
      <instance>
        <table_name>TaskLabel</table_name>
        <column_name>IdTaskLabel</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Label.TaskLabel</class_name>
      </instance>

      <!--LABEL-->
      <instance>
        <table_name>Label</table_name>
        <column_name>IdLabel</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Label.LabelTemplate</class_name>
      </instance>

      <!-- MOVEMENTIFZ -->
      <instance>
        <table_name>MovementIfz</table_name>
        <column_name>IdMovIfz</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Integration.MovementIfz</class_name>
      </instance>

      <!-- UOMTYPE -->
      <instance>
        <table_name>UomType</table_name>
        <column_name>IdUomType</column_name>
        <class_name>Binaria.WMSTek.Framework.Entities.Warehousing.UomType</class_name>
      </instance>
    </instances>
  </pool_config>
</pools>